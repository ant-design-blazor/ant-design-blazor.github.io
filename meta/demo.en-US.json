[
  {
    "Title": "Result",
    "Type": "Feedback",
    "Desc": "<p>Used to feed back the results of a series of operational tasks.</p>\n<h2>When To Use</h2>\n<p>Use when important operations need to inform the user to process the results and the feedback is more complicated.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>result status,decide icons and colors</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>custom back icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>operating area</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 2,
        "Name": "warning",
        "Title": "Warning",
        "Description": "<p>The result of the warning.</p>\n",
        "Code": "<Result Status=\"warning\"\n        Title=@(\"There are some problems with your operation.\")\n        Extra=extra />\n@code\n{\n    RenderFragment extra = @<AntButton Type=\"primary\">Go Console</AntButton>;\n}",
        "Type": "Demos.Result.demo.Warning",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "403",
        "Title": "403",
        "Description": "<p>you are not authorized to access this page.</p>\n",
        "Code": "<Result Status=\"403\"\n        Title=@(\"403\")\n        SubTitle=@(\"Sorry, you are not authorized to access this page.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra = @<AntButton Type=\"primary\">Back Home</AntButton>;\n}\n",
        "Type": "Demos.Result.demo._403",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "404",
        "Title": "404",
        "Description": "<p>The page you visited does not exist.</p>\n",
        "Code": "<Result Status=\"404\"\n        Title=@(\"404\")\n        SubTitle=@(\"Sorry, the page you visited does not exist.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<AntButton Type=\"primary\">Back Home</AntButton>;\n}",
        "Type": "Demos.Result.demo._404",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "customicon",
        "Title": "Custom icon",
        "Description": "<p>Custom icon.</p>\n",
        "Code": "<Result\n    Icon=\"smile-outline\"\n    Title=@(\"Great, we have done all the operations!\")\n    Extra=\"extra\">\n</Result>\n\n@code\n{\n    RenderFragment extra = @<AntButton Type=\"primary\">Next</AntButton>;\n}\n",
        "Type": "Demos.Result.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "success",
        "Title": "Success",
        "Description": "<p>Show successful results.</p>\n",
        "Code": "<Result Status=\"success\"\n        Title=@(\"Successfully Purchased Cloud Server ECS!\")\n        SubTitle=@(\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\")\n        Extra=extra />\n\n@code\n{\n    RenderFragment extra =\n    @<Template>\n        <AntButton Type=\"primary\">Go Console</AntButton>\n        <AntButton>Buy Again</AntButton>\n    </Template>\n    ;\n}",
        "Type": "Demos.Result.demo.Success",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "error",
        "Title": "Error",
        "Description": "<p>Complex error feedback.</p>\n",
        "Code": "<Result\n    Status=\"error\"\n    Title=@(\"Submission Failed\")\n    SubTitle=@(\"Please check and modify the following information before resubmitting.\")\n    Extra=extra\n>\n<div class=\"desc\">\n    <AntParagraph>\n        <AntText Strong Style=\"font-size: 16px;\">\n            The content you submitted has the following error:\n        </AntText>\n    </AntParagraph>\n    <AntParagraph>\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account has been frozen\n        <a>Thaw immediately &gt;</a>\n    </AntParagraph>\n    <AntParagraph>\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account is not yet\n        eligible to apply <a>Apply Unlock &gt;</a>\n    </AntParagraph>\n</div>\n</Result>\n\n@code {\n    RenderFragment extra =\n        @<Template>\n            <AntButton Type=\"primary\">Go Console</AntButton>\n            <AntButton>Buy Again</AntButton>\n        </Template>\n        ;\n}\n",
        "Type": "Demos.Result.demo.Error",
        "Style": "\n[data-theme=\"dark\"] .site-result-demo-error-icon {\n  color: #a61d24;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "500",
        "Title": "500",
        "Description": "<p>Something went wrong on server.</p>\n",
        "Code": "<Result Status=\"500\"\n        Title=@(\"500\")\n        SubTitle=@(\"Sorry, something went wrong.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<AntButton Type=\"primary\">Back Home</AntButton>;\n}",
        "Type": "Demos.Result.demo._500",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "info",
        "Title": "Info",
        "Description": "<p>Show processing results.</p>\n",
        "Code": "<Result\n    Title=@(\"Your operation has been executed\")\n    Extra=extra\n/>\n@code {\n\n    RenderFragment extra =\n        @<AntButton Type=\"primary\">\n            Go Console\n        </AntButton>;\n\n}\n",
        "Type": "Demos.Result.demo.Info",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Empty",
    "Type": "Data Display",
    "Desc": "<p>Empty state placeholder.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When there is no data provided, display for friendly tips.</li>\n<li>User tutorial to create something in fresh new situation.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "description",
        "Title": "No description",
        "Description": "<p>Simplest Usage with no description.</p>\n",
        "Code": "<Empty Description=\"@false\" />",
        "Type": "Demos.Empty.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage.</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "simple",
        "Title": "Chose image",
        "Description": "<p>You can choose another style of <code>image</code> by setting image to <code>Empty.PRESENTED_IMAGE_SIMPLE</code>.</p>\n",
        "Code": "<Empty Image=\"Empty.PRESENTED_IMAGE_SIMPLE\" />",
        "Type": "Demos.Empty.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "configprovider",
        "Title": "ConfigProvider TODO",
        "Description": "<p>Use ConfigProvider set global Empty style.</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.ConfigProvider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "customize",
        "Title": "Customize",
        "Description": "<p>Customize image source, image size, description and extra content.</p>\n",
        "Code": "<Empty Image='\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"'\n          ImageStyle='@(\"height: 60px\")'\n          Description=\"customDescription\">\n    <AntButton type=\"@AntButtonType.Primary\">Create Now</AntButton>\n</Empty>\n\n@code {\n    private RenderFragment customDescription =@<span>Customize <a>Description</a></span>;\n}",
        "Type": "Demos.Empty.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Spin",
    "Type": "Feedback",
    "Desc": "<p>A spinner for displaying loading state of a page or a section.</p>\n<h2>When To Use</h2>\n<p>When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>specifies a delay in milliseconds for loading state (prevent flush)</td>\n<td>number (milliseconds)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>React node of the spinning indicator</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size of Spin, options: <code>small</code>, <code>default</code> and <code>large</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>whether Spin is spinning</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>customize description content when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>className of wrapper when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Static Method</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>You can define default spin element globally.</p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "inside",
        "Title": "Inside a container",
        "Description": "<p>Spin in a container.</p>\n",
        "Code": "<div class=\"example\">\n    <Spin />\n</div>\n\n<style>\n    .example {\n        text-align: center;\n        background: rgba(0, 0, 0, 0.05);\n        border-radius: 4px;\n        margin-bottom: 20px;\n        padding: 30px 50px;\n        margin: 20px 0;\n    }\n</style>",
        "Type": "Demos.Spin.demo.Inside",
        "Style": "\n  .example {\n    background: rgba(255,255,255,0.08);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "delayanddebounce",
        "Title": "delay",
        "Description": "<p>Specifies a delay for loading state. If <code>spinning</code> ends during delay, loading status won't appear.</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading Delay=500>\n        <AntAlert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <AntSwitch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}\n",
        "Type": "Demos.Spin.demo.DelayAndDebounce",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tip",
        "Title": "Customized description",
        "Description": "<p>Customized description content.</p>\n",
        "Code": "<Spin Tip=\"Loading...\">\n    <AntAlert\n        Message=\"Alert message title\"\n        Description=\"Further details about the context of this alert.\"\n        Type=\"info\"\n    />\n</Spin>",
        "Type": "Demos.Spin.demo.Tip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "basic Usage",
        "Description": "<p>A simple loading status.</p>\n",
        "Code": "<Spin />",
        "Type": "Demos.Spin.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>A small <code>Spin</code> is used for loading text, default sized <code>Spin</code> for loading a card-level block, and large <code>Spin</code> used for loading a <strong>page</strong>.</p>\n",
        "Code": "<div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n</div>\n",
        "Type": "Demos.Spin.demo.Size",
        "Style": "\n.ant-spin.ant-spin-spinning {\n  display: inline-block;\n  margin-right: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "nested",
        "Title": "Embedded mode",
        "Description": "<p>Embedding content into <code>Spin</code> will set it into loading state.</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading>\n        <AntAlert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <AntSwitch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Spin.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "customindicator",
        "Title": "Custom spinning indicator",
        "Description": "<p>Use custom loading indicator.</p>\n",
        "Code": "<Spin Indicator=antIcon />\n@code{\n    RenderFragment antIcon = @<AntIcon Type=\"loading\" Theme=\"outline\" Style=\"font-size: 24px\" Spin />;\n}",
        "Type": "Demos.Spin.demo.CustomIndicator",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Space",
    "Type": "Layout",
    "Desc": "<p>Set components spacing.</p>\n<h2>When To Use</h2>\n<p>Avoid components clinging together and set a unified space.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>space size</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>space direction</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 99,
        "Name": "debug",
        "Title": "Diverse Child",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<h3>Debug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Space.demo.Debug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Space Size",
        "Description": "<p><code>large</code>, <code>middle</code> and <code>small</code> preset sizes.</p>\n<p>Set the size to <code>large</code> and <code>middle</code> by setting size to large and middle respectively. If <code>size</code> is not set, the spacing is <code>small</code>.</p>\n",
        "Code": "<AntRadioGroup @bind-Value=@size OnChange=\"e=> setSize(e)\">\n    <AntRadio Value=\"small\">Small</AntRadio>\n    <AntRadio Value=\"middle\">Middle</AntRadio>\n    <AntRadio Value=\"large\">Large</AntRadio>\n</AntRadioGroup>\n<br />\n<br />\n<Space Size=@size>\n    <SpaceItem>\n        <AntButton Type=\"primary\">Primary</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>Default</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"dashed\">Dashed</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"link\">Link</AntButton>\n    </SpaceItem>\n</Space>\n\n@code {\n    string size = \"small\";\n    void setSize(string value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}\n",
        "Type": "Demos.Space.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "vertical",
        "Title": "Vertical Space",
        "Description": "<p>Crowded components vertical spacing.</p>\n<p>Can set <code>width: 100%</code> fill a row.</p>\n",
        "Code": "<Space Direction=\"vertical\">\n    <SpaceItem>\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </AntCard>\n    </SpaceItem>\n    <SpaceItem>\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </AntCard>\n    </SpaceItem>\n</Space>",
        "Type": "Demos.Space.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "base",
        "Title": "Basic Usage",
        "Description": "<p>Crowded components horizontal spacing.</p>\n",
        "Code": "<Space>\n    <SpaceItem>\n        Space\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"primary\">Button</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>\n            <AntIcon Type=\"upload\" Theme=\"outline\" /> Click to Upload\n        </AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>Confirm</AntButton>\n    </SpaceItem>\n</Space>\n",
        "Type": "Demos.Space.demo.Base",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customize",
        "Title": "Customize Size",
        "Description": "<p>Custom spacing size.</p>\n",
        "Code": "\n<AntSlider Value=size OnChange=\"v=>setSize(v.AsT0)\" />\n<br />\n<br />\n<Space Size=\"@($\"{size}\")\">\n    <SpaceItem>\n        <AntButton Type=\"primary\">Primary</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>Default</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"dashed\">Dashed</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"link\">Link</AntButton>\n    </SpaceItem>\n</Space>\n\n@code{\n    double size = 8;\n\n    void setSize(double value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}",
        "Type": "Demos.Space.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Progress",
    "Type": "Feedback",
    "Desc": "<p>Display the current progress of an operation flow.</p>\n<h2>When To Use</h2>\n<p>If it will take a long time to complete an operation, you can use <code>Progress</code> to show the current progress and status.</p>\n<ul>\n<li>When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.</li>\n<li>When you need to display the completion percentage of an operation.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Properties that shared by all types.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>to set the type, options: <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>template function of the content</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>to set the completion percentage</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>whether to display the progress value and the status icon</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>to set the status of the Progress, options: <code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(line only)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>to set the style of the progress linecap</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>segmented success percent</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>color of unfilled part</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the progress bar, unit: <code>px</code></td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar, render <code>linear-gradient</code> when passing an object</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>the total step count</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the circular progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the circular progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of circular progress, render <code>linear-gradient</code> when passing an object</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the dashboard progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the dashboard progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>the gap degree of half circle, 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>the gap position, options: <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "circledynamic",
        "Title": "Dynamic circular progress bar",
        "Description": "<p>A dynamic progress bar is better.</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent Type=ProgressType.Circle />\n    <AntButtonGroup>\n        <AntButton OnClick=Decline Icon=Minus />\n        <AntButton OnClick=Increase Icon=Plus />\n    </AntButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.CircleDynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "dynamic",
        "Title": "Dynamic",
        "Description": "<p>A dynamic progress bar is better.</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent/>\n    <AntButtonGroup>\n        <AntButton OnClick=Decline Icon=Minus />\n        <AntButton OnClick=Increase Icon=Plus />\n    </AntButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "steps",
        "Title": "Progress bar with steps",
        "Description": "<p>A progress bar with steps.</p>\n",
        "Code": "<div>\n    <Progress Percent=50 Steps=3 StrokeColor=_color />\n    <br />\n    <Progress Percent=30 Steps=5 StrokeColor=_color />\n    <br />\n    <Progress Percent=100 Steps=5 Size=ProgressSize.Small StrokeColor=_color />\n</div>\n\n@code{\n    private string _color = \"#1890ff\";\n}",
        "Type": "Demos.Progress.demo.Steps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "circlemini",
        "Title": "Mini size circular progress bar",
        "Description": "<p>A smaller circular progress bar.</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Size=ProgressSize.Small />\n    <Progress Type=ProgressType.Circle Percent=70 Size=ProgressSize.Small Status=\"ProgressStatus.Exception\" />\n    <Progress Type=ProgressType.Circle Percent=100 Size=ProgressSize.Small />\n</div>",
        "Type": "Demos.Progress.demo.CircleMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "dashboard",
        "Title": "Dashboard",
        "Description": "<p>By setting <code>type=dashboard</code>, you can get a dashboard style of progress easily.</p>\n",
        "Code": "<Progress Type=ProgressType.Dashboard Percent=75 />\n<Progress Type=\"ProgressType.Dashboard\" Percent=75 GapDegree=30 />",
        "Type": "Demos.Progress.demo.Dashboard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "linemini",
        "Title": "Mini size progress bar",
        "Description": "<p>Appropriate for a narrow area.</p>\n",
        "Code": "<div style=\"width: 170px;\">\n    <Progress Percent=\"30\" Size=\"@ProgressSize.Small\" />\n    <Progress Percent=\"50\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Active\" />\n    <Progress Percent=\"70\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Exception\" />\n    <Progress Percent=\"100\" Size=\"@ProgressSize.Small\" />\n</div>",
        "Type": "Demos.Progress.demo.LineMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "gradientline",
        "Title": "Custom line gradient",
        "Description": "<p>A package of <code>linear-gradient</code>. It is recommended to only pass two colors.</p>\n",
        "Code": "<div>\n    <Progress StrokeColor=_gradients Percent=99.9 />\n    <Progress StrokeColor=_gradients Percent=99.9 Status=ProgressStatus.Active />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=90 />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=100 />\n</div>\n\n@code{\n    private Dictionary<int, string> _gradients = new Dictionary<int, string>()\n{\n        { 0,\"#108ee9\"},\n        { 100,\"#87d068\"}\n    };\n}",
        "Type": "Demos.Progress.demo.GradientLine",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "segment",
        "Title": "Progress bar with success segment",
        "Description": "<p>A standard progress bar.</p>\n",
        "Code": "<div>\n    <Progress Percent=60 SuccessPercent=30 />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Circle />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Dashboard />\n</div>",
        "Type": "Demos.Progress.demo.Segment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "format",
        "Title": "Custom text format",
        "Description": "<p>You can set a custom text by setting the <code>format</code> prop.</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Format=_fortmat1 />\n    <Progress Type=ProgressType.Circle Percent=100 Format=_fortmat2 />\n\n</div>\n\n@code{\n    private Func<double, string> _fortmat1 = (p) => $\"{p} Days\";\n    private Func<double, string> _fortmat2 = (p) => \"Done\";\n}",
        "Type": "Demos.Progress.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "line",
        "Title": "Progress bar",
        "Description": "<p>A standard progress bar.</p>\n",
        "Code": "<div>\n    <Progress Percent=30 />\n    <Progress Percent=50 Status=\"@ProgressStatus.Active\" />\n    <Progress Percent=70 Status=\"@ProgressStatus.Exception\" />\n    <Progress Percent=100 />\n    <Progress Percent=50 ShowInfo=\"false\" />\n</div>",
        "Type": "Demos.Progress.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "linecap",
        "Title": "Square linecaps",
        "Description": "<p>By setting <code>strokeLinecap=&quot;square&quot;</code>, you can change the linecaps from round to square.</p>\n",
        "Code": "<div>\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Circle Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Dashboard Percent=75 />\n</div>",
        "Type": "Demos.Progress.demo.Linecap",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "circle",
        "Title": "Circular progress bar",
        "Description": "<p>A circular progress bar.</p>\n",
        "Code": "<style>\n    .ant-progress-circle-wrap,\n    .ant-progress-line-wrap {\n        margin-right: 8px;\n        margin-bottom: 5px;\n    }\n</style>\n\n<div>\n    <Progress Type=\"ProgressType.Circle\" Percent=75 />\n    <Progress Type=\"ProgressType.Circle\" Percent=70 Status=\"ProgressStatus.Exception\" />\n    <Progress Type=\"ProgressType.Circle\" Percent=100 />\n</div>",
        "Type": "Demos.Progress.demo.Circle",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Dropdown",
    "Type": "Navigation",
    "Desc": "<p>A dropdown list.</p>\n<h2>When To Use</h2>\n<p>When there are more than a few options to choose from, you can wrap them in a <code>Dropdown</code>. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "item",
        "Title": "Other elements",
        "Description": "<p>Divider and disabled menu item.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"0\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem @key=\"1\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            --- TODO: Need MenuDivider ---\n            <MenuItem @key=\"3\" disabled>\n                3rd menu item（disabled）\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Item",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic dropdown menu.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "submenu",
        "Title": "Cascading menu",
        "Description": "<p>The menu has multiple levels.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItemGroup Title=@(\"Group title\")>\n                <MenuItem>1st menu item</MenuItem>\n                <MenuItem>2nd menu item</MenuItem>\n            </MenuItemGroup>\n            <SubMenu Title=@(\"sub menu\")>\n                <MenuItem>3rd menu item</MenuItem>\n                <MenuItem>4th menu item</MenuItem>\n            </SubMenu>\n            <SubMenu Title=@(\"disabled sub menu\") Disabled>\n                <MenuItem>5d menu item</MenuItem>\n                <MenuItem>6th menu item</MenuItem>\n            </SubMenu>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Cascading menu <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.SubMenuDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "contextmenu",
        "Title": "Context Menu TODO",
        "Description": "<p>The default trigger mode is <code>hover</code>, you can change it to <code>contextMenu</code>.</p>\n",
        "Code": "<Dropdown Trigger=\"new TriggerType[] { TriggerType.ContextMenu }\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <div style=\"text-align: center; width: 200px; height: 200px; line-height: 200px;background: #f7f7f7;color: #777;\">\n            Right Click on here (TODO)\n        </div>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.ContextMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>Support 6 placements.</p>\n",
        "Code": "<Dropdown Placement=\"@PlacementType.BottomLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>BottomLeft</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>BottomCenter</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>BottomRight</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>TopLeft</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>TopCenter</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>TopRight</AntButton>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n}",
        "Type": "Demos.Dropdown.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "trigger",
        "Title": "Trigger mode",
        "Description": "<p>The default trigger mode is <code>hover</code>, you can change it to <code>click</code>.</p>\n",
        "Code": "<Dropdown Trigger=\"@(new TriggerType[] { TriggerType.Click })\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Click me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Trigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "overlayvisible",
        "Title": "The way of hiding menu.",
        "Description": "<p>The default is to close the menu when you click on menu items, this feature can be turned off.</p>\n",
        "Code": "<Dropdown OnVisibleChange=\"OnVisibleChange\" Visible=\"_visible\">\n    <Overlay>\n        <Menu OnMenuItemClicked=\"HandleMenuClick\">\n            <MenuItem Id=\"1\">Clicking me will not close the menu.</MenuItem>\n            <MenuItem Id=\"2\">Clicking me will not close the menu also.</MenuItem>\n            <MenuItem Id=\"3\">Clicking me will close the menu.</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private bool _visible = false;\n\n    private void HandleMenuClick(MenuItem item)\n    {\n        if (item.Id == \"3\")\n        {\n            _visible = false;\n        }\n    }\n\n    private void OnVisibleChange(bool visible)\n    {\n        _visible = visible;\n    }\n}",
        "Type": "Demos.Dropdown.demo.OverlayVisible",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "event",
        "Title": "Click event",
        "Description": "<p>An event will be triggered when you click menu items, in which you can make different operations according to item's key.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"1\">1st menu item</MenuItem>\n            <MenuItem @key=\"2\">2nd memu item</MenuItem>\n            <MenuItem @key=\"3\">3rd menu item</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me, Click menu item <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "dropdownbutton",
        "Title": "Button with dropdown menu",
        "Description": "<p>A button is on the left, and a related functional menu is on the right. You can set the icon property to modify the icon of right.</p>\n",
        "Code": "<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }'>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton Icon=\"user\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }' Disabled=\"@true\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton ButtonsRender=\"ButtonsRender\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        TODO: With ToolTip\n    </ChildContent>\n</DropdownButton>\n<Dropdown>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>Button <AntIcon Type=\"down\" /></AntButton>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n\n    \n    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)\n    {\n        return @<Template>\n            <span>@leftButton</span>@rightButton\n        </Template>;\n    }\n}",
        "Type": "Demos.Dropdown.demo.DropdownButtonDemo",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "TimePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select/input a time.</p>\n<h2>When To Use</h2>\n<hr />\n<p>By clicking the input box, you can select a time from a popup panel.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 4,
        "Name": "hidecolumn",
        "Title": "Hour and minute",
        "Description": "<p>While part of <code>format</code> is omitted, the corresponding column in panel will disappear, too.</p>\n",
        "Code": "<TimePicker Format='@(\"hh:mm\")' />\n",
        "Type": "Demos.TimePicker.demo.HideColumn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "disabled",
        "Description": "<p>A disabled state of the <code>TimePicker</code>.</p>\n",
        "Code": "<TimePicker Disabled=\"@true\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />",
        "Type": "Demos.TimePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "rangepicker",
        "Title": "Range Picker",
        "Description": "<p>Use time range picker with <code>RangePicker</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Click <code>TimePicker</code>, and then we could select or input a time in panel.</p>\n",
        "Code": "<TimePicker />\n",
        "Type": "Demos.TimePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "value",
        "Title": "Under Control",
        "Description": "<p><code>value</code> and <code>onChange</code> should be used together,</p>\n",
        "Code": "<TimePicker Value=\"_value\" OnChange=\"OnChange\" />\n\n@code\n{\n    private DateTime _value = DateTime.Now;\n\n    private void OnChange(DateTime value, string dateString)\n    {\n        _value = value;\n    }\n}",
        "Type": "Demos.TimePicker.demo.Value",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Three Sizes",
        "Description": "<p>The input box comes in three sizes. large is used in the form, while the medium size is the default.</p>\n",
        "Code": "<TimePicker Size=\"@DatePickerSize.Large\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Size=\"@DatePickerSize.Small\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n",
        "Type": "Demos.TimePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "addon",
        "Title": "Addon",
        "Description": "<p>Render addon contents to time picker panel's bottom.</p>\n",
        "Code": "<TimePicker RenderExtraFooter=\"ExtraFooter\" />\n\n@code {\n    private RenderFragment ExtraFooter =@<AntButton Type=\"@AntButtonType.Primary\">Ok</AntButton>;\n}",
        "Type": "Demos.TimePicker.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "hours12",
        "Title": "12 hours",
        "Description": "<p>TimePicker of 12 hours format, with default format <code>h:mm:ss a</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.Hours12",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "intervaloptions",
        "Title": "interval option",
        "Description": "<p>Show stepped options by <code>hourStep</code> <code>minuteStep</code> <code>secondStep</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.IntervalOptions",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Alert",
    "Type": "Feedback",
    "Desc": "<p>Alert component for feedback.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When you need to show alert messages to users.</li>\n<li>When you need a persistent static container which is closable by user actions.</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 5,
        "Name": "closetext",
        "Title": "Customized Close Text",
        "Description": "<p>Replace the default icon with customized content.</p>\n",
        "Code": "<AntAlert Message=\"Info Text\" Type=\"@AntAlertType.Info\" CloseText=\"Close Now\"  Closable/>",
        "Type": "Demos.Alert.demo.CloseText",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "description",
        "Title": "Description",
        "Description": "<p>Additional description for alert message.</p>\n",
        "Code": "<AntAlert Message=\"Success Text\"\n          Description=\"Success Description Success Description Success Description\"\n          Type=\"@AntAlertType.Success\" />\n\n<AntAlert Message=\"Info Text\"\n          Description=\"Info Description Info Description Info Description Info Description\"\n          Type=\"@AntAlertType.Info\" />\n\n<AntAlert Message=\"Warning Text\"\n          Description=\"Warning Description Warning Description Warning Description Warning Description\"\n          Type=\"@AntAlertType.Warning\" />\n\n<AntAlert Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description\"\n          Type=\"@AntAlertType.Error\" />",
        "Type": "Demos.Alert.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage for short messages.</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Success\" Message=\"Success Text\" />\n",
        "Type": "Demos.Alert.demo.Basic",
        "Style": "\n.code-box-demo .ant-alert {\n  margin-bottom: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "style",
        "Title": "More types",
        "Description": "<p>There are 4 types of Alert: <code>success</code>, <code>info</code>, <code>warning</code>, <code>error</code>.</p>\n",
        "Code": "<AntAlert Message=\"Success Text\" Type=\"@AntAlertType.Success\" />\n\n<AntAlert Message=\"Info Text\" Type=\"@AntAlertType.Info\" />\n\n<AntAlert Message=\"Warning Text\" Type=\"@AntAlertType.Warning\" />\n\n<AntAlert Message=\"Error Text\" Type=\"@AntAlertType.Error\" />",
        "Type": "Demos.Alert.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p>Decent icon make information more clear and more friendly.</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Success\"\n          Message=\"Success Tips\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Info\"\n          Message=\"Informational Notes\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Success\"\n          Message=\"Success Tips\"\n          Description=\"Detailed description and advice about successful copywriting.\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Info\"\n          Message=\"Informational Notes\"\n          Description=\"Additional description and information about copywriting.\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning\"\n          Description=\"This is a warning notice about copywriting.\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error\"\n          Description=\"This is an error message about copywriting.\"\n          ShowIcon />",
        "Type": "Demos.Alert.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "closable",
        "Title": "Closable",
        "Description": "<p>To show close button.</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n@code{\n    private void LogSomething()\n    {\n        Console.WriteLine(\"Logging Something...\");\n    }\n}",
        "Type": "Demos.Alert.demo.Closable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "banner",
        "Title": "Banner",
        "Description": "<p>Display Alert as a banner at top of page.</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text\"\n          Banner\n          Closable />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text\"\n          Description=\"Very long warning text warning text text text text text text text\"\n          Banner\n          Closable />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text Without Icon\"\n          Banner\n          ShowIcon=\"false\" />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error Text\"\n          Banner />",
        "Type": "Demos.Alert.demo.Banner",
        "Style": "",
        "Iframe": 250,
        "Debug": false
      }
    ]
  },
  {
    "Title": "DatePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select or input a date.</p>\n<h2>When To Use</h2>\n<p>By clicking the input box, you can select a date from a popup calendar.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "Bordered-less",
        "Description": "<p>Bordered-less style component.</p>\n",
        "Code": "<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Year\" />\n<br />",
        "Type": "Demos.DatePicker.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>A disabled state of the <code>DatePicker</code>. You can also set as array to disable one of input.</p>\n",
        "Code": "<DatePicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<MonthPicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<RangePicker Disabled=\"@true\" DefaultValue=\"new DateTime[] { new DateTime(2015, 6, 6), new DateTime(2015, 6, 6) }\" />\n<br />\n<RangePicker Disabled=\"@true\" \n                DefaultValue=\"new DateTime[] { new DateTime(2019, 9, 3), new DateTime(2019, 11, 12) }\" />",
        "Type": "Demos.DatePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "rangepicker",
        "Title": "Range Picker",
        "Description": "<p>Set range picker type by <code>picker</code> prop.</p>\n",
        "Code": "<RangePicker />\n<br />\n<RangePicker ShowTime=\"@true\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Year\" />",
        "Type": "Demos.DatePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic use case. Users can select or input a date in panel.</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Year\" />\n<br />",
        "Type": "Demos.DatePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "extrafooter",
        "Title": "Extra Footer",
        "Description": "<p>Render extra footer in panel for customized requirements.</p>\n",
        "Code": "<DatePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<DatePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" RenderExtraFooter=\"extraFooter\" />\n\n@code {\n    private RenderFragment extraFooter =@<span>extra footer</span>;\n}\n",
        "Type": "Demos.DatePicker.demo.ExtraFooter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "Three Sizes",
        "Description": "<p>The input box comes in three sizes. <code>default</code> will be used if <code>size</code> is omitted.</p>\n",
        "Code": "<AntRadioGroup @bind-Value=\"@datePickerSize\">\n    <AntRadio RadioButton Value=\"@DatePickerSize.Large\">Large</AntRadio>\n    <AntRadio RadioButton Value=\"@DatePickerSize.Default\">Default</AntRadio>\n    <AntRadio RadioButton Value=\"@DatePickerSize.Small\">Small</AntRadio>\n</AntRadioGroup>\n<br />\n<DatePicker Size=\"@datePickerSize\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" Size=\"@datePickerSize\" />\n<br />\n<RangePicker Size=\"@datePickerSize\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" Size=\"@datePickerSize\" />\n\n@code {\n    private string datePickerSize = DatePickerSize.Default;\n}",
        "Type": "Demos.DatePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "disableddate",
        "Title": "Disabled Date & Time",
        "Description": "<p>Disabled part of dates and time by <code>disabledDate</code> and <code>disabledTime</code> respectively, and <code>disabledTime</code> only works with <code>showTime</code>.</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 0, 0, 0)\"\n               Format=\"yyyy-MM-dd HH:mm:ss\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n               DisabledTime=\"date => GetDisabledTime(date)\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\"\n               DisabledDate=\"date => date <= DateTime.Now\" />\n<br />\n<RangePicker DisabledDate=\"date => date <= DateTime.Now\" />\n<br />\n<RangePicker ShowTime='@true'\n                DisabledDate=\"date => date <= DateTime.Now\" />\n\n@code {\n    private DatePickerDisabledTime GetDisabledTime(DateTime date)\n    {\n        int[] timeRange = new int[60];\n        for (int i = 0; i < timeRange.Length; i++)\n        {\n            timeRange[i] = i;\n        }\n\n        return new DatePickerDisabledTime(timeRange[4..15], timeRange[20..55], timeRange[3..19]);\n    }\n}",
        "Type": "Demos.DatePicker.demo.DisabledDate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "presettedranges",
        "Title": "Preset Ranges TODO",
        "Description": "<p>We can set preset ranges to RangePicker to improve user experience. TODO</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.PresettedRanges",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "format",
        "Title": "Date Format",
        "Description": "<p>We can set the date format by <code>format</code>.</p>\n",
        "Code": "<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM/dd\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"dd/MM/yyyy\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime[] { new DateTime(2015, 1, 1), new DateTime(2015, 1, 1) }\" Format=\"yyyy/MM/dd\" />",
        "Type": "Demos.DatePicker.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "selectinrange",
        "Title": "Select range dates in 7 days TODO",
        "Description": "<p>A example shows how to select a dynamic range by using <code>onCalendarChange</code> and <code>disabledDate</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.SelectInRange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "daterender",
        "Title": "Customized Date Rendering",
        "Description": "<p>We can customize the rendering of date cells in the calendar by providing a <code>dateRender</code> function to <code>DatePicker</code>.</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" /><br />\n<RangePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" />\n\n@code\n{\n    private Func<DateTime, DateTime, RenderFragment> CustomRender = (currentViewDate, today) =>\n    {\n        string style = \"\";\n        if (currentViewDate.Day == 1)\n        {\n            style = \"border: 1px solid #1890ff; borderRadius: 50%\";\n        }\n\n        return @<div class=\"ant-picker-cell-inner\" style=\"@style\">\n            @currentViewDate.Day\n        </div>;\n    };\n}",
        "Type": "Demos.DatePicker.demo.DateRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "time",
        "Title": "Choose Time",
        "Description": "<p>This property provide an additional time selection. When <code>showTime</code> is an Object, its properties will be passed on to built-in <code>TimePicker</code>.</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\" OnChange=\"OnChange\" />\n<br />\n<RangePicker ShowTime='@(\"HH:mm\")' OnChange=\"OnChange\" />\n\n@code\n{\n    private void OnChange(DateTime value, string dateString)\n    {\n        Console.WriteLine($\"Selected Time: {value}\");\n        Console.WriteLine($\"Formatted Selected Time: {dateString}\");\n    }\n}",
        "Type": "Demos.DatePicker.demo.Time",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Button",
    "Type": "General",
    "Desc": "<p>To trigger an operation.</p>\n<h2>When To Use</h2>\n<p>A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.</p>\n<p>In Ant Design we provide 4 types of button.</p>\n<ul>\n<li>Primary button: indicate the main action, one primary button at most in one section.</li>\n<li>Default button: indicate a series of actions without priority.</li>\n<li>Dashed button: used for adding action commonly.</li>\n<li>Link button: used for external links.</li>\n</ul>\n<p>And 4 other properties additionally.</p>\n<ul>\n<li><code>danger</code>: used for actions of risk, like deletion or authorization.</li>\n<li><code>ghost</code>: used in situations with complex background, home pages usually.</li>\n<li><code>disabled</code>: when actions is not available.</li>\n<li><code>loading</code>: add loading spinner in button, avoiding multiple submits too.</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 0,
        "Name": "block",
        "Title": "Block Button",
        "Description": "<p><code>block</code> property will make the button fit to its parent width.</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\" Block>Primary</AntButton>\n    <AntButton Block>Default</AntButton>\n    <AntButton Type=\"dashed\" Block>Dashed</AntButton>\n    <AntButton Type=\"link\" Block>Link</AntButton>\n</div>",
        "Type": "Demos.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>To mark a button as disabled, add the <code>disabled</code> property to the <code>Button</code>.</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\">Primary</AntButton>\n    <AntButton Type=\"primary\" Disabled>\n        Primary(disabled)\n    </AntButton>\n    <br />\n    <AntButton>Default</AntButton>\n    <AntButton Disabled>Default(disabled)</AntButton>\n    <br />\n    <AntButton Type=\"dashed\">Dashed</AntButton>\n    <AntButton Type=\"dashed\" Disabled>\n        Dashed(disabled)\n    </AntButton>\n    <br />\n    <AntButton Type=\"link\">Link</AntButton>\n    <AntButton Type=\"link\" Disabled>\n        Link(disabled)\n    </AntButton>\n    <br />\n    <AntButton Type=\"link\" Danger>\n        Danger Link\n    </AntButton>\n    <AntButton Type=\"link\" Danger Disabled>\n        Danger Link(disabled)\n    </AntButton>\n    <br />\n    <AntButton Danger>Danger Default</AntButton>\n    <AntButton Danger Disabled>\n        Danger Default(disabled)\n    </AntButton>\n    <div class=\"site-AntButton-Ghost-wrapper\">\n        <AntButton Ghost>Ghost</AntButton>\n        <AntButton Ghost Disabled>\n            Ghost(disabled)\n        </AntButton>\n    </div>\n</div>",
        "Type": "Demos.Button.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "ghost",
        "Title": "Ghost Button",
        "Description": "<p><code>ghost</code> property will make button's background transparent, it is commonly used in colored background.</p>\n",
        "Code": "<div class=\"site-AntButton-Ghost-wrapper\">\n    <AntButton Type=\"primary\" Ghost>\n        Primary\n    </AntButton>\n    <AntButton Ghost>Default</AntButton>\n    <AntButton Type=\"dashed\" Ghost>\n        link\n    </AntButton>\n    <AntButton Type=\"link\" Ghost>\n        link\n    </AntButton>\n</div>",
        "Type": "Demos.Button.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Type",
        "Description": "<p>There are <code>primary</code> button, <code>default</code> button, <code>dashed</code> button and <code>link</code> button in antd.</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\">Primary</AntButton>\n    <AntButton>Default</AntButton>\n    <AntButton Type=\"dashed\">Dashed</AntButton>\n    <AntButton Type=\"danger\">Danger</AntButton>\n    <AntButton Type=\"link\">Link</AntButton>\n</div>",
        "Type": "Demos.Button.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "multiple",
        "Title": "Multiple Buttons",
        "Description": "<p>If you need several buttons, we recommend that you use 1 primary button + n secondary buttons, and if there are more than three operations, you can group some of them into <code>Dropdown.Button</code>.</p>\n",
        "Code": "Not implement yet :(",
        "Type": "Demos.Button.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>Ant Design supports a default button size as well as a large and small size.</p>\n<p>If a large or small button is desired, set the <code>size</code> property to either <code>large</code> or <code>small</code> respectively. Omit the <code>size</code> property for a button with the default size.</p>\n",
        "Code": "<div>\n    <AntRadioGroup @bind-Value=\"@size\">\n        <AntRadio RadioButton Value=\"large\">Large</AntRadio>\n        <AntRadio RadioButton Value=\"default\">Default</AntRadio>\n        <AntRadio RadioButton Value=\"small\">Small</AntRadio>\n    </AntRadioGroup>\n    <br />\n    <br />\n    <AntButton Type=\"primary\" Size=@size>\n        Primary\n    </AntButton>\n    <AntButton Size=\"@size\">Default</AntButton>\n    <AntButton Type=\"dashed\" Size=@size>\n        Dashed\n    </AntButton>\n    <br />\n    <AntButton Type=\"link\" Size=@size>\n        Link\n    </AntButton>\n    <br />\n    <AntButton Type=\"primary\" Icon=\"download\" Size=@size />\n    <AntButton Type=\"primary\" Shape=\"circle\" Icon=\"download\" Size=@size />\n    <AntButton Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size />\n    <AntButton Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size>\n    Download\n    </AntButton>\n    <AntButton Type=\"primary\" Icon=\"download\" Size=@size>\n    Download\n    </AntButton>\n</div>\n\n@code\n{\n    string size = \"large\";\n}\n",
        "Type": "Demos.Button.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p><code>Button</code> components can contain an <code>Icon</code>. This is done by setting the <code>icon</code> property or placing an <code>Icon</code> component within the <code>Button</code>.</p>\n<p>If you want specific control over the positioning and placement of the <code>Icon</code>, then that should be done by placing the <code>Icon</code> component within the <code>Button</code> rather than using the <code>icon</code> property.</p>\n",
        "Code": "<div>\n    @*<Tooltip title=\"search\">\n        <AntButton Type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Type=\"primary\" Shape=\"circle\">\n        A\n    </AntButton>\n    <AntButton Type=\"primary\" Icon=\"search\">\n    Search\n    </AntButton>\n    @*<Tooltip title=\"search\">\n        <AntButton shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Icon=\"search\">Search</AntButton>\n    <br />\n    @*<Tooltip title=\"search\">\n        <AntButton shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Icon=\"search\">Search</AntButton>\n    @*<Tooltip title=\"search\">\n        <AntButton Type=\"dashed\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Type=\"dashed\" Icon=\"search\">\n    Search\n    </AntButton>\n</div>",
        "Type": "Demos.Button.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "danger",
        "Title": "Danger Buttons",
        "Description": "<p><code>danger</code> is a property of button after antd 4.0.</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\" Danger>\n        Primary\n    </AntButton>\n    <AntButton Danger>Default</AntButton>\n    <AntButton Type=\"dashed\" Danger>\n        link\n    </AntButton>\n    <AntButton Type=\"link\" Danger>\n        link\n    </AntButton>\n</div>",
        "Type": "Demos.Button.demo.Danger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "legacygroup",
        "Title": "Deprecated Button Group",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<AntButtonGroup Size=\"small\">\n    <AntButton Type=\"primary\">Button 1</AntButton>\n    <AntButton Type=\"primary\">Button 2</AntButton>\n</AntButtonGroup>\n<AntButtonGroup>\n    <AntButton Type=\"primary\">Button 1</AntButton>\n    <AntButton Type=\"primary\">Button 2</AntButton>\n</AntButtonGroup>\n<AntButtonGroup Size=\"large\">\n    <AntButton Type=\"primary\">Button 1</AntButton>\n    <AntButton Type=\"primary\">Button 2</AntButton>\n</AntButtonGroup>",
        "Type": "Demos.Button.demo.LegacyGroup",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "Loading",
        "Description": "<p>A loading indicator can be added to a button by setting the <code>loading</code> property on the <code>Button</code>.</p>\n",
        "Code": "@using System.Timers\n\n<div>\n    <AntButton Type=\"primary\" Loading>\n        Loading\n    </AntButton>\n    <AntButton Type=\"primary\" Size=\"small\" Loading>\n        Loading\n    </AntButton>\n    <br />\n    <AntButton Type=\"primary\" Loading=\"loading\" OnClick=enterLoading>\n        Click me!\n    </AntButton>\n    <AntButton\n        Type=\"primary\"\n        Icon=\"poweroff\"\n    Loading=\"iconLoading\"\n    OnClick=\"enterIconLoading\"\n    >\n    Click me!\n    </AntButton>\n</div>\n\n@code\n{\n    bool loading = false;\n    bool iconLoading = false;\n\n    private void enterLoading()\n    {\n        loading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            loading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n\n    private void enterIconLoading()\n    {\n        iconLoading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            iconLoading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n}\n",
        "Type": "Demos.Button.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Pagination",
    "Type": "Navigation",
    "Desc": "<p>A long list can be divided into several pages using <code>Pagination</code>, and only one page will be loaded at a time.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When it will take a long time to load/render all items.</li>\n<li>If you want to browse the data by navigating through pages.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Pagination onChange={onChange} total={50} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Current</td>\n<td>Current page number</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultCurrent</td>\n<td>Default initial page number</td>\n<td>number</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultPageSize</td>\n<td>Default number of data items per page</td>\n<td>number</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable pagination</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>HideOnSinglePage</td>\n<td>Whether to hide pager on single page</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ItemRender</td>\n<td>To customize item's innerHTML</td>\n<td>(page, type: 'page' | 'prev' | 'next', originalElement) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSize</td>\n<td>Number of data items per page</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSizeOptions</td>\n<td>Specify the sizeChanger options</td>\n<td>string[]</td>\n<td>['10', '20', '50', '100']</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowLessItems</td>\n<td>Show less page items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowQuickJumper</td>\n<td>Determine whether you can jump to pages directly</td>\n<td>boolean | <code>{ goButton: ReactNode }</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSizeChanger</td>\n<td>Determine whether to show <code>pageSize</code> select, it will be <code>true</code> when <code>total&gt;=50</code></td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTitle</td>\n<td>Show page item's title</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTotal</td>\n<td>To display the total number and range</td>\n<td>Function(total, range)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Simple</td>\n<td>Whether to use simple mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Specify the size of <code>Pagination</code>, can be set to <code>small</code>.</td>\n<td>'default' | 'small'.</td>\n<td>&quot;&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>Responsive</td>\n<td>If <code>size</code> is not specified, <code>Pagination</code> would resize according to the width of the window</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Total</td>\n<td>Total number of data items</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Called when the page number is changed, and it takes the resulting page number and pageSize as its arguments</td>\n<td>Function(page, pageSize)</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>OnShowSizeChange</td>\n<td>Called when <code>pageSize</code> is changed</td>\n<td>Function(current, size)</td>\n<td>noop</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "more",
        "Title": "More",
        "Description": "<p>More pages.</p>\n",
        "Code": "<Pagination DefaultCurrent=\"6\" Total=\"500\" />",
        "Type": "Demos.Pagination.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "total",
        "Title": "Total number",
        "Description": "<p>You can show the total number of data by setting <code>showTotal</code>.</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n    <br />\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal2\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n    Func<PaginationTotalContext, string> showTotal2 =  ctx => $\"{ctx.Range.Item1}-{ctx.Range.Item2} of {ctx.Total} items\";\n}",
        "Type": "Demos.Pagination.demo.Total",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "changer",
        "Title": "Changer",
        "Description": "<p>Change <code>pageSize</code>.</p>\n",
        "Code": "<h3>Changer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Pagination.demo.Changer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic pagination.</p>\n",
        "Code": "<Pagination PageIndex=\"1\" Total=\"50\"></Pagination>",
        "Type": "Demos.Pagination.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "controlled",
        "Title": "Controlled",
        "Description": "<p>Controlled page number.</p>\n",
        "Code": "<Pagination @bind-Current=\"@current\" OnChange=onChange Total=\"50\" />\n\n@code {\n    int current = 3;\n\n    void onChange(int page)\n    {\n        Console.WriteLine(page);\n        current = page;\n    }\n}\n",
        "Type": "Demos.Pagination.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "all",
        "Title": "Show All",
        "Description": "<p>Show all configured prop.</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowSizeChanger\n        ShowQuickJumper\n        ShowTotal=@showTotal\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Pagination.demo.All",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "simple",
        "Title": "Simple mode",
        "Description": "<p>Simple mode.</p>\n",
        "Code": "<Pagination Simple DefaultCurrent=\"2\" Total=\"50\" />",
        "Type": "Demos.Pagination.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "mini",
        "Title": "Mini size",
        "Description": "<p>Mini size pagination.</p>\n",
        "Code": "<div>\n    <Pagination Size=\"small\" Total=\"50\" />\n    <Pagination Size=\"small\" Total=\"50\" ShowSizeChanger ShowQuickJumper />\n    <Pagination Size=\"small\" Total=\"50\" ShowTotal=showTotal />\n</div>\n\n@code\n{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Pagination.demo.Mini",
        "Style": "\n#components-pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "jump",
        "Title": "Jumper",
        "Description": "<p>Jump to a page directly.</p>\n",
        "Code": "<div>\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" OnChange=onChange />\n    <br />\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" OnChange=onChange Disabled />\n</div>\n@code{\n\n    void onChange(int pageNumber) {\n        Console.WriteLine($\"Page: {pageNumber}\");\n    }\n\n}\n",
        "Type": "Demos.Pagination.demo.Jump",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "itemrender",
        "Title": "Prev and next",
        "Description": "<p>Use text link for prev and next button.</p>\n",
        "Code": "<Pagination Total=\"500\" ItemRender=itemRender />\n\n@code {\n\n    RenderFragment<PaginationItemRenderContext> itemRender = ctx =>\n        @<Template>\n            @if (ctx.Type == \"prev\") {\n                <a>Previous</a>\n            }\n            else if (ctx.Type == \"next\") {\n                <a>Next</a>\n            }\n            else\n            {\n                @ctx.DefaultRender(ctx)\n            }\n        </Template>;\n\n}\n",
        "Type": "Demos.Pagination.demo.ItemRender",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Drawer",
    "Type": "Feedback",
    "Desc": "<p>A panel which slides in from the edge of the screen.</p>\n<h2>When To Use</h2>\n<p>A Drawer is a panel that is typically overlaid on top of a page and slides in from the side.\nIt contains a set of information or actions.<br />\nSince the user can interact with the Drawer without leaving the current page,\ntasks can be achieved more efficiently within thesame context.</p>\n<ul>\n<li>Use a Form to create or edit a set of information.</li>\n<li>Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task,\nDrawer comes very handy.</li>\n<li>When the same Form is needed in multiple places.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>the title for drawer</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Style of the drawer content part</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is visible on top right of the Drawer dialog or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Subcomponent</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Clicking on the mask (area outside the Drawer) to close the Drawer or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for Drawer's mask element.</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Drawer, option could be <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the container of the Drawer dialog.</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the Drawer dialog.</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>placement is top or bottom, height of the Drawer dialog.</td>\n<td>int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Drawer.</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>the offset of in X-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>the offset of in Y-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the Drawer dialog is visible or not.</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to close</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a callback that will be called when a user clicks mask, close button or Cancel button.</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>Specify a callback that will be called before drawer displayed</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "userprofile",
        "Title": "Preview Drawer",
        "Description": "<p>Use Drawer to quickly preview details of an object, such as those in a list.</p>\n",
        "Code": "<div>\n        <AntList>\n            <ChildContent>\n                @foreach (var item in datasource)\n                {\n                    <AntListItem>\n                        <AntListItemMeta Avatar=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n                                         Description=\"Progresser XTech\">\n                            <Title>\n                                @item.Title\n                            </Title>                            \n                      \n                        </AntListItemMeta>\n\n                        <AntButton Type=\"@AntButtonType.Link\" OnClick=\"(e)=>open(e, item.Title)\">View Profile</AntButton>\n\n                    </AntListItem>\n                }\n\n            </ChildContent>\n        </AntList>\n\n        <Drawer Width=\"640\" Closable=\"true\" Visible=\"visible\" Title='(\"User Profile\")' OnClose=\"_=>close()\">\n            <AntText Strong=\"true\">Personal</AntText>\n            <AntRow></AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Full Name:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>Henry</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Account:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>AntDesign@example.com</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">City:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>HangZhou</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Country:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>China</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Birthday:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>February 2,1900</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Website:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>www.baidu.com</AntText>\n                </AntCol>\n            </AntRow>\n\n            <AntDivider></AntDivider>\n            <AntText Strong=\"true\">Company</AntText>\n            <AntRow></AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Position:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">Programmer</AntText>\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntText Strong=\"true\">Responsibilities:</AntText>\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntText Strong=\"false\">Coding</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Department:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">XTech</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Supervisor:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">Lin</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Skills:</AntText>\n                </AntCol>\n                <AntCol Span=\"20\">\n                    <AntText Strong=\"false\">\n                        C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.\n                    </AntText>\n                </AntCol>\n\n            </AntRow>\n\n            <AntDivider ></AntDivider>\n            <AntText Strong=\"true\">Contacts</AntText>\n            <AntRow></AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Email:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\"> ant-design-Blazor@example.com</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">    Phone Number:     </AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">+86 181 0000 0000 </AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Github:</AntText>\n                </AntCol>\n                <AntCol Span=\"20\">\n                    <AntText Strong=\"false\">https://ant-design-blazor.gitee.io/ </AntText>\n                </AntCol>\n            </AntRow>\n        </Drawer>   \n</div>\n\n   @code{\n\n       public class ListDataSource\n       {\n           public string Title { get; set; }\n       };\n\n       List<ListDataSource> datasource = new List<ListDataSource>() {\n        new ListDataSource(){Title=\"Henry\"},\n        new ListDataSource(){Title=\"Henry\"}\n    };\n       bool visible = false;\n\n\n       void open(MouseEventArgs arg, string Title)\n       {\n           this.visible = true;\n       }\n\n       void close()\n       {\n           this.visible = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Userprofile",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "formindrawer",
        "Title": "Submit form in drawe",
        "Description": "<p>Use form in drawer with submit button.</p>\n",
        "Code": "<div>\n    <AntButton Icon=\"plus\" Type=\"primary\" @onclick=\"_=>open()\">New account</AntButton>\n    <Drawer Closable=\"true\" Width=\"720\" Visible=\"visible\" Title='(\"Submit from in Drawer\")' OnClose=\"_=>close()\">\n        <Template style=\"height:90%\">\n            <AntRow Gutter=\"16\">\n                <AntCol Span=\"12\">\n                    <AntText>Name</AntText>\n                    <AntInput Placeholder=\"Please enter user name\"></AntInput>\n                </AntCol>\n                <AntCol Span=\"12\">\n                    <AntText>Url</AntText>\n                    <AntInput Placeholder=\"please enter url\">\n                        <AddOnBefore>Http://</AddOnBefore>\n                        <AddOnAfter>.Com</AddOnAfter>\n                    </AntInput>\n                </AntCol>\n            </AntRow>\n            <br />\n            <AntRow Gutter=\"16\">\n                <AntCol Span=\"12\">\n                    <AntText>Owner</AntText>\n                    <AntInput Placeholder=\"Please select a owner\"></AntInput>\n                </AntCol>\n                <AntCol Span=\"12\">\n                    <AntText>Type</AntText>\n                    <AntInput Placeholder=\"please enter url\"></AntInput>\n                </AntCol>\n            </AntRow>\n            <br />\n\n            <AntRow>\n                <AntCol Span=\"24\">\n                    <AntText>Description</AntText>\n                    <AntTextArea Placeholder=\"Please enter your description\">\n\n                    </AntTextArea>\n                </AntCol>\n            </AntRow>\n            <br />\n            <AntRow>\n                <AntCol Span=\"18\">\n\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntButton Type=\"default\">Cancel</AntButton>\n                    <AntButton Type=\"primary\">Submit</AntButton>\n                </AntCol>\n            </AntRow>\n        </Template>\n    </Drawer>\n</div>\n\n\n@code{\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Formindrawer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "renderdom",
        "Title": "Render in current dom",
        "Description": "<p>Render in current dom. custom container, check getContainer.</p>\n",
        "Code": "<div>\n    <div style=\"height:200px;overflow:hidden;position:relative;border:1px solid #ebedf0; border-radius:2px;padding:48px;text-align:center;background:#fafafa\">\n        Render in this\n        <div style=\"margin-top: 16px\">\n            <AntButton Type=\"primary\" @onclick=\"_=>open()\">Open</AntButton>\n        </div>\n        <Drawer Style=\"position:absolute\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Drawer>\n    </div>\n</div>\n\n@code{\n\n    bool visible = false;\n\n\n\n    void open()\n    {\n\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Render_dom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Drawer",
        "Description": "<p>Simplest Usage. Drawer will be displayed on right, and it will be closed when you click the masked area.</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\" @onclick=\"_=>open()\">Open</AntButton>\n    <Drawer Closable=\"true\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>\n\n   @code{\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "multiple",
        "Title": "Multi-level drawer",
        "Description": "<p>Open a new drawer on top of an existing drawer to handle multi branch tasks.</p>\n",
        "Code": "<div>\n    <AntButton  Type=\"primary\" OnClick=\"_=>open()\">Open</AntButton>\n\n    <Drawer Width=\"@wdFirstLayer\" Closable=\"true\" Visible=\"visible1\" Title='(\"Multi-level drawer\")' OnClose=\"_=>close()\">\n        <AntButton Type=\"primary\" OnClick=\"_=>ShowDrawer()\">Two-level Drawer</AntButton>\n        <Drawer Width=\"260\" Closable=\"true\" Visible=\"visible2\" Title='(\"two-level drawer\")' OnClose=\"_=>CloseDrawer()\">\n            <AntButton Type=\"primary\">This is two-level drawer</AntButton>\n        </Drawer>\n\n    </Drawer>\n</div>\n\n   @code{\n\n       bool visible1 = false;\n       bool visible2 = false;\n       int wdFirstLayer = 520;\n\n       void open()\n       {\n           this.visible1 = true;\n       }\n\n       void ShowDrawer()\n       {\n\n           this.visible2 = true;\n           wdFirstLayer += 260;\n       }\n\n       void close()\n       {\n           this.visible1 = false;\n       }\n\n       void CloseDrawer()\n       {\n           wdFirstLayer -= 260;\n           this.visible2 = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Custom Placement",
        "Description": "<p>The Drawer can appear from any edge of the screen.</p>\n",
        "Code": "<div>\n    <AntRadioGroup @bind-Value=\"placement\">\n        <AntRadio Value=\"top\">top</AntRadio>\n        <AntRadio Value=\"right\">right</AntRadio>\n        <AntRadio Value=\"bottom\">bottom</AntRadio>\n        <AntRadio Value=\"left\">left</AntRadio>\n    </AntRadioGroup>\n\n    <AntButton Type=\"primary\" @onclick=\"_ => open()\">Open</AntButton>\n    <Drawer Closable=\"true\" Visible=\"@visible\" Placement=\"@placement\" Title='(\"Drawer in different Placement\")' OnClose=\"_ => close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>  \n\n@code{\n\n    string placement = \"right\";\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Placement",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Badge",
    "Type": "Data Display",
    "Desc": "<p>Small numerical value or status descriptor for UI elements.</p>\n<h2>When To Use</h2>\n<p>Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 4,
        "Name": "change",
        "Title": "Dynamic",
        "Description": "<p>The count will be animated as it changes.</p>\n",
        "Code": "<div>\n    <div>\n        <AntBadge Count=\"@count\">\n            <a href=\"#\" class=\"head-example\" />\n        </AntBadge>\n        <AntButtonGroup>\n            <AntButton @onclick=\"_=>decline()\">\n                <AntIcon Type=\"minus\"></AntIcon>\n            </AntButton>\n            <AntButton @onclick=\"_=>increase()\">\n                <AntIcon Type=\"plus\"></AntIcon>\n            </AntButton>\n        </AntButtonGroup>\n    </div>\n    <div style=\"margin-top: 10px\">\n        <AntBadge Dot=\"@show\">\n            <a href=\"#\" class=\"head-example\" />\n        </AntBadge>\n        <AntSwitch OnChange=\"onChange\" Checked=\"@show\" />\n    </div>\n</div>\n\n@code {\n    int count = 5;\n    bool show = true;\n\n    void increase()\n    {\n        count++;\n    }\n\n    void decline()\n    {\n        count--;\n        if (count < 0)\n        {\n            count = 0;\n        }\n    }\n\n    void onChange(bool show)\n    {\n        this.show = show;\n    }\n}\n",
        "Type": "Demos.Badge.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage. Badge will be hidden when <code>count</code> is <code>0</code>, but we can use <code>showZero</code> to show it.</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"5\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"0\" ShowZero>\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    @{\n        RenderFragment count = @<AntIcon Type=\"clock-circle\" Fill=\"#f5222d\"/>;\n    }\n    <AntBadge Count=\"@(count)\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n</div>\n\n",
        "Type": "Demos.Badge.demo.Basic",
        "Style": "\n    .ant-badge:not(.ant-badge-not-a-wrapper) {\n        margin-right: 20px;\n    }\n    .ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n        margin-right: 0;\n        margin-left: 20px;\n    }\n    .head-example {\n        width: 42px;\n        height: 42px;\n        border-radius: 2px;\n        background: #eee;\n        display: inline-block;\n        vertical-align: middle;\n    }\n    [data-theme=\"dark\"] .head-example {\n        background: rgba(255,255,255,.12);\n    }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "overflow",
        "Title": "Overflow Count",
        "Description": "<p><code>${overflowCount}+</code> is displayed when count is larger than <code>overflowCount</code>. The default value of <code>overflowCount</code> is <code>99</code>.</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"99\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"100\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"99\" OverflowCount=\"10\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"1000\" OverflowCount=\"999\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n</div>\n",
        "Type": "Demos.Badge.demo.Overflow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "colorful",
        "Title": "Colorful Badge",
        "Description": "<p>We preset a series of colorful Badge styles for use in different situations. You can also set it to a hex color string for custom color.</p>\n",
        "Code": "<div>\n    <h4 style=\"margin-bottom: 16px\">Presets:</h4>\n    <div>\n        @foreach (var color in colors)\n        {\n            <div key=\"@color\">\n                <AntBadge Color=\"@color\" Text=\"@color\" />\n            </div>\n        }\n    </div>\n    <h4 style=\"margin:16px 0;\">Custom:</h4>\n    <div>\n        <AntBadge Color=\"#f50\" Text=\"#f50\" />\n        <br />\n        <AntBadge Color=\"#2db7f5\" Text=\"#2db7f5\" />\n        <br />\n        <AntBadge Color=\"#87d068\" Text=\"#87d068\" />\n        <br />\n        <AntBadge Color=\"#108ee9\" Text=\"#108ee9\" />\n    </div>\n</div>\n\n<style>\n    .ant-tag {\n        margin-bottom: 8px;\n    }\n</style>\n\n@code\n{\n    string[] colors =\n    {\n        \"pink\",\n        \"red\",\n        \"yellow\",\n        \"orange\",\n        \"cyan\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"geekblue\",\n        \"magenta\",\n        \"volcano\",\n        \"gold\",\n        \"lime\",\n    };\n}\n",
        "Type": "Demos.Badge.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "link",
        "Title": "Clickable",
        "Description": "<p>The badge can be wrapped with <code>a</code> tag to make it linkable.</p>\n",
        "Code": "<a href=\"#\">\n    <AntBadge Count=\"5\">\n        <span class=\"head-example\" />\n    </AntBadge>\n</a>",
        "Type": "Demos.Badge.demo.Link",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 100,
        "Name": "title",
        "Title": "Title",
        "Description": "<p>The badge will display <code>title</code> when hovered over, instead of <code>count</code>.</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"5\" Title=\"Custom hover text\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n</div>",
        "Type": "Demos.Badge.demo.Title",
        "Style": "\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-right: 20px;\n}\n\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 2px;\n  background: #eee;\n  display: inline-block;\n}\n[data-theme=\"dark\"] .head-example {\n  background: rgba(255,255,255,.12);\n}\n\n",
        "Debug": true
      },
      {
        "Order": 3,
        "Name": "dot",
        "Title": "Red badge",
        "Description": "<p>This will simply display a red badge, without a specific count. If count equals 0, it won't display the dot.</p>\n",
        "Code": "<div>\n    <AntBadge Dot>\n        <AntIcon Type=\"notification\"/>\n    </AntBadge>\n    <AntBadge Count=\"0\" Dot>\n        <AntIcon Type=\"notification\" />\n    </AntBadge>\n    <AntBadge Dot>\n        <a href=\"#\">Link something</a>\n    </AntBadge>\n</div>",
        "Type": "Demos.Badge.demo.Dot",
        "Style": "\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "nowrapper",
        "Title": "Standalone",
        "Description": "<p>Used in standalone when children is empty.</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"25\" />\n    <AntBadge Count=\"4\" Class=\"site-badge-count-4\" />\n    <AntBadge Class=\"site-badge-count-109\" Count=\"109\" Style=\"background-color: #52c41a\" />\n</div>\n\n<style>\n    .site-badge-count-4 .ant-badge-count {\n        background-color: #fff;\n        color: #999;\n        box-shadow: 0 0 0 1px #d9d9d9 inset;\n    }\n</style>",
        "Type": "Demos.Badge.demo.NoWrapper",
        "Style": "\n.ant-badge-not-a-wrapper:not(.ant-badge-status) {\n  margin-right: 8px;\n}\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n[data-theme=\"dark\"] .site-badge-count-4 .ant-badge-count {\n  background-color: #141414;\n  box-shadow: 0 0 0 1px #434343 inset;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "status",
        "Title": "Status",
        "Description": "<p>Standalone badge with status.</p>\n",
        "Code": "<div>\n    <AntBadge Status=\"success\" />\n    <AntBadge Status=\"error\" />\n    <AntBadge Status=\"default\" />\n    <AntBadge Status=\"processing\" />\n    <AntBadge Status=\"warning\" />\n    <br />\n    <AntBadge Status=\"success\" Text=\"Success\" />\n    <br />\n    <AntBadge Status=\"error\" Text=\"Error\" />\n    <br />\n    <AntBadge Status=\"default\" Text=\"Default\" />\n    <br />\n    <AntBadge Status=\"processing\" Text=\"Processing\" />\n    <br />\n    <AntBadge Status=\"warning\" Text=\"Warning\" />\n</div>",
        "Type": "Demos.Badge.demo.Status",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Menu",
    "Type": "Navigation",
    "Desc": "<p>A versatile menu for navigation.</p>\n<h2>When To Use</h2>\n<p>Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. Ant Design offers top and side navigation options. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website.</p>\n<p>More layouts with navigation: <a href=\"/components/layout\">Layout</a>.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;Menu&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;SubMenu&quot;&gt;\n    &lt;Menu.Item&gt;SubMenuItem&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>Array with the keys of default opened sub menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>Array with the keys of default selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>Render submenu into DOM before it becomes visible</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>Specifies the collapsed status when menu is inline mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>Indent (in pixels) of inline menu items on each level</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>Type of menu; <code>vertical</code>, <code>horizontal</code>, or <code>inline</code></td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>Allows selection of multiple items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>Array with the keys of currently opened sub-menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>Allows selecting menu items</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Array with the keys of currently selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>Style of the root node</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>Delay time to hide submenu when mouse leaves (in seconds)</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>Delay time to show submenu when mouse enters, (in seconds)</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>Color theme of the menu</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>Called when a menu item is clicked</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>Called when a menu item is deselected (multiple mode only)</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>Called when sub-menus are opened or closed</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Called when a menu item is selected</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>none</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>Customized icon when menu is collapsed</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>Whether menu item is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the menu item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Set display title for collapsed item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>Sub-menu class name</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>Sub-menus or sub-menu items</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Whether sub-menu is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the sub-menu</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Title of the sub-menu</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>Callback executed when the sub-menu title is clicked</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>sub-menu items</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>title of the group</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>Divider line in between menu items, only used in vertical popup Menu or Dropdown Menu.</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "theme",
        "Title": "Menu Themes",
        "Description": "<p>There are two built-in themes: 'light' and 'dark'. The default value is 'light'.</p>\n",
        "Code": "<div>\n    <AntSwitch Checked=\"theme == MenuTheme.Dark\" OnChange=changeTheme CheckedChildren=@(\"Dark\") UnCheckedChildren=@(\"Light\") />\n    <br />\n    <br />\n    <Menu Theme=theme\n          OnMenuItemClicked=handleClick\n          Style=\" width: 256px \"\n          DefaultOpenKeys=@(new []{\"sub1\"})\n          SelectedKeys=@(new []{current})\n          Mode=\"MenuMode.Inline\">\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"5\">Option 5</MenuItem>\n            <MenuItem Key=\"6\">Option 6</MenuItem>\n            <SubMenu Key=\"sub3\" Title=\"@(\"Submenu\")\">\n                <MenuItem Key=\"7\">Option 7</MenuItem>\n                <MenuItem Key=\"8\">Option 8</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub4\" Title=sub4Title>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    MenuTheme theme = MenuTheme.Dark;\n    string current = \"1\";\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n    void handleClick(MenuItem e)\n    {\n        current = e.Key;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.Theme",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "inline",
        "Title": "Inline menu",
        "Description": "<p>Vertical menu with inline submenus.</p>\n",
        "Code": "<Menu Style=\"width: 256;\"\n      DefaultSelectedKeys=@(new[]{\"1\"})\n      DefaultOpenKeys=@(new[]{\"sub1\"})\n      Mode=@MenuMode.Inline>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItemGroup Key=\"g1\" Title=@(\"Item 1\")>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Key=\"g2\" Title=@(\"Iem 2\")>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n    @<span>\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n        <span>Navigation One</span>\n    </span>;\n\nRenderFragment sub2Title =\n@<span>\n    <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n    <span>Navigation Two</span>\n</span>;\n\nRenderFragment sub4Title =\n@<span>\n    <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n    <span>Navigation Three</span>\n</span>;\n}\n",
        "Type": "Demos.Menu.demo.Inline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inlinecollapsed",
        "Title": "Collapsed inline menu",
        "Description": "<p>Inline menu could be collapsed.</p>\n<p>Here is <a href=\"/components/layout/#components-layout-demo-side\">a complete demo</a> with sider layout.</p>\n",
        "Code": "<div style=\"width: 256;\">\n    <AntButton Type=\"primary\" OnClick=\"ToggleCollapsed\" Style=\"margin-bottom: 16px\">\n        @if (collapsed)\n        {\n            <AntIcon  Type=\"menu-unfold\" Theme=\"outline\"></AntIcon>\n        }\n        else\n        {\n            <AntIcon  Type=\"menu-fold\" Theme=\"outline\"></AntIcon>\n        }\n    </AntButton>\n    <Menu\n        DefaultSelectedKeys=@(new[]{\"1\"})\n        DefaultOpenKeys=@(new[]{\"sub1\"})\n        Mode=MenuMode.Inline\n        Theme=MenuTheme.Dark\n        InlineCollapsed=collapsed\n    >\n        <MenuItem Key=\"1\">\n            <AntIcon Type=\"pie-chart\" Theme=\"outline\"></AntIcon>\n            <span>Option 1</span>\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <AntIcon Type=\"desktop\" Theme=\"outline\"></AntIcon>\n            <span>Option 2</span>\n        </MenuItem>\n        <MenuItem Key=\"3\">\n            <AntIcon Type=\"contaainer\" Theme=\"outline\"></AntIcon>\n            <span>Option 3</span>\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title >\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n    bool collapsed = false;\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    void ToggleCollapsed()\n    {\n        collapsed = !collapsed;\n    }\n}\n",
        "Type": "Demos.Menu.demo.InlineCollapsed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "router",
        "Title": "Router",
        "Description": "<p>Automatically activate menu items based on routing, should work with <a href=\"https://angular.io/api/router/RouterLink\">MenuLink</a>.</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Horizontal\">\n    <MenuItem>\n        <MenuLink href=\"/en-US/components/menu\" Match=\"NavLinkMatch.All\">English Menu Document</MenuLink>\n    </MenuItem>\n    <MenuItem>\n        <MenuLink href=\"/zh-CN/components/menu\" Match=\"NavLinkMatch.All\">Chinese Menu Document</MenuLink>\n    </MenuItem>\n</Menu>",
        "Type": "Demos.Menu.demo.Router",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "Vertical menu",
        "Description": "<p>Submenus open as pop-ups.</p>\n",
        "Code": "<Menu OnMenuItemClicked=handleClick Style=\" width: 256px\" Mode=MenuMode.Vertical>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n    <MenuItemGroup Title=@(\"Item 1\")>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n    </MenuItemGroup>\n    <MenuItemGroup Title=@(\"Item 2\")>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\"  Title=sub2Title >\n    <MenuItem Key=\"5\">Option 5</MenuItem>\n    <MenuItem Key=\"6\">Option 6</MenuItem>\n    <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n    </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title >\n    <MenuItem Key=\"9\">Option 9</MenuItem>\n    <MenuItem Key=\"10\">Option 10</MenuItem>\n    <MenuItem Key=\"11\">Option 11</MenuItem>\n    <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n\n    void handleClick()\n    {\n\n    }\n}\n",
        "Type": "Demos.Menu.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "horizontal",
        "Title": "Top Navigation",
        "Description": "<p>Horizontal top navigation menu.</p>\n",
        "Code": "<Menu Mode=MenuMode.Horizontal>\n    <MenuItem Key=\"mail\">\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n        Navigation One\n    </MenuItem>\n    <MenuItem Key=\"app\" Disabled>\n        <AntIcon Type=\"appstore\" Theme=\"outline\" ></AntIcon>\n        Navigation Two\n    </MenuItem>\n    <SubMenu Title=sub1Title>\n        <MenuItemGroup Title=@(\"Item 1\")>\n            <MenuItem Key=\"setting:1\">Option 1</MenuItem>\n                <MenuItem Key=\"setting:2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Title=@(\"Item 2\")>\n                <MenuItem Key=\"setting:3\">Option 3</MenuItem>\n                <MenuItem Key=\"setting:4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <MenuItem Key=\"alipay\">\n        <MenuLink href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Navigation Four - Link\n        </MenuLink>\n    </MenuItem>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n        @<Template>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            Navigation Three - Submenu\n        </Template>;\n}\n",
        "Type": "Demos.Menu.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "switchmode",
        "Title": "Switch the menu type",
        "Description": "<p>Show the dynamic switching mode (between 'inline' and 'vertical').</p>\n",
        "Code": "<div>\n    <AntSwitch OnChange=changeMode /> Change Mode\n    <div class=\"ant-divider ant-divider-vertical\" role=\"separator\"></div>\n    <AntSwitch OnChange=changeTheme/> Change Style\n    <br />\n    <br />\n    <Menu Style=\" width: 256px ;\"\n          DefaultSelectedKeys=@(new[]{\"1\"})\n          DefaultOpenKeys=@(new[]{\"sub1\"})\n          Mode=this.mode\n          Theme=this.theme>\n        <MenuItem Key=\"1\">\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            Navigation One\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <AntIcon Type=\"calendar\" Theme=\"outline\"></AntIcon>\n            Navigation Two\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n            <SubMenu Key=\"sub1-2\" Title=@(\"Submenu\")>\n                <MenuItem Key=\"5\">Option 5</MenuItem>\n                <MenuItem Key=\"6\">Option 6</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Four</span>\n        </span>;\n\n    MenuMode mode = MenuMode.Inline;\n    MenuTheme theme = MenuTheme.Light;\n\n    void changeMode(bool value)\n    {\n        this.mode = value ? MenuMode.Vertical : MenuMode.Inline;\n    }\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.SwitchMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "sidercurrent",
        "Title": "Open current submenu only",
        "Description": "<p>Click the menu and you will see that all the other menus gets collapsed to keep the entire menu compact.</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Inline\"\n      OpenKeys=this.openKeys\n      OnOpenChange=this.onOpenChange\n      Style=\"width:256px ;\">\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code {\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    // submenu keys of first level\n    string[] rootSubmenuKeys = {\"sub1\", \"sub2\", \"sub4\"};\n\n    string[] openKeys = {\"sub1\"};\n\n    void onOpenChange(string[] openKeys)\n    {\n        var latestOpenKey = openKeys.FirstOrDefault(key => !this.openKeys.Contains(key));\n        if (!rootSubmenuKeys.Contains(latestOpenKey))\n        {\n            this.openKeys = openKeys;\n        }\n        else\n        {\n            this.openKeys = !string.IsNullOrEmpty(latestOpenKey) ? new[] {latestOpenKey} : Array.Empty<string>();\n        }\n    }\n}\n",
        "Type": "Demos.Menu.demo.SiderCurrent",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Notification",
    "Type": "Feedback",
    "Desc": "<p>Display a notification message globally.</p>\n<h2>When To Use</h2>\n<p>To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:</p>\n<ul>\n<li>A notification with complex content.</li>\n<li>A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.</li>\n<li>A notification that is pushed by the application.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>Customized close button</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>Customized CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>custom close icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>The content of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Notification</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>The title of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Trigger when notification closed</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>Specify a function that will be called when the notification is clicked</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>Position of Notification, can be one of <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Customized inline style</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p><code>NotificationService</code> also provides a global <code>Config()</code> method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying.</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Property</th>\n<th style=\"text-align: left;\">Description</th>\n<th style=\"text-align: left;\">Type</th>\n<th style=\"text-align: left;\">Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">Distance from the bottom of the viewport, when <code>placement</code> is <code>NotificationPlacement.BottomLeft</code> or <code>NotificationPlacement.BottomRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">Distance from the top of the viewport, when <code>placement</code> is <code>NotificationPlacement.TopLeft</code> or <code>NotificationPlacement.TopRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">custom close icon</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">Position of Notification, can be one of  <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement?</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">whether to enable RTL mode</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "duration",
        "Title": "Duration after which the notification box is closed",
        "Description": "<p><code>Duration</code> can be used to specify how long the notification stays open. After the duration time elapses, the notification closes automatically. If not specified, default value is 4.5 seconds. If you set the value to 0, the notification box will never close automatically.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</AntButton>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Duration = 0,\n            Description = \"This notification box will not close automatically\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "withbtn",
        "Title": "Custom close button",
        "Description": "<p>To customize the style or font of the close button.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    custom button\n</AntButton>\n\n@code{\n\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        RenderFragment btn = @<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"() => { _notice.Close(key); }\">\n                                confirm\n                            </AntButton>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"A function will be be called after the notification is closed (automatically after the \\\"duration\\\" time of manually).\",\n            Btn = btn \n        });\n    }\n}\n",
        "Type": "Demos.Notification.demo.WithBtn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "withicon",
        "Title": "Notification with icon",
        "Description": "<p>A notification box with a icon at the left side.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton OnClick=\"@OnSuccessClick\">\n    success\n</AntButton>   \n\n <AntButton OnClick=\"@OnInfoClick\">\n    info\n</AntButton>\n\n<AntButton OnClick=\"@OnWarningClick\">\n    warning\n</AntButton>\n\n<AntButton OnClick=\"@OnErrorClick\">\n    error\n</AntButton>\n\n@code{\n    private async Task NoticeWithIcon(NotificationType type)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            NotificationType = type\n        });\n    }\n\n    private async Task OnSuccessClick()\n    {\n        await NoticeWithIcon(NotificationType.Success);\n    }\n\n    private async Task OnInfoClick()\n    {\n        await NoticeWithIcon(NotificationType.Info);\n    }\n\n    private async Task OnWarningClick()\n    {\n        await NoticeWithIcon(NotificationType.Warning);\n    }\n\n    private async Task OnErrorClick()\n    {\n        await NoticeWithIcon(NotificationType.Error);\n    }\n\n}",
        "Type": "Demos.Notification.demo.WithIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage that close the notification box after 4.5s.</p>\n",
        "Code": "@inject NotificationService _notice\n \n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</AntButton>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customicon",
        "Title": "Customized Icon",
        "Description": "<p>The icon can be customized to any react node.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</AntButton>\n\n@code{\n\n    private async Task OnClick()\n    {\n        RenderFragment customIcon = @<AntIcon Type=\"smile\" Theme=\"outline\" Style=\"color:#108ee9;\"></AntIcon>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Icon = customIcon\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>A notification box can appear from the <code>topRight</code>, <code>bottomRight</code>, <code>bottomLeft</code> or <code>topLeft</code> of the viewport.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<div>\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnTopLeftClick\">\n        <AntIcon Type=\"Radius-Upleft\" Theme=\"Outline\"></AntIcon>\n        TopLeft\n    </AntButton>\n\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnTopRightClick\">\n        <AntIcon Type=\"Radius-Upright\" Theme=\"Outline\"></AntIcon>\n        TopRight\n    </AntButton>\n</div>\n\n<br/>\n\n<div>\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnBottomLeftClick\">\n        <AntIcon Type=\"Radius-Bottomleft\" Theme=\"Outline\"></AntIcon>\n        BottomLeft\n    </AntButton>\n\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnBottomRightClick\">\n        <AntIcon Type=\"Radius-Bottomright\" Theme=\"Outline\"></AntIcon>\n        BottomRight\n    </AntButton>\n</div>\n\n@code {\n    private async Task OpenWithPlacement(NotificationPlacement placement)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = $\"Notification {placement}\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Placement = placement\n        });\n    }\n\n    private async Task OnTopLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopLeft);\n    }\n\n    private async Task OnTopRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopRight);\n    }\n\n    private async Task OnBottomLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomLeft);\n    }\n\n    private async Task OnBottomRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomRight);\n    }\n}\n",
        "Type": "Demos.Notification.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "update",
        "Title": "Update Message Content",
        "Description": "<p>Update content with unique key.</p>\n",
        "Code": "@inject NotificationService _notice\n\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n        Open the notification box\n    </AntButton>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        var task = _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"description.\",\n        });\n        await Task.Delay(1000);\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"New Title\",\n            Key = key,\n            Description = \"New description.\",\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Update",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Avatar",
    "Type": "Data Display",
    "Desc": "<p>Avatars can be used to represent people or objects. It supports images, <code>Icon</code>s, or letters.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "dynamic",
        "Title": "Autoset Font Size",
        "Description": "<p>For letter type Avatar, when the letters are too long to display, the font size can be automatically adjusted according to the width of the Avatar.</p>\n",
        "Code": "<div>\n    <AntAvatar Style=\"@($\"background-color: {color}; vertical-align: middle;\")\" Size=\"large\">\n        @user\n    </AntAvatar>\n    <AntButton\n        Size=\"small\"\n        Style=\"margin:0 16px; vertical-align: middle;\"\n        OnClick=\"_=>changeUser()\"\n    >\n        Change\n    </AntButton>\n</div>\n\n@code\n{\n    private static string[] userList = {\"U\", \"Lucy\", \"Tom\", \"Edward\"};\n    private static string[] colorList = {\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"};\n\n    private string user { get; set; } = userList[0];\n    private string color { get; set; } = colorList[0];\n\n    private void changeUser()\n    {\n        var index = Array.IndexOf(userList, user);\n        user = index < userList.Length - 1 ? userList[index + 1] : userList[0];\n        color = index < colorList.Length - 1 ? colorList[index + 1] : colorList[0];\n    }\n}\n",
        "Type": "Demos.Avatar.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Three sizes and two shapes are available.</p>\n",
        "Code": "<div>\n    <div>\n        <AntAvatar Size=\"64\" Icon=\"user\" />\n        <AntAvatar Size=\"large\" Icon=\"user\" />\n        <AntAvatar Icon=\"user\" />\n        <AntAvatar Size=\"small\" Icon=\"user\" />\n    </div>\n    <div>\n        <AntAvatar Shape=\"square\" Size=\"64\" Icon=\"user\" />\n        <AntAvatar Shape=\"square\" Size=\"large\" Icon=\"user\" />\n        <AntAvatar Shape=\"square\" Icon=\"user\" />\n        <AntAvatar Shape=\"square\" Size=\"small\" Icon=\"user\" />\n    </div>\n</div>",
        "Type": "Demos.Avatar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "badge",
        "Title": "With Badge",
        "Description": "<p>Usually used for messages remind.</p>\n",
        "Code": "<div>\n    <span class=\"avatar-item\">\n        <AntBadge Count=\"1\">\n            <AntAvatar Shape=\"square\" Icon=\"user\" />\n        </AntBadge>\n    </span>\n    <span>\n        <AntBadge Dot>\n            <AntAvatar Shape=\"square\" Icon=\"user\"/>\n        </AntBadge>\n    </span>\n</div>",
        "Type": "Demos.Avatar.demo.Badge",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "type",
        "Title": "Type",
        "Description": "<p>Image, Icon and letter are supported, and the latter two kinds avatar can have custom colors and background colors.</p>\n",
        "Code": "<div>\n    <AntAvatar Icon=\"user\" />\n    <AntAvatar>U</AntAvatar>\n    <AntAvatar>USER</AntAvatar>\n    <AntAvatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <AntAvatar Style=\"color: #f56a00; background-color: #fde3cf; \">U</AntAvatar>\n    <AntAvatar Style=\"background-color: #87d068\" Icon=\"user\" />\n</div>",
        "Type": "Demos.Avatar.demo.Type",
        "Style": "",
        "Debug": false
      }
    ]
  }
]