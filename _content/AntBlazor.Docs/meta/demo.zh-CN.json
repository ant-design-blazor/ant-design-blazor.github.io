[
  {
    "Title": "Result",
    "SubTitle": "结果",
    "Type": "反馈",
    "Desc": "<p>用于反馈一系列操作任务的处理结果。</p>\n<h2>何时使用</h2>\n<p>当有重要操作需告知用户处理结果，且反馈内容较为复杂时使用。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title 文字</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle 文字</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>结果的状态,决定图标和颜色</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义 icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>操作区</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 2,
        "Name": "warning",
        "Title": "Warning",
        "Description": "<p>警告类型的结果。</p>\n",
        "Code": "<Result Status=\"warning\"\n        Title=@(\"There are some problems with your operation.\")\n        Extra=extra />\n@code\n{\n    RenderFragment extra = @<AntButton Type=\"primary\">Go Console</AntButton>;\n}",
        "Type": "Demos.Result.demo.Warning",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "403",
        "Title": "403",
        "Description": "<p>你没有此页面的访问权限。</p>\n",
        "Code": "<Result Status=\"403\"\n        Title=@(\"403\")\n        SubTitle=@(\"Sorry, you are not authorized to access this page.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra = @<AntButton Type=\"primary\">Back Home</AntButton>;\n}\n",
        "Type": "Demos.Result.demo._403",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "404",
        "Title": "404",
        "Description": "<p>此页面未找到。</p>\n",
        "Code": "<Result Status=\"404\"\n        Title=@(\"404\")\n        SubTitle=@(\"Sorry, the page you visited does not exist.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<AntButton Type=\"primary\">Back Home</AntButton>;\n}",
        "Type": "Demos.Result.demo._404",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "customicon",
        "Title": "自定义 icon",
        "Description": "<p>自定义 icon。</p>\n",
        "Code": "<Result\n    Icon=\"smile-outline\"\n    Title=@(\"Great, we have done all the operations!\")\n    Extra=\"extra\">\n</Result>\n\n@code\n{\n    RenderFragment extra = @<AntButton Type=\"primary\">Next</AntButton>;\n}\n",
        "Type": "Demos.Result.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "success",
        "Title": "Success",
        "Description": "<p>成功的结果。</p>\n",
        "Code": "<Result Status=\"success\"\n        Title=@(\"Successfully Purchased Cloud Server ECS!\")\n        SubTitle=@(\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\")\n        Extra=extra />\n\n@code\n{\n    RenderFragment extra =\n    @<Template>\n        <AntButton Type=\"primary\">Go Console</AntButton>\n        <AntButton>Buy Again</AntButton>\n    </Template>\n    ;\n}",
        "Type": "Demos.Result.demo.Success",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "error",
        "Title": "Error",
        "Description": "<p>复杂的错误反馈。</p>\n",
        "Code": "<Result\n    Status=\"error\"\n    Title=@(\"Submission Failed\")\n    SubTitle=@(\"Please check and modify the following information before resubmitting.\")\n    Extra=extra\n>\n<div class=\"desc\">\n    <AntParagraph>\n        <AntText Strong Style=\"font-size: 16px;\">\n            The content you submitted has the following error:\n        </AntText>\n    </AntParagraph>\n    <AntParagraph>\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account has been frozen\n        <a>Thaw immediately &gt;</a>\n    </AntParagraph>\n    <AntParagraph>\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account is not yet\n        eligible to apply <a>Apply Unlock &gt;</a>\n    </AntParagraph>\n</div>\n</Result>\n\n@code {\n    RenderFragment extra =\n        @<Template>\n            <AntButton Type=\"primary\">Go Console</AntButton>\n            <AntButton>Buy Again</AntButton>\n        </Template>\n        ;\n}\n",
        "Type": "Demos.Result.demo.Error",
        "Style": "\n[data-theme=\"dark\"] .site-result-demo-error-icon {\n  color: #a61d24;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "500",
        "Title": "500",
        "Description": "<p>服务器发生了错误。</p>\n",
        "Code": "<Result Status=\"500\"\n        Title=@(\"500\")\n        SubTitle=@(\"Sorry, something went wrong.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<AntButton Type=\"primary\">Back Home</AntButton>;\n}",
        "Type": "Demos.Result.demo._500",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "info",
        "Title": "Info",
        "Description": "<p>展示处理结果。</p>\n",
        "Code": "<Result\n    Title=@(\"Your operation has been executed\")\n    Extra=extra\n/>\n@code {\n\n    RenderFragment extra =\n        @<AntButton Type=\"primary\">\n            Go Console\n        </AntButton>;\n\n}\n",
        "Type": "Demos.Result.demo.Info",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Empty",
    "SubTitle": "空状态",
    "Type": "数据展示",
    "Desc": "<p>空状态时的展示占位图。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当目前没有数据时，用于显式的用户提示。</li>\n<li>初始化场景时的引导创建流程。</li>\n</ul>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "description",
        "Title": "无描述",
        "Description": "<p>无描述展示。</p>\n",
        "Code": "<Empty Description=\"@false\" />",
        "Type": "Demos.Empty.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的展示。</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "simple",
        "Title": "选择图片",
        "Description": "<p>可以通过设置 <code>image</code> 为 <code>Empty.PRESENTED_IMAGE_SIMPLE</code> 选择另一种风格的图片。</p>\n",
        "Code": "<Empty Image=\"Empty.PRESENTED_IMAGE_SIMPLE\" />",
        "Type": "Demos.Empty.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "configprovider",
        "Title": "全局化配置 TODO",
        "Description": "<p>自定义全局组件的 Empty 样式。</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.ConfigProvider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "customize",
        "Title": "自定义",
        "Description": "<p>自定义图片链接、图片大小、描述、附属内容。</p>\n",
        "Code": "<Empty Image='\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"'\n          ImageStyle='@(\"height: 60px\")'\n          Description=\"customDescription\">\n    <AntButton type=\"@AntButtonType.Primary\">Create Now</AntButton>\n</Empty>\n\n@code {\n    private RenderFragment customDescription =@<span>Customize <a>Description</a></span>;\n}",
        "Type": "Demos.Empty.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Spin",
    "SubTitle": "加载中",
    "Type": "反馈",
    "Desc": "<p>用于页面和区块的加载中状态。</p>\n<h2>何时使用</h2>\n<p>页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>延迟显示加载效果的时间（防止闪烁）</td>\n<td>number (毫秒)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>加载指示符</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>组件大小，可选值为 <code>small</code> <code>default</code> <code>large</code></td>\n<td>string</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>是否为加载中状态</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>当作为包裹元素时，可以自定义描述文案</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>包装器的类属性</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>静态方法</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>你可以自定义全局默认 Spin 的元素。</p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "inside",
        "Title": "容器",
        "Description": "<p>放入一个容器中。</p>\n",
        "Code": "<div class=\"example\">\n    <Spin />\n</div>\n\n<style>\n    .example {\n        text-align: center;\n        background: rgba(0, 0, 0, 0.05);\n        border-radius: 4px;\n        margin-bottom: 20px;\n        padding: 30px 50px;\n        margin: 20px 0;\n    }\n</style>",
        "Type": "Demos.Spin.demo.Inside",
        "Style": "\n  .example {\n    background: rgba(255,255,255,0.08);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "delayanddebounce",
        "Title": "延迟",
        "Description": "<p>延迟显示 loading 效果。当 spinning 状态在 <code>delay</code> 时间内结束，则不显示 loading 状态。</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading Delay=500>\n        <AntAlert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <AntSwitch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}\n",
        "Type": "Demos.Spin.demo.DelayAndDebounce",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tip",
        "Title": "自定义描述文案",
        "Description": "<p>自定义描述文案。</p>\n",
        "Code": "<Spin Tip=\"Loading...\">\n    <AntAlert\n        Message=\"Alert message title\"\n        Description=\"Further details about the context of this alert.\"\n        Type=\"info\"\n    />\n</Spin>",
        "Type": "Demos.Spin.demo.Tip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>一个简单的 loading 状态。</p>\n",
        "Code": "<Spin />",
        "Type": "Demos.Spin.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "各种大小",
        "Description": "<p>小的用于文本加载，默认用于卡片容器级加载，大的用于<strong>页面级</strong>加载。</p>\n",
        "Code": "<div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n</div>\n",
        "Type": "Demos.Spin.demo.Size",
        "Style": "\n.ant-spin.ant-spin-spinning {\n  display: inline-block;\n  margin-right: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "nested",
        "Title": "卡片加载中",
        "Description": "<p>可以直接把内容内嵌到 <code>Spin</code> 中，将现有容器变为加载状态。</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading>\n        <AntAlert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <AntSwitch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Spin.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "customindicator",
        "Title": "自定义指示符",
        "Description": "<p>使用自定义指示符。</p>\n",
        "Code": "<Spin Indicator=antIcon />\n@code{\n    RenderFragment antIcon = @<AntIcon Type=\"loading\" Theme=\"outline\" Style=\"font-size: 24px\" Spin />;\n}",
        "Type": "Demos.Spin.demo.CustomIndicator",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Space",
    "SubTitle": "间距",
    "Type": "布局",
    "Desc": "<p>设置组件之间的间距。</p>\n<h2>何时使用</h2>\n<p>避免组件紧贴在一起，拉开统一的空间。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>间距大小</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>间距方向</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 99,
        "Name": "debug",
        "Title": "多样的 Child",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<h3>Debug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Space.demo.Debug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "间距大小",
        "Description": "<p>间距预设大、中、小三种大小。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>middle</code> 分别把间距设为大、中间距。若不设置 <code>size</code>，则间距为小。</p>\n",
        "Code": "<AntRadioGroup @bind-Value=@size OnChange=\"e=> setSize(e)\">\n    <AntRadio Value=\"small\">Small</AntRadio>\n    <AntRadio Value=\"middle\">Middle</AntRadio>\n    <AntRadio Value=\"large\">Large</AntRadio>\n</AntRadioGroup>\n<br />\n<br />\n<Space Size=@size>\n    <SpaceItem>\n        <AntButton Type=\"primary\">Primary</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>Default</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"dashed\">Dashed</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"link\">Link</AntButton>\n    </SpaceItem>\n</Space>\n\n@code {\n    string size = \"small\";\n    void setSize(string value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}\n",
        "Type": "Demos.Space.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "vertical",
        "Title": "垂直间距",
        "Description": "<p>相邻组件垂直间距。</p>\n<p>可以设置 <code>width: 100%</code> 独占一行。</p>\n",
        "Code": "<Space Direction=\"vertical\">\n    <SpaceItem>\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </AntCard>\n    </SpaceItem>\n    <SpaceItem>\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </AntCard>\n    </SpaceItem>\n</Space>",
        "Type": "Demos.Space.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "base",
        "Title": "基本用法",
        "Description": "<p>相邻组件水平间距。</p>\n",
        "Code": "<Space>\n    <SpaceItem>\n        Space\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"primary\">Button</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>\n            <AntIcon Type=\"upload\" Theme=\"outline\" /> Click to Upload\n        </AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>Confirm</AntButton>\n    </SpaceItem>\n</Space>\n",
        "Type": "Demos.Space.demo.Base",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customize",
        "Title": "自定义尺寸",
        "Description": "<p>自定义间距大小。</p>\n",
        "Code": "\n<AntSlider Value=size OnChange=\"v=>setSize(v.AsT0)\" />\n<br />\n<br />\n<Space Size=\"@($\"{size}\")\">\n    <SpaceItem>\n        <AntButton Type=\"primary\">Primary</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton>Default</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"dashed\">Dashed</AntButton>\n    </SpaceItem>\n    <SpaceItem>\n        <AntButton Type=\"link\">Link</AntButton>\n    </SpaceItem>\n</Space>\n\n@code{\n    double size = 8;\n\n    void setSize(double value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}",
        "Type": "Demos.Space.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Progress",
    "SubTitle": "进度条",
    "Type": "反馈",
    "Desc": "<p>展示操作的当前进度。</p>\n<h2>何时使用</h2>\n<p>在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。</p>\n<ul>\n<li>当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过 2 秒时；</li>\n<li>当需要显示一个操作完成的百分比时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>各类型共用的属性。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>类型，可选 <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>内容的模板函数</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>百分比</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>是否显示进度数值或状态图标</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>状态，可选：<code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(仅限 line)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>-</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>进度条的色彩</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>已完成的分段百分比</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>未完成的分段的颜色</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>进度条线的宽度，单位 px</td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>进度条的色彩，传入 object 时为渐变</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>进度条总共步数</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>圆形进度条画布宽度，单位 px</td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>圆形进度条线的宽度，单位是进度条画布宽度的百分比</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>圆形进度条线的色彩，传入 object 时为渐变</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>仪表盘进度条画布宽度，单位 px</td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>仪表盘进度条线的宽度，单位是进度条画布宽度的百分比</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>仪表盘进度条缺口角度，可取值 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>仪表盘进度条缺口位置</td>\n<td><code>top</code> | <code>bottom</code> | <code>left</code> | <code>right</code></td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "circledynamic",
        "Title": "进度圈动态展示",
        "Description": "<p>会动的进度条才是好进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent Type=ProgressType.Circle />\n    <AntButtonGroup>\n        <AntButton OnClick=Decline Icon=Minus />\n        <AntButton OnClick=Increase Icon=Plus />\n    </AntButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.CircleDynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "dynamic",
        "Title": "动态展示",
        "Description": "<p>会动的进度条才是好进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent/>\n    <AntButtonGroup>\n        <AntButton OnClick=Decline Icon=Minus />\n        <AntButton OnClick=Increase Icon=Plus />\n    </AntButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "steps",
        "Title": "步骤进度条",
        "Description": "<p>带步骤的进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=50 Steps=3 StrokeColor=_color />\n    <br />\n    <Progress Percent=30 Steps=5 StrokeColor=_color />\n    <br />\n    <Progress Percent=100 Steps=5 Size=ProgressSize.Small StrokeColor=_color />\n</div>\n\n@code{\n    private string _color = \"#1890ff\";\n}",
        "Type": "Demos.Progress.demo.Steps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "circlemini",
        "Title": "小型进度圈",
        "Description": "<p>小一号的圈形进度。</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Size=ProgressSize.Small />\n    <Progress Type=ProgressType.Circle Percent=70 Size=ProgressSize.Small Status=\"ProgressStatus.Exception\" />\n    <Progress Type=ProgressType.Circle Percent=100 Size=ProgressSize.Small />\n</div>",
        "Type": "Demos.Progress.demo.CircleMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "dashboard",
        "Title": "仪表盘",
        "Description": "<p>通过设置 <code>type=dashboard</code>，可以很方便地实现仪表盘样式的进度条。</p>\n",
        "Code": "<Progress Type=ProgressType.Dashboard Percent=75 />\n<Progress Type=\"ProgressType.Dashboard\" Percent=75 GapDegree=30 />",
        "Type": "Demos.Progress.demo.Dashboard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "linemini",
        "Title": "小型进度条",
        "Description": "<p>适合放在较狭窄的区域内。</p>\n",
        "Code": "<div style=\"width: 170px;\">\n    <Progress Percent=\"30\" Size=\"@ProgressSize.Small\" />\n    <Progress Percent=\"50\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Active\" />\n    <Progress Percent=\"70\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Exception\" />\n    <Progress Percent=\"100\" Size=\"@ProgressSize.Small\" />\n</div>",
        "Type": "Demos.Progress.demo.LineMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "gradientline",
        "Title": "自定义进度条渐变色",
        "Description": "<p><code>linear-gradient</code> 的封装。推荐只传两种颜色。</p>\n",
        "Code": "<div>\n    <Progress StrokeColor=_gradients Percent=99.9 />\n    <Progress StrokeColor=_gradients Percent=99.9 Status=ProgressStatus.Active />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=90 />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=100 />\n</div>\n\n@code{\n    private Dictionary<int, string> _gradients = new Dictionary<int, string>()\n{\n        { 0,\"#108ee9\"},\n        { 100,\"#87d068\"}\n    };\n}",
        "Type": "Demos.Progress.demo.GradientLine",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "segment",
        "Title": "分段进度条",
        "Description": "<p>标准的进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=60 SuccessPercent=30 />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Circle />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Dashboard />\n</div>",
        "Type": "Demos.Progress.demo.Segment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "format",
        "Title": "自定义文字格式",
        "Description": "<p><code>format</code> 属性指定格式。</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Format=_fortmat1 />\n    <Progress Type=ProgressType.Circle Percent=100 Format=_fortmat2 />\n\n</div>\n\n@code{\n    private Func<double, string> _fortmat1 = (p) => $\"{p} Days\";\n    private Func<double, string> _fortmat2 = (p) => \"Done\";\n}",
        "Type": "Demos.Progress.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "line",
        "Title": "进度条",
        "Description": "<p>标准的进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=30 />\n    <Progress Percent=50 Status=\"@ProgressStatus.Active\" />\n    <Progress Percent=70 Status=\"@ProgressStatus.Exception\" />\n    <Progress Percent=100 />\n    <Progress Percent=50 ShowInfo=\"false\" />\n</div>",
        "Type": "Demos.Progress.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "linecap",
        "Title": "圆角/方角边缘",
        "Description": "<p>通过设定 <code>strokeLinecap=&quot;square|round&quot;</code> 可以调整进度条边缘的形状。</p>\n",
        "Code": "<div>\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Circle Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Dashboard Percent=75 />\n</div>",
        "Type": "Demos.Progress.demo.Linecap",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "circle",
        "Title": "进度圈",
        "Description": "<p>圈形的进度。</p>\n",
        "Code": "<style>\n    .ant-progress-circle-wrap,\n    .ant-progress-line-wrap {\n        margin-right: 8px;\n        margin-bottom: 5px;\n    }\n</style>\n\n<div>\n    <Progress Type=\"ProgressType.Circle\" Percent=75 />\n    <Progress Type=\"ProgressType.Circle\" Percent=70 Status=\"ProgressStatus.Exception\" />\n    <Progress Type=\"ProgressType.Circle\" Percent=100 />\n</div>",
        "Type": "Demos.Progress.demo.Circle",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Dropdown",
    "SubTitle": "下拉菜单",
    "Type": "导航",
    "Desc": "<p>向下弹出的列表。</p>\n<h2>何时使用</h2>\n<p>当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "item",
        "Title": "其他元素",
        "Description": "<p>分割线和不可用菜单项。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"0\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem @key=\"1\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            --- TODO: Need MenuDivider ---\n            <MenuItem @key=\"3\" disabled>\n                3rd menu item（disabled）\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Item",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的下拉菜单。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "submenu",
        "Title": "多级菜单",
        "Description": "<p>传入的菜单里有多个层级。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItemGroup Title=@(\"Group title\")>\n                <MenuItem>1st menu item</MenuItem>\n                <MenuItem>2nd menu item</MenuItem>\n            </MenuItemGroup>\n            <SubMenu Title=@(\"sub menu\")>\n                <MenuItem>3rd menu item</MenuItem>\n                <MenuItem>4th menu item</MenuItem>\n            </SubMenu>\n            <SubMenu Title=@(\"disabled sub menu\") Disabled>\n                <MenuItem>5d menu item</MenuItem>\n                <MenuItem>6th menu item</MenuItem>\n            </SubMenu>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Cascading menu <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.SubMenuDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "contextmenu",
        "Title": "右键菜单 TODO",
        "Description": "<p>默认是移入触发菜单，可以点击鼠标右键触发。 TODO</p>\n",
        "Code": "<Dropdown Trigger=\"new TriggerType[] { TriggerType.ContextMenu }\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <div style=\"text-align: center; width: 200px; height: 200px; line-height: 200px;background: #f7f7f7;color: #777;\">\n            Right Click on here (TODO)\n        </div>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.ContextMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "弹出位置",
        "Description": "<p>支持 6 个弹出位置。</p>\n",
        "Code": "<Dropdown Placement=\"@PlacementType.BottomLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>BottomLeft</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>BottomCenter</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>BottomRight</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>TopLeft</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>TopCenter</AntButton>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>TopRight</AntButton>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n}",
        "Type": "Demos.Dropdown.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "trigger",
        "Title": "触发方式",
        "Description": "<p>默认是移入触发菜单，可以点击触发。</p>\n",
        "Code": "<Dropdown Trigger=\"@(new TriggerType[] { TriggerType.Click })\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Click me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Trigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "overlayvisible",
        "Title": "菜单隐藏方式",
        "Description": "<p>默认是点击关闭菜单，可以关闭此功能。</p>\n",
        "Code": "<Dropdown OnVisibleChange=\"OnVisibleChange\" Visible=\"_visible\">\n    <Overlay>\n        <Menu OnMenuItemClicked=\"HandleMenuClick\">\n            <MenuItem Id=\"1\">Clicking me will not close the menu.</MenuItem>\n            <MenuItem Id=\"2\">Clicking me will not close the menu also.</MenuItem>\n            <MenuItem Id=\"3\">Clicking me will close the menu.</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private bool _visible = false;\n\n    private void HandleMenuClick(MenuItem item)\n    {\n        if (item.Id == \"3\")\n        {\n            _visible = false;\n        }\n    }\n\n    private void OnVisibleChange(bool visible)\n    {\n        _visible = visible;\n    }\n}",
        "Type": "Demos.Dropdown.demo.OverlayVisible",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "event",
        "Title": "触发事件",
        "Description": "<p>点击菜单项后会触发事件，用户可以通过相应的菜单项 key 进行不同的操作。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"1\">1st menu item</MenuItem>\n            <MenuItem @key=\"2\">2nd memu item</MenuItem>\n            <MenuItem @key=\"3\">3rd menu item</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me, Click menu item <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "dropdownbutton",
        "Title": "带下拉框的按钮",
        "Description": "<p>左边是按钮，右边是额外的相关功能菜单。可设置 <code>icon</code> 属性来修改右边的图标。</p>\n",
        "Code": "<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }'>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton Icon=\"user\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }' Disabled=\"@true\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton ButtonsRender=\"ButtonsRender\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        TODO: With ToolTip\n    </ChildContent>\n</DropdownButton>\n<Dropdown>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <AntButton>Button <AntIcon Type=\"down\" /></AntButton>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n\n    \n    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)\n    {\n        return @<Template>\n            <span>@leftButton</span>@rightButton\n        </Template>;\n    }\n}",
        "Type": "Demos.Dropdown.demo.DropdownButtonDemo",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "TimePicker",
    "SubTitle": "时间选择框",
    "Type": "数据录入",
    "Desc": "<p>输入或选择时间的控件。</p>\n<h2>何时使用</h2>\n<hr />\n<p>当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。</p>\n<p>时间选择器完成度较低，暂时只实现了以下功能：\nautoFocus、bordered、className、defaultValue、\ndisabled、format、inputReadOnly、open、placeholder、\npopupStyle、renderExtraFooter、value、onChange、onOpenChange</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 4,
        "Name": "hidecolumn",
        "Title": "选择时分",
        "Description": "<p>TimePicker 浮层中的列会随着 <code>format</code> 变化，当略去 <code>format</code> 中的某部分时，浮层中对应的列也会消失。</p>\n",
        "Code": "<TimePicker Format='@(\"hh:mm\")' />\n",
        "Type": "Demos.TimePicker.demo.HideColumn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>禁用时间选择。</p>\n",
        "Code": "<TimePicker Disabled=\"@true\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />",
        "Type": "Demos.TimePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "rangepicker",
        "Title": "范围选择器",
        "Description": "<p>通过 <code>RangePicker</code> 使用时间范围选择器。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>点击 TimePicker，然后可以在浮层中选择或者输入某一时间。</p>\n",
        "Code": "<TimePicker />\n",
        "Type": "Demos.TimePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "value",
        "Title": "受控组件",
        "Description": "<p>value 和 onChange 需要配合使用。</p>\n",
        "Code": "<TimePicker Value=\"_value\" OnChange=\"OnChange\" />\n\n@code\n{\n    private DateTime _value = DateTime.Now;\n\n    private void OnChange(DateTime value, string dateString)\n    {\n        _value = value;\n    }\n}",
        "Type": "Demos.TimePicker.demo.Value",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的输入框，大的用在表单中，中的为默认。</p>\n",
        "Code": "<TimePicker Size=\"@DatePickerSize.Large\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Size=\"@DatePickerSize.Small\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n",
        "Type": "Demos.TimePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "addon",
        "Title": "附加内容",
        "Description": "<p>在 TimePicker 选择框底部显示自定义的内容。</p>\n",
        "Code": "<TimePicker RenderExtraFooter=\"ExtraFooter\" />\n\n@code {\n    private RenderFragment ExtraFooter =@<AntButton Type=\"@AntButtonType.Primary\">Ok</AntButton>;\n}",
        "Type": "Demos.TimePicker.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "hours12",
        "Title": "12 小时制",
        "Description": "<p>12 小时制的时间选择器，默认的 format 为 <code>h:mm:ss a</code>。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.Hours12",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "intervaloptions",
        "Title": "步长选项",
        "Description": "<p>可以使用 <code>hourStep</code> <code>minuteStep</code> <code>secondStep</code> 按步长展示可选的时分秒。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.IntervalOptions",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Alert",
    "SubTitle": "警告提示",
    "Type": "反馈",
    "Desc": "<p>警告提示，展现需要关注的信息。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当某个页面需要向用户显示警告的信息时。</li>\n<li>非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 5,
        "Name": "closetext",
        "Title": "自定义关闭",
        "Description": "<p>可以自定义关闭，自定义的内容会替换原先的关闭按钮。</p>\n",
        "Code": "<AntAlert Message=\"Info Text\" Type=\"@AntAlertType.Info\" CloseText=\"Close Now\"  Closable/>",
        "Type": "Demos.Alert.demo.CloseText",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "description",
        "Title": "含有辅助性文字介绍",
        "Description": "<p>含有辅助性文字介绍的警告提示。</p>\n",
        "Code": "<AntAlert Message=\"Success Text\"\n          Description=\"Success Description Success Description Success Description\"\n          Type=\"@AntAlertType.Success\" />\n\n<AntAlert Message=\"Info Text\"\n          Description=\"Info Description Info Description Info Description Info Description\"\n          Type=\"@AntAlertType.Info\" />\n\n<AntAlert Message=\"Warning Text\"\n          Description=\"Warning Description Warning Description Warning Description Warning Description\"\n          Type=\"@AntAlertType.Warning\" />\n\n<AntAlert Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description\"\n          Type=\"@AntAlertType.Error\" />",
        "Type": "Demos.Alert.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，适用于简短的警告提示。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Success\" Message=\"Success Text\" />\n",
        "Type": "Demos.Alert.demo.Basic",
        "Style": "\n.code-box-demo .ant-alert {\n  margin-bottom: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "style",
        "Title": "四种样式",
        "Description": "<p>共有四种样式 <code>success</code>、<code>info</code>、<code>warning</code>、<code>error</code>。</p>\n",
        "Code": "<AntAlert Message=\"Success Text\" Type=\"@AntAlertType.Success\" />\n\n<AntAlert Message=\"Info Text\" Type=\"@AntAlertType.Info\" />\n\n<AntAlert Message=\"Warning Text\" Type=\"@AntAlertType.Warning\" />\n\n<AntAlert Message=\"Error Text\" Type=\"@AntAlertType.Error\" />",
        "Type": "Demos.Alert.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "图标",
        "Description": "<p>可口的图标让信息类型更加醒目。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Success\"\n          Message=\"Success Tips\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Info\"\n          Message=\"Informational Notes\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Success\"\n          Message=\"Success Tips\"\n          Description=\"Detailed description and advice about successful copywriting.\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Info\"\n          Message=\"Informational Notes\"\n          Description=\"Additional description and information about copywriting.\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning\"\n          Description=\"This is a warning notice about copywriting.\"\n          ShowIcon />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error\"\n          Description=\"This is an error message about copywriting.\"\n          ShowIcon />",
        "Type": "Demos.Alert.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "closable",
        "Title": "可关闭的警告提示",
        "Description": "<p>显示关闭按钮，点击可关闭警告提示。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n@code{\n    private void LogSomething()\n    {\n        Console.WriteLine(\"Logging Something...\");\n    }\n}",
        "Type": "Demos.Alert.demo.Closable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "banner",
        "Title": "顶部公告",
        "Description": "<p>页面顶部通告形式，默认有图标且 <code>nzType</code> 为 <code>'warning'</code>。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text\"\n          Banner\n          Closable />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text\"\n          Description=\"Very long warning text warning text text text text text text text\"\n          Banner\n          Closable />\n\n<AntAlert Type=\"@AntAlertType.Warning\"\n          Message=\"Warning Text Without Icon\"\n          Banner\n          ShowIcon=\"false\" />\n\n<AntAlert Type=\"@AntAlertType.Error\"\n          Message=\"Error Text\"\n          Banner />",
        "Type": "Demos.Alert.demo.Banner",
        "Style": "",
        "Iframe": 250,
        "Debug": false
      }
    ]
  },
  {
    "Title": "DatePicker",
    "SubTitle": "日期选择框",
    "Type": "数据录入",
    "Desc": "<p>输入或选择日期的控件。</p>\n<h2>何时使用</h2>\n<p>当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。</p>\n<p>已实现DatePicker组件：支持date、decade、year、month、quarter、week模式\n已实现：MonthPicker、RangePicker、WeekPicker、YearPicker、QuarterPicker（对应DatePicker的各种模式）</p>\n<p>未实现的通用属性：AllowClear、GetPopupContainer、Locale、Mode(Mode为3.0妥协的功能，不打算支持)\n未实现的DatePicker属性：showTime.defaultValue、onOk\n未实现的RangePicker属性：allowEmpty、ranges、separator、onCalendarChange\n未实现的功能：RangePicker的操作模式和Ant Design不完全一致</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "无边框",
        "Description": "<p>无边框样式。</p>\n",
        "Code": "<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Year\" />\n<br />",
        "Type": "Demos.DatePicker.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>选择框的不可用状态。你也可以通过数组单独禁用 RangePicker 的其中一项（TODO）。</p>\n",
        "Code": "<DatePicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<MonthPicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<RangePicker Disabled=\"@true\" DefaultValue=\"new DateTime[] { new DateTime(2015, 6, 6), new DateTime(2015, 6, 6) }\" />\n<br />\n<RangePicker Disabled=\"@true\" \n                DefaultValue=\"new DateTime[] { new DateTime(2019, 9, 3), new DateTime(2019, 11, 12) }\" />",
        "Type": "Demos.DatePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "rangepicker",
        "Title": "范围选择器",
        "Description": "<p>通过设置 <code>picker</code> 属性，指定范围选择器类型。</p>\n",
        "Code": "<RangePicker />\n<br />\n<RangePicker ShowTime=\"@true\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Year\" />",
        "Type": "Demos.DatePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，在浮层中可以选择或者输入日期。</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Year\" />\n<br />",
        "Type": "Demos.DatePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "extrafooter",
        "Title": "额外的页脚",
        "Description": "<p>在浮层中加入额外的页脚，以满足某些定制信息的需求。</p>\n",
        "Code": "<DatePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<DatePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" RenderExtraFooter=\"extraFooter\" />\n\n@code {\n    private RenderFragment extraFooter =@<span>extra footer</span>;\n}\n",
        "Type": "Demos.DatePicker.demo.ExtraFooter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的输入框，若不设置，则为 <code>default</code>。</p>\n",
        "Code": "<AntRadioGroup @bind-Value=\"@datePickerSize\">\n    <AntRadio RadioButton Value=\"@DatePickerSize.Large\">Large</AntRadio>\n    <AntRadio RadioButton Value=\"@DatePickerSize.Default\">Default</AntRadio>\n    <AntRadio RadioButton Value=\"@DatePickerSize.Small\">Small</AntRadio>\n</AntRadioGroup>\n<br />\n<DatePicker Size=\"@datePickerSize\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" Size=\"@datePickerSize\" />\n<br />\n<RangePicker Size=\"@datePickerSize\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" Size=\"@datePickerSize\" />\n\n@code {\n    private string datePickerSize = DatePickerSize.Default;\n}",
        "Type": "Demos.DatePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "disableddate",
        "Title": "不可选择日期和时间",
        "Description": "<p>可用 <code>disabledDate</code> 和 <code>disabledTime</code> 分别禁止选择部分日期和时间，其中 <code>disabledTime</code> 需要和 <code>showTime</code> 一起使用。</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 0, 0, 0)\"\n               Format=\"yyyy-MM-dd HH:mm:ss\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n               DisabledTime=\"date => GetDisabledTime(date)\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\"\n               DisabledDate=\"date => date <= DateTime.Now\" />\n<br />\n<RangePicker DisabledDate=\"date => date <= DateTime.Now\" />\n<br />\n<RangePicker ShowTime='@true'\n                DisabledDate=\"date => date <= DateTime.Now\" />\n\n@code {\n    private DatePickerDisabledTime GetDisabledTime(DateTime date)\n    {\n        int[] timeRange = new int[60];\n        for (int i = 0; i < timeRange.Length; i++)\n        {\n            timeRange[i] = i;\n        }\n\n        return new DatePickerDisabledTime(timeRange[4..15], timeRange[20..55], timeRange[3..19]);\n    }\n}",
        "Type": "Demos.DatePicker.demo.DisabledDate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "presettedranges",
        "Title": "预设范围 TODO",
        "Description": "<p>可以预设常用的日期范围以提高用户体验。 TODO</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.PresettedRanges",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "format",
        "Title": "日期格式",
        "Description": "<p>使用 <code>format</code> 属性，可以自定义日期显示格式。</p>\n",
        "Code": "<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM/dd\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"dd/MM/yyyy\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime[] { new DateTime(2015, 1, 1), new DateTime(2015, 1, 1) }\" Format=\"yyyy/MM/dd\" />",
        "Type": "Demos.DatePicker.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "selectinrange",
        "Title": "选择不超过七天的范围 TODO",
        "Description": "<p>这里举例如何用 <code>onCalendarChange</code> 和 <code>disabledDate</code> 来限制动态的日期区间选择。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.SelectInRange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "daterender",
        "Title": "定制日期单元格",
        "Description": "<p>使用 <code>dateRender</code> 可以自定义日期单元格的内容和样式。</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" /><br />\n<RangePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" />\n\n@code\n{\n    private Func<DateTime, DateTime, RenderFragment> CustomRender = (currentViewDate, today) =>\n    {\n        string style = \"\";\n        if (currentViewDate.Day == 1)\n        {\n            style = \"border: 1px solid #1890ff; borderRadius: 50%\";\n        }\n\n        return @<div class=\"ant-picker-cell-inner\" style=\"@style\">\n            @currentViewDate.Day\n        </div>;\n    };\n}",
        "Type": "Demos.DatePicker.demo.DateRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "time",
        "Title": "日期时间选择",
        "Description": "<p>增加选择时间功能，当 <code>showTime</code> 为一个对象时，其属性会传递给内建的 <code>TimePicker</code>。</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\" OnChange=\"OnChange\" />\n<br />\n<RangePicker ShowTime='@(\"HH:mm\")' OnChange=\"OnChange\" />\n\n@code\n{\n    private void OnChange(DateTime value, string dateString)\n    {\n        Console.WriteLine($\"Selected Time: {value}\");\n        Console.WriteLine($\"Formatted Selected Time: {dateString}\");\n    }\n}",
        "Type": "Demos.DatePicker.demo.Time",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Button",
    "SubTitle": "按钮",
    "Type": "通用",
    "Desc": "<p>按钮用于开始一个即时操作。</p>\n<h2>何时使用</h2>\n<p>标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。</p>\n<p>在 Ant Design 中，我们有四种按钮。</p>\n<ul>\n<li>主按钮：用于主行动点，一个操作区域只能有一个主按钮。</li>\n<li>默认按钮：用于没有主次之分的一组行动点。</li>\n<li>虚线按钮：常用于添加操作。</li>\n<li>链接按钮：用于次要或外链的行动点。</li>\n</ul>\n<p>以及四种状态属性与上面配合使用。</p>\n<ul>\n<li>危险：删除/移动/修改权限等危险操作，一般需要二次确认。</li>\n<li>幽灵：用于背景色比较复杂的地方，常用在首页/产品页等展示场景。</li>\n<li>禁用：行动点不可用的时候，一般需要文案解释。</li>\n<li>加载中：用于异步操作等待反馈的时候，也可以避免多次提交。</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 0,
        "Name": "block",
        "Title": "Block 按钮",
        "Description": "<p><code>block</code>属性将使按钮适合其父宽度。</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\" Block>Primary</AntButton>\n    <AntButton Block>Default</AntButton>\n    <AntButton Type=\"dashed\" Block>Dashed</AntButton>\n    <AntButton Type=\"link\" Block>Link</AntButton>\n</div>",
        "Type": "Demos.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "不可用状态",
        "Description": "<p>添加 <code>disabled</code> 属性即可让按钮处于不可用状态，同时按钮样式也会改变。</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\">Primary</AntButton>\n    <AntButton Type=\"primary\" Disabled>\n        Primary(disabled)\n    </AntButton>\n    <br />\n    <AntButton>Default</AntButton>\n    <AntButton Disabled>Default(disabled)</AntButton>\n    <br />\n    <AntButton Type=\"dashed\">Dashed</AntButton>\n    <AntButton Type=\"dashed\" Disabled>\n        Dashed(disabled)\n    </AntButton>\n    <br />\n    <AntButton Type=\"link\">Link</AntButton>\n    <AntButton Type=\"link\" Disabled>\n        Link(disabled)\n    </AntButton>\n    <br />\n    <AntButton Type=\"link\" Danger>\n        Danger Link\n    </AntButton>\n    <AntButton Type=\"link\" Danger Disabled>\n        Danger Link(disabled)\n    </AntButton>\n    <br />\n    <AntButton Danger>Danger Default</AntButton>\n    <AntButton Danger Disabled>\n        Danger Default(disabled)\n    </AntButton>\n    <div class=\"site-AntButton-Ghost-wrapper\">\n        <AntButton Ghost>Ghost</AntButton>\n        <AntButton Ghost Disabled>\n            Ghost(disabled)\n        </AntButton>\n    </div>\n</div>",
        "Type": "Demos.Button.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "ghost",
        "Title": "幽灵按钮",
        "Description": "<p>幽灵按钮将按钮的内容反色，背景变为透明，常用在有色背景上。</p>\n",
        "Code": "<div class=\"site-AntButton-Ghost-wrapper\">\n    <AntButton Type=\"primary\" Ghost>\n        Primary\n    </AntButton>\n    <AntButton Ghost>Default</AntButton>\n    <AntButton Type=\"dashed\" Ghost>\n        link\n    </AntButton>\n    <AntButton Type=\"link\" Ghost>\n        link\n    </AntButton>\n</div>",
        "Type": "Demos.Button.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "按钮类型",
        "Description": "<p>按钮有四种类型：主按钮、次按钮、虚线按钮和链接按钮。主按钮在同一个操作区域最多出现一次。</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\">Primary</AntButton>\n    <AntButton>Default</AntButton>\n    <AntButton Type=\"dashed\">Dashed</AntButton>\n    <AntButton Type=\"danger\">Danger</AntButton>\n    <AntButton Type=\"link\">Link</AntButton>\n</div>",
        "Type": "Demos.Button.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "multiple",
        "Title": "多个按钮组合",
        "Description": "<p>按钮组合使用时，推荐使用 1 个主操作 + n 个次操作，3 个以上操作时把更多操作放到 <code>Dropdown.Button</code> 中组合使用。</p>\n",
        "Code": "Not implement yet :(",
        "Type": "Demos.Button.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "按钮尺寸",
        "Description": "<p>按钮有大、中、小三种尺寸。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>small</code> 分别把按钮设为大、小尺寸。若不设置 <code>size</code>，则尺寸为中。</p>\n",
        "Code": "<div>\n    <AntRadioGroup @bind-Value=\"@size\">\n        <AntRadio RadioButton Value=\"large\">Large</AntRadio>\n        <AntRadio RadioButton Value=\"default\">Default</AntRadio>\n        <AntRadio RadioButton Value=\"small\">Small</AntRadio>\n    </AntRadioGroup>\n    <br />\n    <br />\n    <AntButton Type=\"primary\" Size=@size>\n        Primary\n    </AntButton>\n    <AntButton Size=\"@size\">Default</AntButton>\n    <AntButton Type=\"dashed\" Size=@size>\n        Dashed\n    </AntButton>\n    <br />\n    <AntButton Type=\"link\" Size=@size>\n        Link\n    </AntButton>\n    <br />\n    <AntButton Type=\"primary\" Icon=\"download\" Size=@size />\n    <AntButton Type=\"primary\" Shape=\"circle\" Icon=\"download\" Size=@size />\n    <AntButton Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size />\n    <AntButton Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size>\n    Download\n    </AntButton>\n    <AntButton Type=\"primary\" Icon=\"download\" Size=@size>\n    Download\n    </AntButton>\n</div>\n\n@code\n{\n    string size = \"large\";\n}\n",
        "Type": "Demos.Button.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "icon",
        "Title": "图标按钮",
        "Description": "<p>当需要在 <code>Button</code> 内嵌入 <code>Icon</code> 时，可以设置 <code>icon</code> 属性，或者直接在 <code>Button</code> 内使用 <code>Icon</code> 组件。</p>\n<p>如果想控制 <code>Icon</code> 具体的位置，只能直接使用 <code>Icon</code> 组件，而非 <code>icon</code> 属性。</p>\n",
        "Code": "<div>\n    @*<Tooltip title=\"search\">\n        <AntButton Type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Type=\"primary\" Shape=\"circle\">\n        A\n    </AntButton>\n    <AntButton Type=\"primary\" Icon=\"search\">\n    Search\n    </AntButton>\n    @*<Tooltip title=\"search\">\n        <AntButton shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Icon=\"search\">Search</AntButton>\n    <br />\n    @*<Tooltip title=\"search\">\n        <AntButton shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Icon=\"search\">Search</AntButton>\n    @*<Tooltip title=\"search\">\n        <AntButton Type=\"dashed\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <AntButton Type=\"dashed\" Icon=\"search\">\n    Search\n    </AntButton>\n</div>",
        "Type": "Demos.Button.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "danger",
        "Title": "危险按钮",
        "Description": "<p>在 4.0 之后，危险成为一种按钮属性而不是按钮类型。</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\" Danger>\n        Primary\n    </AntButton>\n    <AntButton Danger>Default</AntButton>\n    <AntButton Type=\"dashed\" Danger>\n        link\n    </AntButton>\n    <AntButton Type=\"link\" Danger>\n        link\n    </AntButton>\n</div>",
        "Type": "Demos.Button.demo.Danger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "legacygroup",
        "Title": "废弃的 Block 组",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<AntButtonGroup Size=\"small\">\n    <AntButton Type=\"primary\">Button 1</AntButton>\n    <AntButton Type=\"primary\">Button 2</AntButton>\n</AntButtonGroup>\n<AntButtonGroup>\n    <AntButton Type=\"primary\">Button 1</AntButton>\n    <AntButton Type=\"primary\">Button 2</AntButton>\n</AntButtonGroup>\n<AntButtonGroup Size=\"large\">\n    <AntButton Type=\"primary\">Button 1</AntButton>\n    <AntButton Type=\"primary\">Button 2</AntButton>\n</AntButtonGroup>",
        "Type": "Demos.Button.demo.LegacyGroup",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "加载中状态",
        "Description": "<p>添加 <code>loading</code> 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。</p>\n",
        "Code": "@using System.Timers\n\n<div>\n    <AntButton Type=\"primary\" Loading>\n        Loading\n    </AntButton>\n    <AntButton Type=\"primary\" Size=\"small\" Loading>\n        Loading\n    </AntButton>\n    <br />\n    <AntButton Type=\"primary\" Loading=\"loading\" OnClick=enterLoading>\n        Click me!\n    </AntButton>\n    <AntButton\n        Type=\"primary\"\n        Icon=\"poweroff\"\n    Loading=\"iconLoading\"\n    OnClick=\"enterIconLoading\"\n    >\n    Click me!\n    </AntButton>\n</div>\n\n@code\n{\n    bool loading = false;\n    bool iconLoading = false;\n\n    private void enterLoading()\n    {\n        loading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            loading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n\n    private void enterIconLoading()\n    {\n        iconLoading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            iconLoading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n}\n",
        "Type": "Demos.Button.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Drawer",
    "SubTitle": "抽屉",
    "Type": "反馈",
    "Desc": "<p>屏幕边缘滑出的浮层面板。</p>\n<h2>何时使用</h2>\n<p>抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到到原任务。</p>\n<ul>\n<li>当需要一个附加的面板来控制父窗体内容，这个面板在需要时呼出。比如，控制界面展示样式，往界面中添加内容。</li>\n<li>当需要在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>标题</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>可用于设置 Drawer 内容部分的样式</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>是否显示右上角的关闭按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>抽屉元素之间的子组件</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>点击蒙层是否允许关闭</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>遮罩样式</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>抽屉的方向,可选值为 <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>对话框外层容器的类名</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>宽度</td>\n<td>string|int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>Height</td>\n<td>高度, 在 placement 为 top 或 bottom 时使用</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>设置 Drawer 的 z-index</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>X轴方向的偏移量</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>Y轴方向的偏移量</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Drawer 是否可见</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>是否支持键盘 esc 关闭</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>点击遮罩层或右上角叉或取消按钮的回调</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>抽屉显示之前回调事件</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "userprofile",
        "Title": "信息预览抽屉",
        "Description": "<p>需要快速预览对象概要时使用，点击遮罩区关闭。</p>\n",
        "Code": "<div>\n        <AntList>\n            <ChildContent>\n                @foreach (var item in datasource)\n                {\n                    <AntListItem>\n                        <AntListItemMeta Avatar=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n                                         Description=\"Progresser XTech\">\n                            <Title>\n                                @item.Title\n                            </Title>                            \n                      \n                        </AntListItemMeta>\n\n                        <AntButton Type=\"@AntButtonType.Link\" OnClick=\"(e)=>open(e, item.Title)\">View Profile</AntButton>\n\n                    </AntListItem>\n                }\n\n            </ChildContent>\n        </AntList>\n\n        <Drawer Width=\"640\" Closable=\"true\" Visible=\"visible\" Title='(\"User Profile\")' OnClose=\"_=>close()\">\n            <AntText Strong=\"true\">Personal</AntText>\n            <AntRow></AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Full Name:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>Henry</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Account:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>AntDesign@example.com</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">City:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>HangZhou</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Country:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>China</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Birthday:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>February 2,1900</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Website:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>www.baidu.com</AntText>\n                </AntCol>\n            </AntRow>\n\n            <AntDivider></AntDivider>\n            <AntText Strong=\"true\">Company</AntText>\n            <AntRow></AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Position:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">Programmer</AntText>\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntText Strong=\"true\">Responsibilities:</AntText>\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntText Strong=\"false\">Coding</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Department:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">XTech</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Supervisor:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">Lin</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Skills:</AntText>\n                </AntCol>\n                <AntCol Span=\"20\">\n                    <AntText Strong=\"false\">\n                        C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.\n                    </AntText>\n                </AntCol>\n\n            </AntRow>\n\n            <AntDivider ></AntDivider>\n            <AntText Strong=\"true\">Contacts</AntText>\n            <AntRow></AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Email:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\"> ant-design-Blazor@example.com</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">    Phone Number:     </AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">+86 181 0000 0000 </AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Github:</AntText>\n                </AntCol>\n                <AntCol Span=\"20\">\n                    <AntText Strong=\"false\">https://ant-design-blazor.gitee.io/ </AntText>\n                </AntCol>\n            </AntRow>\n        </Drawer>   \n</div>\n\n   @code{\n\n       public class ListDataSource\n       {\n           public string Title { get; set; }\n       };\n\n       List<ListDataSource> datasource = new List<ListDataSource>() {\n        new ListDataSource(){Title=\"Henry\"},\n        new ListDataSource(){Title=\"Henry\"}\n    };\n       bool visible = false;\n\n\n       void open(MouseEventArgs arg, string Title)\n       {\n           this.visible = true;\n       }\n\n       void close()\n       {\n           this.visible = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Userprofile",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "formindrawer",
        "Title": "抽屉表单",
        "Description": "<p>在抽屉中使用表单。</p>\n",
        "Code": "<div>\n    <AntButton Icon=\"plus\" Type=\"primary\" @onclick=\"_=>open()\">New account</AntButton>\n    <Drawer Closable=\"true\" Width=\"720\" Visible=\"visible\" Title='(\"Submit from in Drawer\")' OnClose=\"_=>close()\">\n        <Template style=\"height:90%\">\n            <AntRow Gutter=\"16\">\n                <AntCol Span=\"12\">\n                    <AntText>Name</AntText>\n                    <AntInput Placeholder=\"Please enter user name\"></AntInput>\n                </AntCol>\n                <AntCol Span=\"12\">\n                    <AntText>Url</AntText>\n                    <AntInput Placeholder=\"please enter url\">\n                        <AddOnBefore>Http://</AddOnBefore>\n                        <AddOnAfter>.Com</AddOnAfter>\n                    </AntInput>\n                </AntCol>\n            </AntRow>\n            <br />\n            <AntRow Gutter=\"16\">\n                <AntCol Span=\"12\">\n                    <AntText>Owner</AntText>\n                    <AntInput Placeholder=\"Please select a owner\"></AntInput>\n                </AntCol>\n                <AntCol Span=\"12\">\n                    <AntText>Type</AntText>\n                    <AntInput Placeholder=\"please enter url\"></AntInput>\n                </AntCol>\n            </AntRow>\n            <br />\n\n            <AntRow>\n                <AntCol Span=\"24\">\n                    <AntText>Description</AntText>\n                    <AntTextArea Placeholder=\"Please enter your description\">\n\n                    </AntTextArea>\n                </AntCol>\n            </AntRow>\n            <br />\n            <AntRow>\n                <AntCol Span=\"18\">\n\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntButton Type=\"default\">Cancel</AntButton>\n                    <AntButton Type=\"primary\">Submit</AntButton>\n                </AntCol>\n            </AntRow>\n        </Template>\n    </Drawer>\n</div>\n\n\n@code{\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Formindrawer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "renderdom",
        "Title": "渲染在当前DOM",
        "Description": "<p>渲染在当前 dom 里。自定义容器，查看 getContainer。</p>\n",
        "Code": "<div>\n    <div style=\"height:200px;overflow:hidden;position:relative;border:1px solid #ebedf0; border-radius:2px;padding:48px;text-align:center;background:#fafafa\">\n        Render in this\n        <div style=\"margin-top: 16px\">\n            <AntButton Type=\"primary\" @onclick=\"_=>open()\">Open</AntButton>\n        </div>\n        <Drawer Style=\"position:absolute\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Drawer>\n    </div>\n</div>\n\n@code{\n\n    bool visible = false;\n\n\n\n    void open()\n    {\n\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Render_dom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基础抽屉",
        "Description": "<p>基础抽屉，点击触发按钮抽屉从右滑出，点击遮罩区关闭</p>\n",
        "Code": "<div>\n    <AntButton Type=\"primary\" @onclick=\"_=>open()\">Open</AntButton>\n    <Drawer Closable=\"true\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>\n\n   @code{\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "multiple",
        "Title": "多层抽屉",
        "Description": "<p>在抽屉内打开新的抽屉，用以解决多分支任务的复杂状况。</p>\n",
        "Code": "<div>\n    <AntButton  Type=\"primary\" OnClick=\"_=>open()\">Open</AntButton>\n\n    <Drawer Width=\"@wdFirstLayer\" Closable=\"true\" Visible=\"visible1\" Title='(\"Multi-level drawer\")' OnClose=\"_=>close()\">\n        <AntButton Type=\"primary\" OnClick=\"_=>ShowDrawer()\">Two-level Drawer</AntButton>\n        <Drawer Width=\"260\" Closable=\"true\" Visible=\"visible2\" Title='(\"two-level drawer\")' OnClose=\"_=>CloseDrawer()\">\n            <AntButton Type=\"primary\">This is two-level drawer</AntButton>\n        </Drawer>\n\n    </Drawer>\n</div>\n\n   @code{\n\n       bool visible1 = false;\n       bool visible2 = false;\n       int wdFirstLayer = 520;\n\n       void open()\n       {\n           this.visible1 = true;\n       }\n\n       void ShowDrawer()\n       {\n\n           this.visible2 = true;\n           wdFirstLayer += 260;\n       }\n\n       void close()\n       {\n           this.visible1 = false;\n       }\n\n       void CloseDrawer()\n       {\n           wdFirstLayer -= 260;\n           this.visible2 = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "自定义位置",
        "Description": "<p>自定义位置，点击触发按钮抽屉从相应的位置滑出，点击遮罩区关闭</p>\n",
        "Code": "<div>\n    <AntRadioGroup @bind-Value=\"placement\">\n        <AntRadio Value=\"top\">top</AntRadio>\n        <AntRadio Value=\"right\">right</AntRadio>\n        <AntRadio Value=\"bottom\">bottom</AntRadio>\n        <AntRadio Value=\"left\">left</AntRadio>\n    </AntRadioGroup>\n\n    <AntButton Type=\"primary\" @onclick=\"_ => open()\">Open</AntButton>\n    <Drawer Closable=\"true\" Visible=\"@visible\" Placement=\"@placement\" Title='(\"Drawer in different Placement\")' OnClose=\"_ => close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>  \n\n@code{\n\n    string placement = \"right\";\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Placement",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Badge",
    "SubTitle": "徽标数",
    "Type": "数据展示",
    "Desc": "<p>图标右上角的圆形徽标数字。</p>\n<h2>何时使用</h2>\n<p>一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 4,
        "Name": "change",
        "Title": "动态",
        "Description": "<p>展示动态变化的效果。</p>\n",
        "Code": "<div>\n    <div>\n        <AntBadge Count=\"@count\">\n            <a href=\"#\" class=\"head-example\" />\n        </AntBadge>\n        <AntButtonGroup>\n            <AntButton @onclick=\"_=>decline()\">\n                <AntIcon Type=\"minus\"></AntIcon>\n            </AntButton>\n            <AntButton @onclick=\"_=>increase()\">\n                <AntIcon Type=\"plus\"></AntIcon>\n            </AntButton>\n        </AntButtonGroup>\n    </div>\n    <div style=\"margin-top: 10px\">\n        <AntBadge Dot=\"@show\">\n            <a href=\"#\" class=\"head-example\" />\n        </AntBadge>\n        <AntSwitch OnChange=\"onChange\" Checked=\"@show\" />\n    </div>\n</div>\n\n@code {\n    int count = 5;\n    bool show = true;\n\n    void increase()\n    {\n        count++;\n    }\n\n    void decline()\n    {\n        count--;\n        if (count < 0)\n        {\n            count = 0;\n        }\n    }\n\n    void onChange(bool show)\n    {\n        this.show = show;\n    }\n}\n",
        "Type": "Demos.Badge.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的徽章展示，当 <code>count</code> 为 <code>0</code> 时，默认不显示，但是可以使用 <code>showZero</code> 修改为显示。</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"5\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"0\" ShowZero>\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    @{\n        RenderFragment count = @<AntIcon Type=\"clock-circle\" Fill=\"#f5222d\"/>;\n    }\n    <AntBadge Count=\"@(count)\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n</div>\n\n",
        "Type": "Demos.Badge.demo.Basic",
        "Style": "\n    .ant-badge:not(.ant-badge-not-a-wrapper) {\n        margin-right: 20px;\n    }\n    .ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n        margin-right: 0;\n        margin-left: 20px;\n    }\n    .head-example {\n        width: 42px;\n        height: 42px;\n        border-radius: 2px;\n        background: #eee;\n        display: inline-block;\n        vertical-align: middle;\n    }\n    [data-theme=\"dark\"] .head-example {\n        background: rgba(255,255,255,.12);\n    }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "overflow",
        "Title": "封顶数字",
        "Description": "<p>超过 <code>overflowCount</code> 的会显示为 <code>${overflowCount}+</code>，默认的 <code>overflowCount</code> 为 <code>99</code>。</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"99\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"100\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"99\" OverflowCount=\"10\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n    <AntBadge Count=\"1000\" OverflowCount=\"999\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n</div>\n",
        "Type": "Demos.Badge.demo.Overflow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "colorful",
        "Title": "多彩徽标",
        "Description": "<p>我们添加了多种预设色彩的徽标样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。</p>\n",
        "Code": "<div>\n    <h4 style=\"margin-bottom: 16px\">Presets:</h4>\n    <div>\n        @foreach (var color in colors)\n        {\n            <div key=\"@color\">\n                <AntBadge Color=\"@color\" Text=\"@color\" />\n            </div>\n        }\n    </div>\n    <h4 style=\"margin:16px 0;\">Custom:</h4>\n    <div>\n        <AntBadge Color=\"#f50\" Text=\"#f50\" />\n        <br />\n        <AntBadge Color=\"#2db7f5\" Text=\"#2db7f5\" />\n        <br />\n        <AntBadge Color=\"#87d068\" Text=\"#87d068\" />\n        <br />\n        <AntBadge Color=\"#108ee9\" Text=\"#108ee9\" />\n    </div>\n</div>\n\n<style>\n    .ant-tag {\n        margin-bottom: 8px;\n    }\n</style>\n\n@code\n{\n    string[] colors =\n    {\n        \"pink\",\n        \"red\",\n        \"yellow\",\n        \"orange\",\n        \"cyan\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"geekblue\",\n        \"magenta\",\n        \"volcano\",\n        \"gold\",\n        \"lime\",\n    };\n}\n",
        "Type": "Demos.Badge.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "link",
        "Title": "可点击",
        "Description": "<p>用 a 标签进行包裹即可。</p>\n",
        "Code": "<a href=\"#\">\n    <AntBadge Count=\"5\">\n        <span class=\"head-example\" />\n    </AntBadge>\n</a>",
        "Type": "Demos.Badge.demo.Link",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 100,
        "Name": "title",
        "Title": "自定义标题",
        "Description": "<p>设置鼠标放在状态点上时显示的文字。</p>\n",
        "Code": "<div>\n    <AntBadge Count=\"5\" Title=\"Custom hover text\">\n        <a href=\"#\" class=\"head-example\" />\n    </AntBadge>\n</div>",
        "Type": "Demos.Badge.demo.Title",
        "Style": "\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-right: 20px;\n}\n\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 2px;\n  background: #eee;\n  display: inline-block;\n}\n[data-theme=\"dark\"] .head-example {\n  background: rgba(255,255,255,.12);\n}\n\n",
        "Debug": true
      },
      {
        "Order": 3,
        "Name": "dot",
        "Title": "讨嫌的小红点",
        "Description": "<p>没有具体的数字。</p>\n",
        "Code": "<div>\n    <AntBadge Dot>\n        <AntIcon Type=\"notification\"/>\n    </AntBadge>\n    <AntBadge Count=\"0\" Dot>\n        <AntIcon Type=\"notification\" />\n    </AntBadge>\n    <AntBadge Dot>\n        <a href=\"#\">Link something</a>\n    </AntBadge>\n</div>",
        "Type": "Demos.Badge.demo.Dot",
        "Style": "\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "nowrapper",
        "Title": "独立使用",
        "Description": "<p>不包裹任何元素即是独立使用，可自定样式展现。</p>\n<blockquote>\n<p>在右上角的 badge 则限定为红色。</p>\n</blockquote>\n",
        "Code": "<div>\n    <AntBadge Count=\"25\" />\n    <AntBadge Count=\"4\" Class=\"site-badge-count-4\" />\n    <AntBadge Class=\"site-badge-count-109\" Count=\"109\" Style=\"background-color: #52c41a\" />\n</div>\n\n<style>\n    .site-badge-count-4 .ant-badge-count {\n        background-color: #fff;\n        color: #999;\n        box-shadow: 0 0 0 1px #d9d9d9 inset;\n    }\n</style>",
        "Type": "Demos.Badge.demo.NoWrapper",
        "Style": "\n.ant-badge-not-a-wrapper:not(.ant-badge-status) {\n  margin-right: 8px;\n}\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n[data-theme=\"dark\"] .site-badge-count-4 .ant-badge-count {\n  background-color: #141414;\n  box-shadow: 0 0 0 1px #434343 inset;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "status",
        "Title": "状态点",
        "Description": "<p>用于表示状态的小圆点。</p>\n",
        "Code": "<div>\n    <AntBadge Status=\"success\" />\n    <AntBadge Status=\"error\" />\n    <AntBadge Status=\"default\" />\n    <AntBadge Status=\"processing\" />\n    <AntBadge Status=\"warning\" />\n    <br />\n    <AntBadge Status=\"success\" Text=\"Success\" />\n    <br />\n    <AntBadge Status=\"error\" Text=\"Error\" />\n    <br />\n    <AntBadge Status=\"default\" Text=\"Default\" />\n    <br />\n    <AntBadge Status=\"processing\" Text=\"Processing\" />\n    <br />\n    <AntBadge Status=\"warning\" Text=\"Warning\" />\n</div>",
        "Type": "Demos.Badge.demo.Status",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Menu",
    "SubTitle": "导航菜单",
    "Type": "导航",
    "Desc": "<p>为页面和功能提供导航的菜单列表。</p>\n<h2>何时使用</h2>\n<p>导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。</p>\n<p>更多布局和导航的使用可以参考：<a href=\"/components/layout\">通用布局</a>。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;菜单项&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;子菜单&quot;&gt;\n    &lt;Menu.Item&gt;子菜单项&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>初始展开的 SubMenu 菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>初始选中的菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>在子菜单展示之前就渲染进 DOM</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>inline 时菜单是否收起状态</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>inline 模式的菜单缩进宽度</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>菜单类型，现在支持垂直、水平、和内嵌模式三种</td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否允许多选</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>当前展开的 SubMenu 菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>是否允许选中</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>当前选中的菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>根节点样式</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>用户鼠标离开子菜单后关闭延时，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>用户鼠标进入子菜单后开启延时，单位：秒</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击 MenuItem 调用此函数</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选中时调用，仅在 multiple 生效</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>SubMenu 展开/关闭的回调</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>被选中时调用</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>无 \u00A0</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>自定义 Menu 折叠时的图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>item 的唯一标志</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>设置收缩时展示的悬浮标题</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>子菜单样式</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>子菜单的菜单项</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>唯一标志</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>子菜单项值</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>点击子菜单标题</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>分组的菜单项</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>分组标题</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>菜单项分割线，只用在弹出菜单内。</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "theme",
        "Title": "主题",
        "Description": "<p>内建了两套主题 <code>light|dark</code>，默认 <code>light</code>。</p>\n",
        "Code": "<div>\n    <AntSwitch Checked=\"theme == MenuTheme.Dark\" OnChange=changeTheme CheckedChildren=@(\"Dark\") UnCheckedChildren=@(\"Light\") />\n    <br />\n    <br />\n    <Menu Theme=theme\n          OnMenuItemClicked=handleClick\n          Style=\" width: 256px \"\n          DefaultOpenKeys=@(new []{\"sub1\"})\n          SelectedKeys=@(new []{current})\n          Mode=\"MenuMode.Inline\">\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"5\">Option 5</MenuItem>\n            <MenuItem Key=\"6\">Option 6</MenuItem>\n            <SubMenu Key=\"sub3\" Title=\"@(\"Submenu\")\">\n                <MenuItem Key=\"7\">Option 7</MenuItem>\n                <MenuItem Key=\"8\">Option 8</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub4\" Title=sub4Title>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    MenuTheme theme = MenuTheme.Dark;\n    string current = \"1\";\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n    void handleClick(MenuItem e)\n    {\n        current = e.Key;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.Theme",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "inline",
        "Title": "内嵌菜单",
        "Description": "<p>垂直菜单，子菜单内嵌在菜单区域。</p>\n",
        "Code": "<Menu Style=\"width: 256;\"\n      DefaultSelectedKeys=@(new[]{\"1\"})\n      DefaultOpenKeys=@(new[]{\"sub1\"})\n      Mode=@MenuMode.Inline>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItemGroup Key=\"g1\" Title=@(\"Item 1\")>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Key=\"g2\" Title=@(\"Iem 2\")>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n    @<span>\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n        <span>Navigation One</span>\n    </span>;\n\nRenderFragment sub2Title =\n@<span>\n    <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n    <span>Navigation Two</span>\n</span>;\n\nRenderFragment sub4Title =\n@<span>\n    <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n    <span>Navigation Three</span>\n</span>;\n}\n",
        "Type": "Demos.Menu.demo.Inline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inlinecollapsed",
        "Title": "缩起内嵌菜单",
        "Description": "<p>内嵌菜单可以被缩起/展开。</p>\n<p>你可以在 <a href=\"/components/layout/#components-layout-demo-side\">Layout</a> 里查看侧边布局结合的完整示例。</p>\n",
        "Code": "<div style=\"width: 256;\">\n    <AntButton Type=\"primary\" OnClick=\"ToggleCollapsed\" Style=\"margin-bottom: 16px\">\n        @if (collapsed)\n        {\n            <AntIcon  Type=\"menu-unfold\" Theme=\"outline\"></AntIcon>\n        }\n        else\n        {\n            <AntIcon  Type=\"menu-fold\" Theme=\"outline\"></AntIcon>\n        }\n    </AntButton>\n    <Menu\n        DefaultSelectedKeys=@(new[]{\"1\"})\n        DefaultOpenKeys=@(new[]{\"sub1\"})\n        Mode=MenuMode.Inline\n        Theme=MenuTheme.Dark\n        InlineCollapsed=collapsed\n    >\n        <MenuItem Key=\"1\">\n            <AntIcon Type=\"pie-chart\" Theme=\"outline\"></AntIcon>\n            <span>Option 1</span>\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <AntIcon Type=\"desktop\" Theme=\"outline\"></AntIcon>\n            <span>Option 2</span>\n        </MenuItem>\n        <MenuItem Key=\"3\">\n            <AntIcon Type=\"contaainer\" Theme=\"outline\"></AntIcon>\n            <span>Option 3</span>\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title >\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n    bool collapsed = false;\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    void ToggleCollapsed()\n    {\n        collapsed = !collapsed;\n    }\n}\n",
        "Type": "Demos.Menu.demo.InlineCollapsed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "router",
        "Title": "配合路由使用",
        "Description": "<p>自动根据路由激活菜单项，需要结合 <a href=\"https://www.angular.cn/api/router/RouterLink\">MenuLink</a> 一起使用。</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Horizontal\">\n    <MenuItem>\n        <MenuLink href=\"/en-US/components/menu\" Match=\"NavLinkMatch.All\">English Menu Document</MenuLink>\n    </MenuItem>\n    <MenuItem>\n        <MenuLink href=\"/zh-CN/components/menu\" Match=\"NavLinkMatch.All\">Chinese Menu Document</MenuLink>\n    </MenuItem>\n</Menu>",
        "Type": "Demos.Menu.demo.Router",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "垂直菜单",
        "Description": "<p>子菜单是弹出的形式。</p>\n",
        "Code": "<Menu OnMenuItemClicked=handleClick Style=\" width: 256px\" Mode=MenuMode.Vertical>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n    <MenuItemGroup Title=@(\"Item 1\")>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n    </MenuItemGroup>\n    <MenuItemGroup Title=@(\"Item 2\")>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\"  Title=sub2Title >\n    <MenuItem Key=\"5\">Option 5</MenuItem>\n    <MenuItem Key=\"6\">Option 6</MenuItem>\n    <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n    </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title >\n    <MenuItem Key=\"9\">Option 9</MenuItem>\n    <MenuItem Key=\"10\">Option 10</MenuItem>\n    <MenuItem Key=\"11\">Option 11</MenuItem>\n    <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n\n    void handleClick()\n    {\n\n    }\n}\n",
        "Type": "Demos.Menu.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "horizontal",
        "Title": "顶部导航",
        "Description": "<p>水平的顶部导航菜单。</p>\n",
        "Code": "<Menu Mode=MenuMode.Horizontal>\n    <MenuItem Key=\"mail\">\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n        Navigation One\n    </MenuItem>\n    <MenuItem Key=\"app\" Disabled>\n        <AntIcon Type=\"appstore\" Theme=\"outline\" ></AntIcon>\n        Navigation Two\n    </MenuItem>\n    <SubMenu Title=sub1Title>\n        <MenuItemGroup Title=@(\"Item 1\")>\n            <MenuItem Key=\"setting:1\">Option 1</MenuItem>\n                <MenuItem Key=\"setting:2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Title=@(\"Item 2\")>\n                <MenuItem Key=\"setting:3\">Option 3</MenuItem>\n                <MenuItem Key=\"setting:4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <MenuItem Key=\"alipay\">\n        <MenuLink href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Navigation Four - Link\n        </MenuLink>\n    </MenuItem>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n        @<Template>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            Navigation Three - Submenu\n        </Template>;\n}\n",
        "Type": "Demos.Menu.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "switchmode",
        "Title": "切换菜单类型",
        "Description": "<p>展示动态切换模式。</p>\n",
        "Code": "<div>\n    <AntSwitch OnChange=changeMode /> Change Mode\n    <div class=\"ant-divider ant-divider-vertical\" role=\"separator\"></div>\n    <AntSwitch OnChange=changeTheme/> Change Style\n    <br />\n    <br />\n    <Menu Style=\" width: 256px ;\"\n          DefaultSelectedKeys=@(new[]{\"1\"})\n          DefaultOpenKeys=@(new[]{\"sub1\"})\n          Mode=this.mode\n          Theme=this.theme>\n        <MenuItem Key=\"1\">\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            Navigation One\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <AntIcon Type=\"calendar\" Theme=\"outline\"></AntIcon>\n            Navigation Two\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n            <SubMenu Key=\"sub1-2\" Title=@(\"Submenu\")>\n                <MenuItem Key=\"5\">Option 5</MenuItem>\n                <MenuItem Key=\"6\">Option 6</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Four</span>\n        </span>;\n\n    MenuMode mode = MenuMode.Inline;\n    MenuTheme theme = MenuTheme.Light;\n\n    void changeMode(bool value)\n    {\n        this.mode = value ? MenuMode.Vertical : MenuMode.Inline;\n    }\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.SwitchMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "sidercurrent",
        "Title": "只展开当前父级菜单",
        "Description": "<p>点击菜单，收起其他展开的所有菜单，保持菜单聚焦简洁。</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Inline\"\n      OpenKeys=this.openKeys\n      OnOpenChange=this.onOpenChange\n      Style=\"width:256px ;\">\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code {\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    // submenu keys of first level\n    string[] rootSubmenuKeys = {\"sub1\", \"sub2\", \"sub4\"};\n\n    string[] openKeys = {\"sub1\"};\n\n    void onOpenChange(string[] openKeys)\n    {\n        var latestOpenKey = openKeys.FirstOrDefault(key => !this.openKeys.Contains(key));\n        if (!rootSubmenuKeys.Contains(latestOpenKey))\n        {\n            this.openKeys = openKeys;\n        }\n        else\n        {\n            this.openKeys = !string.IsNullOrEmpty(latestOpenKey) ? new[] {latestOpenKey} : Array.Empty<string>();\n        }\n    }\n}\n",
        "Type": "Demos.Menu.demo.SiderCurrent",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Notification",
    "SubTitle": "通知提醒框",
    "Type": "反馈",
    "Desc": "<p>全局展示通知提醒信息。</p>\n<h2>何时使用</h2>\n<p>在系统四个角显示通知提醒信息。经常用于以下情况：</p>\n<ul>\n<li>较为复杂的通知内容。</li>\n<li>带有交互的通知，给出用户下一步的行动点。</li>\n<li>系统主动推送。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>config 参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>自定义关闭按钮</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>自定义 CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>自定义关闭图标</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>通知提醒内容，必选</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>默认 4.5 秒后自动关闭，配置为 null 或者 0 则不自动关闭</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义图标</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>当前通知唯一标志</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>通知提醒标题，必选</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>当通知关闭时触发的事件</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>点击通知时触发的事件</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>弹出位置，可选 <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>自定义内联样式</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>还提供了一个全局配置方法，在调用前提前配置，全局一次生效。</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">参数</th>\n<th style=\"text-align: left;\">说明</th>\n<th style=\"text-align: left;\">类型</th>\n<th style=\"text-align: left;\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">消息从底部弹出时，距离底部的位置，单位像素。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">消息从顶部弹出时，距离顶部的位置，单位像素。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">自定义关闭图标</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">默认自动关闭延时，单位秒。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">弹出位置，可选 <code>topLeft</code> <code>topRight</code> <code>bottomLeft</code> <code>bottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement？</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">是否开启 RTL 模式</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "duration",
        "Title": "自动关闭的延时",
        "Description": "<p>自定义通知框自动关闭的延时，默认<code>4.5s</code>，取消自动关闭只要将该值设为 <code>0</code> 即可。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</AntButton>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Duration = 0,\n            Description = \"This notification box will not close automatically\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "withbtn",
        "Title": "自定义按钮",
        "Description": "<p>自定义关闭按钮的样式和文字。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    custom button\n</AntButton>\n\n@code{\n\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        RenderFragment btn = @<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"() => { _notice.Close(key); }\">\n                                confirm\n                            </AntButton>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"A function will be be called after the notification is closed (automatically after the \\\"duration\\\" time of manually).\",\n            Btn = btn \n        });\n    }\n}\n",
        "Type": "Demos.Notification.demo.WithBtn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "withicon",
        "Title": "带有图标的通知提醒框",
        "Description": "<p>通知提醒框左侧有图标。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton OnClick=\"@OnSuccessClick\">\n    success\n</AntButton>   \n\n <AntButton OnClick=\"@OnInfoClick\">\n    info\n</AntButton>\n\n<AntButton OnClick=\"@OnWarningClick\">\n    warning\n</AntButton>\n\n<AntButton OnClick=\"@OnErrorClick\">\n    error\n</AntButton>\n\n@code{\n    private async Task NoticeWithIcon(NotificationType type)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            NotificationType = type\n        });\n    }\n\n    private async Task OnSuccessClick()\n    {\n        await NoticeWithIcon(NotificationType.Success);\n    }\n\n    private async Task OnInfoClick()\n    {\n        await NoticeWithIcon(NotificationType.Info);\n    }\n\n    private async Task OnWarningClick()\n    {\n        await NoticeWithIcon(NotificationType.Warning);\n    }\n\n    private async Task OnErrorClick()\n    {\n        await NoticeWithIcon(NotificationType.Error);\n    }\n\n}",
        "Type": "Demos.Notification.demo.WithIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，4.5 秒后自动关闭。</p>\n",
        "Code": "@inject NotificationService _notice\n \n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</AntButton>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customicon",
        "Title": "自定义图标",
        "Description": "<p>图标可以被自定义。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</AntButton>\n\n@code{\n\n    private async Task OnClick()\n    {\n        RenderFragment customIcon = @<AntIcon Type=\"smile\" Theme=\"outline\" Style=\"color:#108ee9;\"></AntIcon>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Icon = customIcon\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "位置",
        "Description": "<p>通知从右上角、右下角、左下角、左上角弹出。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<div>\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnTopLeftClick\">\n        <AntIcon Type=\"Radius-Upleft\" Theme=\"Outline\"></AntIcon>\n        TopLeft\n    </AntButton>\n\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnTopRightClick\">\n        <AntIcon Type=\"Radius-Upright\" Theme=\"Outline\"></AntIcon>\n        TopRight\n    </AntButton>\n</div>\n\n<br/>\n\n<div>\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnBottomLeftClick\">\n        <AntIcon Type=\"Radius-Bottomleft\" Theme=\"Outline\"></AntIcon>\n        BottomLeft\n    </AntButton>\n\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnBottomRightClick\">\n        <AntIcon Type=\"Radius-Bottomright\" Theme=\"Outline\"></AntIcon>\n        BottomRight\n    </AntButton>\n</div>\n\n@code {\n    private async Task OpenWithPlacement(NotificationPlacement placement)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = $\"Notification {placement}\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Placement = placement\n        });\n    }\n\n    private async Task OnTopLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopLeft);\n    }\n\n    private async Task OnTopRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopRight);\n    }\n\n    private async Task OnBottomLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomLeft);\n    }\n\n    private async Task OnBottomRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomRight);\n    }\n}\n",
        "Type": "Demos.Notification.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "update",
        "Title": "更新消息内容",
        "Description": "<p>可以通过唯一的 key 来更新内容。</p>\n",
        "Code": "@inject NotificationService _notice\n\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\n        Open the notification box\n    </AntButton>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        var task = _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"description.\",\n        });\n        await Task.Delay(1000);\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"New Title\",\n            Key = key,\n            Description = \"New description.\",\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Update",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Avatar",
    "SubTitle": "头像",
    "Type": "数据展示",
    "Desc": "<p>用来代表用户或事物，支持图片、图标或字符展示。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "dynamic",
        "Title": "自动调整字符大小",
        "Description": "<p>对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。</p>\n",
        "Code": "<div>\n    <AntAvatar Style=\"@($\"background-color: {color}; vertical-align: middle;\")\" Size=\"large\">\n        @user\n    </AntAvatar>\n    <AntButton\n        Size=\"small\"\n        Style=\"margin:0 16px; vertical-align: middle;\"\n        OnClick=\"_=>changeUser()\"\n    >\n        Change\n    </AntButton>\n</div>\n\n@code\n{\n    private static string[] userList = {\"U\", \"Lucy\", \"Tom\", \"Edward\"};\n    private static string[] colorList = {\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"};\n\n    private string user { get; set; } = userList[0];\n    private string color { get; set; } = colorList[0];\n\n    private void changeUser()\n    {\n        var index = Array.IndexOf(userList, user);\n        user = index < userList.Length - 1 ? userList[index + 1] : userList[0];\n        color = index < colorList.Length - 1 ? colorList[index + 1] : colorList[0];\n    }\n}\n",
        "Type": "Demos.Avatar.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>头像有三种尺寸，两种形状可选。</p>\n",
        "Code": "<div>\n    <div>\n        <AntAvatar Size=\"64\" Icon=\"user\" />\n        <AntAvatar Size=\"large\" Icon=\"user\" />\n        <AntAvatar Icon=\"user\" />\n        <AntAvatar Size=\"small\" Icon=\"user\" />\n    </div>\n    <div>\n        <AntAvatar Shape=\"square\" Size=\"64\" Icon=\"user\" />\n        <AntAvatar Shape=\"square\" Size=\"large\" Icon=\"user\" />\n        <AntAvatar Shape=\"square\" Icon=\"user\" />\n        <AntAvatar Shape=\"square\" Size=\"small\" Icon=\"user\" />\n    </div>\n</div>",
        "Type": "Demos.Avatar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "badge",
        "Title": "带徽标的头像",
        "Description": "<p>通常用于消息提示。</p>\n",
        "Code": "<div>\n    <span class=\"avatar-item\">\n        <AntBadge Count=\"1\">\n            <AntAvatar Shape=\"square\" Icon=\"user\" />\n        </AntBadge>\n    </span>\n    <span>\n        <AntBadge Dot>\n            <AntAvatar Shape=\"square\" Icon=\"user\"/>\n        </AntBadge>\n    </span>\n</div>",
        "Type": "Demos.Avatar.demo.Badge",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "type",
        "Title": "类型",
        "Description": "<p>支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。</p>\n",
        "Code": "<div>\n    <AntAvatar Icon=\"user\" />\n    <AntAvatar>U</AntAvatar>\n    <AntAvatar>USER</AntAvatar>\n    <AntAvatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <AntAvatar Style=\"color: #f56a00; background-color: #fde3cf; \">U</AntAvatar>\n    <AntAvatar Style=\"background-color: #87d068\" Icon=\"user\" />\n</div>",
        "Type": "Demos.Avatar.demo.Type",
        "Style": "",
        "Debug": false
      }
    ]
  }
]