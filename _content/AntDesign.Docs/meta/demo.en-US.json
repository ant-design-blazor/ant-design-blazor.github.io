[
  {
    "Title": "Input",
    "Type": "Data Entry",
    "Desc": "<p>A basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A user input in a form field is needed.</li>\n<li>A search input is required.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AddOnBefore</td>\n<td>The label text displayed before (on the left side of) the input field.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AddOnAfter</td>\n<td>The label text displayed after (on the right side of) the input field.</td>\n<td>RenderFragment</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Child content</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>The size of the input box. Note: in the context of a form, the <code>large</code> size is used. Available: <code>large</code> <code>default</code> <code>small</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>提供可描述输入字段预期值的提示信息</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>The initial input content</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>MaxLength</td>\n<td>max length</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether the input is disabled.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AllowClear</td>\n<td>allow to remove input content with clear icon</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Prefix</td>\n<td>The prefix icon for the Input.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Suffix</td>\n<td>The suffix icon for the Input.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>The type of input, see: MDN(use <code>Input.TextArea</code> instead of type=<code>textarea</code>)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>callback when the content is change</td>\n<td>function(e)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>OnPressEnter</td>\n<td>The callback function that is triggered when Enter key is pressed.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnInput</td>\n<td>callback when user input</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "addon",
        "Title": "Pre / Post tab",
        "Description": "<p>Using pre &amp; post tabs example.</p>\n",
        "Code": "<div>\n    <Input DefaultValue=\"mysite\">\n        <AddOnBefore>https://</AddOnBefore>\n        <AddOnAfter>.com</AddOnAfter>\n    </Input>\n    <br />\n    <br />\n    <Input DefaultValue=\"mysite\">\n        <AddOnAfter><AntIcon type=\"setting\"></AntIcon></AddOnAfter>\n    </Input>\n    <br />\n    <br />\n    <Input DefaultValue=\"mysite\">\n        <AddOnBefore>https://</AddOnBefore>\n    </Input>\n\n</div>\n",
        "Type": "Demos.Input.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "group",
        "Title": "Input Group",
        "Description": "<p>Input.Group example Note: You don't need Col to control the width in the compact mode.</p>\n",
        "Code": "<div>\n    <InputGroup Size=\"@InputSize.Large\">\n        <AntRow Gutter=\"8\">\n            <AntCol Span=\"5\">\n                <Input DefaultValue=\"0571\"  @bind-Value=\"code\" />\n            </AntCol>\n            <AntCol Span=\"8\">\n                <Input DefaultValue=\"26888888\" @bind-Value=\"phonenumber\" />\n            </AntCol>\n        </AntRow>\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"0571\" Style=\"width: 20%;\"  @bind-Value=\"code\" />\n        <Input DefaultValue=\"26888888\" Style=\"width: 30%;\"  @bind-Value=\"phonenumber\" />\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"0571\" Style=\"width: 20%;\" @bind-Value=\"code\" /> \n        <Search DefaultValue=\"26888888\" Style=\"width: 30%;\" @bind-Value=\"phonenumber\" />\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"0571\" Style=\"width: 20%;\" />\n        <DatePicker Size=\"@DatePickerSize.Small\" Style=\"width: 100%\"></DatePicker>\n    </InputGroup>\n</div>\n\n\n@code{\n    private string code { get; set; }\n    private string phonenumber { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "search",
        "Title": "Search box with loading",
        "Description": "<p>Search loading when onSearch.</p>\n",
        "Code": "<div>\n    <Search Placeholder=\"input search text\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" />\n    <br />\n    <br />\n    <Search Placeholder=\"input search text\" OnChange=\"(e)=>Handle(e)\" EnterButton=\"true\" @bind-Value=\"@txtValue\" />\n    <br />\n    <br />\n    <Search Placeholder=\"input search text\" Size=\"@InputSize.Large\" EnterButton=\"@(\"Search\")\" @bind-Value=\"@txtValue\" />\n</div>\n\n    @code{\n\n        private string txtValue { get; set; }\n\n        private void Handle(ChangeEventArgs args)\n        {\n            Console.WriteLine(args.Value.ToString());\n\n        }\n    }\n\n",
        "Type": "Demos.Input.demo.Search_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "prefix",
        "Title": "prefix and suffix",
        "Description": "<p>Add prefix or suffix icons inside input.</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"Prefix and Suffix\" DefaultValue=\"123\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <AntIcon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"default size\" @bind-Value=\"@txtValue\">\n    <Prefix> ￥ </Prefix>\n    <Suffix>RMB </Suffix>\n    </Input>\n</div>\n\n@code {\n    private string txtValue { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Prefix",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Usage",
        "Description": "<p>Basic usage example.</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"Basic usage\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <AntText>@txtValue</AntText>\n</div>\n@code{\n    string txtValue { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "area",
        "Title": "Autosizing the height to fit the content",
        "Description": "<p>autoSize prop for a textarea type of Input makes the height to automatically adjust based on the content. An options object can be provided to autoSize to specify the minimum and maximum number of lines the textarea will automatically adjust.\nautosize is deprecated after 1.5.0, please use autoSize.</p>\n",
        "Code": "<div>\n    <TextArea Placeholder=\"Autosize height based on content lines\" AutoSize=\"true\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"2\" MaxRows=\"6\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"3\" MaxRows=\"5\" @bind-Value=\"@txtValue\"/>\n</div>\n\n@code{\n    string txtValue { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Area",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "Three size of input",
        "Description": "<p>There are three sizes of an Input box: large (40px), default (32px) and small (24px).</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"large size\"  Size=\"@InputSize.Large\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <AntIcon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"default size\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <AntIcon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"small size\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <AntIcon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <InputPassword @bind-Value=\"@txtValue\" Placeholder=\"large Password\" Size=\"@InputSize.Large\" OnPressEnter=\"(e)=>Submit(e)\" />\n</div>\n@code{\n    private string txtValue { get; set; }\n\n    private void Submit(KeyboardEventArgs args)\n    {\n        Console.WriteLine($\"password: {txtValue}\");\n    }\n}",
        "Type": "Demos.Input.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Result",
    "Type": "Feedback",
    "Desc": "<p>Used to feed back the results of a series of operational tasks.</p>\n<h2>When To Use</h2>\n<p>Use when important operations need to inform the user to process the results and the feedback is more complicated.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>result status,decide icons and colors</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>custom back icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>operating area</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 2,
        "Name": "warning",
        "Title": "Warning",
        "Description": "<p>The result of the warning.</p>\n",
        "Code": "<Result Status=\"warning\"\n        Title=@(\"There are some problems with your operation.\")\n        Extra=extra />\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Go Console</Button>;\n}",
        "Type": "Demos.Result.demo.Warning",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "403",
        "Title": "403",
        "Description": "<p>you are not authorized to access this page.</p>\n",
        "Code": "<Result Status=\"403\"\n        Title=@(\"403\")\n        SubTitle=@(\"Sorry, you are not authorized to access this page.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Back Home</Button>;\n}\n",
        "Type": "Demos.Result.demo._403",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "404",
        "Title": "404",
        "Description": "<p>The page you visited does not exist.</p>\n",
        "Code": "<Result Status=\"404\"\n        Title=@(\"404\")\n        SubTitle=@(\"Sorry, the page you visited does not exist.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Back Home</Button>;\n}",
        "Type": "Demos.Result.demo._404",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "customicon",
        "Title": "Custom icon",
        "Description": "<p>Custom icon.</p>\n",
        "Code": "<Result\n    Icon=\"smile-outline\"\n    Title=@(\"Great, we have done all the operations!\")\n    Extra=\"extra\">\n</Result>\n\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Next</Button>;\n}\n",
        "Type": "Demos.Result.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "success",
        "Title": "Success",
        "Description": "<p>Show successful results.</p>\n",
        "Code": "<Result Status=\"success\"\n        Title=@(\"Successfully Purchased Cloud Server ECS!\")\n        SubTitle=@(\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\")\n        Extra=extra />\n\n@code\n{\n    RenderFragment extra =\n    @<Template>\n        <Button Type=\"primary\">Go Console</Button>\n        <Button>Buy Again</Button>\n    </Template>\n    ;\n}",
        "Type": "Demos.Result.demo.Success",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "error",
        "Title": "Error",
        "Description": "<p>Complex error feedback.</p>\n",
        "Code": "<Result\n    Status=\"error\"\n    Title=@(\"Submission Failed\")\n    SubTitle=@(\"Please check and modify the following information before resubmitting.\")\n    Extra=extra\n>\n<div class=\"desc\">\n    <AntParagraph>\n        <AntText Strong Style=\"font-size: 16px;\">\n            The content you submitted has the following error:\n        </AntText>\n    </AntParagraph>\n    <AntParagraph>\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account has been frozen\n        <a>Thaw immediately &gt;</a>\n    </AntParagraph>\n    <AntParagraph>\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account is not yet\n        eligible to apply <a>Apply Unlock &gt;</a>\n    </AntParagraph>\n</div>\n</Result>\n\n@code {\n    RenderFragment extra =\n        @<Template>\n            <Button Type=\"primary\">Go Console</Button>\n            <Button>Buy Again</Button>\n        </Template>\n        ;\n}\n",
        "Type": "Demos.Result.demo.Error",
        "Style": "\n[data-theme=\"dark\"] .site-result-demo-error-icon {\n  color: #a61d24;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "500",
        "Title": "500",
        "Description": "<p>Something went wrong on server.</p>\n",
        "Code": "<Result Status=\"500\"\n        Title=@(\"500\")\n        SubTitle=@(\"Sorry, something went wrong.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Back Home</Button>;\n}",
        "Type": "Demos.Result.demo._500",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "info",
        "Title": "Info",
        "Description": "<p>Show processing results.</p>\n",
        "Code": "<Result\n    Title=@(\"Your operation has been executed\")\n    Extra=extra\n/>\n@code {\n\n    RenderFragment extra =\n        @<Button Type=\"primary\">\n            Go Console\n        </Button>;\n\n}\n",
        "Type": "Demos.Result.demo.Info",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Empty",
    "Type": "Data Display",
    "Desc": "<p>Empty state placeholder.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When there is no data provided, display for friendly tips.</li>\n<li>User tutorial to create something in fresh new situation.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "description",
        "Title": "No description",
        "Description": "<p>Simplest Usage with no description.</p>\n",
        "Code": "<Empty Description=\"@false\" />",
        "Type": "Demos.Empty.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage.</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "simple",
        "Title": "Chose image",
        "Description": "<p>You can choose another style of <code>image</code> by setting image to <code>Empty.PRESENTED_IMAGE_SIMPLE</code>.</p>\n",
        "Code": "<Empty Image=\"Empty.PRESENTED_IMAGE_SIMPLE\" />",
        "Type": "Demos.Empty.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "configprovider",
        "Title": "ConfigProvider TODO",
        "Description": "<p>Use ConfigProvider set global Empty style.</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.ConfigProvider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "customize",
        "Title": "Customize",
        "Description": "<p>Customize image source, image size, description and extra content.</p>\n",
        "Code": "<Empty Image='\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"'\n          ImageStyle='@(\"height: 60px\")'\n          Description=\"customDescription\">\n    <Button type=\"@ButtonType.Primary\">Create Now</Button>\n</Empty>\n\n@code {\n    private RenderFragment customDescription =@<span>Customize <a>Description</a></span>;\n}",
        "Type": "Demos.Empty.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Spin",
    "Type": "Feedback",
    "Desc": "<p>A spinner for displaying loading state of a page or a section.</p>\n<h2>When To Use</h2>\n<p>When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>specifies a delay in milliseconds for loading state (prevent flush)</td>\n<td>number (milliseconds)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>React node of the spinning indicator</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size of Spin, options: <code>small</code>, <code>default</code> and <code>large</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>whether Spin is spinning</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>customize description content when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>className of wrapper when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Static Method</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>You can define default spin element globally.</p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "inside",
        "Title": "Inside a container",
        "Description": "<p>Spin in a container.</p>\n",
        "Code": "<div class=\"example\">\n    <Spin />\n</div>\n\n<style>\n    .example {\n        text-align: center;\n        background: rgba(0, 0, 0, 0.05);\n        border-radius: 4px;\n        margin-bottom: 20px;\n        padding: 30px 50px;\n        margin: 20px 0;\n    }\n</style>",
        "Type": "Demos.Spin.demo.Inside",
        "Style": "\n  .example {\n    background: rgba(255,255,255,0.08);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "delayanddebounce",
        "Title": "delay",
        "Description": "<p>Specifies a delay for loading state. If <code>spinning</code> ends during delay, loading status won't appear.</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading Delay=500>\n        <Alert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <AntSwitch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}\n",
        "Type": "Demos.Spin.demo.DelayAndDebounce",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tip",
        "Title": "Customized description",
        "Description": "<p>Customized description content.</p>\n",
        "Code": "<Spin Tip=\"Loading...\">\n    <Alert\n        Message=\"Alert message title\"\n        Description=\"Further details about the context of this alert.\"\n        Type=\"info\"\n    />\n</Spin>",
        "Type": "Demos.Spin.demo.Tip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "basic Usage",
        "Description": "<p>A simple loading status.</p>\n",
        "Code": "<Spin />",
        "Type": "Demos.Spin.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>A small <code>Spin</code> is used for loading text, default sized <code>Spin</code> for loading a card-level block, and large <code>Spin</code> used for loading a <strong>page</strong>.</p>\n",
        "Code": "<div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n</div>\n",
        "Type": "Demos.Spin.demo.Size",
        "Style": "\n.ant-spin.ant-spin-spinning {\n  display: inline-block;\n  margin-right: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "nested",
        "Title": "Embedded mode",
        "Description": "<p>Embedding content into <code>Spin</code> will set it into loading state.</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading>\n        <Alert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <AntSwitch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Spin.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "customindicator",
        "Title": "Custom spinning indicator",
        "Description": "<p>Use custom loading indicator.</p>\n",
        "Code": "<Spin Indicator=antIcon />\n@code{\n    RenderFragment antIcon = @<AntIcon Type=\"loading\" Theme=\"outline\" Style=\"font-size: 24px\" Spin />;\n}",
        "Type": "Demos.Spin.demo.CustomIndicator",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Slider",
    "Type": "Data Entry",
    "Desc": "<p>A Slider component for displaying current value and intervals in range.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To input a value in a range.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>The default value of slider. When range is false, use number, otherwise, use [number, number]</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>If true, the slider will not be interactable.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dots</td>\n<td>Whether the thumb can drag over tick only.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>included</td>\n<td>Make effect when marks not null, true means containment and false means coordinative</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>marks</td>\n<td>Tick mark of Slider, type of key must be number, and must in closed interval [min, max], each mark can declare its own style.</td>\n<td>object</td>\n<td></td>\n</tr>\n<tr>\n<td>max</td>\n<td>The maximum value the slider can slide to</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>min</td>\n<td>The minimum value the slider can slide to.</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>range</td>\n<td>dual thumb mode</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>reverse the component</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>step</td>\n<td>The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When marks no null, step can be null.</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>The value of slider. When range is false, use number, otherwise, use [number, number]</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>vertical</td>\n<td>If true, the slider will be vertical.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onAfterChange</td>\n<td>Fire when onmouseup is fired.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback function that is fired when the user changes the slider's value.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipPlacement</td>\n<td>Set Tooltip display position. Ref Tooltip.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipVisible</td>\n<td>If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getTooltipPopupContainer</td>\n<td>The DOM container of the Tooltip, the default behavior is to create a div element in body.</td>\n<td>Rendfragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "input",
        "Title": "Slider with InputNumber",
        "Description": "<p>Synchronize with InputNumber component.</p>\n",
        "Code": "<div>\n    <AntRow>\n        <AntCol Span=\"12\">\n            <Slider Min=\"1\" Max=\"20\" Value=\"@inputValue1\" />\n        </AntCol>\n        <AntCol Span=\"4\">\n            <AntDesign.InputNumber Min=\"1\" Max=\"20\" Style=\"margin:0 16px;\" Value=\"@inputValue1\" ValueChanged=\"(e)=>UpdateValue1(e)\" />\n        </AntCol>\n    </AntRow>\n    <AntRow>\n        <AntCol Span=\"12\">\n            <Slider Min=\"0\" Max=\"1\" Step=\"0.01\" Value=\"@inputValue2\"  />\n        </AntCol>\n        <AntCol Span=\"4\">\n            <AntDesign.InputNumber Min=\"0\" Max=\"10\" Step=\"0.1\" Style=\"margin:0 16px;\" Value=\"@inputValue2\" ValueChanged=\"(e)=>UpdateValue2(e)\" />\n        </AntCol>\n    </AntRow>\n</div>\n\n\n@code\n{\n    private int inputValue1 = 1;\n\n    private void UpdateValue1(double value)\n    {\n        inputValue1 = (int)value;\n    }\n\n\n    private double inputValue2= 0.5;\n\n    private void UpdateValue2(double value)\n    {\n        inputValue2 =value;\n    }\n}\n\n\n",
        "Type": "Demos.Slider.demo.Input",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customer",
        "Title": "Customize tooltip",
        "Description": "<p>Use <code>tipFormatter</code> to format content of Tooltip. If <code>tipFormatter is null</code>, hide it.</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" Value=\"@value\" TipFormatter=\"tipFormatter\"  />\n</div>\n\n@code\n{\n\n    private int value { get; set; }\n\n    string tipFormatter()\n    {\n        return $\"{value}%\";\n    }\n}\n\n\n\n",
        "Type": "Demos.Slider.demo.Customer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "tooltip",
        "Title": "Control visible of ToolTip",
        "Description": "<p>When <code>tooltipVisible</code> is true, ToolTip will show always, or ToolTip will not show anyway, even if dragging or hovering.</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" TooltipPlacement=\"top\" TooltipVisible=\"true\" />\n</div>\n",
        "Type": "Demos.Slider.demo.Tooltip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic slider. When <code>range</code> is <code>true</code>, display as dual thumb mode. When <code>disable</code> is <code>true</code>, the slider will not be interactable.</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" Disabled=\"@Diabled\"  />\n    <Slider DefaultValue=\"(20, 50)\" Disabled=\"@Diabled\" />\n    Diabled: <Switch Size=\"small\" Checked=\"@Diabled\" OnChange=\"(e)=>OnSwitch(e)\" />\n</div>\n\n@code\n{\n\n    private bool Diabled;\n\n    private void OnSwitch(bool args)\n    {\n        Diabled = args;\n    }\n}\n",
        "Type": "Demos.Slider.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "graduated",
        "Title": "Graduated slider",
        "Description": "<p>Using <code>marks</code> property to mark a graduated slider, use <code>value</code> or <code>defaultValue</code> to specify the position of thumb. When <code>included is false</code>, means that different thumbs are coordinative. when <code>step is null</code>, users can only slide the thumbs onto <code>marks</code>.</p>\n",
        "Code": "<div>\n    <h4>included=true</h4>\n    <Slider Marks=\"@nMarks\" DefaultValue=\"37\" />\n    <Slider Marks=\"@nMarks\" DefaultValue=\"(26, 37)\" />\n\n    <h4>included=false</h4>\n    <Slider Marks=\"@nMarks\" Included=\"false\" DefaultValue=\"37\" />\n\n    <h4>marks & step</h4>\n    <Slider Marks=\"@nMarks\" Step=\"10\" DefaultValue=\"37\" />\n\n    <h4>step=null</h4>\n    <Slider Marks=\"@nMarks\" Step=\"null\" DefaultValue=\"37\" />\n\n</div>\n\n@code\n{\n    private SliderMark[] nMarks =\n     {\n            new SliderMark(0, \"0℃\"),\n            new SliderMark(26, \"26℃\"),\n            new SliderMark(37, \"37℃\"),\n            new SliderMark(100, (b)=>{\n                b.OpenElement(0,\"strong\");\n                b.AddContent(1,\"100℃\");\n                b.CloseElement();\n            }, \"color: #f50;\")\n     };\n}",
        "Type": "Demos.Slider.demo.Graduated",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "Slider with icon",
        "Description": "<p>You can add an icon beside the slider to make it meaningful.</p>\n",
        "Code": "<div>\n    <AntIcon Style=\"display: inline-block\" Type=\"Frown\" Theme=\"outline\" />\n    <Slider Style=\"display: inline-block; width: 300px;\" Min=\"0\" Max=\"20\" DefaultValue=\"5\" />\n    <AntIcon Style=\"display: inline-block\" Type=\"Smile\" Theme=\"outline\" />\n</div>\n\n\n",
        "Type": "Demos.Slider.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "reversed",
        "Title": "Reverse",
        "Description": "<p>Using <code>reverse</code> to render slider reversely.</p>\n",
        "Code": "<div>\n    <Slider Reverse=\"@reversed\" DefaultValue=\"30\" />\n    <Slider Reverse=\"@reversed\" DefaultValue=\"(20, 50)\" />\n    Reversed: <Switch Size=\"small\" Checked=\"@reversed\" OnChange=\"(e)=>OnSwitchReverse(e)\" />\n</div>\n\n\n@code\n{\n    private bool reversed = true;\n\n    private void OnSwitchReverse(bool args)\n    {\n        reversed = args;\n    }\n}\n",
        "Type": "Demos.Slider.demo.Reversed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "vslider",
        "Title": "vertical",
        "Description": "<p>The vertical Slider.</p>\n",
        "Code": "<div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider Vertical DefaultValue=\"30\" />\n    </div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider Vertical Step=\"10\" DefaultValue=\"(20, 50 )\" />\n    </div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider Vertical Marks=\"@_marks1\" DefaultValue=\"(26, 37 )\" />\n    </div>\n</div>\n\n@code\n{\n        private SliderMark[] _marks1 =\n        {\n            new SliderMark(0, \"0℃\"),\n            new SliderMark(26, \"26℃\"),\n            new SliderMark(37, \"37℃\"),\n            new SliderMark(100, (b)=>{\n                b.OpenElement(0,\"strong\");\n                b.AddContent(1,\"100℃\");\n                b.CloseElement();\n            }, \"color: #f50;\")\n        };\n}\n",
        "Type": "Demos.Slider.demo.Vslider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "event",
        "Title": "Event",
        "Description": "<p>The <code>onChange</code> callback function will fire when the user changes the slider's value. The <code>onAfterChange</code> callback function will fire when <code>onmouseup</code> fired.</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" OnChange=\"(e)=>OnChange1(e.AsT0)\" OnAfterChange=\"(vlaue)=>OnAfterChange1()\" />\n    <Slider Step=\"10\" DefaultValue=\"( 20, 50 )\" OnChange=\"(e)=>OnChange2(e.AsT0)\" OnAfterChange=\"(vlaue)=>OnAfterChange2()\" />\n</div>\n\n\n@code {\n\n    private void OnChange1(double args)\n    {\n    }\n\n    private void OnAfterChange1()\n    {\n    }\n\n    private void OnChange2(double args)\n    {\n    }\n\n    private void OnAfterChange2()\n    {\n    }\n}\n",
        "Type": "Demos.Slider.demo.Event",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Space",
    "Type": "Layout",
    "Desc": "<p>Set components spacing.</p>\n<h2>When To Use</h2>\n<p>Avoid components clinging together and set a unified space.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>space size</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>space direction</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 99,
        "Name": "debug",
        "Title": "Diverse Child",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<h3>Debug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Space.demo.Debug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Space Size",
        "Description": "<p><code>large</code>, <code>middle</code> and <code>small</code> preset sizes.</p>\n<p>Set the size to <code>large</code> and <code>middle</code> by setting size to large and middle respectively. If <code>size</code> is not set, the spacing is <code>small</code>.</p>\n",
        "Code": "<RadioGroup @bind-Value=@size OnChange=\"e=> setSize(e)\">\n    <Radio Value=\"small\">Small</Radio>\n    <Radio Value=\"middle\">Middle</Radio>\n    <Radio Value=\"large\">Large</Radio>\n</RadioGroup>\n<br />\n<br />\n<Space Size=@size>\n    <SpaceItem>\n        <Button Type=\"primary\">Primary</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Default</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"dashed\">Dashed</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"link\">Link</Button>\n    </SpaceItem>\n</Space>\n\n@code {\n    string size = \"small\";\n    void setSize(string value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}\n",
        "Type": "Demos.Space.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "vertical",
        "Title": "Vertical Space",
        "Description": "<p>Crowded components vertical spacing.</p>\n<p>Can set <code>width: 100%</code> fill a row.</p>\n",
        "Code": "<Space Direction=\"vertical\">\n    <SpaceItem>\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </AntCard>\n    </SpaceItem>\n    <SpaceItem>\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </AntCard>\n    </SpaceItem>\n</Space>",
        "Type": "Demos.Space.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "base",
        "Title": "Basic Usage",
        "Description": "<p>Crowded components horizontal spacing.</p>\n",
        "Code": "<Space>\n    <SpaceItem>\n        Space\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"primary\">Button</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>\n            <AntIcon Type=\"upload\" Theme=\"outline\" /> Click to Upload\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Confirm</Button>\n    </SpaceItem>\n</Space>\n",
        "Type": "Demos.Space.demo.Base",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customize",
        "Title": "Customize Size",
        "Description": "<p>Custom spacing size.</p>\n",
        "Code": "\n<AntSlider Value=size OnChange=\"v=>setSize(v.AsT0)\" />\n<br />\n<br />\n<Space Size=\"@($\"{size}\")\">\n    <SpaceItem>\n        <Button Type=\"primary\">Primary</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Default</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"dashed\">Dashed</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"link\">Link</Button>\n    </SpaceItem>\n</Space>\n\n@code{\n    double size = 8;\n\n    void setSize(double value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}",
        "Type": "Demos.Space.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Progress",
    "Type": "Feedback",
    "Desc": "<p>Display the current progress of an operation flow.</p>\n<h2>When To Use</h2>\n<p>If it will take a long time to complete an operation, you can use <code>Progress</code> to show the current progress and status.</p>\n<ul>\n<li>When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.</li>\n<li>When you need to display the completion percentage of an operation.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Properties that shared by all types.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>to set the type, options: <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>template function of the content</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>to set the completion percentage</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>whether to display the progress value and the status icon</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>to set the status of the Progress, options: <code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(line only)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>to set the style of the progress linecap</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>segmented success percent</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>color of unfilled part</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the progress bar, unit: <code>px</code></td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar, render <code>linear-gradient</code> when passing an object</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>the total step count</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the circular progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the circular progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of circular progress, render <code>linear-gradient</code> when passing an object</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the dashboard progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the dashboard progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>the gap degree of half circle, 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>the gap position, options: <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "circledynamic",
        "Title": "Dynamic circular progress bar",
        "Description": "<p>A dynamic progress bar is better.</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent Type=ProgressType.Circle />\n    <ButtonGroup>\n        <Button OnClick=Decline Icon=Minus />\n        <Button OnClick=Increase Icon=Plus />\n    </ButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.CircleDynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "dynamic",
        "Title": "Dynamic",
        "Description": "<p>A dynamic progress bar is better.</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent/>\n    <ButtonGroup>\n        <Button OnClick=Decline Icon=Minus />\n        <Button OnClick=Increase Icon=Plus />\n    </ButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "steps",
        "Title": "Progress bar with steps",
        "Description": "<p>A progress bar with steps.</p>\n",
        "Code": "<div>\n    <Progress Percent=50 Steps=3 StrokeColor=_color />\n    <br />\n    <Progress Percent=30 Steps=5 StrokeColor=_color />\n    <br />\n    <Progress Percent=100 Steps=5 Size=ProgressSize.Small StrokeColor=_color />\n</div>\n\n@code{\n    private string _color = \"#1890ff\";\n}",
        "Type": "Demos.Progress.demo.Steps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "circlemini",
        "Title": "Mini size circular progress bar",
        "Description": "<p>A smaller circular progress bar.</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Size=ProgressSize.Small />\n    <Progress Type=ProgressType.Circle Percent=70 Size=ProgressSize.Small Status=\"ProgressStatus.Exception\" />\n    <Progress Type=ProgressType.Circle Percent=100 Size=ProgressSize.Small />\n</div>",
        "Type": "Demos.Progress.demo.CircleMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "dashboard",
        "Title": "Dashboard",
        "Description": "<p>By setting <code>type=dashboard</code>, you can get a dashboard style of progress easily.</p>\n",
        "Code": "<Progress Type=ProgressType.Dashboard Percent=75 />\n<Progress Type=\"ProgressType.Dashboard\" Percent=75 GapDegree=30 />",
        "Type": "Demos.Progress.demo.Dashboard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "linemini",
        "Title": "Mini size progress bar",
        "Description": "<p>Appropriate for a narrow area.</p>\n",
        "Code": "<div style=\"width: 170px;\">\n    <Progress Percent=\"30\" Size=\"@ProgressSize.Small\" />\n    <Progress Percent=\"50\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Active\" />\n    <Progress Percent=\"70\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Exception\" />\n    <Progress Percent=\"100\" Size=\"@ProgressSize.Small\" />\n</div>",
        "Type": "Demos.Progress.demo.LineMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "gradientline",
        "Title": "Custom line gradient",
        "Description": "<p>A package of <code>linear-gradient</code>. It is recommended to only pass two colors.</p>\n",
        "Code": "<div>\n    <Progress StrokeColor=_gradients Percent=99.9 />\n    <Progress StrokeColor=_gradients Percent=99.9 Status=ProgressStatus.Active />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=90 />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=100 />\n</div>\n\n@code{\n    private Dictionary<int, string> _gradients = new Dictionary<int, string>()\n{\n        { 0,\"#108ee9\"},\n        { 100,\"#87d068\"}\n    };\n}",
        "Type": "Demos.Progress.demo.GradientLine",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "segment",
        "Title": "Progress bar with success segment",
        "Description": "<p>A standard progress bar.</p>\n",
        "Code": "<div>\n    <Progress Percent=60 SuccessPercent=30 />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Circle />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Dashboard />\n</div>",
        "Type": "Demos.Progress.demo.Segment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "format",
        "Title": "Custom text format",
        "Description": "<p>You can set a custom text by setting the <code>format</code> prop.</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Format=_fortmat1 />\n    <Progress Type=ProgressType.Circle Percent=100 Format=_fortmat2 />\n\n</div>\n\n@code{\n    private Func<double, string> _fortmat1 = (p) => $\"{p} Days\";\n    private Func<double, string> _fortmat2 = (p) => \"Done\";\n}",
        "Type": "Demos.Progress.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "line",
        "Title": "Progress bar",
        "Description": "<p>A standard progress bar.</p>\n",
        "Code": "<div>\n    <Progress Percent=30 />\n    <Progress Percent=50 Status=\"@ProgressStatus.Active\" />\n    <Progress Percent=70 Status=\"@ProgressStatus.Exception\" />\n    <Progress Percent=100 />\n    <Progress Percent=50 ShowInfo=\"false\" />\n</div>",
        "Type": "Demos.Progress.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "linecap",
        "Title": "Square linecaps",
        "Description": "<p>By setting <code>strokeLinecap=&quot;square&quot;</code>, you can change the linecaps from round to square.</p>\n",
        "Code": "<div>\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Circle Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Dashboard Percent=75 />\n</div>",
        "Type": "Demos.Progress.demo.Linecap",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "circle",
        "Title": "Circular progress bar",
        "Description": "<p>A circular progress bar.</p>\n",
        "Code": "<style>\n    .ant-progress-circle-wrap,\n    .ant-progress-line-wrap {\n        margin-right: 8px;\n        margin-bottom: 5px;\n    }\n</style>\n\n<div>\n    <Progress Type=\"ProgressType.Circle\" Percent=75 />\n    <Progress Type=\"ProgressType.Circle\" Percent=70 Status=\"ProgressStatus.Exception\" />\n    <Progress Type=\"ProgressType.Circle\" Percent=100 />\n</div>",
        "Type": "Demos.Progress.demo.Circle",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Form",
    "Type": "Data Entry",
    "Desc": "<p>High performance Form component with data scope management. Including data collection, verification, and styles.</p>\n<h2>When to use</h2>\n<ul>\n<li>When you need to create an instance or collect information.</li>\n<li>When you need to validate fields in certain rules.</li>\n</ul>\n<h2>API(TODO)</h2>\n<style>\n.code-box-demo .ant-form:not(.ant-form-inline):not(.ant-form-vertical) {\n  max-width: 600px;\n}\n.markdown.api-container table td:nth-of-type(4) {\n  white-space: nowrap;\n  word-wrap: break-word;\n}\n</style>\n<style>\n  .site-form-item-icon {\n    color: rgba(0, 0, 0, 0.25);\n  }\n  [data-theme=\"dark\"] .site-form-item-icon {\n    color: rgba(255,255,255,.3);\n  }\n</style>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Usage",
        "Description": "<p>Basic Form data control. Includes layout, initial values, validation and submit.</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n<Form Model=\"@model\" \n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Username\" >\n        <Input @bind-Value=\"@context.Username\"/>\n    </FormItem>\n    <FormItem Label=\"Password\">\n        <InputPassword @bind-Value=\"@context.Password\" />\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [Required]\n        public string Password { get; set; }\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "layout",
        "Title": "Form Layout",
        "Description": "<p>There are three layout for form: <code>horizontal</code>, <code>vertical</code>, <code>inline</code>.</p>\n",
        "Code": "@using System.Text.Json;\n\n<Form Layout=\"@model.Layout\" \n      LabelCol=\"GetFormLabelCol()\"\n      WrapperCol=\"GetFormWrapperCol()\"\n      Model=\"@model\" \n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Form Layout\" >\n        <RadioGroup @bind-Value=\"@context.Layout\">\n            <Radio RadioButton Value=\"@FormLayout.Horizontal\">Horizontal</Radio>\n            <Radio RadioButton Value=\"@FormLayout.Vertical\">Vertical</Radio>\n            <Radio RadioButton Value=\"@FormLayout.Inline\">Inline</Radio>\n        </RadioGroup>\n    </FormItem>\n\n    <FormItem Label=\"Field A\">\n        <Input @bind-Value=\"@context.FieldA\" />\n    </FormItem>\n\n    <FormItem Label=\"Field B\">\n        <Input @bind-Value=\"@context.FieldB\" />\n    </FormItem>\n\n    <FormItem WrapperCol=\"GetButtonItemLayout()\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        public string Layout { get; set; } = FormLayout.Horizontal;\n        public string FieldA { get; set; }\n        public string FieldB { get; set; }\n    }\n\n    private Model model = new Model();\n\n    private ColLayoutParam GetFormLabelCol()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"4\" } : null;\n    }\n\n    private ColLayoutParam GetFormWrapperCol()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"14\" } : null;\n    }\n\n    private ColLayoutParam GetButtonItemLayout()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"14\", Offset = \"4\" } : null;\n    }\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.Layout",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "controlhooks",
        "Title": "Form methods",
        "Description": "<p>Get form ref with <code>@ref</code>.</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n@using AntDesign.Internal\n\n<Form @ref=\"form\" \n      Model=\"@model\" \n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Note\">\n        <Input @bind-Value=\"@model.Note\" />\n    </FormItem>\n\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n        <Button OnClick=\"Reset\">\n            Reset\n        </Button>\n        <Button Type=\"@ButtonType.Link\" OnClick=\"OnFill\">\n            Fill form\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Note { get; set; }\n    }\n\n    private Model model = new Model();\n    private IForm form;\n\n    private void OnFill(MouseEventArgs args)\n    {\n        model.Note = \"Hello world!\";\n\n        Console.WriteLine($\"form ref:{form}\");\n    }\n\n    private void Reset(MouseEventArgs args)\n    {\n        form.Reset();\n    }\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.ControlHooks",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Switch",
    "Type": "Data Entry",
    "Desc": "<p>Switching Selector.</p>\n<h2>When To Use</h2>\n<ul>\n<li>If you need to represent the switching between two states or on-off state.</li>\n<li>The difference between <code>Switch</code> and <code>Checkbox</code> is that Switch will trigger a state change directly when you toggle it, while Checkbox is generally used for state marking, which should work in conjunction with submit operation.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checked</td>\n<td>determine whether the Switch is checked</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>CheckedChildren</td>\n<td>content to be shown when the state is checked</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>to set the initial state</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable switch</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>loading state of switch</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>the size of the Switch, options: default small</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>UnCheckedChildren</td>\n<td>content to be shown when the state is unchecked</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>trigger when the checked state is changing</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic usage.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"switchValue\"/>\n</div>\n\n@code\n{\n    bool switchValue { get; set; }\n}\n",
        "Type": "Demos.Switch.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "Text & icon.",
        "Description": "<p>With text and icon.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\" CheckedChildren='@(\"开\")' UnCheckedChildren='@(\"关\")' />\n    <br />\n    <Switch Checked=\"false\" CheckedChildren='@(\"开\")' UnCheckedChildren='@(\"关\")' />\n    <br />\n    <Switch Checked=\"true\"\n               CheckedChildren=\"checkedChildren\"\n               UnCheckedChildren=\"unCheckedChildren\" />\n</div>\n\n\n@code{\n    RenderFragment checkedChildren = @<AntIcon Type=\"check\"></AntIcon>;\n\n    RenderFragment unCheckedChildren = @<AntIcon Type=\"close\"></AntIcon>;\n}\n",
        "Type": "Demos.Switch.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "size",
        "Title": "Two sizes",
        "Description": "<p>size=<code>small</code> represents a small sized switch.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\"/>\n    <br />\n    <Switch Size=\"small\" Checked=\"true\"/>\n</div>\n",
        "Type": "Demos.Switch.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "disable",
        "Title": "Disabled",
        "Description": "<p>Disabled state of <code>Switch</code>.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"switchValue2\" Disabled=\"isDisabled2\"/>\n    <br />\n    <br />\n    <Button Type=\"primary\" @onclick=\"(_)=>isDisabled2 = !isDisabled2\">Toggle disabled</Button>\n</div>\n\n\n@code{\n    bool switchValue = false;\n\n    bool switchValue2 = false;\n    bool isDisabled2 = true;\n\n    RenderFragment checkedChildren =@<AntIcon Type=\"check\"></AntIcon>;\n\n    RenderFragment unCheckedChildren = @<AntIcon Type=\"close\"></AntIcon>;\n\n}\n\n\n",
        "Type": "Demos.Switch.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "Loading",
        "Description": "<p>Mark a pending state of switch.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\" Loading=\"true\"/>\n    <br />\n    <Switch Size=\"small\" Loading=\"true\"/>\n</div>\n\n\n\n",
        "Type": "Demos.Switch.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Radio",
    "Type": "Data Entry",
    "Desc": "<p>Radio</p>\n<h2>When To Use</h2>\n<p>-Used to select a single state from multiple options.\n-The difference from Select is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Radio/Radio.Button</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Specifies whether the radio is selected.</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>Specifies the initial state: whether or not the radio is selected.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable radio</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>According to value for comparison, to determine whether the selected</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>RadioGroup</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButtonStyle</td>\n<td>style type of radio button</td>\n<td><code>outline</code>,<code>solid</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable all radio buttons</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Used for setting the currently selected value.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>The name property of all input[type=&quot;radio&quot;] children</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size for radio button style</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>The callback function that is triggered when the state changes.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "group",
        "Title": "Radio Group",
        "Description": "<p>A group of radio components.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@_value\" >\n        <Radio Value=\"1\">A</Radio>\n        <Radio Value=\"2\">B</Radio>\n        <Radio Value=\"3\">C</Radio>\n        <Radio Value=\"4\">D</Radio>\n    </RadioGroup>\n</div>\n@code\n {\n    void onChange(string value)\n    {\n\n    }\n\n    string _value = \"1\";\n}",
        "Type": "Demos.Radio.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest use.</p>\n",
        "Code": "<div>\n    <Radio >Radio</Radio>\n</div>\n",
        "Type": "Demos.Radio.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "style",
        "Title": "radio style",
        "Description": "<p>The combination of radio button style.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\" Disabled>Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"A\" Disabled>Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\" Disabled>Shanghai</Radio>\n        <Radio RadioButton Value=\"C\" Disabled>Beijing</Radio>\n        <Radio RadioButton Value=\"D\" Disabled>Chengdu</Radio>\n    </RadioGroup>\n</div>\n\n@code\n{\n    string radioValue3 = \"A\";\n}\n",
        "Type": "Demos.Radio.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "name",
        "Title": "Radio.Group with name",
        "Description": "<p>Passing the <code>name</code> property to all <code>input[type=&quot;radio&quot;]</code> that are in the same Radio.Group. It is usually used to let the browser see your Radio.Group as a real &quot;group&quot; and keep the default behavior. For example, using left/right keyboard arrow to change your selection that in the same Radio.Group.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue2\" Name=\"radiogroup\">\n        <Radio Value=\"A\">A</Radio>\n        <Radio Value=\"B\">B</Radio>\n        <Radio Value=\"C\">C</Radio>\n        <Radio Value=\"D\">D</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue2 = \"A\";\n}",
        "Type": "Demos.Radio.demo.Name",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "button",
        "Title": "Solid radio button",
        "Description": "<p>Solid radio button style.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue4\" ButtonStyle=\"solid\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue4 = \"A\";\n}",
        "Type": "Demos.Radio.demo.Button_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>There are three sizes available: large, medium, and small. It can coordinate with input box.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"large\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue5\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"small\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n\n</div>\n@code\n{\n    string radioValue5 = \"A\";\n}",
        "Type": "Demos.Radio.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vgroup",
        "Title": "Vertical Radio.Group",
        "Description": "<p>Vertical Radio.Group, with more radios.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@radioValue\">\n        <Radio Style=\"@style\" Value=\"A\">Option A</Radio>\n        <Radio Style=\"@style\" Value=\"B\">Option B</Radio>\n        <Radio Style=\"@style\" Value=\"C\">Option C</Radio>\n        <Radio Style=\"@style\" Value=\"M\">\n            More...\n            @if (radioValue == \"M\")\n            {\n                <AntDesign.Input type=\"text\" />\n            }\n        </Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue = \"A\";\n    string style = \"display: block;height:30px;line-height:30px\";\n}",
        "Type": "Demos.Radio.demo.Vgroup",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "optional",
        "Title": "Radio.Group group - optional",
        "Description": "<p>Render radios by configuring options.</p>\n",
        "Code": "<div>\n it will come.\n</div>\n",
        "Type": "Demos.Radio.demo.Optional",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "disable",
        "Title": "Disabled",
        "Description": "<p>Radio unavailable.</p>\n",
        "Code": "<div>\n    <Radio Checked Disabled=\"@Disabled\">\n        Disabled\n    </Radio>\n    <br />\n    <Radio Disabled=\"@Disabled\">\n        Disabled\n    </Radio>\n    <div style=\"margin-top: 20px\">\n        <Button Type=\"primary\" OnClick=\"_=>Disabled=!Disabled\">Toggle Disabled</Button>\n    </div>\n</div>\n\n@code\n{\n    bool Disabled = true;\n}\n",
        "Type": "Demos.Radio.demo.Disable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Table",
    "Type": "Data Display",
    "Desc": "<p>A table displays rows of data.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To display a collection of structured data.</li>\n<li>To sort, search, paginate, filter data.</li>\n</ul>\n<h2>How To Use</h2>\n<p>Specify <code>dataSource</code> of Table as an array of data.</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Usage",
        "Description": "<p>Simple table with actions.</p>\n",
        "Code": "@using System.ComponentModel\n\n<Table DataSource=\"@data\">\n    <Column @bind-Field=\"@context.Key\"></Column>\n    <Column @bind-Field=\"@context.Name\"></Column>\n    <Column @bind-Field=\"@context.Age\"></Column>\n    <Column @bind-Field=\"@context.Address\"></Column>\n    <Column @bind-Field=\"@context.Tags\">\n        <CellTemplate Context=\"tags\">\n            @foreach (var tag in tags)\n            {\n                var color = tag.Length > 5 ? \"geekblue\" : \"green\";\n                if (tag == \"loser\") {\n                    color = \"volcano\";\n                }\n                <AntTag Color=\"@color\">@tag</AntTag>\n            }\n        </CellTemplate>\n    </Column>\n</Table>\n\n@code{\n    Data[] data =\n    {\n        new Data()\n        {\n            Key = \"1\",\n            Name = \"John Brown\",\n            Age = 32,\n            Address = \"New York No. 1 Lake Park\",\n            Tags = new[] {\"nice\", \"developer\"}\n        },\n        new Data()\n        {\n            Key = \"2\",\n            Name = \"Jim Green\",\n            Age = 42,\n            Address = \"London No. 1 Lake Park\",\n            Tags = new[] { \"loser\"}\n        },\n        new Data()\n        {\n            Key = \"3\",\n            Name = \"Joe Black\",\n            Age = 32,\n            Address = \"Sidney No. 1 Lake Park\",\n            Tags = new[] { \"cool\", \"teacher\" }\n        }\n    };\n\n    public class Data\n    {\n        [DisplayName(\"Key\")]\n        public string Key { get; set; }\n\n        [DisplayName(\"Name\")]\n        public string Name { get; set; }\n\n        [DisplayName(\"Age\")]\n        public int Age { get; set; }\n\n        [DisplayName(\"Address\")]\n        public string Address { get; set; }\n\n        [DisplayName(\"Tags\")]\n        public string[] Tags { get; set; }\n    }\n}",
        "Type": "Demos.Table.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Dropdown",
    "Type": "Navigation",
    "Desc": "<p>A dropdown list.</p>\n<h2>When To Use</h2>\n<p>When there are more than a few options to choose from, you can wrap them in a <code>Dropdown</code>. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "item",
        "Title": "Other elements",
        "Description": "<p>Divider and disabled menu item.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"0\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem @key=\"1\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            --- TODO: Need MenuDivider ---\n            <MenuItem @key=\"3\" disabled>\n                3rd menu item（disabled）\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Item",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic dropdown menu.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "submenu",
        "Title": "Cascading menu",
        "Description": "<p>The menu has multiple levels.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItemGroup Title=@(\"Group title\")>\n                <MenuItem>1st menu item</MenuItem>\n                <MenuItem>2nd menu item</MenuItem>\n            </MenuItemGroup>\n            <SubMenu Title=@(\"sub menu\")>\n                <MenuItem>3rd menu item</MenuItem>\n                <MenuItem>4th menu item</MenuItem>\n            </SubMenu>\n            <SubMenu Title=@(\"disabled sub menu\") Disabled>\n                <MenuItem>5d menu item</MenuItem>\n                <MenuItem>6th menu item</MenuItem>\n            </SubMenu>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Cascading menu <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.SubMenuDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "contextmenu",
        "Title": "Context Menu TODO",
        "Description": "<p>The default trigger mode is <code>hover</code>, you can change it to <code>contextMenu</code>.</p>\n",
        "Code": "<Dropdown Trigger=\"new TriggerType[] { TriggerType.ContextMenu }\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <div style=\"text-align: center; width: 200px; height: 200px; line-height: 200px;background: #f7f7f7;color: #777;\">\n            Right Click on here (TODO)\n        </div>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.ContextMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>Support 6 placements.</p>\n",
        "Code": "<Dropdown Placement=\"@PlacementType.BottomLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomLeft</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomCenter</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomRight</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopLeft</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopCenter</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopRight</Button>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n}",
        "Type": "Demos.Dropdown.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "trigger",
        "Title": "Trigger mode",
        "Description": "<p>The default trigger mode is <code>hover</code>, you can change it to <code>click</code>.</p>\n",
        "Code": "<Dropdown Trigger=\"@(new TriggerType[] { TriggerType.Click })\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Click me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Trigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "overlayvisible",
        "Title": "The way of hiding menu.",
        "Description": "<p>The default is to close the menu when you click on menu items, this feature can be turned off.</p>\n",
        "Code": "<Dropdown OnVisibleChange=\"OnVisibleChange\" Visible=\"_visible\">\n    <Overlay>\n        <Menu OnMenuItemClicked=\"HandleMenuClick\">\n            <MenuItem Id=\"1\">Clicking me will not close the menu.</MenuItem>\n            <MenuItem Id=\"2\">Clicking me will not close the menu also.</MenuItem>\n            <MenuItem Id=\"3\">Clicking me will close the menu.</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private bool _visible = false;\n\n    private void HandleMenuClick(MenuItem item)\n    {\n        if (item.Id == \"3\")\n        {\n            _visible = false;\n        }\n    }\n\n    private void OnVisibleChange(bool visible)\n    {\n        _visible = visible;\n    }\n}",
        "Type": "Demos.Dropdown.demo.OverlayVisible",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "event",
        "Title": "Click event",
        "Description": "<p>An event will be triggered when you click menu items, in which you can make different operations according to item's key.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"1\">1st menu item</MenuItem>\n            <MenuItem @key=\"2\">2nd memu item</MenuItem>\n            <MenuItem @key=\"3\">3rd menu item</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me, Click menu item <AntIcon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "dropdownbutton",
        "Title": "Button with dropdown menu",
        "Description": "<p>A button is on the left, and a related functional menu is on the right. You can set the icon property to modify the icon of right.</p>\n",
        "Code": "<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }'>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton Icon=\"user\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }' Disabled=\"@true\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton ButtonsRender=\"ButtonsRender\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        TODO: With ToolTip\n    </ChildContent>\n</DropdownButton>\n<Dropdown>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>Button <AntIcon Type=\"down\" /></Button>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n\n    \n    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)\n    {\n        return @<Template>\n            <span>@leftButton</span>@rightButton\n        </Template>;\n    }\n}",
        "Type": "Demos.Dropdown.demo.DropdownButtonDemo",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "TimePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select/input a time.</p>\n<h2>When To Use</h2>\n<hr />\n<p>By clicking the input box, you can select a time from a popup panel.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 4,
        "Name": "hidecolumn",
        "Title": "Hour and minute",
        "Description": "<p>While part of <code>format</code> is omitted, the corresponding column in panel will disappear, too.</p>\n",
        "Code": "<TimePicker Format='@(\"hh:mm\")' />\n",
        "Type": "Demos.TimePicker.demo.HideColumn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "disabled",
        "Description": "<p>A disabled state of the <code>TimePicker</code>.</p>\n",
        "Code": "<TimePicker Disabled=\"@true\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />",
        "Type": "Demos.TimePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "rangepicker",
        "Title": "Range Picker",
        "Description": "<p>Use time range picker with <code>RangePicker</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Click <code>TimePicker</code>, and then we could select or input a time in panel.</p>\n",
        "Code": "<TimePicker />\n",
        "Type": "Demos.TimePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "value",
        "Title": "Under Control",
        "Description": "<p><code>value</code> and <code>onChange</code> should be used together,</p>\n",
        "Code": "<TimePicker Value=\"_value\" OnChange=\"OnChange\" />\n\n@code\n{\n    private DateTime _value = DateTime.Now;\n\n    private void OnChange(DateTime value, string dateString)\n    {\n        _value = value;\n    }\n}",
        "Type": "Demos.TimePicker.demo.Value",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Three Sizes",
        "Description": "<p>The input box comes in three sizes. large is used in the form, while the medium size is the default.</p>\n",
        "Code": "<TimePicker Size=\"@DatePickerSize.Large\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Size=\"@DatePickerSize.Small\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n",
        "Type": "Demos.TimePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "addon",
        "Title": "Addon",
        "Description": "<p>Render addon contents to time picker panel's bottom.</p>\n",
        "Code": "<TimePicker RenderExtraFooter=\"ExtraFooter\" />\n\n@code {\n    private RenderFragment ExtraFooter =@<Button Type=\"@ButtonType.Primary\">Ok</Button>;\n}",
        "Type": "Demos.TimePicker.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "hours12",
        "Title": "12 hours",
        "Description": "<p>TimePicker of 12 hours format, with default format <code>h:mm:ss a</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.Hours12",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "intervaloptions",
        "Title": "interval option",
        "Description": "<p>Show stepped options by <code>hourStep</code> <code>minuteStep</code> <code>secondStep</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.IntervalOptions",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Checkbox",
    "Type": "Data Entry",
    "Desc": "<p>Checkbox component.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Used for selecting multiple values from several options.</li>\n<li>If you use only one checkbox, it is the same as using Switch to toggle between two states.\nThe difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Checkbox</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Specifies whether the checkbox is selected.</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Indeterminate</td>\n<td>indeterminate checked state of checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>The callback function that is triggered when the state changes</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Checkbox Group</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CheckboxItems</td>\n<td>Check box items</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disable</td>\n<td>Disable all checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>Specifies options</td>\n<td>CheckboxOption[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>List of selected value</td>\n<td>IList<string></td>\n<td>Array.Empty<string>()</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>The callback function that is triggered when the state changes</td>\n<td>function(checkValue)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "group",
        "Title": "Checkbox Group",
        "Description": "<p>Generate a group of checkboxes from an array.</p>\n",
        "Code": "<div>\n    <CheckboxGroup Options=\"@plainOptions\" @bind-Value=\"@checkValue1\" />\n    <br />\n    <br />\n    <CheckboxGroup Options=\"@ckeckAllOptions\" @bind-Value=\"@checkValue2\" />\n    <br />\n    <br />\n    <CheckboxGroup Options=\"@OptionsWithDisable\" @bind-Value=\"@checkValue1\" />\n</div>\n@code{\n\n    string[] checkValue1 = {\"Apple\"};\n    string[] checkValue2 = {\"Pear\"};\n\n    CheckboxOption[] plainOptions = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\"},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\"},\n    };\n\n    CheckboxOption[] ckeckAllOptions = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\", Checked = true},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\"},\n    };\n\n    CheckboxOption[] OptionsWithDisable = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\"},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\", Disabled = true},\n    };\n\n    private bool checkAll { get; set; } = false;\n\n    void groupValueChanged()\n    {\n        bool allChecked = checkAll;\n        plainOptions.ForEach(o => o.Checked = !allChecked);\n    }\n\n}",
        "Type": "Demos.Checkbox.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "controlled",
        "Title": "Controlled Checkbox",
        "Description": "<p>Communicated with other components.</p>\n",
        "Code": "<div>\n    <p style=\"margin-bottom: 20px\">\n        <Checkbox Checked=\"@checkValue\"  \n                    Disabled=\"@disableValue\" \n                    CheckedChange=\"CheckChanged\">\n        @label\n        </Checkbox>\n    </p>     \n        <p>\n        <Button Type=\"primary\" Size=\"small\"  @onclick=\"@CheckClick\">@checkTitle</Button>\n        <Button Type=\"primary\" Size=\"small\"  @onclick=\"@DisableClick\">@disableTitle</Button>\n      </p>     \n  </div>\n\n  @code{\n\n      private bool checkValue { get; set; } = false;\n      private bool disableValue { get; set; } = false;\n      private string label { get; set; } = \"Check-Enable\";\n      private string checkTitle { get; set; } = \"Check\";\n      private string disableTitle { get; set; } = \"Enable\";\n\n      void CheckChanged()\n      {\n          CheckClick();\n      }\n\n\n\n      void CheckClick()\n      {\n          if (checkValue)\n          {\n              checkTitle = \"Check\";\n              checkValue = false;\n          }\n          else\n          {\n              checkTitle = \"Uncheck\";\n              checkValue = true;\n          }\n\n          label = $\"{checkTitle}-{disableTitle}\";\n      }\n\n\n\n      void DisableClick()\n      {\n          if (disableValue)\n          {\n              disableTitle = \"Enabled\";\n              disableValue = false;\n          }\n          else\n          {\n              disableTitle = \"Disabled\";\n              disableValue = true;\n          }\n          label = $\"{checkTitle}-{disableTitle}\";\n      }\n  }",
        "Type": "Demos.Checkbox.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "layout",
        "Title": "Use with Grid",
        "Description": "<p>We can use Checkbox and Grid in Checkbox.Group, to implement complex layout.</p>\n",
        "Code": "<div>\n    TO BE Defined\n    @*<CheckboxGroup Style=\"width:100%\"  ValueChanged=\"@OnChange\">\n\n        <AntRow>\n            <AntCol Span=\"8\">\n                <Checkbox Value=\"A\" >A</Checkbox>\n            </AntCol>\n            <AntCol Span=\"8\">\n                <Checkbox Value=\"B\"  >B</Checkbox>\n            </AntCol>\n            <AntCol Span=\"8\">\n                <Checkbox Value=\"C\"  >C</Checkbox>\n            </AntCol>\n            <AntCol Span=\"8\">\n                <Checkbox Value=\"D\" >D</Checkbox>\n            </AntCol>\n            <AntCol Span=\"8\">\n                <Checkbox Value=\"E\" >E</Checkbox>\n            </AntCol>\n        </AntRow>\n    </CheckboxGroup>*@\n\n\n\n</div>\n@code\n{   \n\n    void OnChange()\n    {\n\n    }\n}\n\n",
        "Type": "Demos.Checkbox.demo.Layout",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic usage of checkbox.</p>\n",
        "Code": "  <div>\n    <Checkbox Checked=\"@isChecked\" Disabled=\"@disabled\" CheckedChange=\"@ToggleChecked\">\n                @($\"{(isChecked ? \"Check\" : \"Uncheck\")}-{(disabled ? \"Disable\" : \"Enable\")}\")\n    </Checkbox>\n  </div>\n  \n  @code{\n    bool isChecked = true;\n    bool disabled = false;\n    void ToggleChecked()\n    {\n        isChecked = !isChecked;\n    }\n    void ToggleDisable()\n    {\n        disabled = !disabled;\n    }\n}\n\n  ",
        "Type": "Demos.Checkbox.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "disable",
        "Title": "Disable",
        "Description": "<p>Disabled checkbox.</p>\n",
        "Code": "<div>\n            <Checkbox Disabled=\"true\"/>\n            <br />\n            <Checkbox Checked=\"true\" Disabled=\"true\"/>\n</div>",
        "Type": "Demos.Checkbox.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "checkboxall",
        "Title": "Check all",
        "Description": "<p>The <code>indeterminate</code> property can help you to achieve a 'check all' effect.</p>\n",
        "Code": "<div>\n    <Checkbox Indeterminate=\"@indeterminate\" Checked=\"@checkAll\" CheckedChange=\"@CheckAllChanged\">\n    Check all\n    </Checkbox>\n    <br />\n    <AntDesign.CheckboxGroup Options=\"@ckeckAllOptions\" ValueChanged=\"@OnChanged\"/>\n</div>\n\n@code{\n\n    static CheckboxOption[] ckeckAllOptions = new CheckboxOption[]{\n        new CheckboxOption{ Label=\"Apple\",Value=\"Apple\" ,Checked=true},\n        new CheckboxOption{ Label=\"Pear\", Value=\"Pear\" },\n        new CheckboxOption{ Label=\"Orange\", Value=\"Orange\",Checked=true },\n    };\n\n    void CheckAllChanged()\n    {\n        bool allChecked = checkAll;\n        ckeckAllOptions.ForEach(o => o.Checked = !allChecked);\n    }\n\n    void OnChanged()\n    {\n\n    }\n\n    bool indeterminate => ckeckAllOptions.Count(o => o.Checked) > 0 && ckeckAllOptions.Count(o => o.Checked) < ckeckAllOptions.Count();\n\n    bool checkAll => ckeckAllOptions.All(o => o.Checked);\n\n}",
        "Type": "Demos.Checkbox.demo.CheckboxAll",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tooltip",
    "Type": "Data Display",
    "Desc": "<p>A simple text popup tip.</p>\n<h2>When To Use</h2>\n<ul>\n<li>The tip is shown on mouse enter, and is hidden on mouse leave. The Tooltip doesn't support complex text or operations.</li>\n<li>To provide an explanation of a <code>button/text/operation</code>. It's often used instead of the html <code>title</code> attribute.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>The text shown in the tooltip</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Common API</h3>\n<p>The following APIs are shared by Tooltip, Popconfirm, Popover.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrowPointAtCenter</td>\n<td>Whether the arrow is pointed at the center of target</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>autoAdjustOverflow</td>\n<td>Whether to adjust popup placement automatically when popup is off screen</td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultVisible</td>\n<td>Whether the floating tooltip card is visible by default</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>The DOM container of the tip, the default behavior is to create a <code>div</code> element in <code>body</code></td>\n<td>Function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>mouseEnterDelay</td>\n<td>Delay in seconds, before tooltip is shown on mouse enter</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>mouseLeaveDelay</td>\n<td>Delay in seconds, before tooltip is hidden on mouse leave</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>overlayClassName</td>\n<td>Class name of the tooltip card</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>overlayStyle</td>\n<td>Style of the tooltip card</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>placement</td>\n<td>The position of the tooltip relative to the target, which can be one of <code>top</code> <code>left</code> <code>right</code> <code>bottom</code> <code>topLeft</code> <code>topRight</code> <code>bottomLeft</code> <code>bottomRight</code> <code>leftTop</code> <code>leftBottom</code> <code>rightTop</code> <code>rightBottom</code></td>\n<td>string</td>\n<td><code>top</code></td>\n<td></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>Tooltip trigger mode. Could be multiple by passing an array</td>\n<td><code>hover</code> | <code>focus</code> | <code>click</code> | <code>contextMenu</code> | <code>Array&lt;string&gt;</code></td>\n<td><code>hover</code></td>\n<td></td>\n</tr>\n<tr>\n<td>visible</td>\n<td>Whether the floating tooltip card is visible or not</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onVisibleChange</td>\n<td>Callback executed when visibility of the tooltip card is changed</td>\n<td>(visible) =&gt; void</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>align</td>\n<td>this value will be merged into placement's config, please refer to the settings <a href=\"https://github.com/react-component/tooltip\">rc-tooltip</a></td>\n<td>Object</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Tooltip</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\n    <span>Tooltip will show on mouse enter.</span>\n</Tooltip>",
        "Type": "Demos.Tooltip.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "autoadjustoverflow",
        "Title": "Adjust placement automatically",
        "Description": "<p>Adjust placement automatically when tooltip is invisible.</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\n    <span>Tooltip will show on mouse enter.</span>\n</Tooltip>",
        "Type": "Demos.Tooltip.demo.AutoAdjustOverflow",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>There are 12 placement options available.</p>\n",
        "Code": "<div class=\"demo\">\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); white-space: nowrap;\">\n        <Tooltip Placement=\"@PlacementType.TopLeft\" Title=\"Text\">\n            <Button>TL</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Top\" Title=\"Text\">\n            <Button>Top</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.TopRight\" Title=\"Text\">\n            <Button>TR</Button>\n        </Tooltip>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); float: left;\">\n        <Tooltip Placement=\"@PlacementType.LeftTop\" Title=\"Text\">\n            <Button>LT</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Left\" Title=\"Text\">\n            <Button>Left</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.LeftBottom\" Title=\"Text\">\n            <Button>LB</Button>\n        </Tooltip>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); margin-left: @($\"{ButtonWidth * 4 + 24}px\");\">\n        <Tooltip Placement=\"@PlacementType.RightTop\" Title=\"Text\">\n            <Button>RT</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Right\" Title=\"Text\">\n            <Button>Right</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.RightBottom\" Title=\"Text\">\n            <Button>RB</Button>\n        </Tooltip>\n    </div>\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); clear: both; white-space: nowrap;\">\n        <Tooltip Placement=\"@PlacementType.BottomLeft\" Title=\"Text\">\n            <Button>BL</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Bottom\" Title=\"Text\">\n            <Button>Bottom</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.BottomRight\" Title=\"Text\">\n            <Button>BR</Button>\n        </Tooltip>\n    </div>\n</div>\n\n@code\n{\n    public string Text = \"prompt text\";\n    const int ButtonWidth = 70;\n}",
        "Type": "Demos.Tooltip.demo.Placement",
        "Style": "\n.code-box-demo .demo {\n  overflow: auto;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n.code-box-demo .ant-btn-rtl {\n  margin-right: 0;\n  margin-left: 8px;\n  margin-bottom: 8px;\n}\n#components-tooltip-demo-placement .ant-btn {\n  width: 70px;\n  text-align: center;\n  padding: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "arrowpointatcenter",
        "Title": "Arrow pointing at the center",
        "Description": "<p>By specifying <code>arrowPointAtCenter</code> prop, the arrow will point to the center of the target element.</p>\n",
        "Code": "<div>\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\">\n        <Button>Align edge / 边缘对齐</Button>\n    </Tooltip>\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\" ArrowPointAtCenter=\"true\">\n        <Button>Arrow points to center / 箭头指向中心</Button>\n    </Tooltip>\n</div>",
        "Type": "Demos.Tooltip.demo.ArrowPointAtCenter",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Alert",
    "Type": "Feedback",
    "Desc": "<p>Alert component for feedback.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When you need to show alert messages to users.</li>\n<li>When you need a persistent static container which is closable by user actions.</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 5,
        "Name": "closetext",
        "Title": "Customized Close Text",
        "Description": "<p>Replace the default icon with customized content.</p>\n",
        "Code": "<Alert Message=\"Info Text\" Type=\"@AlertType.Info\" CloseText=\"Close Now\"  Closable/>\n",
        "Type": "Demos.Alert.demo.CloseText",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "description",
        "Title": "Description",
        "Description": "<p>Additional description for alert message.</p>\n",
        "Code": "<Alert Message=\"Success Text\"\n          Description=\"Success Description Success Description Success Description\"\n          Type=\"@AlertType.Success\" />\n\n<Alert Message=\"Info Text\"\n          Description=\"Info Description Info Description Info Description Info Description\"\n          Type=\"@AlertType.Info\" />\n\n<Alert Message=\"Warning Text\"\n          Description=\"Warning Description Warning Description Warning Description Warning Description\"\n          Type=\"@AlertType.Warning\" />\n\n<Alert Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description\"\n          Type=\"@AlertType.Error\" />\n",
        "Type": "Demos.Alert.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage for short messages.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Success\" Message=\"Success Text\" />\n",
        "Type": "Demos.Alert.demo.Basic",
        "Style": "\n.code-box-demo .ant-alert {\n  margin-bottom: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "style",
        "Title": "More types",
        "Description": "<p>There are 4 types of Alert: <code>success</code>, <code>info</code>, <code>warning</code>, <code>error</code>.</p>\n",
        "Code": "<Alert Message=\"Success Text\" Type=\"@AlertType.Success\" />\n\n<Alert Message=\"Info Text\" Type=\"@AlertType.Info\" />\n\n<Alert Message=\"Warning Text\" Type=\"@AlertType.Warning\" />\n\n<Alert Message=\"Error Text\" Type=\"@AlertType.Error\" />\n",
        "Type": "Demos.Alert.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p>Decent icon make information more clear and more friendly.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Success\"\n          Message=\"Success Tips\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Info\"\n          Message=\"Informational Notes\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Success\"\n          Message=\"Success Tips\"\n          Description=\"Detailed description and advice about successful copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Info\"\n          Message=\"Informational Notes\"\n          Description=\"Additional description and information about copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning\"\n          Description=\"This is a warning notice about copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error\"\n          Description=\"This is an error message about copywriting.\"\n          ShowIcon />",
        "Type": "Demos.Alert.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "closable",
        "Title": "Closable",
        "Description": "<p>To show close button.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n@code{\n    private void LogSomething()\n    {\n        Console.WriteLine(\"Logging Something...\");\n    }\n}",
        "Type": "Demos.Alert.demo.Closable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "banner",
        "Title": "Banner",
        "Description": "<p>Display Alert as a banner at top of page.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text\"\n          Banner\n          Closable />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text\"\n          Description=\"Very long warning text warning text text text text text text text\"\n          Banner\n          Closable />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text Without Icon\"\n          Banner\n          ShowIcon=\"false\" />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error Text\"\n          Banner />",
        "Type": "Demos.Alert.demo.Banner",
        "Style": "",
        "Iframe": 250,
        "Debug": false
      }
    ]
  },
  {
    "Title": "DatePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select or input a date.</p>\n<h2>When To Use</h2>\n<p>By clicking the input box, you can select a date from a popup calendar.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>There are six kinds of picker:</p>\n<ul>\n<li>DatePicker</li>\n<li>MonthPicker</li>\n<li>RangePicker</li>\n<li>WeekPicker</li>\n<li>YearPicker</li>\n<li>QuarterPicker (Added in 4.1.0)</li>\n</ul>\n<h3>Localization（TODO）</h3>\n<p>The default locale is en-US, if you need to use other languages, recommend to use internationalized components provided by us at the entrance. Look at: <a href=\"http://ant.design/components/config-provider/\">ConfigProvider</a>.</p>\n<p>If there are special needs (only modifying single component language), Please use the property: local. Example: <a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a>.</p>\n<pre><code class=\"language-jsx\">import locale from 'antd/es/date-picker/locale/zh_CN';\n\n&lt;DatePicker locale={locale} /&gt;;\n</code></pre>\n<pre><code class=\"language-jsx\">// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\nimport moment from 'moment';\n\n&lt;DatePicker defaultValue={moment('2015-01-01', 'YYYY-MM-DD')} /&gt;;\n</code></pre>\n<h3>Common API</h3>\n<p>The following APIs are shared by DatePicker, YearPicker, MonthPicker, RangePicker, WeekPicker.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear（TODO）</td>\n<td>Whether to show clear button</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>className</td>\n<td>picker className</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>dateRender</td>\n<td>custom rendering function for date cells</td>\n<td>function(currentDate: moment, today: moment) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>determine whether the DatePicker is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>specify the date that cannot be selected</td>\n<td>(currentDate: moment) =&gt; boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>dropdownClassName</td>\n<td>to customize the className of the popup calendar</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>to set the container of the floating layer, while the default is to create a <code>div</code> element in <code>body</code></td>\n<td>function(trigger)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale（TODO）</td>\n<td>localization configuration</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode（TODO）</td>\n<td>picker panel mode（<a href=\"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?\">Cannot select year or month anymore?</a></td>\n<td><code>time</code> | <code>date</code> | <code>month</code> | <code>year</code> | <code>decade</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>open state of picker</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>picker</td>\n<td>Set picker type</td>\n<td><code>date</code> | <code>week</code> | <code>month</code> | <code>quarter</code> (4.1.0) | <code>year</code></td>\n<td><code>date</code></td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>placeholder of date input</td>\n<td>string|RangePicker[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>popupStyle</td>\n<td>to customize the style of the popup calendar</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>determine the size of the input box, the height of <code>large</code> and <code>small</code>, are 40px and 24px respectively, while default size is 32px</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>bordered</td>\n<td>whether has border style</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>suffixIcon</td>\n<td>The custom suffix icon</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the style of the input box</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>a callback function, can be executed whether the popup calendar is popped up or closed</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>callback when picker panel mode is changed</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inputReadOnly</td>\n<td>Set the <code>readonly</code> attribute of the input tag (avoids virtual keyboard on touch devices)</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Common Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date, if start time or end time is null or undefined, the date range will be an open interval</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>to specify the time that cannot be selected</td>\n<td>function(date)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a>. When an array is provided, all values are used for parsing and first value is used for formatting.</td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>to provide an additional time selection</td>\n<td>object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue（TODO）</td>\n<td>to set default time of selected date, <a href=\"#components-date-picker-demo-disabled-date\">demo</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>moment()</td>\n<td></td>\n</tr>\n<tr>\n<td>showToday</td>\n<td>whether to show &quot;Today&quot; button</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOk（TODO）</td>\n<td>callback when click ok button</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>Callback function for panel changing</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>YearPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>QuarterPicker</h3>\n<p>Added in <code>4.1.0</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-\\QQ&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>MonthPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-MM&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>Custom month cell content render method</td>\n<td>function(date, locale): ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>WeekPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-wo&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>RangePicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowEmpty（TODO）</td>\n<td>Allow start or end input leave empty</td>\n<td>[boolean, boolean]</td>\n<td>[false, false]</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disable start or end</td>\n<td><code>[boolean, boolean]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>to specify the time that cannot be selected</td>\n<td>function(dates: [moment, moment], partial: <code>'start'|'end'</code>)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a>. When an array is provided, all values are used for parsing and first value is used for formatting.</td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD HH:mm:ss&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>ranges（TODO）</td>\n<td>preseted ranges for quick selection</td>\n<td>{ [range: string]: <a href=\"http://momentjs.com/\">moment</a>[] } | { [range: string]: () =&gt; <a href=\"http://momentjs.com/\">moment</a>[] }</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>separator（TODO）</td>\n<td>set separator between inputs</td>\n<td>string</td>\n<td>'~'</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>to provide an additional time selection</td>\n<td>object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue</td>\n<td>to set default time of selected date, <a href=\"#components-date-picker-demo-disabled-date\">demo</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>[moment(), moment()]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onCalendarChange（TODO）</td>\n<td>a callback function, can be executed when the start time or the end time of the range is changing</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<style>\n.code-box-demo .ant-picker {\n  margin: 0 8px 12px 0;\n}\n</style>\n<h2>FAQ</h2>\n<ul>\n<li><p><a href=\"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?\">When set mode to DatePicker/RangePicker, cannot select year or month anymore?</a></p>\n</li>\n<li><p><a href=\"/docs/react/replace-moment#DatePicker\">How to use DatePicker with customize date library like dayjs</a></p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "Bordered-less",
        "Description": "<p>Bordered-less style component.</p>\n",
        "Code": "<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Year\" />\n<br />",
        "Type": "Demos.DatePicker.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>A disabled state of the <code>DatePicker</code>. You can also set as array to disable one of input.</p>\n",
        "Code": "<DatePicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<MonthPicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<RangePicker Disabled=\"@true\" DefaultValue=\"new DateTime[] { new DateTime(2015, 6, 6), new DateTime(2015, 6, 6) }\" />\n<br />\n<RangePicker Disabled=\"@true\" \n                DefaultValue=\"new DateTime[] { new DateTime(2019, 9, 3), new DateTime(2019, 11, 12) }\" />",
        "Type": "Demos.DatePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "rangepicker",
        "Title": "Range Picker",
        "Description": "<p>Set range picker type by <code>picker</code> prop.</p>\n",
        "Code": "<RangePicker />\n<br />\n<RangePicker ShowTime=\"@true\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<RangePicker Picker=\"@DatePickerType.Year\" />",
        "Type": "Demos.DatePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic use case. Users can select or input a date in panel.</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Year\" />\n<br />",
        "Type": "Demos.DatePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "extrafooter",
        "Title": "Extra Footer",
        "Description": "<p>Render extra footer in panel for customized requirements.</p>\n",
        "Code": "<DatePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<DatePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" RenderExtraFooter=\"extraFooter\" />\n\n@code {\n    private RenderFragment extraFooter =@<span>extra footer</span>;\n}\n",
        "Type": "Demos.DatePicker.demo.ExtraFooter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "Three Sizes",
        "Description": "<p>The input box comes in three sizes. <code>default</code> will be used if <code>size</code> is omitted.</p>\n",
        "Code": "<RadioGroup @bind-Value=\"@datePickerSize\">\n    <Radio RadioButton Value=\"@DatePickerSize.Large\">Large</Radio>\n    <Radio RadioButton Value=\"@DatePickerSize.Default\">Default</Radio>\n    <Radio RadioButton Value=\"@DatePickerSize.Small\">Small</Radio>\n</RadioGroup>\n<br />\n<DatePicker Size=\"@datePickerSize\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" Size=\"@datePickerSize\" />\n<br />\n<RangePicker Size=\"@datePickerSize\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" Size=\"@datePickerSize\" />\n\n@code {\n    private string datePickerSize = DatePickerSize.Default;\n}",
        "Type": "Demos.DatePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "disableddate",
        "Title": "Disabled Date & Time",
        "Description": "<p>Disabled part of dates and time by <code>disabledDate</code> and <code>disabledTime</code> respectively, and <code>disabledTime</code> only works with <code>showTime</code>.</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 0, 0, 0)\"\n               Format=\"yyyy-MM-dd HH:mm:ss\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n               DisabledTime=\"date => GetDisabledTime(date)\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\"\n               DisabledDate=\"date => date <= DateTime.Now\" />\n<br />\n<RangePicker DisabledDate=\"date => date <= DateTime.Now\" />\n<br />\n<RangePicker ShowTime='@true'\n                DisabledDate=\"date => date <= DateTime.Now\" />\n\n@code {\n    private DatePickerDisabledTime GetDisabledTime(DateTime date)\n    {\n        int[] timeRange = new int[60];\n        for (int i = 0; i < timeRange.Length; i++)\n        {\n            timeRange[i] = i;\n        }\n\n        return new DatePickerDisabledTime(timeRange[4..15], timeRange[20..55], timeRange[3..19]);\n    }\n}",
        "Type": "Demos.DatePicker.demo.DisabledDate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "presettedranges",
        "Title": "Preset Ranges TODO",
        "Description": "<p>We can set preset ranges to RangePicker to improve user experience. TODO</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.PresettedRanges",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "format",
        "Title": "Date Format",
        "Description": "<p>We can set the date format by <code>format</code>.</p>\n",
        "Code": "<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM/dd\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"dd/MM/yyyy\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime[] { new DateTime(2015, 1, 1), new DateTime(2015, 1, 1) }\" Format=\"yyyy/MM/dd\" />",
        "Type": "Demos.DatePicker.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "selectinrange",
        "Title": "Select range dates in 7 days TODO",
        "Description": "<p>A example shows how to select a dynamic range by using <code>onCalendarChange</code> and <code>disabledDate</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.SelectInRange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "daterender",
        "Title": "Customized Date Rendering",
        "Description": "<p>We can customize the rendering of date cells in the calendar by providing a <code>dateRender</code> function to <code>DatePicker</code>.</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" /><br />\n<RangePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" />\n\n@code\n{\n    private Func<DateTime, DateTime, RenderFragment> CustomRender = (currentViewDate, today) =>\n    {\n        string style = \"\";\n        if (currentViewDate.Day == 1)\n        {\n            style = \"border: 1px solid #1890ff; borderRadius: 50%\";\n        }\n\n        return @<div class=\"ant-picker-cell-inner\" style=\"@style\">\n            @currentViewDate.Day\n        </div>;\n    };\n}",
        "Type": "Demos.DatePicker.demo.DateRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "time",
        "Title": "Choose Time",
        "Description": "<p>This property provide an additional time selection. When <code>showTime</code> is an Object, its properties will be passed on to built-in <code>TimePicker</code>.</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\" OnChange=\"OnChange\" />\n<br />\n<RangePicker ShowTime='@(\"HH:mm\")' OnChange=\"OnChange\" />\n\n@code\n{\n    private void OnChange(DateTime value, string dateString)\n    {\n        Console.WriteLine($\"Selected Time: {value}\");\n        Console.WriteLine($\"Formatted Selected Time: {dateString}\");\n    }\n}",
        "Type": "Demos.DatePicker.demo.Time",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "List",
    "Type": "Data Display",
    "Desc": "<p>Simple List.</p>\n<h2>When To Use</h2>\n<p>A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>List</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>Toggles rendering of the border around the list</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>footer</td>\n<td>List footer renderer</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>grid</td>\n<td>The grid type of list. You can set grid to something like {gutter: 16, column: 4}</td>\n<td><a href=\"#List-grid-props\">object</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>header</td>\n<td>List header renderer</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>itemLayout</td>\n<td>The layout of list, default is <code>horizontal</code>, If a vertical list is desired, set the itemLayout property to <code>vertical</code></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>rowKey</td>\n<td>Item's unique key, could be a string or function that returns a string</td>\n<td>string|Function(record):string</td>\n<td><code>key</code></td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>Shows a loading indicator while the contents of the list are being fetched</td>\n<td>boolean|<a href=\"/components/spin/#API\">SpinProps</a> (<a href=\"https://github.com/ant-design/ant-design/issues/8659\">more</a>)</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>loadMore</td>\n<td>Shows a load more content</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale</td>\n<td>i18n text including empty text</td>\n<td>object</td>\n<td>emptyText: 'No Data' <br></td>\n<td></td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>Pagination <a href=\"/components/pagination/\">config</a>, hide it by setting it to false</td>\n<td>boolean | object</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>Size of list</td>\n<td><code>default</code> | <code>large</code> | <code>small</code></td>\n<td><code>default</code></td>\n<td></td>\n</tr>\n<tr>\n<td>split</td>\n<td>Toggles rendering of the split under the list item</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>dataSource array for list</td>\n<td>any[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>customize list item when using <code>dataSource</code></td>\n<td><code>item =&gt; ReactNode</code></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>pagination</h3>\n<p>Properties for pagination.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>position</td>\n<td>specify the position of <code>Pagination</code></td>\n<td><code>top</code> | <code>bottom</code> | <code>both</code></td>\n<td><code>bottom</code></td>\n</tr>\n</tbody>\n</table>\n<p>More about pagination, please check <a href=\"/components/pagination/\"><code>Pagination</code></a>.</p>\n<h3>List grid props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>column</td>\n<td>column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>spacing between grid</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>The actions content of list item. If <code>itemLayout</code> is <code>vertical</code>, shows the content on bottom, otherwise shows content on the far right.</td>\n<td>Array<ReactNode></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>extra</td>\n<td>The extra content of list item. If <code>itemLayout</code> is <code>vertical</code>, shows the content on right, otherwise shows content on the far right.</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item.Meta</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>avatar</td>\n<td>The avatar of list item</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>description</td>\n<td>The description of list item</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>The title of list item</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 7,
        "Name": "infinitevirtualizedload",
        "Title": "Infinite & virtualized",
        "Description": "<p>An example of infinite list &amp; virtualized loading using <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a>. <a href=\"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/\">Learn more</a>.</p>\n<p><code>Virtualized</code> rendering is a technique to mount big sets of data. It reduces the amount of rendered DOM nodes by tracking and hiding whatever isn't currently visible.</p>\n",
        "Code": "<h3>InfiniteVirtualizedLoad</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.List.demo.InfiniteVirtualizedLoad",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "infiniteload",
        "Title": "Scrolling loaded",
        "Description": "<p>The example of infinite load with <a href=\"https://github.com/CassetteRocks/react-infinite-scroller\">react-infinite-scroller</a>.</p>\n",
        "Code": "<h3>InfiniteLoad</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.List.demo.InfiniteLoad",
        "Style": "\n  [data-theme=\"dark\"] .demo-infinite-container {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "basic",
        "Title": "Basic list",
        "Description": "<p>Basic list.</p>\n",
        "Code": "<AntList DataSource=\"@data\" TItem=\"BasicItem\">\n    <Item Context=\"item\">\n        <AntListItemMeta  Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\n            <Title>\n                <a href=\"https://ng.ant.design\">@item.Title</a>\n            </Title>\n        </AntListItemMeta>\n    </Item>\n</AntList>\n\n\n@code{\n\n    RenderFragment avatar = @<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n\n    public List<BasicItem> data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Ant Design Title 1\"},\n        new BasicItem { Title = \"Ant Design Title 2\"},\n        new BasicItem { Title = \"Ant Design Title 3\"},\n        new BasicItem { Title = \"Ant Design Title 4\"},\n    };\n}\n\n",
        "Type": "Demos.List.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "loadmore",
        "Title": "Load more",
        "Description": "<p>Load more list with <code>loadMore</code> property.</p>\n",
        "Code": "@inject HttpClient HttpClient\n\n<AntList Class=\"demo-loadmore-list\" DataSource=\"@Data\" ItemLayout=\"AntDirectionVHType.Horizontal\" Loading=\"@InitLoading\">\n    <Item Context=\"item\">\n        <AntListItemMeta Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\n            <Title>\n                <a href=\"https://ant.design\">@item.Name.Last</a>\n            </Title>\n        </AntListItemMeta>\n        <div>content</div>\n    </Item>\n    <LoadMore>\n        @if (!InitLoading && !Loading)\n        {\n            <div class=\"demo-loadmore-btn-content \">\n                <Button OnClick=\"OnLoadMore\">loading more</Button>\n            </div>\n        }\n    </LoadMore>\n</AntList>\n\n<style>\n\n    .demo-loadmore-list {\n        min-height: 350px;\n    }\n\n    .demo-loadmore-btn-content {\n        text-align: center;\n        margin-top: 12px;\n        height: 32px;\n        line-height: 32px;\n    }\n</style>\n\n@code {\n\n    RenderFragment avatar = @<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    public int count = 3;\n\n    public string FakeDataUrl { get { return $\"https://randomuser.me/api/?results={count}&inc=name,gender,email,nat&noinfo\"; } }\n\n    public List<DataModel> Data { get; set; }\n\n    public bool InitLoading { get; set; } = true;\n\n    public bool Loading { get; set; } = false;\n\n    protected override async Task OnInitializedAsync()\n    {\n        Data = await GetData();\n        InitLoading = false;\n        await base.OnInitializedAsync();\n    }\n\n    public async Task OnLoadMore()\n    {\n        Loading = true;\n        var res = await GetData();\n        Data.AddRange(res);\n        Loading = false;\n    }\n\n    public async Task<List<DataModel>> GetData()\n    {\n        try\n        {\n            var res = await HttpClient.GetFromJsonAsync<Response>(FakeDataUrl);\n            return res.Results;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n            return new List<DataModel>();\n        }\n    }\n\n    public class Response\n    {\n        public List<DataModel> Results { get; set; }\n    }\n\n    public class DataModel\n    {\n        public string Gender { get; set; }\n\n        public Name Name { get; set; }\n\n        public string Email { get; set; }\n\n        public string Nat { get; set; }\n    }\n\n    public class Name\n    {\n        public string Title { get; set; }\n\n        public string First { get; set; }\n\n        public string Last { get; set; }\n    }\n}\n",
        "Type": "Demos.List.demo.Loadmore",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "Vertical",
        "Description": "<p>Set the <code>itemLayout</code> property to <code>vertical</code> to create a vertical list.</p>\n",
        "Code": "<h3>Vertical</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.List.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "grid",
        "Title": "Grid",
        "Description": "<p>Create a grid layout by setting the <code>grid</code> property of List.</p>\n",
        "Code": "<AntList Grid=\"gutter\" DataSource=\"@Data\">\n    <Item Context=\"item\">\n        <AntCard Title=\"@(item.Title)\">\n            <Body>\n                Card context\n            </Body>\n        </AntCard>\n    </Item>\n</AntList>\n\n@code{\n\n    private ListGridType gutter = new ListGridType { Gutter = 16, Column = 4 };\n\n    public List<BasicItem> Data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Title 1\"},\n        new BasicItem { Title = \"Title 2\"},\n        new BasicItem { Title = \"Title 3\"},\n        new BasicItem { Title = \"Title 4\"},\n    };\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n\n}\n\n\n",
        "Type": "Demos.List.demo.Grid",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "simple",
        "Title": "Simple list",
        "Description": "<p>Ant Design supports a default list size as well as a large and small size.</p>\n<p>If a large or small list is desired, set the size property to either large or small respectively. Omit the size property for a list with the default size.</p>\n<p>Customizing the header and footer of list by setting <code>header</code> and <code>footer</code> property.</p>\n",
        "Code": "<AntDivider Orientation=\"left\">Default Size</AntDivider>\n\n<AntList DataSource=\"@data\">\n    <Header>Header</Header>\n    <Item Context=\"item\">\n        <span><mark>[ITEM]</mark></span>@item\n    </Item>\n    <Footer>Footer</Footer>\n</AntList>\n\n<AntDivider Orientation=\"left\">Small Size</AntDivider>\n\n<AntList DataSource=\"@data\" Size=\"small\">\n    <Header>Header</Header>\n    <Item Context=\"item\">\n        <span><mark>[ITEM]</mark></span>@item\n    </Item>\n    <Footer>Footer</Footer>\n</AntList>\n\n<AntDivider Orientation=\"left\">Large Size</AntDivider>\n\n<AntList DataSource=\"@data\" Size=\"large\">\n    <Header>Header</Header>\n    <Item Context=\"item\">\n        <span><mark>[ITEM]</mark></span>@item\n    </Item>\n    <Footer>Footer</Footer>\n</AntList>\n\n@code{\n\n    public List<string> data = new List<string>\n    {\n        \"Racing car sprays burning fuel into crowd.\",\n        \"Japanese princess to wed commoner.\",\n        \"Australian walks 100km after outback crash.\",\n        \"Man charged over missing wedding girl.\",\n        \"Los Angeles battles huge wildfires.\"\n    };\n}\n",
        "Type": "Demos.List.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "resposive",
        "Title": "Responsive grid list",
        "Description": "<p>Responsive grid list. The size property the is as same as <a href=\"/components/grid/#Col\">Layout Grid</a>.</p>\n",
        "Code": "<h3>Resposive</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.List.demo.Resposive",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Button",
    "Type": "General",
    "Desc": "<p>To trigger an operation.</p>\n<h2>When To Use</h2>\n<p>A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.</p>\n<p>In Ant Design we provide 4 types of button.</p>\n<ul>\n<li>Primary button: indicate the main action, one primary button at most in one section.</li>\n<li>Default button: indicate a series of actions without priority.</li>\n<li>Dashed button: used for adding action commonly.</li>\n<li>Link button: used for external links.</li>\n</ul>\n<p>And 4 other properties additionally.</p>\n<ul>\n<li><code>danger</code>: used for actions of risk, like deletion or authorization.</li>\n<li><code>ghost</code>: used in situations with complex background, home pages usually.</li>\n<li><code>disabled</code>: when actions is not available.</li>\n<li><code>loading</code>: add loading spinner in button, avoiding multiple submits too.</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 0,
        "Name": "block",
        "Title": "Block Button",
        "Description": "<p><code>block</code> property will make the button fit to its parent width.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" Block>Primary</Button>\n    <Button Block>Default</Button>\n    <Button Type=\"dashed\" Block>Dashed</Button>\n    <Button Type=\"link\" Block>Link</Button>\n</div>",
        "Type": "Demos.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>To mark a button as disabled, add the <code>disabled</code> property to the <code>Button</code>.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\">Primary</Button>\n    <Button Type=\"primary\" Disabled>\n        Primary(disabled)\n    </Button>\n    <br />\n    <Button>Default</Button>\n    <Button Disabled>Default(disabled)</Button>\n    <br />\n    <Button Type=\"dashed\">Dashed</Button>\n    <Button Type=\"dashed\" Disabled>\n        Dashed(disabled)\n    </Button>\n    <br />\n    <Button Type=\"link\">Link</Button>\n    <Button Type=\"link\" Disabled>\n        Link(disabled)\n    </Button>\n    <br />\n    <Button Type=\"link\" Danger>\n        Danger Link\n    </Button>\n    <Button Type=\"link\" Danger Disabled>\n        Danger Link(disabled)\n    </Button>\n    <br />\n    <Button Danger>Danger Default</Button>\n    <Button Danger Disabled>\n        Danger Default(disabled)\n    </Button>\n    <div class=\"site-Button-Ghost-wrapper\">\n        <Button Ghost>Ghost</Button>\n        <Button Ghost Disabled>\n            Ghost(disabled)\n        </Button>\n    </div>\n</div>",
        "Type": "Demos.Button.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "ghost",
        "Title": "Ghost Button",
        "Description": "<p><code>ghost</code> property will make button's background transparent, it is commonly used in colored background.</p>\n",
        "Code": "<div class=\"site-Button-Ghost-wrapper\">\n    <Button Type=\"primary\" Ghost>\n        Primary\n    </Button>\n    <Button Ghost>Default</Button>\n    <Button Type=\"dashed\" Ghost>\n        link\n    </Button>\n    <Button Type=\"link\" Ghost>\n        link\n    </Button>\n</div>",
        "Type": "Demos.Button.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Type",
        "Description": "<p>There are <code>primary</code> button, <code>default</code> button, <code>dashed</code> button and <code>link</code> button in antd.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\">Primary</Button>\n    <Button>Default</Button>\n    <Button Type=\"dashed\">Dashed</Button>\n    <Button Type=\"link\">Link</Button>\n</div>",
        "Type": "Demos.Button.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "multiple",
        "Title": "Multiple Buttons",
        "Description": "<p>If you need several buttons, we recommend that you use 1 primary button + n secondary buttons, and if there are more than three operations, you can group some of them into <code>Dropdown.Button</code>.</p>\n",
        "Code": "Not implement yet :(",
        "Type": "Demos.Button.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>Ant Design supports a default button size as well as a large and small size.</p>\n<p>If a large or small button is desired, set the <code>size</code> property to either <code>large</code> or <code>small</code> respectively. Omit the <code>size</code> property for a button with the default size.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@size\">\n        <Radio RadioButton Value=\"large\">Large</Radio>\n        <Radio RadioButton Value=\"default\">Default</Radio>\n        <Radio RadioButton Value=\"small\">Small</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <Button Type=\"primary\" Size=@size>\n        Primary\n    </Button>\n    <Button Size=\"@size\">Default</Button>\n    <Button Type=\"dashed\" Size=@size>\n        Dashed\n    </Button>\n    <br />\n    <Button Type=\"link\" Size=@size>\n        Link\n    </Button>\n    <br />\n    <Button Type=\"primary\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"circle\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size>\n    Download\n    </Button>\n    <Button Type=\"primary\" Icon=\"download\" Size=@size>\n    Download\n    </Button>\n</div>\n\n@code\n{\n    string size = \"large\";\n}\n",
        "Type": "Demos.Button.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p><code>Button</code> components can contain an <code>Icon</code>. This is done by setting the <code>icon</code> property or placing an <code>Icon</code> component within the <code>Button</code>.</p>\n<p>If you want specific control over the positioning and placement of the <code>Icon</code>, then that should be done by placing the <code>Icon</code> component within the <code>Button</code> rather than using the <code>icon</code> property.</p>\n",
        "Code": "<div>\n    @*<Tooltip title=\"search\">\n        <Button Type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Type=\"primary\" Shape=\"circle\">\n        A\n    </Button>\n    <Button Type=\"primary\" Icon=\"search\">\n    Search\n    </Button>\n    @*<Tooltip title=\"search\">\n        <Button shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Icon=\"search\">Search</Button>\n    <br />\n    @*<Tooltip title=\"search\">\n        <Button shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Icon=\"search\">Search</Button>\n    @*<Tooltip title=\"search\">\n        <Button Type=\"dashed\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Type=\"dashed\" Icon=\"search\">\n    Search\n    </Button>\n</div>",
        "Type": "Demos.Button.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "danger",
        "Title": "Danger Buttons",
        "Description": "<p><code>danger</code> is a property of button after antd 4.0.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" Danger>\n        Primary\n    </Button>\n    <Button Danger>Default</Button>\n    <Button Type=\"dashed\" Danger>\n        link\n    </Button>\n    <Button Type=\"link\" Danger>\n        link\n    </Button>\n</div>",
        "Type": "Demos.Button.demo.Danger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "legacygroup",
        "Title": "Deprecated Button Group",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<ButtonGroup Size=\"small\">\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n<ButtonGroup>\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n<ButtonGroup Size=\"large\">\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n",
        "Type": "Demos.Button.demo.LegacyGroup",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "Loading",
        "Description": "<p>A loading indicator can be added to a button by setting the <code>loading</code> property on the <code>Button</code>.</p>\n",
        "Code": "@using System.Timers\n\n<div>\n    <Button Type=\"primary\" Loading>\n        Loading\n    </Button>\n    <Button Type=\"primary\" Size=\"small\" Loading>\n        Loading\n    </Button>\n    <br />\n    <Button Type=\"primary\" Loading=\"loading\" OnClick=enterLoading>\n        Click me!\n    </Button>\n    <Button\n        Type=\"primary\"\n        Icon=\"poweroff\"\n    Loading=\"iconLoading\"\n    OnClick=\"enterIconLoading\"\n    >\n    Click me!\n    </Button>\n</div>\n\n@code\n{\n    bool loading = false;\n    bool iconLoading = false;\n\n    private void enterLoading()\n    {\n        loading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            loading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n\n    private void enterIconLoading()\n    {\n        iconLoading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            iconLoading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n}\n",
        "Type": "Demos.Button.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Pagination",
    "Type": "Navigation",
    "Desc": "<p>A long list can be divided into several pages using <code>Pagination</code>, and only one page will be loaded at a time.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When it will take a long time to load/render all items.</li>\n<li>If you want to browse the data by navigating through pages.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Pagination onChange={onChange} total={50} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Current</td>\n<td>Current page number</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultCurrent</td>\n<td>Default initial page number</td>\n<td>number</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultPageSize</td>\n<td>Default number of data items per page</td>\n<td>number</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable pagination</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>HideOnSinglePage</td>\n<td>Whether to hide pager on single page</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ItemRender</td>\n<td>To customize item's innerHTML</td>\n<td>(page, type: 'page' | 'prev' | 'next', originalElement) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSize</td>\n<td>Number of data items per page</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSizeOptions</td>\n<td>Specify the sizeChanger options</td>\n<td>string[]</td>\n<td>['10', '20', '50', '100']</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowLessItems</td>\n<td>Show less page items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowQuickJumper</td>\n<td>Determine whether you can jump to pages directly</td>\n<td>boolean | <code>{ goButton: ReactNode }</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSizeChanger</td>\n<td>Determine whether to show <code>pageSize</code> select, it will be <code>true</code> when <code>total&gt;=50</code></td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTitle</td>\n<td>Show page item's title</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTotal</td>\n<td>To display the total number and range</td>\n<td>Function(total, range)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Simple</td>\n<td>Whether to use simple mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Specify the size of <code>Pagination</code>, can be set to <code>small</code>.</td>\n<td>'default' | 'small'.</td>\n<td>&quot;&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>Responsive</td>\n<td>If <code>size</code> is not specified, <code>Pagination</code> would resize according to the width of the window</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Total</td>\n<td>Total number of data items</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Called when the page number is changed, and it takes the resulting page number and pageSize as its arguments</td>\n<td>Function(page, pageSize)</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>OnShowSizeChange</td>\n<td>Called when <code>pageSize</code> is changed</td>\n<td>Function(current, size)</td>\n<td>noop</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "more",
        "Title": "More",
        "Description": "<p>More pages.</p>\n",
        "Code": "<Pagination DefaultCurrent=\"6\" Total=\"500\" />",
        "Type": "Demos.Pagination.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "total",
        "Title": "Total number",
        "Description": "<p>You can show the total number of data by setting <code>showTotal</code>.</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n    <br />\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal2\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n    Func<PaginationTotalContext, string> showTotal2 =  ctx => $\"{ctx.Range.Item1}-{ctx.Range.Item2} of {ctx.Total} items\";\n}",
        "Type": "Demos.Pagination.demo.Total",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "changer",
        "Title": "Changer",
        "Description": "<p>Change <code>pageSize</code>.</p>\n",
        "Code": "<h3>Changer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Pagination.demo.Changer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic pagination.</p>\n",
        "Code": "<Pagination PageIndex=\"1\" Total=\"50\"></Pagination>",
        "Type": "Demos.Pagination.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "controlled",
        "Title": "Controlled",
        "Description": "<p>Controlled page number.</p>\n",
        "Code": "<Pagination @bind-Current=\"@current\" OnChange=onChange Total=\"50\" />\n\n@code {\n    int current = 3;\n\n    void onChange(int page)\n    {\n        Console.WriteLine(page);\n        current = page;\n    }\n}\n",
        "Type": "Demos.Pagination.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "all",
        "Title": "Show All",
        "Description": "<p>Show all configured prop.</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowSizeChanger\n        ShowQuickJumper\n        ShowTotal=@showTotal\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Pagination.demo.All",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "simple",
        "Title": "Simple mode",
        "Description": "<p>Simple mode.</p>\n",
        "Code": "<Pagination Simple DefaultCurrent=\"2\" Total=\"50\" />",
        "Type": "Demos.Pagination.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "mini",
        "Title": "Mini size",
        "Description": "<p>Mini size pagination.</p>\n",
        "Code": "<div>\n    <Pagination Size=\"small\" Total=\"50\" />\n    <Pagination Size=\"small\" Total=\"50\" ShowSizeChanger ShowQuickJumper />\n    <Pagination Size=\"small\" Total=\"50\" ShowTotal=showTotal />\n</div>\n\n@code\n{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Pagination.demo.Mini",
        "Style": "\n#components-pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "jump",
        "Title": "Jumper",
        "Description": "<p>Jump to a page directly.</p>\n",
        "Code": "<div>\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" OnChange=onChange />\n    <br />\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" OnChange=onChange Disabled />\n</div>\n@code{\n\n    void onChange(int pageNumber) {\n        Console.WriteLine($\"Page: {pageNumber}\");\n    }\n\n}\n",
        "Type": "Demos.Pagination.demo.Jump",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "itemrender",
        "Title": "Prev and next",
        "Description": "<p>Use text link for prev and next button.</p>\n",
        "Code": "<Pagination Total=\"500\" ItemRender=itemRender />\n\n@code {\n\n    RenderFragment<PaginationItemRenderContext> itemRender = ctx =>\n        @<Template>\n            @if (ctx.Type == \"prev\") {\n                <a>Previous</a>\n            }\n            else if (ctx.Type == \"next\") {\n                <a>Next</a>\n            }\n            else\n            {\n                @ctx.DefaultRender(ctx)\n            }\n        </Template>;\n\n}\n",
        "Type": "Demos.Pagination.demo.ItemRender",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Message",
    "Type": "Feedback",
    "Desc": "<p>Display global messages as feedback in response to user operations.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To provide feedback such as success, warning, error etc.</li>\n<li>A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>This components provides some static methods, with usage and arguments as following:</p>\n<ul>\n<li><code>MessageService.Success(content, [duration], onClose)</code></li>\n<li><code>MessageService.Error(content, [duration], onClose)</code></li>\n<li><code>MessageService.Info(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warning(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warn(content, [duration], onClose)</code> // alias of warning</li>\n<li><code>MessageService.Loading(content, [duration], onClose)</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>content of the message</td>\n<td>string|ReactNode|config</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>time(seconds) before auto-dismiss, don't dismiss if set to 0 or null</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>Specify a function that will be called when the message is closed</td>\n<td>Action</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><code>afterClose</code> can be called in thenable interface:</p>\n<ul>\n<li><code>MessageService.[level](content, [duration]).ContinueWith(afterClose)</code></li>\n<li><code>MessageService.[level](content, [duration], onClose).ContinueWith(afterClose)</code></li>\n</ul>\n<p>where <code>level</code> refers one static methods of <code>Message</code>. The result of <code>ContinueWith</code> method will be a Task.</p>\n<p>Supports passing parameters wrapped in an object:</p>\n<ul>\n<li><code>MessageService.Open(config:MessageConfig)</code></li>\n<li><code>MessageService.Success(config:MessageConfig)</code></li>\n<li><code>MessageService.Error(config:MessageConfig)</code></li>\n<li><code>MessageService.Info(config:MessageConfig)</code></li>\n<li><code>MessageService.Warning(config:MessageConfig)</code></li>\n<li><code>MessageService.Warn(config:MessageConfig)</code> // alias of warning</li>\n<li><code>MessageService.Loading(config:MessageConfig)</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>content of the message</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>time(seconds) before auto-dismiss, don't dismiss if set to 0 or null</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a function that will be called when the message is closed</td>\n<td>event Action</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized Icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Message</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Global static methods</h3>\n<p>Methods for global configuration and destruction are also provided:</p>\n<ul>\n<li><code>MessageService.Config(options:MessageGlobalConfig)</code></li>\n<li><code>MessageService.Destroy()</code></li>\n</ul>\n<h4>message.config</h4>\n<pre><code class=\"language-c#\">MessageService.Config(new MessageGlobalConfig{\n  Top: 100,\n  Duration: 2,\n  MaxCount: 3,\n  Rtl: true,\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Duration</td>\n<td>time before auto-dismiss, in seconds</td>\n<td>double</td>\n<td>3</td>\n</tr>\n<tr>\n<td>MaxCount</td>\n<td>max message show, drop oldest if exceed limit</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Top</td>\n<td>distance from top</td>\n<td>double</td>\n<td>24</td>\n</tr>\n<tr>\n<td>Rtl</td>\n<td>whether to enable RTL mode</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 5,
        "Name": "continuewith",
        "Title": "Task interface",
        "Description": "<p><code>Message</code> provides a Task interface for <code>onClose</code>. The above example will display a new message when the old message is about to close.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"default\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _message.Loading(\"Action in progress..\", 2.5)\n            .ContinueWith((result) =>\n            {\n                _message.Info(\"Loading finished\", 2.5)\n                .ContinueWith((result) =>\n                {\n                    _message.Info(\"Loading finished is finished\", 2.5);\n                });\n            });\n    }\n}",
        "Type": "Demos.Message.demo.ContinueWith",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "duration",
        "Title": "Customize duration",
        "Description": "<p>Customize message display duration from default <code>3s</code> to <code>10s</code>.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"default\" OnClick=\"OnClick\">\n    Customized display duration\n</Button>\n\n@code{\n    private void OnClick()\n    {\n        _message.Success(\"This is a prompt message for success, and it will disappear in 10 seconds\", 10);\n    }\n}",
        "Type": "Demos.Message.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "update",
        "Title": "Update Message Content",
        "Description": "<p>Update message content with unique <code>key</code>.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"updatable-{DateTime.Now.Ticks}\";\n        var config = new MessageConfig()\n        {\n            Content = \"Loading...\",\n            Key = key\n        };\n        _message.Loading(config);\n\n        await Task.Delay(2000);\n\n        config.Content = \"Loaded\";\n        config.Duration = 2;\n        await _message.Success(config);\n    }\n}",
        "Type": "Demos.Message.demo.Update",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "other",
        "Title": "Other types of message",
        "Description": "<p>Messages of success, error and warning types.</p>\n",
        "Code": "@inject MessageService _message\n\n<Space>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Success\">\n            Success\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Error\">\n            Error\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Warning\">\n            Warning\n        </Button>\n    </SpaceItem>\n</Space>\n\n@code{\n    private async Task Success()\n    {\n        await _message.Success(\"This is a success message\");\n    }\n\n    private async Task Error()\n    {\n        await _message.Error(\"This is an error message\");\n\n    }\n\n    private async Task Warning()\n    {\n        await _message.Warning(\"This is a warning message\");\n    }\n}\n",
        "Type": "Demos.Message.demo.Other",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "info",
        "Title": "Normal prompt",
        "Description": "<p>Normal message for information.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private void OnClick()\n    {\n        Console.WriteLine(\"onclick\");\n        _message.Info(\"This is a normal message\");\n    }\n}",
        "Type": "Demos.Message.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "loading",
        "Title": "Message with loading indicator",
        "Description": "<p>Display a global loading indicator, which is dismissed by itself asynchronously.</p>\n",
        "Code": "@inject MessageService _message\n\n    <Button Type=\"default\" OnClick=\"OnClick\">\n        Display a loading indicator\n    </Button>\n\n@code{\n    private async Task OnClick()\n    {\n        var cofig = new MessageConfig()\n        {\n            Content = \"Action in progress..\",\n            Duration = 0\n        };\n        var task =  _message.Loading(cofig);\n        await Task.Delay(2000);\n        task.Start();\n    }\n}",
        "Type": "Demos.Message.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Drawer",
    "Type": "Feedback",
    "Desc": "<p>A panel which slides in from the edge of the screen.</p>\n<h2>When To Use</h2>\n<p>A Drawer is a panel that is typically overlaid on top of a page and slides in from the side.\nIt contains a set of information or actions.<br />\nSince the user can interact with the Drawer without leaving the current page,\ntasks can be achieved more efficiently within thesame context.</p>\n<ul>\n<li>Use a Form to create or edit a set of information.</li>\n<li>Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task,\nDrawer comes very handy.</li>\n<li>When the same Form is needed in multiple places.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>the title for drawer</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Style of the drawer content part</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is visible on top right of the Drawer dialog or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Subcomponent</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Clicking on the mask (area outside the Drawer) to close the Drawer or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for Drawer's mask element.</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Drawer, option could be <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the container of the Drawer dialog.</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the Drawer dialog.</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>placement is top or bottom, height of the Drawer dialog.</td>\n<td>int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Drawer.</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>the offset of in X-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>the offset of in Y-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the Drawer dialog is visible or not.</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to close</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a callback that will be called when a user clicks mask, close button or Cancel button.</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>Specify a callback that will be called before drawer displayed</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "userprofile",
        "Title": "Preview Drawer",
        "Description": "<p>Use Drawer to quickly preview details of an object, such as those in a list.</p>\n",
        "Code": "<div>\n        <AntList DataSource=\"datasource\">\n                    <Item Context=\"item\">\n                        <AntListItemMeta Avatar=@(\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\")\n                                         Description=\"Progresser XTech\">\n                            <Title>\n                                @item.Title\n                            </Title>                            \n                      \n                        </AntListItemMeta>\n\n                        <Button Type=\"@ButtonType.Link\" OnClick=\"(e)=>open(e, item.Title)\">View Profile</Button>\n                    </Item>\n        </AntList>\n\n        <Drawer Width=\"640\" Closable=\"true\" Visible=\"visible\" Title='(\"User Profile\")' OnClose=\"_=>close()\">\n            <AntText Strong=\"true\">Personal</AntText>\n            <AntRow></AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Full Name:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>Henry</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Account:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>AntDesign@example.com</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">City:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>HangZhou</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Country:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>China</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow Gutter=\"12\">\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Birthday:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>February 2,1900</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Website:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText>www.baidu.com</AntText>\n                </AntCol>\n            </AntRow>\n\n            <AntDivider></AntDivider>\n            <AntText Strong=\"true\">Company</AntText>\n            <AntRow></AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Position:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">Programmer</AntText>\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntText Strong=\"true\">Responsibilities:</AntText>\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <AntText Strong=\"false\">Coding</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Department:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">XTech</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Supervisor:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">Lin</AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Skills:</AntText>\n                </AntCol>\n                <AntCol Span=\"20\">\n                    <AntText Strong=\"false\">\n                        C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.\n                    </AntText>\n                </AntCol>\n\n            </AntRow>\n\n            <AntDivider ></AntDivider>\n            <AntText Strong=\"true\">Contacts</AntText>\n            <AntRow></AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Email:</AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\"> ant-design-Blazor@example.com</AntText>\n                </AntCol>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">    Phone Number:     </AntText>\n                </AntCol>\n                <AntCol Span=\"8\">\n                    <AntText Strong=\"false\">+86 181 0000 0000 </AntText>\n                </AntCol>\n            </AntRow>\n            <AntRow>\n                <AntCol Span=\"4\">\n                    <AntText Strong=\"true\">Github:</AntText>\n                </AntCol>\n                <AntCol Span=\"20\">\n                    <AntText Strong=\"false\">https://ant-design-blazor.gitee.io/ </AntText>\n                </AntCol>\n            </AntRow>\n        </Drawer>   \n</div>\n\n   @code{\n\n       public class ListDataSource\n       {\n           public string Title { get; set; }\n       };\n\n       List<ListDataSource> datasource = new List<ListDataSource>() {\n        new ListDataSource(){Title=\"Henry\"},\n        new ListDataSource(){Title=\"Henry\"}\n    };\n       bool visible = false;\n\n\n       void open(MouseEventArgs arg, string Title)\n       {\n           this.visible = true;\n       }\n\n       void close()\n       {\n           this.visible = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Userprofile",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "formindrawer",
        "Title": "Submit form in drawe",
        "Description": "<p>Use form in drawer with submit button.</p>\n",
        "Code": "<div>\n    <Button Icon=\"plus\" Type=\"primary\" @onclick=\"_=>open()\">New account</Button>\n    <Drawer Closable=\"true\" Width=\"720\" Visible=\"visible\" Title='(\"Submit from in Drawer\")' OnClose=\"_=>close()\">\n        <Template style=\"height:90%\">\n            <AntRow Gutter=\"16\">\n                <AntCol Span=\"12\">\n                    <AntText>Name</AntText>\n                    <Input Placeholder=\"Please enter user name\"></Input>\n                </AntCol>\n                <AntCol Span=\"12\">\n                    <AntText>Url</AntText>\n                    <AntDesign.Input Placeholder=\"please enter url\">\n                        <AddOnBefore>Http://</AddOnBefore>\n                        <AddOnAfter>.Com</AddOnAfter>\n                    </AntDesign.Input>\n                </AntCol>\n            </AntRow>\n            <br />\n            <AntRow Gutter=\"16\">\n                <AntCol Span=\"12\">\n                    <AntText>Owner</AntText>\n                    <Input Placeholder=\"Please select a owner\"/>\n                </AntCol>\n                <AntCol Span=\"12\">\n                    <AntText>Type</AntText>\n                    <Input Placeholder=\"please enter url\"/>\n                </AntCol>\n            </AntRow>\n            <br />\n\n            <AntRow>\n                <AntCol Span=\"24\">\n                    <AntText>Description</AntText>\n                    <TextArea Placeholder=\"Please enter your description\">\n\n                    </TextArea>\n                </AntCol>\n            </AntRow>\n            <br />\n            <AntRow>\n                <AntCol Span=\"18\">\n\n                </AntCol>\n                <AntCol Span=\"6\">\n                    <Button Type=\"default\">Cancel</Button>\n                    <Button Type=\"primary\">Submit</Button>\n                </AntCol>\n            </AntRow>\n        </Template>\n    </Drawer>\n</div>\n\n\n@code{\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Formindrawer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "renderdom",
        "Title": "Render in current dom",
        "Description": "<p>Render in current dom. custom container.</p>\n",
        "Code": "<div>\n    <div style=\"height:200px;overflow:hidden;position:relative;border:1px solid #ebedf0; border-radius:2px;padding:48px;text-align:center;background:#fafafa\">\n        Render in this\n        <div style=\"margin-top: 16px\">\n            <Button Type=\"primary\" @onclick=\"_=>open()\">Open</Button>\n        </div>\n        <Drawer Style=\"position:absolute\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Drawer>\n    </div>\n</div>\n\n@code{\n\n    bool visible = false;\n\n\n\n    void open()\n    {\n\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Render_dom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Drawer",
        "Description": "<p>Simplest Usage. Drawer will be displayed on right, and it will be closed when you click the masked area.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" @onclick=\"_=>open()\">Open</Button>\n    <Drawer Closable=\"true\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>\n\n   @code{\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "multiple",
        "Title": "Multi-level drawer",
        "Description": "<p>Open a new drawer on top of an existing drawer to handle multi branch tasks.</p>\n",
        "Code": "<div>\n    <Button  Type=\"primary\" OnClick=\"_=>open()\">Open</Button>\n\n    <Drawer Width=\"@wdFirstLayer\" Closable=\"true\" Visible=\"visible1\" Title='(\"Multi-level drawer\")' OnClose=\"_=>close()\">\n        <Button Type=\"primary\" OnClick=\"_=>ShowDrawer()\">Two-level Drawer</Button>\n        <Drawer Width=\"260\" Closable=\"true\" Visible=\"visible2\" Title='(\"two-level drawer\")' OnClose=\"_=>CloseDrawer()\">\n            <Button Type=\"primary\">This is two-level drawer</Button>\n        </Drawer>\n\n    </Drawer>\n</div>\n\n   @code{\n\n       bool visible1 = false;\n       bool visible2 = false;\n       int wdFirstLayer = 520;\n\n       void open()\n       {\n           this.visible1 = true;\n       }\n\n       void ShowDrawer()\n       {\n\n           this.visible2 = true;\n           wdFirstLayer += 260;\n       }\n\n       void close()\n       {\n           this.visible1 = false;\n       }\n\n       void CloseDrawer()\n       {\n           wdFirstLayer -= 260;\n           this.visible2 = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Custom Placement",
        "Description": "<p>The Drawer can appear from any edge of the screen.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"placement\">\n        <Radio Value=\"top\">top</Radio>\n        <Radio Value=\"right\">right</Radio>\n        <Radio Value=\"bottom\">bottom</Radio>\n        <Radio Value=\"left\">left</Radio>\n    </RadioGroup>\n\n    <Button Type=\"primary\" @onclick=\"_ => open()\">Open</Button>\n    <Drawer Closable=\"true\" Visible=\"@visible\" Placement=\"@placement\" Title='(\"Drawer in different Placement\")' OnClose=\"_ => close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>  \n\n@code{\n\n    string placement = \"right\";\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Placement",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Badge",
    "Type": "Data Display",
    "Desc": "<p>Small numerical value or status descriptor for UI elements.</p>\n<h2>When To Use</h2>\n<p>Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Badge count={5}&gt;\n  &lt;a href=&quot;#&quot; className=&quot;head-example&quot; /&gt;\n&lt;/Badge&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">&lt;Badge count={5} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>Customize Badge dot color</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>Number to show in badge</td>\n<td>ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>Whether to display a red dot instead of <code>count</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>set offset of the badge dot, like<code>[x, y]</code></td>\n<td><code>[number, number]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverflowCount</td>\n<td>Max count to show</td>\n<td>number</td>\n<td>99</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowZero</td>\n<td>Whether to show badge when <code>count</code> is zero</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>Set Badge as a status dot</td>\n<td><code>success</code> | <code>processing</code> | <code>default</code> | <code>error</code> | <code>warning</code></td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Text</td>\n<td>If <code>status</code> is set, <code>text</code> sets the display text of the status <code>dot</code></td>\n<td>string</td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Text to show when hovering over the badge</td>\n<td>string</td>\n<td><code>count</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "change",
        "Title": "Dynamic",
        "Description": "<p>The count will be animated as it changes.</p>\n",
        "Code": "<div>\n    <div>\n        <Badge Count=\"@count\">\n            <a href=\"#\" class=\"head-example\" />\n        </Badge>\n        <ButtonGroup>\n            <Button @onclick=\"_=>decline()\">\n                <AntIcon Type=\"minus\"></AntIcon>\n            </Button>\n            <Button @onclick=\"_=>increase()\">\n                <AntIcon Type=\"plus\"></AntIcon>\n            </Button>\n        </ButtonGroup>\n    </div>\n    <div style=\"margin-top: 10px\">\n        <Badge Dot=\"@show\">\n            <a href=\"#\" class=\"head-example\" />\n        </Badge>\n        <AntSwitch OnChange=\"onChange\" Checked=\"@show\" />\n    </div>\n</div>\n\n@code {\n    int count = 5;\n    bool show = true;\n\n    void increase()\n    {\n        count++;\n    }\n\n    void decline()\n    {\n        count--;\n        if (count < 0)\n        {\n            count = 0;\n        }\n    }\n\n    void onChange(bool show)\n    {\n        this.show = show;\n    }\n}\n",
        "Type": "Demos.Badge.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage. Badge will be hidden when <code>count</code> is <code>0</code>, but we can use <code>showZero</code> to show it.</p>\n",
        "Code": "<div>\n    <Badge Count=\"5\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"0\" ShowZero>\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    @{\n        RenderFragment count = @<AntIcon Type=\"clock-circle\" Fill=\"#f5222d\"/>;\n    }\n    <Badge Count=\"@(count)\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>\n\n",
        "Type": "Demos.Badge.demo.Basic",
        "Style": "\n    .ant-badge:not(.ant-badge-not-a-wrapper) {\n        margin-right: 20px;\n    }\n    .ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n        margin-right: 0;\n        margin-left: 20px;\n    }\n    .head-example {\n        width: 42px;\n        height: 42px;\n        border-radius: 2px;\n        background: #eee;\n        display: inline-block;\n        vertical-align: middle;\n    }\n    [data-theme=\"dark\"] .head-example {\n        background: rgba(255,255,255,.12);\n    }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "overflow",
        "Title": "Overflow Count",
        "Description": "<p><code>${overflowCount}+</code> is displayed when count is larger than <code>overflowCount</code>. The default value of <code>overflowCount</code> is <code>99</code>.</p>\n",
        "Code": "<div>\n    <Badge Count=\"99\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"100\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"99\" OverflowCount=\"10\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"1000\" OverflowCount=\"999\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>\n",
        "Type": "Demos.Badge.demo.Overflow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "colorful",
        "Title": "Colorful Badge",
        "Description": "<p>We preset a series of colorful Badge styles for use in different situations. You can also set it to a hex color string for custom color.</p>\n",
        "Code": "<div>\n    <h4 style=\"margin-bottom: 16px\">Presets:</h4>\n    <div>\n        @foreach (var color in colors)\n        {\n            <div key=\"@color\">\n                <Badge Color=\"@color\" Text=\"@color\" />\n            </div>\n        }\n    </div>\n    <h4 style=\"margin:16px 0;\">Custom:</h4>\n    <div>\n        <Badge Color=\"#f50\" Text=\"#f50\" />\n        <br />\n        <Badge Color=\"#2db7f5\" Text=\"#2db7f5\" />\n        <br />\n        <Badge Color=\"#87d068\" Text=\"#87d068\" />\n        <br />\n        <Badge Color=\"#108ee9\" Text=\"#108ee9\" />\n    </div>\n</div>\n\n<style>\n    .ant-tag {\n        margin-bottom: 8px;\n    }\n</style>\n\n@code\n{\n    string[] colors =\n    {\n        \"pink\",\n        \"red\",\n        \"yellow\",\n        \"orange\",\n        \"cyan\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"geekblue\",\n        \"magenta\",\n        \"volcano\",\n        \"gold\",\n        \"lime\",\n    };\n}\n",
        "Type": "Demos.Badge.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "link",
        "Title": "Clickable",
        "Description": "<p>The badge can be wrapped with <code>a</code> tag to make it linkable.</p>\n",
        "Code": "<a href=\"#\">\n    <Badge Count=\"5\">\n        <span class=\"head-example\" />\n    </Badge>\n</a>",
        "Type": "Demos.Badge.demo.Link",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 100,
        "Name": "title",
        "Title": "Title",
        "Description": "<p>The badge will display <code>title</code> when hovered over, instead of <code>count</code>.</p>\n",
        "Code": "<div>\n    <Badge Count=\"5\" Title=\"Custom hover text\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>",
        "Type": "Demos.Badge.demo.Title",
        "Style": "\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-right: 20px;\n}\n\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 2px;\n  background: #eee;\n  display: inline-block;\n}\n[data-theme=\"dark\"] .head-example {\n  background: rgba(255,255,255,.12);\n}\n\n",
        "Debug": true
      },
      {
        "Order": 3,
        "Name": "dot",
        "Title": "Red badge",
        "Description": "<p>This will simply display a red badge, without a specific count. If count equals 0, it won't display the dot.</p>\n",
        "Code": "<div>\n    <Badge Dot>\n        <AntIcon Type=\"notification\"/>\n    </Badge>\n    <Badge Count=\"0\" Dot>\n        <AntIcon Type=\"notification\" />\n    </Badge>\n    <Badge Dot>\n        <a href=\"#\">Link something</a>\n    </Badge>\n</div>",
        "Type": "Demos.Badge.demo.Dot",
        "Style": "\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "nowrapper",
        "Title": "Standalone",
        "Description": "<p>Used in standalone when children is empty.</p>\n",
        "Code": "<div>\n    <Badge Count=\"25\" />\n    <Badge Count=\"4\" Class=\"site-badge-count-4\" />\n    <Badge Class=\"site-badge-count-109\" Count=\"109\" Style=\"background-color: #52c41a\" />\n</div>\n\n<style>\n    .site-badge-count-4 .ant-badge-count {\n        background-color: #fff;\n        color: #999;\n        box-shadow: 0 0 0 1px #d9d9d9 inset;\n    }\n</style>",
        "Type": "Demos.Badge.demo.NoWrapper",
        "Style": "\n.ant-badge-not-a-wrapper:not(.ant-badge-status) {\n  margin-right: 8px;\n}\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n[data-theme=\"dark\"] .site-badge-count-4 .ant-badge-count {\n  background-color: #141414;\n  box-shadow: 0 0 0 1px #434343 inset;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "status",
        "Title": "Status",
        "Description": "<p>Standalone badge with status.</p>\n",
        "Code": "<div>\n    <Badge Status=\"success\" />\n    <Badge Status=\"error\" />\n    <Badge Status=\"default\" />\n    <Badge Status=\"processing\" />\n    <Badge Status=\"warning\" />\n    <br />\n    <Badge Status=\"success\" Text=\"Success\" />\n    <br />\n    <Badge Status=\"error\" Text=\"Error\" />\n    <br />\n    <Badge Status=\"default\" Text=\"Default\" />\n    <br />\n    <Badge Status=\"processing\" Text=\"Processing\" />\n    <br />\n    <Badge Status=\"warning\" Text=\"Warning\" />\n</div>",
        "Type": "Demos.Badge.demo.Status",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Rate",
    "Type": "Data Entry",
    "Desc": "<p>Rate component.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Show evaluation.</li>\n<li>A quick rating operation on something.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear</td>\n<td>whether to allow clear when click again</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>allowHalf</td>\n<td>whether to allow semi selection</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>character</td>\n<td>custom character of rate</td>\n<td>ReactNode</td>\n<td><a href=\"/components/icon/\">&lt;StarFilled /&gt;</a></td>\n</tr>\n<tr>\n<td>className</td>\n<td>custom class name of rate</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>star count</td>\n<td>number</td>\n<td>5</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>default value</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>read only, unable to interact</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>custom style object of rate</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>tooltips</td>\n<td>Customize tooltip by each character</td>\n<td>string[]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>current value</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>callback when component lose focus</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>callback when select value</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>callback when component get focus</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>onHoverChange</td>\n<td>callback when hover item</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>onKeyDown</td>\n<td>callback when keydown on component</td>\n<td>Function(event)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "text",
        "Title": "Show copywriting",
        "Description": "<p>Add copywriting in rate components.</p>\n",
        "Code": "<Rate @bind-Value=\"value\" Tooltips=\"@desc\" />\n<span class=\"ant-rate-text\">@(desc[(int)value-1])</span>\n\n@code\n{\n    string[] desc = new string[] { \"terrible\", \"bad\", \"normal\", \"good\", \"wonderful\" };\n    decimal value = 3M;\n}\n",
        "Type": "Demos.Rate.demo.Text",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "Read only",
        "Description": "<p>Read only, can't use mouse to interact.</p>\n",
        "Code": "<Rate Disabled DefaultValue=\"2\" />",
        "Type": "Demos.Rate.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "half",
        "Title": "Half star",
        "Description": "<p>Support select half star.</p>\n",
        "Code": "<Rate AllowHalf=\"true\" DefaultValue=\"3.5M\" />\n",
        "Type": "Demos.Rate.demo.Half",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "clear",
        "Title": "Clear star",
        "Description": "<p>Support set allow to clear star when click again.</p>\n",
        "Code": "<Rate AllowClear=\"true\" DefaultValue=\"2\" />\n<span class=\"ant-rate-text\">AllowClear: true</span>\n<br />\n<Rate AllowClear=\"false\" DefaultValue=\"3\"></Rate>\n<span class=\"ant-rate-text\">AllowClear: false</span>",
        "Type": "Demos.Rate.demo.Clear",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "<Rate />\n",
        "Type": "Demos.Rate.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "character",
        "Title": "Other Character",
        "Description": "<p>Replace the default star to other character like alphabet, digit, iconfont or even Chinese word.</p>\n",
        "Code": "<Rate Character=\"@Character1\" AllowHalf=\"true\" DefaultValue=\"3\" />\n<br />\n<Rate Character=\"@Character2\" AllowHalf=\"true\" DefaultValue=\"3\" />\n<br />\n<Rate Character=\"@Character3\" AllowHalf=\"true\" DefaultValue=\"3\" />\n\n@code\n{\n    RenderFragment<RateItemRenderContext> Character1 = (builder) =>\n    @<Template>\n        <AntIcon Type=\"heart\" Theme=\"fill\" />\n    </Template>;\n\n    RenderFragment<RateItemRenderContext> Character2 = (builder) =>\n    @<Template>\n        A\n    </Template>;\n\n    RenderFragment<RateItemRenderContext> Character3 = (builder) =>\n    @<Template>\n        好\n    </Template>;\n}\n",
        "Type": "Demos.Rate.demo.Character",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Layout",
    "Type": "Layout",
    "Desc": "<p>Handling the overall layout of a page.</p>\n<h2>Specification</h2>\n<h3>Size</h3>\n<p>The first level navigation is left aligned near a logo, and the secondary menu is right aligned.</p>\n<ul>\n<li>Top Navigation: the height of the first level navigation <code>64px</code>, the second level navigation <code>48px</code>.</li>\n<li>Top Navigation (for landing pages): the height of the first level navigation <code>80px</code>, the second level navigation <code>56px</code>.</li>\n<li>Calculation formula of a top navigation: <code>48+8n</code>.</li>\n<li>Calculation formula of an aside navigation: <code>200+8n</code>.</li>\n</ul>\n<h3>Interaction rules</h3>\n<ul>\n<li>The first level navigation and the last level navigation should be distinguishable by visualization;</li>\n<li>The current item should have the highest priority of visualization;</li>\n<li>When the current navigation item is collapsed, the style of the current navigation item is applied to its parent level;</li>\n<li>The left side navigation bar has support for both the accordion and expanding styles; you can choose the one that fits your case the best.</li>\n</ul>\n<h2>Visualization rules</h2>\n<p>Style of a navigation should conform to its level.</p>\n<ul>\n<li><p><strong>Emphasis by colorblock</strong></p>\n<p>When background color is a deep color, you can use this pattern for the parent level navigation item of the current page.</p>\n</li>\n<li><p><strong>The highlight match stick</strong></p>\n<p>When background color is a light color, you can use this pattern for the current page navigation item; we recommend using it for the last item of the navigation path.</p>\n</li>\n<li><p><strong>Highlighted font</strong></p>\n<p>From the visualization aspect, a highlighted font is stronger than colorblock; this pattern is often used for the parent level of the current item.</p>\n</li>\n<li><p><strong>Enlarge the size of the font</strong></p>\n<p><code>12px</code>, <code>14px</code> is a standard font size of navigations, <code>14px</code> is used for the first and the second level of the navigation. You can choose an appropriate font size regarding the level of your navigation.</p>\n</li>\n</ul>\n<h2>Component Overview</h2>\n<ul>\n<li><code>Layout</code>: The layout wrapper, in which <code>Header</code> <code>Sider</code> <code>Content</code> <code>Footer</code> or <code>Layout</code> itself can be nested, and can be placed in any parent container.</li>\n<li><code>Header</code>: The top layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Sider</code>: The sidebar with default style and basic functions, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Content</code>: The content layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Footer</code>: The bottom layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n</ul>\n<blockquote>\n<p>Based on <code>flex layout</code>, please pay attention to the <a href=\"http://caniuse.com/#search=flex\">compatibility</a>.</p>\n</blockquote>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Layout&gt;\n  &lt;Header&gt;header&lt;/Header&gt;\n  &lt;Layout&gt;\n    &lt;Sider&gt;left sidebar&lt;/Sider&gt;\n    &lt;Content&gt;main content&lt;/Content&gt;\n    &lt;Sider&gt;right sidebar&lt;/Sider&gt;\n  &lt;/Layout&gt;\n  &lt;Footer&gt;footer&lt;/Footer&gt;\n&lt;/Layout&gt;\n</code></pre>\n<h3>Layout</h3>\n<p>The wrapper.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>container className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hasSider</td>\n<td>whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the styles</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>APIs of <code>Layout.Header</code> <code>Layout.Footer</code> <code>Layout.Content</code> are the same as that of <code>Layout</code>.</p>\n</blockquote>\n<h3>Layout.Sider</h3>\n<p>The sidebar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>breakpoint</td>\n<td><a href=\"/components/grid#Col\">breakpoints</a> of the responsive layout</td>\n<td><code>xs</code> | <code>sm</code> | <code>md</code> | <code>lg</code> | <code>xl</code> | <code>xxl</code> }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>container className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsed</td>\n<td>to set the current status</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsedWidth</td>\n<td>width of the collapsed sidebar, by setting to <code>0</code> a special trigger will appear</td>\n<td>number</td>\n<td>80</td>\n</tr>\n<tr>\n<td>collapsible</td>\n<td>whether can be collapsed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>defaultCollapsed</td>\n<td>to set the initial status</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>reverseArrow</td>\n<td>reverse direction of arrow, for a sider that expands from the right</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the styles</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>color theme of the sidebar</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>dark</code></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>specify the customized trigger, set to null to hide the trigger</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>width of the sidebar</td>\n<td>number|string</td>\n<td>200</td>\n</tr>\n<tr>\n<td>onCollapse</td>\n<td>the callback function, executed by clicking the trigger or activating the responsive layout</td>\n<td>(collapsed, type) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBreakpoint</td>\n<td>the callback function, executed when <a href=\"/components/grid#API\">breakpoints</a> changed</td>\n<td>(broken) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>zeroWidthTriggerStyle</td>\n<td>to customize the styles of the special trigger that appears when <code>collapsedWidth</code> is 0</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>breakpoint width</h4>\n<pre><code class=\"language-js\">{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n</code></pre>\n<style>\n  [data-theme=\"dark\"] .site-layout-background {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] .site-layout-header-background {\n    background: #1f1f1f;\n  }\n</style>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 2,
        "Name": "topside2",
        "Title": "Header Sider 2",
        "Description": "<p>Both the top navigation and the sidebar, commonly used in application site.</p>\n",
        "Code": "<Layout>\n    <Header Class=\"header\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Layout>\n        <Sider Width=\"200\" Class=\"site-layout-background\">\n            <Menu Mode=\"MenuMode.Inline\"\n                  DefaultSelectedKeys=@(new[] {\"1\"})\n                  DefaultOpenKeys=@(new[] {\"sub1\"})\n                  Style=\"height: 100%; border-right: 0;\">\n                @{\n                    RenderFragment sub1Title =\n                        @<span>\n                            <AntIcon Type=\"user\" Theme=\"outline\"/>\n                            subnav 1\n                        </span>;\n                }\n                <SubMenu Key=\"sub1\" Title=sub1Title>\n                    <MenuItem Key=\"1\">option1</MenuItem>\n                    <MenuItem Key=\"2\">option2</MenuItem>\n                    <MenuItem Key=\"3\">option3</MenuItem>\n                    <MenuItem Key=\"4\">option4</MenuItem>\n                </SubMenu>\n                @{\n                    RenderFragment sub2Title =\n                        @<span>\n                            <AntIcon Type=\"laptop\" Theme=\"outline\"/>\n                            subnav 2\n                        </span>;\n                }\n                <SubMenu Key=\"sub2\" Title=sub2Title>\n                    <MenuItem Key=\"5\">option5</MenuItem>\n                    <MenuItem Key=\"6\">option6</MenuItem>\n                    <MenuItem Key=\"7\">option7</MenuItem>\n                    <MenuItem Key=\"8\">option8</MenuItem>\n                </SubMenu>\n                @{\n                    RenderFragment sub3Title =\n                        @<span>\n                            <AntIcon Type=\"notification\" Theme=\"outline\"/>\n                            subnav 3\n                        </span>;\n                }\n                <SubMenu Key=\"sub3\"  Title=sub3Title >\n                <MenuItem Key=\"9\">option9</MenuItem>\n                <MenuItem Key=\"10\">option10</MenuItem>\n                <MenuItem Key=\"11\">option11</MenuItem>\n                <MenuItem Key=\"12\">option12</MenuItem>\n                </SubMenu>\n            </Menu>\n        </Sider>\n        <Layout Style=\" padding: 0 24px 24px;\">\n            <Breadcrumb Style=\"margin: 16px 0;\">\n                <BreadcrumbItem>Home</BreadcrumbItem>\n                <BreadcrumbItem>List</BreadcrumbItem>\n                <BreadcrumbItem>App</BreadcrumbItem>\n            </Breadcrumb>\n            <Content Class=\"site-layout-background\" Style=\" padding: 24px; margin: 0; min-height: 280px;\">\n                Content\n            </Content>\n        </Layout>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-top-side-2 .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 28px 16px 0;\n        float: left;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.TopSide2",
        "Style": "\n  #components-layout-demo-top-side-2 .logo {\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "topside",
        "Title": "Header-Sider",
        "Description": "<p>Both the top navigation and the sidebar, commonly used in documentation site.</p>\n",
        "Code": "<Layout>\n    <Header Class=\"header\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Style=\"padding: 0 50px\">\n        <Breadcrumb Style=\" margin: 16px 0\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <Layout Class=\"site-layout-background\" Style=\"padding: 24px 0;\">\n            <Sider Class=\"site-layout-background\" Width=\"200\">\n                <Menu Mode=\"MenuMode.Inline\"\n                      DefaultSelectedKeys=@(new[] {\"1\"})\n                      DefaultOpenKeys=@(new[] {\"sub1\"})\n                      Style=\"height: 100%;\">\n                    @{ RenderFragment sub1Title =\n                        @<span>\n                            <AntIcon Type=\"user\" Theme=\"outline\" />\n                            subnav 1\n                        </span>; }\n                    <SubMenu Key=\"sub1\" Title=sub1Title>\n                        <MenuItem Key=\"1\">option1</MenuItem>\n                        <MenuItem Key=\"2\">option2</MenuItem>\n                        <MenuItem Key=\"3\">option3</MenuItem>\n                        <MenuItem Key=\"4\">option4</MenuItem>\n                    </SubMenu>\n                    @{ RenderFragment sub2Title =\n                        @<span>\n                            <AntIcon Type=\"laptop\" Theme=\"outline\" />\n                            subnav 2\n                        </span>; }\n                    <SubMenu Key=\"sub2\" Title=sub2Title>\n                        <MenuItem Key=\"5\">option5</MenuItem>\n                        <MenuItem Key=\"6\">option6</MenuItem>\n                        <MenuItem Key=\"7\">option7</MenuItem>\n                        <MenuItem Key=\"8\">option8</MenuItem>\n                    </SubMenu>\n                    @{ RenderFragment sub3Title =\n                        @<span>\n                            <AntIcon Type=\"notification\" Theme=\"outline\" />\n                            subnav 3\n                        </span>; }\n                    <SubMenu Key=\"sub3\" Title=sub3Title>\n                        <MenuItem Key=\"9\">option9</MenuItem>\n                        <MenuItem Key=\"10\">option10</MenuItem>\n                        <MenuItem Key=\"11\">option11</MenuItem>\n                        <MenuItem Key=\"12\">option12</MenuItem>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Content Style=\"padding:0 24px; min-height: 280px;\">Content</Content>\n        </Layout>\n    </Content>\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    #components-layout-demo-top-side .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 28px 16px 0;\n        float: left;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.TopSide",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Structure",
        "Description": "<p>Classic page layouts.</p>\n",
        "Code": "<div>\n    <Layout>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Header>Header</Header>\n        <Layout>\n            <Sider>Sider</Sider>\n            <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Header>Header</Header>\n        <Layout>\n            <Content>Content</Content>\n            <Sider>Sider</Sider>\n        </Layout>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Sider>Sider</Sider>\n        <Layout>\n            <Header>Header</Header>\n            <Content>Content</Content>\n            <Footer>Footer</Footer>\n        </Layout>\n    </Layout>\n</div>",
        "Type": "Demos.Layout.demo.Basic",
        "Style": "\n#components-layout-demo-basic .code-box-demo {\n  text-align: center;\n}\n#components-layout-demo-basic .ant-layout-header,\n#components-layout-demo-basic .ant-layout-footer {\n  background: #7dbcea;\n  color: #fff;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-header {\n  background: #6aa0c7;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-footer {\n  background: #6aa0c7;\n}\n#components-layout-demo-basic .ant-layout-footer {\n  line-height: 1.5;\n}\n#components-layout-demo-basic .ant-layout-sider {\n  background: #3ba0e9;\n  color: #fff;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-sider {\n  background: #3499ec;\n}\n#components-layout-demo-basic .ant-layout-content {\n  background: rgba(16, 142, 233, 1);\n  color: #fff;\n  min-height: 120px;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-content {\n  background: #107bcb;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout {\n  margin-bottom: 48px;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout:last-child {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "fixed",
        "Title": "Fixed Header",
        "Description": "<p>Fixed Header is generally used to fix the top navigation to facilitate page switching.</p>\n",
        "Code": "<h3>Fixed</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Layout.demo.Fixed",
        "Style": "\n[data-theme=\"dark\"] .site-layout .site-layout-background {\n  background: #141414;\n}\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customtrigger",
        "Title": "Custom trigger",
        "Description": "<p>If you want to use a customized trigger, you can hide the default one by setting <code>trigger={null}</code>.</p>\n",
        "Code": "<h3>CustomTrigger</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Layout.demo.CustomTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "fixedsider",
        "Title": "Fixed Sider",
        "Description": "<p>When dealing with long content, a fixed sider can provide a better user experience.</p>\n",
        "Code": "<h3>FixedSider</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Layout.demo.FixedSider",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "responsive",
        "Title": "Responsive",
        "Description": "<p>Layout.Sider supports responsive layout.</p>\n<blockquote>\n<p>Note: You can get a responsive layout by setting <code>breakpoint</code>, the Sider will collapse to the width of <code>collapsedWidth</code> when window width is below the <code>breakpoint</code>. And a special trigger will appear if the <code>collapsedWidth</code> is set to <code>0</code>.</p>\n</blockquote>\n",
        "Code": "<Layout>\n    <Sider Breakpoint=\"lg\"\n           CollapsedWidth=\"0\"\n           OnBreakpoint=\"broken => {\n            Console.WriteLine(broken);\n        }\"\n           OnCollapse=\"collapsed => {\n            Console.WriteLine(collapsed);\n        }\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"4\"})>\n            <MenuItem Key=\"1\">\n                <AntIcon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <AntIcon Type=\"video-camera\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <AntIcon Type=\"upload\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 3</span>\n            </MenuItem>\n            <MenuItem Key=\"4\">\n                <AntIcon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 4</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout>\n        <Header Class=\"site-layout-sub-header-background\" Style=\"padding: 0;\" />\n        <Content Style=\" margin: 24px 16px 0;\">\n            <div class=\"site-layout-background\" style=\"padding: 24px; min-height: 360px\">\n                content\n            </div>\n        </Content>\n        <Footer Style=\"text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-responsive .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout-sub-header-background {\n        background: #fff;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Responsive",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-sub-header-background {\n    background: #141414;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "side",
        "Title": "Sider",
        "Description": "<p>Two-columns layout. The sider menu can be collapsed when horizontal space is limited.</p>\n<p>Generally, the mainnav is placed on the left side of the page, and the secondary menu is placed on the top of the working area. Contents will adapt the layout to the viewing area to improve the horizontal space usage, while the layout of the whole page is not stable.</p>\n<p>The level of the aside navigation is scalable. The first, second, and third level navigations could be present more fluently and relevantly, and aside navigation can be fixed, allowing the user to quickly switch and spot the current position, improving the user experience. However, this navigation occupies some horizontal space of the contents</p>\n",
        "Code": "@*<Layout Style=\"min-height: 100vh; \">\n    <Sider Collapsible Collapsed=@collapsed OnCollapse=@onCollapse>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" DefaultSelectedKeys=@(new[]{\"1\"}) Mode=\"MenuMode.Inline\">\n            <MenuItem Key=\"1\">\n                <AntIcon Type=\"pie-chart\" Theme=\"outline\" />\n                <span>Option 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <AntIcon Type=\"desktop\" Theme=\"outline\" />\n                <span>Option 2</span>\n            </MenuItem>\n            @{\n                RenderFragment sub1Title =\n                    @<span>\n                        <AntIcon Type=\"user\" Theme=\"outline\"/>\n                        <span>User</span>\n                    </span>;\n            }\n            <SubMenu Key=\"sub1\" Title=sub1Title>\n                <MenuItem Key=\"3\">Tom</MenuItem>\n                <MenuItem Key=\"4\">Bill</MenuItem>\n                <MenuItem Key=\"5\">Alex</MenuItem>\n            </SubMenu>\n            @{\n                RenderFragment sub2Title =\n                    @<span>\n                        <AntIcon Type=\"team\" Theme=\"outline\"/>\n                        <span>Team</span>\n                    </span>;\n            }\n            <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"6\">Team 1</MenuItem>\n            <MenuItem Key=\"8\">Team 2</MenuItem>\n            </SubMenu>\n            <MenuItem Key=\"9\">\n                <AntIcon Type=\"file\" Theme=\"outline\"/>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\" >\n        <Header Class=\"site-layout-background\" Style=\" padding: 0 ;\" />\n        <Content Style=\"margin:0 16px;\" >\n            <Breadcrumb Style=\"margin:16px 0;\">\n                <BreadcrumbItem>User</BreadcrumbItem>\n                <BreadcrumbItem>Bill</BreadcrumbItem>\n            </Breadcrumb>\n            <div class=\"site-layout-background\" style=\"padding: 24; min-height: 360px\">\n                Bill is a cat.\n            </div>\n        </Content>\n        <Footer Style=\"text-align:center \">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>*@\n\n\n@code {\n    bool collapsed;\n\n   void onCollapse(bool collapsed) {\n        Console.WriteLine(collapsed);\n        this.collapsed =collapsed;\n    }\n}\n\n\n<style>\n    #components-layout-demo-side .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Side",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "customtriggerdebug",
        "Title": "Custom trigger debug",
        "Description": "",
        "Code": "<h3>CustomTriggerDebug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Layout.demo.CustomTriggerDebug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 1,
        "Name": "top",
        "Title": "Header-Content-Footer",
        "Description": "<p>The most basic &quot;header-content-footer&quot; layout.</p>\n<p>Generally, the mainnav is placed at the top of the page, and includes the logo, the first level navigation, and the secondary menu (users, settings, notifications) from left to right in it. We always put contents in a fixed size navigation (eg: <code>1200px</code>), the layout of the whole page is stable, it's not affected by viewing area.</p>\n<p>Top-bottom structure is conform with the top-bottom viewing habit, it's a classical navigation pattern of websites. This pattern demonstrates efficiency in the main workarea, while using some vertical space. And because the horizontal space of the navigation is limited, this pattern is not suitable for cases when the first level navigation contains many elements or links</p>\n",
        "Code": "<Layout Class=\"layout\">\n    <Header>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new[]{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Style=\"padding: 0 50px;\">\n        <Breadcrumb Style=\"margin: 16px 0;\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <div class=\"site-layout-content\">Content</div>\n    </Content>\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    .site-layout-content {\n        background: #fff;\n        padding: 24px;\n        min-height: 280px;\n    }\n    #components-layout-demo-top .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 24px 16px 0;\n        float: left;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Top",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-content {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] #components-layout-demo-top .logo {\n    background: rgba(255,255,255,0.3);\n  }\n\n",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Menu",
    "Type": "Navigation",
    "Desc": "<p>A versatile menu for navigation.</p>\n<h2>When To Use</h2>\n<p>Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. Ant Design offers top and side navigation options. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website.</p>\n<p>More layouts with navigation: <a href=\"/components/layout\">Layout</a>.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;Menu&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;SubMenu&quot;&gt;\n    &lt;Menu.Item&gt;SubMenuItem&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>Array with the keys of default opened sub menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>Array with the keys of default selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>Render submenu into DOM before it becomes visible</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>Specifies the collapsed status when menu is inline mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>Indent (in pixels) of inline menu items on each level</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>Type of menu; <code>vertical</code>, <code>horizontal</code>, or <code>inline</code></td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>Allows selection of multiple items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>Array with the keys of currently opened sub-menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>Allows selecting menu items</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Array with the keys of currently selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>Style of the root node</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>Delay time to hide submenu when mouse leaves (in seconds)</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>Delay time to show submenu when mouse enters, (in seconds)</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>Color theme of the menu</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>Called when a menu item is clicked</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>Called when a menu item is deselected (multiple mode only)</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>Called when sub-menus are opened or closed</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Called when a menu item is selected</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>none</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>Customized icon when menu is collapsed</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>Whether menu item is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the menu item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Set display title for collapsed item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>Sub-menu class name</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>Sub-menus or sub-menu items</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Whether sub-menu is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the sub-menu</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Title of the sub-menu</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>Callback executed when the sub-menu title is clicked</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>sub-menu items</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>title of the group</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>Divider line in between menu items, only used in vertical popup Menu or Dropdown Menu.</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "theme",
        "Title": "Menu Themes",
        "Description": "<p>There are two built-in themes: 'light' and 'dark'. The default value is 'light'.</p>\n",
        "Code": "<div>\n    <AntSwitch Checked=\"theme == MenuTheme.Dark\" OnChange=changeTheme CheckedChildren=@(\"Dark\") UnCheckedChildren=@(\"Light\") />\n    <br />\n    <br />\n    <Menu Theme=theme\n          OnMenuItemClicked=handleClick\n          Style=\" width: 256px \"\n          DefaultOpenKeys=@(new []{\"sub1\"})\n          SelectedKeys=@(new []{current})\n          Mode=\"MenuMode.Inline\">\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"5\">Option 5</MenuItem>\n            <MenuItem Key=\"6\">Option 6</MenuItem>\n            <SubMenu Key=\"sub3\" Title=\"@(\"Submenu\")\">\n                <MenuItem Key=\"7\">Option 7</MenuItem>\n                <MenuItem Key=\"8\">Option 8</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub4\" Title=sub4Title>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    MenuTheme theme = MenuTheme.Dark;\n    string current = \"1\";\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n    void handleClick(MenuItem e)\n    {\n        current = e.Key;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.Theme",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "inline",
        "Title": "Inline menu",
        "Description": "<p>Vertical menu with inline submenus.</p>\n",
        "Code": "<Menu Style=\"width: 256;\"\n      DefaultSelectedKeys=@(new[]{\"1\"})\n      DefaultOpenKeys=@(new[]{\"sub1\"})\n      Mode=@MenuMode.Inline>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItemGroup Key=\"g1\" Title=@(\"Item 1\")>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Key=\"g2\" Title=@(\"Iem 2\")>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n    @<span>\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n        <span>Navigation One</span>\n    </span>;\n\nRenderFragment sub2Title =\n@<span>\n    <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n    <span>Navigation Two</span>\n</span>;\n\nRenderFragment sub4Title =\n@<span>\n    <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n    <span>Navigation Three</span>\n</span>;\n}\n",
        "Type": "Demos.Menu.demo.Inline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inlinecollapsed",
        "Title": "Collapsed inline menu",
        "Description": "<p>Inline menu could be collapsed.</p>\n<p>Here is <a href=\"/components/layout/#components-layout-demo-side\">a complete demo</a> with sider layout.</p>\n",
        "Code": "<div style=\"width: 256;\">\n    <Button Type=\"primary\" OnClick=\"ToggleCollapsed\" Style=\"margin-bottom: 16px\">\n        @if (collapsed)\n        {\n            <AntIcon  Type=\"menu-unfold\" Theme=\"outline\"></AntIcon>\n        }\n        else\n        {\n            <AntIcon  Type=\"menu-fold\" Theme=\"outline\"></AntIcon>\n        }\n    </Button>\n    <Menu\n        DefaultSelectedKeys=@(new[]{\"1\"})\n        DefaultOpenKeys=@(new[]{\"sub1\"})\n        Mode=MenuMode.Inline\n        Theme=MenuTheme.Dark\n        InlineCollapsed=collapsed\n    >\n        <MenuItem Key=\"1\">\n            <AntIcon Type=\"pie-chart\" Theme=\"outline\"></AntIcon>\n            <span>Option 1</span>\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <AntIcon Type=\"desktop\" Theme=\"outline\"></AntIcon>\n            <span>Option 2</span>\n        </MenuItem>\n        <MenuItem Key=\"3\">\n            <AntIcon Type=\"contaainer\" Theme=\"outline\"></AntIcon>\n            <span>Option 3</span>\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title >\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n    bool collapsed = false;\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    void ToggleCollapsed()\n    {\n        collapsed = !collapsed;\n    }\n}\n",
        "Type": "Demos.Menu.demo.InlineCollapsed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "router",
        "Title": "Router",
        "Description": "<p>Automatically activate menu items based on routing, should work with <a href=\"https://angular.io/api/router/RouterLink\">MenuLink</a>.</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Horizontal\">\n    <MenuItem>\n        <MenuLink href=\"/en-US/components/menu\" Match=\"NavLinkMatch.All\">English Menu Document</MenuLink>\n    </MenuItem>\n    <MenuItem>\n        <MenuLink href=\"/zh-CN/components/menu\" Match=\"NavLinkMatch.All\">Chinese Menu Document</MenuLink>\n    </MenuItem>\n</Menu>",
        "Type": "Demos.Menu.demo.Router",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "Vertical menu",
        "Description": "<p>Submenus open as pop-ups.</p>\n",
        "Code": "<Menu OnMenuItemClicked=handleClick Style=\" width: 256px\" Mode=MenuMode.Vertical>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n    <MenuItemGroup Title=@(\"Item 1\")>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n    </MenuItemGroup>\n    <MenuItemGroup Title=@(\"Item 2\")>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\"  Title=sub2Title >\n    <MenuItem Key=\"5\">Option 5</MenuItem>\n    <MenuItem Key=\"6\">Option 6</MenuItem>\n    <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n    </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title >\n    <MenuItem Key=\"9\">Option 9</MenuItem>\n    <MenuItem Key=\"10\">Option 10</MenuItem>\n    <MenuItem Key=\"11\">Option 11</MenuItem>\n    <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n\n    void handleClick()\n    {\n\n    }\n}\n",
        "Type": "Demos.Menu.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "horizontal",
        "Title": "Top Navigation",
        "Description": "<p>Horizontal top navigation menu.</p>\n",
        "Code": "<Menu Mode=MenuMode.Horizontal>\n    <MenuItem Key=\"mail\">\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n        Navigation One\n    </MenuItem>\n    <MenuItem Key=\"app\" Disabled>\n        <AntIcon Type=\"appstore\" Theme=\"outline\" ></AntIcon>\n        Navigation Two\n    </MenuItem>\n    <SubMenu Title=sub1Title>\n        <MenuItemGroup Title=@(\"Item 1\")>\n            <MenuItem Key=\"setting:1\">Option 1</MenuItem>\n                <MenuItem Key=\"setting:2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Title=@(\"Item 2\")>\n                <MenuItem Key=\"setting:3\">Option 3</MenuItem>\n                <MenuItem Key=\"setting:4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <MenuItem Key=\"alipay\">\n        <MenuLink href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Navigation Four - Link\n        </MenuLink>\n    </MenuItem>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n        @<Template>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            Navigation Three - Submenu\n        </Template>;\n}\n",
        "Type": "Demos.Menu.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "switchmode",
        "Title": "Switch the menu type",
        "Description": "<p>Show the dynamic switching mode (between 'inline' and 'vertical').</p>\n",
        "Code": "<div>\n    <AntSwitch OnChange=changeMode /> Change Mode\n    <div class=\"ant-divider ant-divider-vertical\" role=\"separator\"></div>\n    <AntSwitch OnChange=changeTheme/> Change Style\n    <br />\n    <br />\n    <Menu Style=\" width: 256px ;\"\n          DefaultSelectedKeys=@(new[]{\"1\"})\n          DefaultOpenKeys=@(new[]{\"sub1\"})\n          Mode=this.mode\n          Theme=this.theme>\n        <MenuItem Key=\"1\">\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            Navigation One\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <AntIcon Type=\"calendar\" Theme=\"outline\"></AntIcon>\n            Navigation Two\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n            <SubMenu Key=\"sub1-2\" Title=@(\"Submenu\")>\n                <MenuItem Key=\"5\">Option 5</MenuItem>\n                <MenuItem Key=\"6\">Option 6</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Four</span>\n        </span>;\n\n    MenuMode mode = MenuMode.Inline;\n    MenuTheme theme = MenuTheme.Light;\n\n    void changeMode(bool value)\n    {\n        this.mode = value ? MenuMode.Vertical : MenuMode.Inline;\n    }\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.SwitchMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "sidercurrent",
        "Title": "Open current submenu only",
        "Description": "<p>Click the menu and you will see that all the other menus gets collapsed to keep the entire menu compact.</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Inline\"\n      OpenKeys=this.openKeys\n      OnOpenChange=this.onOpenChange\n      Style=\"width:256px ;\">\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code {\n    RenderFragment sub1Title =\n        @<span>\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\n            <span>Navigation Three</span>\n        </span>;\n\n    // submenu keys of first level\n    string[] rootSubmenuKeys = {\"sub1\", \"sub2\", \"sub4\"};\n\n    string[] openKeys = {\"sub1\"};\n\n    void onOpenChange(string[] openKeys)\n    {\n        var latestOpenKey = openKeys.FirstOrDefault(key => !this.openKeys.Contains(key));\n        if (!rootSubmenuKeys.Contains(latestOpenKey))\n        {\n            this.openKeys = openKeys;\n        }\n        else\n        {\n            this.openKeys = !string.IsNullOrEmpty(latestOpenKey) ? new[] {latestOpenKey} : Array.Empty<string>();\n        }\n    }\n}\n",
        "Type": "Demos.Menu.demo.SiderCurrent",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "InputNumber",
    "Type": "Data Entry",
    "Desc": "<p>Enter a number within certain range with the mouse or keyboard.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a numeric value needs to be provided.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>initial value</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>disable the input</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Formatter</td>\n<td>Specifies the format of the value presented</td>\n<td>function(double,string)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>max value</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>min value</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parser</td>\n<td>Specifies the value extracted from formatter</td>\n<td>function(string, double)</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>height of input box</td>\n<td><code>large</code> ,<code>middle</code>,<code>small</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Step</td>\n<td>The number to which the current value is increased or decreased. It can be an integer or decimal.</td>\n<td>double</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>current value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>The callback triggered when the value is changed.</td>\n<td>function(double)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Numeric-only input box.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber @bind-Value=\"myValue\"></AntDesign.InputNumber>\n</div>\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.InputNumber.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "formatter",
        "Title": "Formatter",
        "Description": "<p>Display value within it's situation with <code>formatter</code>, and we usually use <code>parser</code> at the same time.</p>\n",
        "Code": "@using System.Text.RegularExpressions\n<div>\n    <AntDesign.InputNumber Formatter=\"Format1\" Parser=\"Parse1\" DefaultValue=\"1000\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber Formatter=\"Format2\" Parser=\"Parse2\" DefaultValue=\"100\" Min=\"0\" Max=\"100\" @bind-Value=\"myValue\"/>\n</div>\n\n\n@code{\n\n    private double myValue { get; set; }\n\n    private string Format1(double value)\n    {\n        return \"$ \" + value.ToString(\"n0\");\n    }\n\n    private double Parse1(string value)\n    {\n        double val = double.Parse(Regex.Replace(value, @\"\\$\\s?|(,*)\", \"\"));\n\n        return val;\n    }\n\n    private string Format2(double value)\n    {\n        return value.ToString() + \"%\";\n    }\n\n    private double Parse2(string value)\n    {\n        return double.Parse(value.Replace(\"%\", \"\"));\n    }\n}\t\t",
        "Type": "Demos.InputNumber.demo.Formatter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "decimal",
        "Title": "Decimal",
        "Description": "<p>A numeric-only input box whose values can be increased or decreased using a decimal step. The number of decimals (also known as precision) is determined by the step prop.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber Step=\"0.25\" Min=\"-1\" Max=\"5\" @bind-Value=\"myValue\" />\n</div>\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.InputNumber.demo.Decimal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "Sizes",
        "Description": "<p>There are three sizes available to a numeric input box. By default, the size is 32px. The two additional sizes are large and small which means 40px and 24px, respectively.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Large\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber DefaultValue=\"3\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Small\" @bind-Value=\"myValue\"/>\n</div>\n\t\t\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.InputNumber.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "disable",
        "Title": "Disabled",
        "Description": "<p>Click the button to toggle between available and disabled states.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber DefaultValue=\"3\" Disabled=\"@disabled\" @bind-Value=\"myValue\" />\n    <div style=\"margin: 20px 0px 20px 0px;\">\n        <Button Type=\"@ButtonType.Primary\" OnClick=\"(e)=> ToggleDisable()\">Toggle disabled</Button>\n    </div>\n</div>\n\n@code{\n    private bool disabled = true;\n\n    private double myValue { get; set; }\n\n\n    private void ToggleDisable()\n    {\n        disabled = !disabled;\n    }\n}\t\t",
        "Type": "Demos.InputNumber.demo.Disable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Notification",
    "Type": "Feedback",
    "Desc": "<p>Display a notification message globally.</p>\n<h2>When To Use</h2>\n<p>To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:</p>\n<ul>\n<li>A notification with complex content.</li>\n<li>A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.</li>\n<li>A notification that is pushed by the application.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>Customized close button</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>Customized CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>custom close icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>The content of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Notification</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>The title of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Trigger when notification closed</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>Specify a function that will be called when the notification is clicked</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>Position of Notification, can be one of <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Customized inline style</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p><code>NotificationService</code> also provides a global <code>Config()</code> method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying.</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Property</th>\n<th style=\"text-align: left;\">Description</th>\n<th style=\"text-align: left;\">Type</th>\n<th style=\"text-align: left;\">Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">Distance from the bottom of the viewport, when <code>placement</code> is <code>NotificationPlacement.BottomLeft</code> or <code>NotificationPlacement.BottomRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">Distance from the top of the viewport, when <code>placement</code> is <code>NotificationPlacement.TopLeft</code> or <code>NotificationPlacement.TopRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">custom close icon</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">Position of Notification, can be one of  <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement?</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">whether to enable RTL mode</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "duration",
        "Title": "Duration after which the notification box is closed",
        "Description": "<p><code>Duration</code> can be used to specify how long the notification stays open. After the duration time elapses, the notification closes automatically. If not specified, default value is 4.5 seconds. If you set the value to 0, the notification box will never close automatically.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Duration = 0,\n            Description = \"This notification box will not close automatically\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "withbtn",
        "Title": "Custom close button",
        "Description": "<p>To customize the style or font of the close button.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    custom button\n</Button>\n\n@code{\n\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        RenderFragment btn = @<Button Type=\"@ButtonType.Primary\" OnClick=\"() => { _notice.Close(key); }\">\n                                confirm\n                            </Button>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"A function will be be called after the notification is closed (automatically after the \\\"duration\\\" time of manually).\",\n            Btn = btn \n        });\n    }\n}\n",
        "Type": "Demos.Notification.demo.WithBtn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "withicon",
        "Title": "Notification with icon",
        "Description": "<p>A notification box with a icon at the left side.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button OnClick=\"@OnSuccessClick\">\n    success\n</Button>   \n\n <Button OnClick=\"@OnInfoClick\">\n    info\n</Button>\n\n<Button OnClick=\"@OnWarningClick\">\n    warning\n</Button>\n\n<Button OnClick=\"@OnErrorClick\">\n    error\n</Button>\n\n@code{\n    private async Task NoticeWithIcon(NotificationType type)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            NotificationType = type\n        });\n    }\n\n    private async Task OnSuccessClick()\n    {\n        await NoticeWithIcon(NotificationType.Success);\n    }\n\n    private async Task OnInfoClick()\n    {\n        await NoticeWithIcon(NotificationType.Info);\n    }\n\n    private async Task OnWarningClick()\n    {\n        await NoticeWithIcon(NotificationType.Warning);\n    }\n\n    private async Task OnErrorClick()\n    {\n        await NoticeWithIcon(NotificationType.Error);\n    }\n\n}",
        "Type": "Demos.Notification.demo.WithIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage that close the notification box after 4.5s.</p>\n",
        "Code": "@inject NotificationService _notice\n \n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customicon",
        "Title": "Customized Icon",
        "Description": "<p>The icon can be customized to any react node.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n\n    private async Task OnClick()\n    {\n        RenderFragment customIcon = @<AntIcon Type=\"smile\" Theme=\"outline\" Style=\"color:#108ee9;\"></AntIcon>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Icon = customIcon\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>A notification box can appear from the <code>topRight</code>, <code>bottomRight</code>, <code>bottomLeft</code> or <code>topLeft</code> of the viewport.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<div>\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnTopLeftClick\">\n        <AntIcon Type=\"Radius-Upleft\" Theme=\"Outline\"></AntIcon>\n        TopLeft\n    </Button>\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnTopRightClick\">\n        <AntIcon Type=\"Radius-Upright\" Theme=\"Outline\"></AntIcon>\n        TopRight\n    </Button>\n</div>\n\n<br/>\n\n<div>\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnBottomLeftClick\">\n        <AntIcon Type=\"Radius-Bottomleft\" Theme=\"Outline\"></AntIcon>\n        BottomLeft\n    </Button>\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnBottomRightClick\">\n        <AntIcon Type=\"Radius-Bottomright\" Theme=\"Outline\"></AntIcon>\n        BottomRight\n    </Button>\n</div>\n\n@code {\n    private async Task OpenWithPlacement(NotificationPlacement placement)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = $\"Notification {placement}\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Placement = placement\n        });\n    }\n\n    private async Task OnTopLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopLeft);\n    }\n\n    private async Task OnTopRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopRight);\n    }\n\n    private async Task OnBottomLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomLeft);\n    }\n\n    private async Task OnBottomRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomRight);\n    }\n}\n",
        "Type": "Demos.Notification.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "update",
        "Title": "Update Message Content",
        "Description": "<p>Update content with unique key.</p>\n",
        "Code": "@inject NotificationService _notice\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n        Open the notification box\n    </Button>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        var task = _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"description.\",\n        });\n        await Task.Delay(1000);\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"New Title\",\n            Key = key,\n            Description = \"New description.\",\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Update",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Avatar",
    "Type": "Data Display",
    "Desc": "<p>Avatars can be used to represent people or objects. It supports images, <code>Icon</code>s, or letters.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "dynamic",
        "Title": "Autoset Font Size",
        "Description": "<p>For letter type Avatar, when the letters are too long to display, the font size can be automatically adjusted according to the width of the Avatar.</p>\n",
        "Code": "<div>\n    <Avatar Style=\"@($\"background-color: {color}; vertical-align: middle;\")\" Size=\"large\">\n        @user\n    </Avatar>\n    <Button\n        Size=\"small\"\n        Style=\"margin:0 16px; vertical-align: middle;\"\n        OnClick=\"_=>changeUser()\"\n    >\n        Change\n    </Button>\n</div>\n\n@code\n{\n    private static string[] userList = {\"U\", \"Lucy\", \"Tom\", \"Edward\"};\n    private static string[] colorList = {\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"};\n\n    private string user { get; set; } = userList[0];\n    private string color { get; set; } = colorList[0];\n\n    private void changeUser()\n    {\n        var index = Array.IndexOf(userList, user);\n        user = index < userList.Length - 1 ? userList[index + 1] : userList[0];\n        color = index < colorList.Length - 1 ? colorList[index + 1] : colorList[0];\n    }\n}\n",
        "Type": "Demos.Avatar.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Three sizes and two shapes are available.</p>\n",
        "Code": "<div>\n    <div>\n        <Avatar Size=\"64\" Icon=\"user\" />\n        <Avatar Size=\"large\" Icon=\"user\" />\n        <Avatar Icon=\"user\" />\n        <Avatar Size=\"small\" Icon=\"user\" />\n    </div>\n    <div>\n        <Avatar Shape=\"square\" Size=\"64\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Size=\"large\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Size=\"small\" Icon=\"user\" />\n    </div>\n</div>",
        "Type": "Demos.Avatar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "badge",
        "Title": "With Badge",
        "Description": "<p>Usually used for messages remind.</p>\n",
        "Code": "<div>\n    <span class=\"avatar-item\">\n        <Badge Count=\"1\">\n            <Avatar Shape=\"square\" Icon=\"user\" />\n        </Badge>\n    </span>\n    <span>\n        <Badge Dot>\n            <Avatar Shape=\"square\" Icon=\"user\"/>\n        </Badge>\n    </span>\n</div>",
        "Type": "Demos.Avatar.demo.Badge_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "type",
        "Title": "Type",
        "Description": "<p>Image, Icon and letter are supported, and the latter two kinds avatar can have custom colors and background colors.</p>\n",
        "Code": "<div>\n    <Avatar Icon=\"user\" />\n    <Avatar>U</Avatar>\n    <Avatar>USER</Avatar>\n    <Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <Avatar Style=\"color: #f56a00; background-color: #fde3cf; \">U</Avatar>\n    <Avatar Style=\"background-color: #87d068\" Icon=\"user\" />\n</div>",
        "Type": "Demos.Avatar.demo.Type",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Transfer",
    "Type": "Data Entry",
    "Desc": "<p>Double column transfer choice box.</p>\n<h2>When To Use</h2>\n<ul>\n<li>It is a select control essentially which can be use for selecting multiple items.</li>\n<li>Transfer can display more information for items and take up more space.</li>\n</ul>\n<p>Transfer the elements between two columns in an intuitive and efficient way.</p>\n<p>One or more elements can be selected from either column, one click on the proper <code>direction</code> button, and the transfer is done. The left column is considered the <code>source</code> and the right column is considered the <code>target</code>. As you can see in the API description, these names are reflected in.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSource</td>\n<td>Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in <code>targetKeys</code> prop.</td>\n<td>List&lt;TransferItem&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether disabled transfer</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>A function used for rendering the footer.</td>\n<td>OneOf&lt;string, RenderFragment&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>A custom CSS style used for rendering the transfer columns.</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>operations</td>\n<td>A set of operations that are sorted from top to bottom.</td>\n<td>string[]</td>\n<td>['right', 'left']</td>\n<td></td>\n</tr>\n<tr>\n<td>Render</td>\n<td>The function to generate the item shown on a column. Based on an record (element of the DataSource array), this function should return a OneOf&lt;string, RenderFragment&gt; which is generated from that record.</td>\n<td>Func&lt;TransferItem, OneOf&lt;string, RenderFragment&gt;&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SelectedKeys</td>\n<td>A set of keys of selected items.</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>If included, a search box is shown on each column.</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSelectAll</td>\n<td>Show select all checkbox on the header</td>\n<td>bool</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>TargetKeys</td>\n<td>A set of keys of elements that are listed on the right column.</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>Titles</td>\n<td>A set of titles that are sorted from left to right.</td>\n<td>string[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>SelectAllLabels</td>\n<td>A set of customized labels for select all checkboxs on the header</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>A callback function that is executed when the transfer between columns is complete.</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnScroll</td>\n<td>A callback function which is executed when scroll options list</td>\n<td>TransferScrollArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>A callback function which is executed when search field are changed</td>\n<td>TransferSearchArgs</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelectChange</td>\n<td>A callback function which is executed when selected items are changed.</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Render Props</h3>\n<p>Transfer accept <code>children</code> to customize render list, using follow props:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>direction</td>\n<td>List render direction</td>\n<td><code>left</code> | <code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Disable list or not</td>\n<td>bool</td>\n<td></td>\n</tr>\n<tr>\n<td>filteredItems</td>\n<td>Filtered items</td>\n<td>TransferItem[]</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelect</td>\n<td>Select item</td>\n<td>(key: string, selected: bool)</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelectAll</td>\n<td>Select a group of items</td>\n<td>(keys: string[], selected: bool)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Selected items</td>\n<td>string[]</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Warning</h2>\n<p>According the <a href=\"http://facebook.github.io/react/docs/lists-and-keys.html#keys\">standard</a> of Blazor, the key should always be supplied directly to the elements in the array. In Transfer, the keys should be set on the elements included in <code>dataSource</code> array. By default, <code>key</code> property is used as an unique identifier.</p>\n<p>If there's no <code>key</code> in your data, you should use <code>rowKey</code> to specify the key that will be used for uniquely identify each element.</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 3,
        "Name": "customitem",
        "Title": "Custom datasource",
        "Description": "<p>Custom each Transfer Item, and in this way you can render a complex datasource.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"\n              Render=\"Render\"\n              Style=\"width:300px;height:300px;\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.CustomItem",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic usage of <code>Transfer</code> involves providing the source data and target keys arrays, plus the rendering and some callback functions.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"></Transfer>\n\n    <AntSwitch Style=\"margin-top: 16px;\" OnChange=\"OnSwitchChange\"></AntSwitch>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        for (int i = 0; i < 20; i++)\n        {\n            dataSource.Add(new TransferItem\n            {\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                Key = i.ToString(),\n                Disabled = i % 3 < 1\n            });\n\n            if (i > 10)\n                targetKeys.Add(i.ToString());\n        }\n        base.OnInitialized();\n    }\n\n    private void OnSwitchChange(bool check)\n    {\n        Disabled = check;\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "largedata",
        "Title": "Performance Test",
        "Description": "<p>2000 items.</p>\n",
        "Code": "<h3>LargeData</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.LargeData",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 6,
        "Name": "treetransfer",
        "Title": "Tree Transfer",
        "Description": "<p>Customize render list with Tree component.</p>\n",
        "Code": "<h3>TreeTransfer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.TreeTransfer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "search",
        "Title": "Search",
        "Description": "<p>Transfer with a search box.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              ShowSearch=\"true\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnSearch=\"OnSearch\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnSearch(TransferSearchArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine(e.Value);\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.Search",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "advanced",
        "Title": "Advanced",
        "Description": "<p>Advanced Usage of Transfer.</p>\n<p>You can customize the labels of the transfer buttons, the width and height of the columns, and what should be displayed in the footer.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              Operations=\"operations\"\n              Footer=\"footer\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"\n              Render=\"Render\"\n              Style=\"width:300px;height:300px;\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private string[] operations = { \"to right\", \"to left\" };\n    private bool Disabled = false;\n    private RenderFragment footer =@<Button Type=\"@ButtonType.Default\" Size=\"@ButtonSize.Small\" Style=\"float: right; margin: 5px;\">reload</Button>;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n          \n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.Advanced",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "customselectalllabels",
        "Title": "Custom Select All Labels",
        "Description": "<p>Custom the labels for select all checkboxs.</p>\n",
        "Code": "<h3>CustomSelectAllLabels</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.CustomSelectAllLabels",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 5,
        "Name": "tabletransfer",
        "Title": "Table Transfer",
        "Description": "<p>Customize render list with Table component.</p>\n",
        "Code": "<h3>TableTransfer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.TableTransfer",
        "Style": "",
        "Debug": false
      }
    ]
  }
]