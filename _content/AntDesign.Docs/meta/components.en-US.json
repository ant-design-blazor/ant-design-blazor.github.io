[
  {
    "Title": "Switch",
    "Type": "Data Entry",
    "Desc": "<p>Switching Selector.</p>\n<h2>When To Use</h2>\n<ul>\n<li>If you need to represent the switching between two states or on-off state.</li>\n<li>The difference between <code>Switch</code> and <code>Checkbox</code> is that Switch will trigger a state change directly when you toggle it, while Checkbox is generally used for state marking, which should work in conjunction with submit operation.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/switch#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checked</td>\n<td>determine whether the Switch is checked</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>CheckedChildren</td>\n<td>content to be shown when the state is checked</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>to set the initial state</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable switch</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>loading state of switch</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>the size of the Switch, options: default small</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>UnCheckedChildren</td>\n<td>content to be shown when the state is unchecked</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>trigger when the checked state is changing</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/zNdJQMhfm/Switch.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>The most basic usage.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"switchValue\"/>\n</div>\n\n@code\n{\n    bool switchValue { get; set; }\n}\n",
        "Type": "Demos.Components.Switch.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Size",
        "Title": "Two sizes",
        "Description": "<p>size=<code>small</code> represents a small sized switch.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\"/>\n    <br />\n    <Switch Size=\"small\" Checked=\"true\"/>\n</div>\n",
        "Type": "Demos.Components.Switch.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Icon1",
        "Title": "Text & icon.",
        "Description": "<p>With text and icon.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\" CheckedChildren=\"开\" UnCheckedChildren=\"关\" />\n    <br />\n    <Switch Checked=\"false\" CheckedChildren=\"开\" UnCheckedChildren=\"关\" />\n    <br />\n    <Switch Checked=\"true\">\n        <CheckedChildrenTemplate>\n            <Icon Type=\"check\"></Icon>\n        </CheckedChildrenTemplate>\n        <UnCheckedChildrenTemplate>\n            <Icon Type=\"close\"></Icon>\n        </UnCheckedChildrenTemplate>\n    </Switch>\n</div>\n",
        "Type": "Demos.Components.Switch.demo.Icon1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Loading",
        "Title": "Loading",
        "Description": "<p>Mark a pending state of switch.</p>\n",
        "Code": "<div>\n    <Switch Checked Loading/>\n    <br />\n    <Switch Size=\"small\" Loading/>\n</div>\n\n\n\n",
        "Type": "Demos.Components.Switch.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Disable",
        "Title": "Disabled",
        "Description": "<p>Disabled state of <code>Switch</code>.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"switchValue\" Disabled=\"isDisabled\"/>\n    <br />\n    <br />\n    <Button Type=\"@ButtonType.Primary\" @onclick=\"(_)=>isDisabled = !isDisabled\">Toggle disabled</Button>\n</div>\n\n\n@code{\n    bool switchValue = false;\n\n    bool isDisabled = true;\n}\n\n\n",
        "Type": "Demos.Components.Switch.demo.Disable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Radio",
    "Type": "Data Entry",
    "Desc": "<p>Radio</p>\n<h2>When To Use</h2>\n<p>-Used to select a single state from multiple options.\n-The difference from Select is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/radio#API\" class=\"anchor\">#</a></h2>\n<p>Radio/Radio.Button</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Specifies whether the radio is selected.</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>Specifies the initial state: whether or not the radio is selected.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable radio</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>According to value for comparison, to determine whether the selected</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>RadioGroup</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButtonStyle</td>\n<td>style type of radio button</td>\n<td><code>outline</code>,<code>solid</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable all radio buttons</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Used for setting the currently selected value.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>The name property of all input[type=&quot;radio&quot;] children</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size for radio button style</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>The callback function that is triggered when the state changes.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/8cYb5seNB/Radio.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>The simplest use.</p>\n",
        "Code": "<div>\n    <Radio TValue=\"bool\">Radio</Radio>\n</div>\n",
        "Type": "Demos.Components.Radio.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "Generic",
        "Title": "Generic",
        "Description": "<p>The generic use.</p>\n",
        "Code": "<div>\n    <Text>int:@_intValue</Text>\n    <br />\n    <RadioGroup @bind-Value=\"@_intValue\">\n        <Radio Value=\"1\">1</Radio>\n        <Radio Value=\"2\">2</Radio>\n        <Radio Value=\"3\">3</Radio>\n        <Radio Value=\"4\">4</Radio>\n    </RadioGroup>\n\n</div>\n<br />\n<div>\n    <Text>string:@_strValue</Text>\n    <br />\n    <RadioGroup @bind-Value=\"@_strValue\">\n        <Radio Value=\"@(\"A\")\">A</Radio>\n        <Radio Value=\"@(\"B\")\">B</Radio>\n        <Radio Value=\"@(\"C\")\">C</Radio>\n        <Radio Value=\"@(\"D\")\">D</Radio>\n    </RadioGroup>\n</div>\n<br />\n<div>\n    <Text>bool:@_boolValue</Text>\n    <br />\n    <RadioGroup @bind-Value=\"@_boolValue\">\n        <Radio Value=\"true\">Yes</Radio>\n        <Radio Value=\"false\">No</Radio>\n    </RadioGroup>\n</div>\n<br />\n<div>\n    <Text>bool?:@_nullBoolValue</Text>\n    <br />\n    <RadioGroup @bind-Value=\"@_nullBoolValue\">\n        <Radio Value=\"@(true)\" TValue=\"bool?\">Yes</Radio>\n        <Radio Value=\"@(false)\" TValue=\"bool?\">No</Radio>\n        <Radio Value=\"@(null)\" TValue=\"bool?\">Unknown</Radio>\n    </RadioGroup>\n</div>\n@code{\n\n    int _intValue = 1;\n\n    string _strValue = \"A\";\n\n    bool _boolValue = false;\n\n    bool? _nullBoolValue;\n}",
        "Type": "Demos.Components.Radio.demo.Generic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Style",
        "Title": "radio style",
        "Description": "<p>The combination of radio button style.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"@(\"A\")\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\">Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\">Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"@(\"A\")\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\" Disabled>Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\">Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup Disabled @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"@(\"A\")\" >Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\" >Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\" >Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\" >Chengdu</Radio>\n    </RadioGroup>\n</div>\n\n@code\n{\n    string radioValue3 = \"A\";\n}\n",
        "Type": "Demos.Components.Radio.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Group",
        "Title": "Radio Group",
        "Description": "<p>A group of radio components.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@_value\" >\n        <Radio Value=\"1\">A</Radio>\n        <Radio Value=\"2\">B</Radio>\n        <Radio Value=\"3\">C</Radio>\n        <Radio Value=\"4\">D</Radio>\n    </RadioGroup>\n</div>\n@code\n {\n\n    int _value = 1;\n}",
        "Type": "Demos.Components.Radio.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Button",
        "Title": "Solid radio button",
        "Description": "<p>Solid radio button style.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue4\" ButtonStyle=\"solid\">\n        <Radio RadioButton Value=\"@(\"A\")\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\">Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\">Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\">Chengdu</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue4 = \"A\";\n}",
        "Type": "Demos.Components.Radio.demo.Button_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Size",
        "Title": "Size",
        "Description": "<p>There are three sizes available: large, medium, and small. It can coordinate with input box.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"large\">\n        <Radio RadioButton Value=\"@(\"A\")\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\">Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\">Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue5\">\n        <Radio RadioButton Value=\"@(\"A\")\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\">Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\">Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"small\">\n        <Radio RadioButton Value=\"@(\"A\")\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"@(\"B\")\">Shanghai</Radio>\n        <Radio RadioButton Value=\"@(\"C\")\">Beijing</Radio>\n        <Radio RadioButton Value=\"@(\"D\")\">Chengdu</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue5 = \"A\";\n}",
        "Type": "Demos.Components.Radio.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Name",
        "Title": "Radio.Group with name",
        "Description": "<p>Passing the <code>name</code> property to all <code>input[type=&quot;radio&quot;]</code> that are in the same Radio.Group. It is usually used to let the browser see your Radio.Group as a real &quot;group&quot; and keep the default behavior. For example, using left/right keyboard arrow to change your selection that in the same Radio.Group.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue1\" Name=\"radiogroup1\">\n        <Radio Value=\"@(\"A\")\">A</Radio>\n        <Radio Value=\"@(\"B\")\">B</Radio>\n        <Radio Value=\"@(\"C\")\">C</Radio>\n        <Radio Value=\"@(\"D\")\">D</Radio>\n    </RadioGroup>\n</div>\n<div>\n    <RadioGroup @bind-Value=\"radioValue2\" Name=\"radiogroup2\">\n        <Radio Value=\"@(\"A\")\">A</Radio>\n        <Radio Value=\"@(\"B\")\">B</Radio>\n        <Radio Value=\"@(\"C\")\">C</Radio>\n        <Radio Value=\"@(\"D\")\">D</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue1 = \"A\";\n\n    string radioValue2 = \"A\";\n}",
        "Type": "Demos.Components.Radio.demo.Name",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Optional",
        "Title": "Radio.Group group - optional",
        "Description": "<p>Render radios by configuring options.</p>\n",
        "Code": "<RadioGroup @bind-Value=\"_radioValue\">\n    @foreach (var item in options)\n    {\n        <Radio Value=\"@item\">@item</Radio>\n    }\n</RadioGroup>\n\n@code {\n    string _radioValue = \"Apple\";\n    string[] options = new string[] { \"Apple\", \"Pear\", \"Orange\" };\n\n}",
        "Type": "Demos.Components.Radio.demo.Optional",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Vgroup",
        "Title": "Vertical Radio.Group",
        "Description": "<p>Vertical Radio.Group, with more radios.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@radioValue\">\n        <Radio Style=\"@style\" Value=\"@(\"A\")\">Option A</Radio>\n        <Radio Style=\"@style\" Value=\"@(\"B\")\">Option B</Radio>\n        <Radio Style=\"@style\" Value=\"@(\"C\")\">Option C</Radio>\n        <Radio Style=\"@style\" Value=\"@(\"M\")\">\n            More...\n            @if (radioValue == \"M\")\n            {\n                <AntDesign.Input type=\"text\" TValue=\"string\" />\n            }\n        </Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue = \"A\";\n    string style = \"display: block;height:30px;line-height:30px\";\n}",
        "Type": "Demos.Components.Radio.demo.Vgroup",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Disable",
        "Title": "Disabled",
        "Description": "<p>Radio unavailable.</p>\n",
        "Code": "<div>\n    <Radio Checked Disabled=\"@Disabled\" TValue=\"bool\">\n        Disabled\n    </Radio>\n    <br />\n    <Radio Disabled=\"@Disabled\" TValue=\"bool\">\n        Disabled\n    </Radio>\n    <div style=\"margin-top: 20px\">\n        <Button Type=\"primary\" OnClick=\"_=>Disabled=!Disabled\">Toggle Disabled</Button>\n    </div>\n</div>\n\n@code\n{\n    bool Disabled = true;\n}\n",
        "Type": "Demos.Components.Radio.demo.Disable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Overview",
    "Type": "Overview",
    "Desc": "<p><code>antd</code> provides plenty of UI components to enrich your web applications, and we will improve components experience consistently. We also recommand some great Third-Party Libraries additionally.</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 0,
        "Name": "overview",
        "Title": "Overview",
        "Description": "",
        "Code": "@using AntDesign.Docs.Services\n\n\n<Divider />\n\n<AntDesign.Input TValue=\"string\" Class=\"components-overview-search\" Placeholder=\"@LanguageService.Resources[\"app.components.overview.search\"]\" OnInput=\"@(args => OnSearchEnter(args.Value?.ToString()))\">\n    <Suffix>\n        <Icon Type=\"search\" />\n    </Suffix>\n</AntDesign.Input>\n\n<Divider />\n\n@foreach (var menuGroup in menuItems)\n{\n    if (menuGroup.Order == -1)\n    {\n        continue;\n    }\n\n    <div class=\"components-overview\">\n        <AntDesign.Title Level=\"2\">\n            <Space Align=\"center\">\n                <SpaceItem>@menuGroup.Title</SpaceItem>\n                <SpaceItem>\n                    <Tag Style=\"display: block;\">@(menuGroup.Children?.Length ?? 0)</Tag>\n                </SpaceItem>\n            </Space>\n        </AntDesign.Title>\n\n        <Row>\n            @foreach (var item in menuGroup.Children)\n            {\n                <AntDesign.Col Xl=\"6\" Lg=\"8\" Sm=\"12\" Xs=\"24\" Style=\"padding:12px\">\n                    <a href=@($\"/{CurrentLanguage}/{item.Url}\")>\n                        <Card Bordered Title=\"@($\"{item.Title} {@item.SubTitle}\")\" Hoverable>\n                            <Body>\n                                <div class=\"components-overview-img\">\n                                    <img src=\"@item.Cover\" alt=\"@(item.Title)\">\n                                </div>\n                            </Body>\n                        </Card>\n                    </a>\n                </AntDesign.Col>\n            }\n        </Row>\n    </div>\n}\n\n@inject ILanguageService LanguageService\n@inject DemoService demoService\n\n@code{\n\n    private string CurrentLanguage => LanguageService.CurrentCulture.Name;\n    DemoMenuItem[] menuItems = { };\n\n    protected override bool ShouldRender() => menuItems.Any();\n\n    protected override async Task OnInitializedAsync()\n    {\n        var menu = await demoService.GetMenuAsync();\n        menuItems = menu.FirstOrDefault(x => x.Url.ToLowerInvariant() == \"components\")?.Children ?? Array.Empty<DemoMenuItem>();\n\n        LanguageService.LanguageChanged += async (sender, args) =>\n        {\n            var menu = await demoService.GetMenuAsync();\n            menuItems = menu.FirstOrDefault(x => x.Url.ToLowerInvariant() == \"components\")?.Children ?? Array.Empty<DemoMenuItem>();\n\n            await InvokeAsync(StateHasChanged);\n        };\n    }\n\n    private async Task OnSearchEnter(string value)\n    {\n        var menu = await demoService.GetMenuAsync();\n        menuItems = menu.FirstOrDefault(x => x.Url.ToLowerInvariant() == \"components\")?.Children ?? Array.Empty<DemoMenuItem>();\n\n        if (string.IsNullOrWhiteSpace(value))\n        {\n            return;\n        }\n\n        IList<DemoMenuItem> result = new List<DemoMenuItem>();\n\n        foreach (var item in menuItems)\n        {\n            var lst = item.Children.Where(x => x.Title.Contains(value, StringComparison.OrdinalIgnoreCase)).ToArray();\n\n            if (lst.Any())\n            {\n                result.Add(new DemoMenuItem()\n                {\n                    Title = item.Title,\n                    SubTitle = item.SubTitle,\n                    Order = item.Order,\n                    Type = item.Type,\n                    Children = lst,\n                });\n            }\n        }\n\n        menuItems = result.ToArray();\n    }\n}",
        "Type": "Demos.Components.Overview.demo.Overview",
        "Style": "",
        "Docs": true,
        "Debug": false
      }
    ]
  },
  {
    "Title": "Affix",
    "Type": "Navigation",
    "Desc": "<p>Wrap Affix around another component to make it stick the viewport.</p>\n<h2>When To Use</h2>\n<ul>\n<li>On longer web pages, its helpful for some content to stick to the viewport. This is common for menus and actions.</li>\n<li>Please note that Affix should not cover other content on the page, especially when the size of the viewport is small.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/affix#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OffsetBottom</td>\n<td>Offset from the bottom of the viewport (in pixels)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OffsetTop</td>\n<td>Offset from the top of the viewport (in pixels)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Target</td>\n<td>Specifies the scrollable area DOM node</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Callback for when Affix state is changed</td>\n<td>Function()</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Note: Children of <code>Affix</code> must not have the property <code>position: absolute</code>, but you can set <code>position: absolute</code> on <code>Affix</code> itself:</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/tX6-md4H6/Affix.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "\n<div>\n\t<Affix OffsetTop=\"@_offsetTop\">\n\t\t<Button Type=\"@ButtonType.Primary\" OnClick=\"AddTop\">\n\t\t\tAffix top\n\t\t</Button>\n\t</Affix>\n\t<br />\n\t<Affix OffsetBottom=\"@_offsetBottom\">\n\t\t<Button Type=\"@ButtonType.Primary\" OnClick=\"AddBottom\">\n\t\t\tAffix bottom\n\t\t</Button>\n\t</Affix>\n</div>\n\n\n@code\n{\n        private uint _offsetTop = 10;\n        private uint _offsetBottom = 10;\n\n        private void AddTop()\n        {\n            _offsetTop += 10;\n        }\n\n        private void AddBottom()\n        {\n            _offsetBottom += 10;\n        }\n}",
        "Type": "Demos.Components.Affix.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Scroll",
        "Title": "Container to scroll",
        "Description": "<p>Set a <code>Target for</code> <code>Affix</code>, which listen to scroll event of target element (default is <code>window</code>).</p>\n",
        "Code": "\n<style>\n\t.scrollable-container{\n\t\theight: 100px;\n\t\toverflow-y: scroll;\n\t}\n\t.background {\n\t\tpadding-top: 60px;\n\t\theight: 300px;\n\t\tbackground-image: url(\"https://zos.alipayobjects.com/rmsportal/RmjwQiJorKyobvI.jpg\")\n\t}\n</style>\n<div class=\"scrollable-container\" @ref=\"_container\">\n\t<div class=\"background\">\n\t\t<Affix Target=\"@_container\">\n\t\t\t<Button Type=\"@ButtonType.Primary\">\n\t\t\t\tFixed at the top of container\n\t\t\t</Button>\n\t\t</Affix>\n\t</div>\n</div>\n\n@code{\n\n        private ElementReference _container;\n\t}",
        "Type": "Demos.Components.Affix.demo.Scroll",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "CallBack",
        "Title": "Callback",
        "Description": "<p>Callback with affixed state.</p>\n",
        "Code": "<div>\n<Affix OffsetTop=\"120\" OnChange=\"OnAffixChange\">\n\t<Button>\n\t\t120px to affix top\n\t</Button>\n</Affix>\n</div>\n\n@code{\n        private void OnAffixChange(bool affixed)\n        {\n            Console.WriteLine(affixed);\n        }\n\t\t\n}\n",
        "Type": "Demos.Components.Affix.demo.Callback",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Divider",
    "Type": "Layout",
    "Desc": "<p>A divider line separates different content.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Divide sections of article.</li>\n<li>Divide inline text and links such as the operation column of table.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/divider#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dashed</td>\n<td>whether line is dashed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Orientation</td>\n<td>position of title inside divider <code>left</code>, <code>right</code>, <code>center</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>style object of container</td>\n<td>CSS properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>direction type of divider</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Plain</td>\n<td>divider text show as plain style</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5swjECahe/Divider.svg",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Without",
        "Title": "Text without heading style",
        "Description": "<p>You can use non-heading style of divider text by setting plain.</p>\n",
        "Code": "<div>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider>Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"left\" >\n        Left Text\n    </Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"right\"  Plain=\"true\" >\n        Right Text\n    </Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n</div>\n\n\n\n",
        "Type": "Demos.Components.Divider.demo.Without",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Vertical",
        "Title": "Vertical",
        "Description": "<p>Use type=&quot;vertical&quot; make it vertical.</p>\n",
        "Code": "<div>\n     Text\n    <Divider Type=\"vertical\" />\n    <a href=\"#\">Link</a>\n    <Divider Type=\"vertical\" />\n    <a href=\"#\">Link</a>\n</div>\n\n\n\n",
        "Type": "Demos.Components.Divider.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Horizontal",
        "Title": "Horizontal",
        "Description": "<p>Divider is <code>horizontal</code> by default. You can add text within Divider.</p>\n",
        "Code": "<div>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider />\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Dashed />\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n</div>\n\n\n\n",
        "Type": "Demos.Components.Divider.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Title",
        "Title": "Divider with title",
        "Description": "<p>Divider with inner title, set orientation=&quot;left/right&quot; to align it.</p>\n",
        "Code": "<div>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider>Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"left\" Style=\"font-weight:bold\">Left Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"right\" Style=\"font-weight:bold\">Right Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n</div>\n\n\n\n",
        "Type": "Demos.Components.Divider.demo.Title",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Card",
    "Type": "Data Display",
    "Desc": "<p>Simple rectangular container.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/card#API\" class=\"anchor\">#</a></h2>\n<p>Card</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Actions</td>\n<td>The action list, shows at the bottom of the Card.</td>\n<td>Array(RenderFragment)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Body</td>\n<td>Body area on card</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>Content to render in the top-right corner of the card</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Bordered</td>\n<td>Toggles rendering of the border around the card</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Inline style to apply to the card content</td>\n<td>Css Properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Cover</td>\n<td>Card cover</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>Shows a loading indicator while the contents of the card are being fetched</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Size of card</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Card title</td>\n<td>String or RenderFragement</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>ard style type, can be set to inner or not set</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Card.Grid</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ChildContent</td>\n<td>Child container</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Hoverable</td>\n<td>Lift up when hovering card grid</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>style object of container</td>\n<td>CSS Properties</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Card.Meta</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Avatar</td>\n<td>avatar or icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Child  container</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>description content</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>style object of container</td>\n<td>CSS Properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>title content</td>\n<td>String or RenderFragement</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/NqXt8DJhky/Card.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "basic Card",
        "Description": "<p>A basic card containing a title, content and an extra corner content.\nSupports two sizes: <code>default</code> and <code>small</code>.</p>\n",
        "Code": "<div>\n    <Card Title=\"Default size card\" Style=\"width:300px;\">\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <p>Card content</p>\n        </Body>\n    </Card>\n    <br />\n    <Card Size=\"small\" Title=\"Small size card\" Style=\"width:300px;\">\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <p>Card content</p>\n        </Body>\n    </Card>\n    <br />\n    <Card Style=\"width:300px;\">\n        <TitleTemplate>\n            <Icon Type=\"credit-card\" Theme=\"outline\" /> Title is Template\n        </TitleTemplate>\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <p>Card content</p>\n        </Body>\n    </Card>\n    <br />\n    <Card Size=\"small\" TitleTemplate=\"titleTemplate\" Style=\"width:300px;\">\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <p>Card content</p>\n        </Body>\n    </Card>\n</div>\n\n@code{\n    RenderFragment titleTemplate =@<div><Icon Type=\"credit-card\" Theme=\"outline\" /> Title is Template</div>;\n\n}\n",
        "Type": "Demos.Components.Card.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Simple",
        "Title": "Simple card",
        "Description": "<p>A simple card only containing a content area.</p>\n",
        "Code": "<div>\n    <Card Bordered=\"true\" Style=\"width: 300px\">\n        <p>Card content</p>\n        <p>Card content</p>\n        <p>Card content</p>\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Components.Card.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Inner",
        "Title": "Inner card",
        "Description": "<p>It can be placed inside the ordinary card to display the information of the multilevel structure.</p>\n",
        "Code": "<div>\n    <Card Title=@(\"Card title\")>  \n        <Body>\n\n\n            <Card Title=@(\"Inner card title\")>\n                <Extra>   <a slot=\"extra\" href=\"#\">More</a>  </Extra>\n                <Body>                   \n                    Inner Card content\n                </Body>\n              \n            </Card>\n            <Card Title=@(\"Inner card title\") Style=\"margin-top: 16px\">\n                <Extra> <a slot=\"extra\" href=\"#\">More</a> </Extra>\n                <Body>\n               \n                    Inner Card content\n                </Body>             \n            </Card>\n\n        </Body>\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Components.Card.demo.Inner",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "Tabs1",
        "Title": "With tabs",
        "Description": "<p>More content can be hosted.</p>\n",
        "Code": "<div>\n    <Card Title=@(\"Card title\")>\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <CardTabs>\n            <Tabs DefaultActiveKey=\"1\">\n                <TabPane Key=\"1\">\n                    <Tab>Tab 1</Tab>\n                    <ChildContent>Content of Tab Pane 1</ChildContent>\n                </TabPane>\n                <TabPane Key=\"2\">\n                    <Tab>Tab 2</Tab>\n                    <ChildContent>Content of Tab Pane 2</ChildContent>\n                </TabPane>\n                <TabPane Key=\"3\">\n                    <Tab>Tab 3</Tab>\n                    <ChildContent>Content of Tab Pane 3</ChildContent>\n                </TabPane>\n            </Tabs>\n        </CardTabs>\n    </Card>\n    <br />\n    <br />\n    <Card>\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <CardTabs>\n            <Tabs DefaultActiveKey=\"1\">\n                <ChildContent>\n                    <TabPane Key=\"1\">\n                        <Tab>Article</Tab>\n                        <ChildContent>Content of Tab Pane 1</ChildContent>\n                    </TabPane>\n                    <TabPane Key=\"2\">\n                        <Tab>App</Tab>\n                        <ChildContent>Content of Tab Pane 2</ChildContent>\n                    </TabPane>\n                    <TabPane Key=\"3\">\n                        <Tab>Project</Tab>\n                        <ChildContent>Content of Tab Pane 3</ChildContent>\n                    </TabPane>\n                </ChildContent>\n            </Tabs>\n        </CardTabs>\n    </Card>\n</div>\n\n\n",
        "Type": "Demos.Components.Card.demo.Tabs1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Grid",
        "Title": "Grid card",
        "Description": "<p>Grid style card content.</p>\n",
        "Code": "<div>\n    <Card Title=@(\"Card Title\")>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"false\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\"Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Components.Card.demo.Grid",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Support",
        "Title": "Support more content configuration",
        "Description": "<p>A Card that supports <code>cover</code>, <code>avatar</code>, <code>title</code> and <code>description</code>.</p>\n",
        "Code": "<div>\n    <Card Style=\"width:300px;\" Bordered Cover=\"coverTemplate\" Actions=\"new[] { actionSetting, actionEdit, actionEllipsis }\">\n        <CardMeta Avatar=\"avatarTemplate\" Title=\"Meta Card\" Description=\"This is the description\" />\n    </Card>\n</div>\n\n@code\n{\n    private RenderFragment actionSetting =@<Template><Icon Type=\"setting\" /></Template>;\n\n    private RenderFragment actionEdit =@<Template><Icon Type=\"edit\" /></Template>;\n\n    private RenderFragment actionEllipsis =@<Template><Icon Type=\"ellipsis\" /></Template>;\n\n    private RenderFragment avatarTemplate = @<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    private RenderFragment coverTemplate = @<img alt=\"example\" src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\" />;\n\n}\n\n\n",
        "Type": "Demos.Components.Card.demo.Support",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Customized",
        "Title": "Customized content",
        "Description": "<p>You can use Card.Meta to support more flexible content.</p>\n",
        "Code": "<div>\n    <Card Hoverable Style=\"width: 240px\" Cover=\"coverTemplate\">\n        <CardMeta Title=\"Europe Street beat\" Description=\"www.instagram.com\"/>\n    </Card>\n</div>\n\n\n@code\n{\n\n    private RenderFragment coverTemplate =@<img alt=\"example\"  src=\"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\" />;\n\n}\n\n\n",
        "Type": "Demos.Components.Card.demo.Customized",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Column",
        "Title": "Card in column",
        "Description": "<p>Cards usually cooperate with grid column layout in overview page.</p>\n",
        "Code": "<div style=\"background-color: #ececec; padding: 20px;\">\n    <Row Gutter=\"16\">\n        <Col Span=\"8\">\n            <Card Bordered=\"false\" Title=@(\"Card title\")>\n                <Body>\n                    <p>Card content</p>\n                </Body>\n            </Card>\n        </Col>\n        <Col Span=\"8\">\n            <Card Bordered=\"false\" Title=@(\"Card title\")>\n                <Body>\n                    <p>Card content</p>\n                </Body>\n            </Card>\n        </Col>\n        <Col Span=\"8\">\n            <Card Bordered=\"false\" Title=@(\"Card title\")>\n                <Body>\n                    <p>Card content</p>\n                </Body>\n            </Card>\n        </Col>\n    </Row>\n\n</div>\n\n\n",
        "Type": "Demos.Components.Card.demo.Column",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Loading",
        "Title": "Loading card",
        "Description": "<p>Shows a loading indirector while the contents of the card is being featched.</p>\n",
        "Code": "<div>\n\n    <Switch Checked=\"!loading\" OnChange=\"OnChange\">\n        Toggle loading\n    </Switch>\n\n    <Card Loading=\"loading\" Style=\"width: 300px; margin-top: 16px\">\n        <CardMeta Avatar=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n                  Title=\"Card title\"\n                  Description=\"This is the description\" />\n    </Card>\n\n    <Card Style=\"width: 300px; margin-top: 16px\"\n          Actions=\"new[] { actionSetting, actionEdit, actionEllipsis }\">\n        <Skeleton Loading=\"loading\" Avatar Active>\n            <CardMeta Title=\"Card title\"\n                      Description=\"This is the description\"\n                      Avatar=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n        </Skeleton>\n    </Card>\n\n</div>\n\n@code\n{\n    bool loading = true;\n    void OnChange()\n    {\n        loading = !loading;\n    }\n\n    private RenderFragment actionSetting =@<Template>\n        <Icon Type=\"setting\" />\n    </Template>;\n\n    private RenderFragment actionEdit =@<Template>\n        <Icon Type=\"edit\" />\n    </Template>;\n    \n    private RenderFragment actionEllipsis =@<Template>\n        <Icon Type=\"ellipsis\" />\n    </Template>;\n\n}\n\n\n",
        "Type": "Demos.Components.Card.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Noborder",
        "Title": "No borde",
        "Description": "<p>A borderless card on a gray background.</p>\n",
        "Code": "<div style=\"background:#ECECEC; padding:30px\">\n    <Card Bordered=\"false\" Title=@(\"Card title\") Style=\"width: 300px\"> \n        <Body>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </Body>\n    </Card>\n</div>\n\n\n",
        "Type": "Demos.Components.Card.demo.Noborder",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Button",
    "Type": "General",
    "Desc": "<p>To trigger an operation.</p>\n<h2>When To Use</h2>\n<p>A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.</p>\n<p>In Ant Design we provide 4 types of button.</p>\n<ul>\n<li>Primary button: indicate the main action, one primary button at most in one section.</li>\n<li>Default button: indicate a series of actions without priority.</li>\n<li>Dashed button: used for adding action commonly.</li>\n<li>Link button: used for external links.</li>\n</ul>\n<p>And 4 other properties additionally.</p>\n<ul>\n<li><code>danger</code>: used for actions of risk, like deletion or authorization.</li>\n<li><code>ghost</code>: used in situations with complex background, home pages usually.</li>\n<li><code>disabled</code>: when actions is not available.</li>\n<li><code>loading</code>: add loading spinner in button, avoiding multiple submits too.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/fNUKzY1sk/Button.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Type",
        "Description": "<p>There are <code>primary</code> button, <code>default</code> button, <code>dashed</code> button and <code>link</code> button in antd.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\">Primary</Button>\n    <Button>Default</Button>\n    <Button Type=\"dashed\">Dashed</Button>\n    <Button Type=\"link\">Link</Button>\n</div>",
        "Type": "Demos.Components.Button.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "danger",
        "Title": "Danger Buttons",
        "Description": "<p><code>danger</code> is a property of button after antd 4.0.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" Danger>\n        Primary\n    </Button>\n    <Button Danger>Default</Button>\n    <Button Type=\"dashed\" Danger>\n        link\n    </Button>\n    <Button Type=\"link\" Danger>\n        link\n    </Button>\n</div>",
        "Type": "Demos.Components.Button.demo.Danger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "ghost",
        "Title": "Ghost Button",
        "Description": "<p><code>ghost</code> property will make button's background transparent, it is commonly used in colored background.</p>\n",
        "Code": "<div class=\"site-button-ghost-wrapper\">\n    <Button Type=\"primary\" Ghost>\n        Primary\n    </Button>\n    <Button Ghost>Default</Button>\n    <Button Type=\"dashed\" Ghost>\n        link\n    </Button>\n    <Button Type=\"link\" Ghost>\n        link\n    </Button>\n</div>\n\n<style>\n    .site-button-ghost-wrapper {\n        background: rgb(190, 200, 200);\n        padding: 26px 16px 16px;\n    }\n</style>",
        "Type": "Demos.Components.Button.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "block",
        "Title": "Block Button",
        "Description": "<p><code>block</code> property will make the button fit to its parent width.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" Block>Primary</Button>\n    <Button Block>Default</Button>\n    <Button Type=\"dashed\" Block>Dashed</Button>\n    <Button Type=\"link\" Block>Link</Button>\n</div>",
        "Type": "Demos.Components.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "multiple",
        "Title": "Multiple Buttons",
        "Description": "<p>If you need several buttons, we recommend that you use 1 primary button + n secondary buttons, and if there are more than three operations, you can group some of them into <code>Dropdown.Button</code>.</p>\n",
        "Code": "@{\n    RenderFragment menu = @<Menu>\n        <MenuItem Key=\"1\">1st item</MenuItem>\n        <MenuItem Key=\"2\">2nd item</MenuItem>\n        <MenuItem Key=\"3\">3rd item</MenuItem>\n    </Menu>;\n}\n\n<Button Type=\"primary\">primary</Button>\n<Button>secondary</Button>\n<Dropdown Overlay=@menu>\n    <Button>\n        Actions <Icon Type=\"down\" />\n    </Button>\n</Dropdown>",
        "Type": "Demos.Components.Button.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>To mark a button as disabled, add the <code>disabled</code> property to the <code>Button</code>.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\">Primary</Button>\n    <Button Type=\"primary\" Disabled>\n        Primary(disabled)\n    </Button>\n    <br />\n    <Button>Default</Button>\n    <Button Disabled>Default(disabled)</Button>\n    <br />\n    <Button Type=\"dashed\">Dashed</Button>\n    <Button Type=\"dashed\" Disabled>\n        Dashed(disabled)\n    </Button>\n    <br />\n    <Button Type=\"link\">Link</Button>\n    <Button Type=\"link\" Disabled>\n        Link(disabled)\n    </Button>\n    <br />\n    <Button Type=\"link\" Danger>\n        Danger Link\n    </Button>\n    <Button Type=\"link\" Danger Disabled>\n        Danger Link(disabled)\n    </Button>\n    <br />\n    <Button Danger>Danger Default</Button>\n    <Button Danger Disabled>\n        Danger Default(disabled)\n    </Button>\n    <div class=\"site-Button-Ghost-wrapper\">\n        <Button Ghost>Ghost</Button>\n        <Button Ghost Disabled>\n            Ghost(disabled)\n        </Button>\n    </div>\n</div>",
        "Type": "Demos.Components.Button.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "legacy-group",
        "Title": "Deprecated Button Group",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<ButtonGroup Size=\"small\">\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n<ButtonGroup>\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n<ButtonGroup Size=\"large\">\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n",
        "Type": "Demos.Components.Button.demo.LegacyGroup",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>Ant Design supports a default button size as well as a large and small size.</p>\n<p>If a large or small button is desired, set the <code>size</code> property to either <code>large</code> or <code>small</code> respectively. Omit the <code>size</code> property for a button with the default size.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@size\">\n        <Radio RadioButton Value=\"@(\"large\")\">Large</Radio>\n        <Radio RadioButton Value=\"@(\"default\")\">Default</Radio>\n        <Radio RadioButton Value=\"@(\"small\")\">Small</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <Button Type=\"primary\" Size=@size>\n        Primary\n    </Button>\n    <Button Size=\"@size\">Default</Button>\n    <Button Type=\"dashed\" Size=@size>\n        Dashed\n    </Button>\n    <br />\n    <Button Type=\"link\" Size=@size>\n        Link\n    </Button>\n    <br />\n    <Button Type=\"primary\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"circle\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size>\n        Download\n    </Button>\n    <Button Type=\"primary\" Icon=\"download\" Size=@size>\n        Download\n    </Button>\n</div>\n\n@code\n{\n    string size = \"large\";\n}\n",
        "Type": "Demos.Components.Button.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "Loading",
        "Description": "<p>A loading indicator can be added to a button by setting the <code>loading</code> property on the <code>Button</code>.</p>\n",
        "Code": "@using System.Timers\n\n<div>\n    <Button Type=\"primary\" Loading>\n        Loading\n    </Button>\n    <Button Type=\"primary\" Size=\"small\" Loading>\n        Loading\n    </Button>\n    <br />\n    <Button Type=\"primary\" Loading=\"loading\" OnClick=enterLoading>\n        Click me!\n    </Button>\n    <Button\n        Type=\"primary\"\n        Icon=\"poweroff\"\n    Loading=\"iconLoading\"\n    OnClick=\"enterIconLoading\"\n    >\n    Click me!\n    </Button>\n</div>\n\n@code\n{\n    bool loading = false;\n    bool iconLoading = false;\n\n    private void enterLoading()\n    {\n        loading = true;\n        Task.Run(async () =>\n        {\n            await Task.Delay(8000);\n            loading = false;\n            await InvokeAsync(StateHasChanged);\n            Console.WriteLine(\"Timer2 ended\" + DateTime.Now);\n        });\n\n    }\n\n    private void enterIconLoading()\n    {\n        iconLoading = true;\n\n        Task.Run(async () =>\n        {\n            await Task.Delay(8000);\n            iconLoading = false;\n            await InvokeAsync(StateHasChanged);\n        });\n    }\n}\n",
        "Type": "Demos.Components.Button.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p><code>Button</code> components can contain an <code>Icon</code>. This is done by setting the <code>icon</code> property or placing an <code>Icon</code> component within the <code>Button</code>.</p>\n<p>If you want specific control over the positioning and placement of the <code>Icon</code>, then that should be done by placing the <code>Icon</code> component within the <code>Button</code> rather than using the <code>icon</code> property.</p>\n",
        "Code": "<div>\n    <Tooltip Title=@(\"search\")>\n        <Button Type=\"primary\" Shape=\"circle\" Icon=\"search\" />\n    </Tooltip>\n    <Button Type=\"primary\" Shape=\"circle\">\n        A\n    </Button>\n    <Button Type=\"primary\" Icon=\"search\">\n    Search\n    </Button>\n    <Tooltip Title=@(\"search\")>\n        <Button Shape=\"circle\" Icon=\"search\" />\n    </Tooltip>\n    <Button Icon=\"search\">Search</Button>\n    <br />\n    <Tooltip Title=@(\"search\")>\n        <Button Shape=\"circle\" Icon=\"search\" />\n    </Tooltip>\n    <Button Icon=\"search\">Search</Button>\n    <Tooltip Title=@(\"search\")>\n        <Button Type=\"dashed\" Shape=\"circle\" Icon=\"search\" />\n    </Tooltip>\n    <Button Type=\"dashed\" Icon=\"search\">\n    Search\n    </Button>\n</div>",
        "Type": "Demos.Components.Button.demo.Icon_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tree",
    "Type": "Data Display",
    "Desc": "<p>A hierarchical list structure component.</p>\n<h2>When To Use</h2>\n<p>Almost anything can be represented in a tree structure. Examples include directories, organization hierarchies, biological classifications, countries, etc. The <code>Tree</code> component is a way of representing the hierarchical relationship between these things. You can also expand, collapse, and select a treeNode within a <code>Tree</code>.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/tree#API\" class=\"anchor\">#</a></h2>\n<h3>Tree props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/Xh-oWqg9k/Tree.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic usage, tell you how to use checkable, selectable, disabled, defaultExpandKeys, and etc.</p>\n",
        "Code": "\n<div>\n    <Tree Checkable=\"true\" Nodes=\"TreeNodes\"></Tree>\n</div>\n\n@code{\n\n    List<TreeNode> _treeNodes;\n\n    public List<TreeNode> TreeNodes\n    {\n        get\n        {\n            if (_treeNodes != null)\n                return _treeNodes;\n\n            _treeNodes = new List<TreeNode>(){\n                new TreeNode\n                {\n                    Text = \"parent 1\",IsExpanded = true,\n                    Nodes ={\n                        new TreeNode\n                        {\n                            Text=\"parent 1-0\",IsDisabled=true,IsExpanded=true,IsChecked=true,\n                            Nodes={\n                                new TreeNode{ Text=\"leaf\",IsDisabled=true }\n                                ,\n                                new TreeNode{ Text=\"leaf\" }\n                            }\n                        },\n                        new TreeNode\n                        {\n                            Text=\"parent 1-1\",IsExpanded=true,\n                            Nodes={\n                                new TreeNode{ Text=\"sss\"},\n                            }\n                        },\n                        new TreeNode\n                        {\n                            Text=\"parent 1-2\",IsExpanded=true,\n                            Nodes={\n                                new TreeNode{ Text=\"ttt\"},\n                            }\n                        }\n                    }\n                }\n            };\n\n            return _treeNodes;\n        }\n    }\n}\n\n\n",
        "Type": "Demos.Components.Tree.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "customized-icon",
        "Title": "Customize Icon",
        "Description": "<p>You can customize icons for different nodes.</p>\n",
        "Code": "\n<div>\n    <Tree ShowIcon=\"true\" Nodes=\"TreeNodes\"></Tree>\n</div>\n\n@code{\n\n\n    List<TreeNode> _treeNodes;\n\n    public List<TreeNode> TreeNodes\n    {\n        get\n        {\n            if (_treeNodes != null)\n                return _treeNodes;\n\n            _treeNodes = new List<TreeNode>()\n            {\n                new TreeNode\n                {\n                    Text=\"parent 1\",IsExpanded=true,\n                    IconTemplate=(node)=>@<Icon Type=\"smile\" />,\n                    Nodes =\n                    {\n                        new TreeNode\n                        {\n                            Text=\"leaf\"\n                            ,\n                            IconTemplate=(node)=>@<Icon Type=\"smile\" />\n                        }\n                        ,\n                        new TreeNode\n                        {\n                            Text=\"leaf\",IsSelected=true\n                            ,\n                            IconTemplate=(node)=> node.IsSelected?(RenderFragment)(@<Icon Type=\"frown\" Theme=\"fill\" />):(@<Icon Type=\"frown\" Theme=\"outline\" />)\n                        }\n                    }\n                }\n            };\n\n            return _treeNodes;\n        }\n    }\n\n\n}\n\n\n",
        "Type": "Demos.Components.Tree.demo.Customizedicon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "searchdemo",
        "Title": "Searchable",
        "Description": "<p>Searchable Tree.</p>\n",
        "Code": "\n<div>\n    <Search Value=\"@searchKey\" Placeholder=\"Search..\" ValueChanged=\"PrcessSearch\" />\n    <Tree Nodes=\"TreeNodes\"></Tree>\n</div>\n\n@code{\n\n    string searchKey;\n\n    void PrcessSearch(string newval)\n    {\n        searchKey = newval.Trim();\n        CheckNodesRecursive(TreeNodes);\n    }\n\n    bool CheckNodesRecursive(List<TreeNode> nodes)\n    {\n        int matches = 0;\n\n        foreach (TreeNode node in nodes)\n        {\n            if (!string.IsNullOrEmpty(searchKey) && node.Text.Contains(searchKey, StringComparison.OrdinalIgnoreCase))\n                matches++;\n\n            if (!node.HasChildNodes)\n                continue;\n\n            node.IsExpanded = CheckNodesRecursive(node.Nodes);\n            if (node.IsExpanded)\n                matches++;\n        }\n\n        return matches != 0;\n    }\n\n\n    List<TreeNode> _treeNodes;\n\n    public List<TreeNode> TreeNodes\n    {\n        get\n        {\n            if (_treeNodes != null)\n                return _treeNodes;\n\n            _treeNodes = new List<TreeNode>();\n            MakeSampleData(_treeNodes, \"0\", 0);\n\n            return _treeNodes;\n        }\n    }\n\n    RenderFragment RenderNodeTemplate(TreeNode node)\n    {\n        int index = string.IsNullOrEmpty(searchKey) ? -1 : node.Text.IndexOf(searchKey, StringComparison.OrdinalIgnoreCase);\n        if (index == -1)\n            return (b) => { b.AddContent(0, node.Text); };\n        return (b) =>\n        {\n            if (index != 0)\n                b.AddContent(0, node.Text.Substring(0, index));\n            b.AddMarkupContent(1, \"<span class='site-tree-search-value' style='color:orange'>\" + searchKey + \"</span>\");\n            if (index + searchKey.Length < node.Text.Length)\n                b.AddContent(2, node.Text.Substring(index + searchKey.Length));\n        };\n    }\n\n\n    void MakeSampleData(List<TreeNode> nodes, string ptext, int level)\n    {\n        for (int index = 0; index < 3; index++)\n        {\n            TreeNode subnode = new TreeNode();\n            subnode.Text = ptext + \"-\" + index;\n            subnode.NodeTemplate = this.RenderNodeTemplate;\n            nodes.Add(subnode);\n\n            if (index < 2 && level < 2)\n            {\n                MakeSampleData(subnode.Nodes, subnode.Text, level + 1);\n            }\n        }\n    }\n}\n\n\n",
        "Type": "Demos.Components.Tree.demo.Searchdemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "dynamic",
        "Title": "load data asynchronously",
        "Description": "<p>To load data asynchronously when click to expand a treeNode.</p>\n",
        "Code": "\n<div>\n    <Tree Nodes=\"TreeNodes\" OnNodeLoadDelay=\"NodeLoadDelayAsync\"></Tree>\n</div>\n\n@code{\n\n    List<TreeNode> _treeNodes;\n\n    public List<TreeNode> TreeNodes\n    {\n        get\n        {\n            if (_treeNodes != null)\n                return _treeNodes;\n\n            _treeNodes = new List<TreeNode>(){\n                new TreeNode{Text = \"Expand to load\",LoadDelay = true},\n                new TreeNode{Text = \"Expand to load\",LoadDelay = true},\n                new TreeNode{Text = \"Tree Node\"}\n            };\n\n            return _treeNodes;\n        }\n    }\n\n    async Task NodeLoadDelayAsync(TreeEventArgs args)\n    {\n        await Task.Delay(300);\n        args.Node.Nodes.Add(new TreeNode { Text = \"Child Node\", LoadDelay = true });\n        args.Node.Nodes.Add(new TreeNode { Text = \"Child Node\", LoadDelay = true });\n    }\n}\n\n\n",
        "Type": "Demos.Components.Tree.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "line",
        "Title": "Tree with line",
        "Description": "<p>Tree with connected line between nodes, turn on by <code>showLine</code>, customize the preseted icon by <code>switcherIcon</code>.</p>\n",
        "Code": "\n<div>\n    ShowLine <Switch Checked=\"_showLine\" OnChange=\"(v)=>_showLine = v\" />\n    <br />\n    ShowIcon <Switch Checked=\"_showIcon\" OnChange=\"(v)=>_showIcon = v\" />\n    <br />\n    <Tree ShowLine=\"_showLine\" ShowIcon=\"_showIcon\" IconType=\"carry-out\" Nodes=\"TreeNodes\"></Tree>\n</div>\n\n@code{\n\n    bool _showLine { get; set; } = true;\n    bool _showIcon { get; set; }\n\n    List<TreeNode> _treeNodes;\n\n    public List<TreeNode> TreeNodes\n    {\n        get\n        {\n            if (_treeNodes != null)\n                return _treeNodes;\n\n            _treeNodes = new List<TreeNode>(){\n                new TreeNode\n                {\n                    Text = \"parent 1\",IsExpanded = true,\n                    Nodes ={\n                        new TreeNode\n                        {\n                            Text=\"parent 1-0\",IsExpanded=true,\n                            Nodes={\n                                new TreeNode{ Text=\"leaf\" }\n                                ,\n                                new TreeNode{ Text=\"leaf\" }\n                                ,\n                                new TreeNode{ Text=\"leaf\" }\n                            }\n                        },\n                        new TreeNode\n                        {\n                            Text=\"parent 1-1\",\n                            Nodes={\n                                new TreeNode{ Text=\"leaf\"},\n                            }\n                        },\n                        new TreeNode\n                        {\n                            Text=\"parent 1-2\",\n                            Nodes={\n                                new TreeNode{ Text=\"leaf\",SwitcherIcon=\"form\"},\n                            }\n                        }\n                    }\n                }\n            };\n\n            return _treeNodes;\n        }\n    }\n}\n\n\n",
        "Type": "Demos.Components.Tree.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "switcher-icon",
        "Title": "Customize collapse/expand icon",
        "Description": "<p>customize collapse/expand icon of tree node</p>\n",
        "Code": "\n<div>\n    @* or use template *@\n    @*\n        <SwitcherIconTemplate Context=\"node\">\n            <Icon Type=\"down\" Class=\"{PREFIX_CLS}-switcher-icon\" />\n        </SwitcherIconTemplate>\n    *@\n    <Tree Nodes=\"TreeNodes\" SwitcherIcon=\"down\"></Tree>\n</div>\n\n\n@code{\n\n\n    List<TreeNode> _treeNodes;\n\n    public List<TreeNode> TreeNodes\n    {\n        get\n        {\n            if (_treeNodes != null)\n                return _treeNodes;\n\n            _treeNodes = new List<TreeNode>()\n{\n                new TreeNode\n                {\n                    Text=\"parent 1\",IsExpanded=true,\n                    IconTemplate=(node)=>@<Icon Type=\"smile\" />,\n                    Nodes =\n                    {\n                        new TreeNode\n                        {\n                            Text=\"leaf\"\n                            ,\n                            IconTemplate=(node)=>@<Icon Type=\"smile\" />\n                        }\n                        ,\n                        new TreeNode\n                        {\n                            Text=\"leaf\"\n                            ,\n                            IconTemplate=(node)=> node.IsSelected?(RenderFragment)(@<Icon Type=\"frown\" Theme=\"fill\" />):(@<Icon Type=\"frown\" Theme=\"outline\" />)\n                        }\n                    }\n                }\n            };\n\n                return _treeNodes;\n            }\n        }\n\n\n}\n\n\n",
        "Type": "Demos.Components.Tree.demo.Switchericon",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Checkbox",
    "Type": "Data Entry",
    "Desc": "<p>Checkbox component.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Used for selecting multiple values from several options.</li>\n<li>If you use only one checkbox, it is the same as using Switch to toggle between two states.\nThe difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/checkbox#API\" class=\"anchor\">#</a></h2>\n<p>Checkbox</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Specifies whether the checkbox is selected.</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Indeterminate</td>\n<td>indeterminate checked state of checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>The callback function that is triggered when the state changes</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Checkbox Group</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CheckboxItems</td>\n<td>Check box items</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disable</td>\n<td>Disable all checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>Specifies options</td>\n<td>CheckboxOption[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>List of selected value</td>\n<td>IList<string></td>\n<td>Array.Empty<string>()</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>The callback function that is triggered when the state changes</td>\n<td>function(checkValue)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/8nbVbHEm_/CheckBox.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>Basic usage of checkbox.</p>\n",
        "Code": "  <div>\n    <Checkbox Checked=\"@isChecked\" Disabled=\"@disabled\" CheckedChange=\"@ToggleChecked\">\n                @($\"{(isChecked ? \"Check\" : \"Uncheck\")}-{(disabled ? \"Disable\" : \"Enable\")}\")\n    </Checkbox>\n  </div>\n  \n  @code{\n    bool isChecked = true;\n    bool disabled = false;\n    void ToggleChecked(bool value)\n    {\n        isChecked = !isChecked;\n    }\n    void ToggleDisable()\n    {\n        disabled = !disabled;\n    }\n}\n\n  ",
        "Type": "Demos.Components.Checkbox.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Group",
        "Title": "Checkbox Group",
        "Description": "<p>Generate a group of checkboxes from an array.</p>\n",
        "Code": "<div>\n    <CheckboxGroup Options=\"@plainOptions\" Value=\"@(new[]{\"Apple\"})\" OnChange=\"OnChange\" />\n    <br />\n    <br />\n    <CheckboxGroup Options=\"@options\" Value=\"@(new[]{\"Pear\"})\" OnChange=\"OnChange\" />\n    <br />\n    <br />\n    <CheckboxGroup Options=\"@OptionsWithDisabled\" Disabled Value=\"@(new[]{\"Apple\"})\" OnChange=\"OnChange\" />\n</div>\n\n@using System.Text.Json\n@code{\n\n    string[] plainOptions = { \"Apple\", \"Pear\", \"Orange\" };\n\n    CheckboxOption[] options = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\"},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\"},\n    };\n\n    CheckboxOption[] OptionsWithDisabled = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\"},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\", Disabled = true},\n    };\n\n    void OnChange(string[] checkedValues)\n    {\n        Console.WriteLine($\"checked = {JsonSerializer.Serialize(checkedValues)}\");\n    }\n}",
        "Type": "Demos.Components.Checkbox.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Layout",
        "Title": "Use with Grid",
        "Description": "<p>We can use Checkbox and Grid in Checkbox.Group, to implement complex layout.</p>\n",
        "Code": "<div>\n    TO BE Defined\n    @*<CheckboxGroup Style=\"width:100%\"  ValueChanged=\"@OnChange\">\n\n        <Row>\n            <Col Span=\"8\">\n                <Checkbox Value=\"A\" >A</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"B\"  >B</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"C\"  >C</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"D\" >D</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"E\" >E</Checkbox>\n            </Col>\n        </Row>\n    </CheckboxGroup>*@\n\n\n\n</div>\n@code\n{   \n\n    void OnChange()\n    {\n\n    }\n}\n\n",
        "Type": "Demos.Components.Checkbox.demo.Layout",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "CheckboxAll",
        "Title": "Check all",
        "Description": "<p>The <code>indeterminate</code> property can help you to achieve a 'check all' effect.</p>\n",
        "Code": "<div>\n    <Checkbox Indeterminate=\"@indeterminate\" Checked=\"@checkAll\" CheckedChange=\"@CheckAllChanged\">\n    Check all\n    </Checkbox>\n    <br />\n    <AntDesign.CheckboxGroup Options=\"@ckeckAllOptions\" ValueChanged=\"@OnChanged\"/>\n</div>\n\n@code{\n\n    static CheckboxOption[] ckeckAllOptions = new CheckboxOption[]{\n        new CheckboxOption{ Label=\"Apple\",Value=\"Apple\" ,Checked=true},\n        new CheckboxOption{ Label=\"Pear\", Value=\"Pear\" },\n        new CheckboxOption{ Label=\"Orange\", Value=\"Orange\",Checked=true },\n    };\n\n    void CheckAllChanged()\n    {\n        bool allChecked = checkAll;\n        ckeckAllOptions.ForEach(o => o.Checked = !allChecked);\n    }\n\n    void OnChanged()\n    {\n\n    }\n\n    bool indeterminate => ckeckAllOptions.Count(o => o.Checked) > 0 && ckeckAllOptions.Count(o => o.Checked) < ckeckAllOptions.Count();\n\n    bool checkAll => ckeckAllOptions.All(o => o.Checked);\n\n}",
        "Type": "Demos.Components.Checkbox.demo.CheckboxAll",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Controlled",
        "Title": "Controlled Checkbox",
        "Description": "<p>Communicated with other components.</p>\n",
        "Code": "<div>\n    <p style=\"margin-bottom: 20px\">\n        <Checkbox Checked=\"@checkValue\"  \n                    Disabled=\"@disableValue\" \n                    CheckedChange=\"CheckChanged\">\n        @label\n        </Checkbox>\n    </p>     \n        <p>\n        <Button Type=\"primary\" Size=\"small\"  @onclick=\"@CheckClick\">@checkTitle</Button>\n        <Button Type=\"primary\" Size=\"small\"  @onclick=\"@DisableClick\">@disableTitle</Button>\n      </p>     \n  </div>\n\n  @code{\n\n      private bool checkValue { get; set; } = false;\n      private bool disableValue { get; set; } = false;\n      private string label { get; set; } = \"Check-Enable\";\n      private string checkTitle { get; set; } = \"Check\";\n      private string disableTitle { get; set; } = \"Enable\";\n\n      void CheckChanged()\n      {\n          CheckClick();\n      }\n\n\n\n      void CheckClick()\n      {\n          if (checkValue)\n          {\n              checkTitle = \"Check\";\n              checkValue = false;\n          }\n          else\n          {\n              checkTitle = \"Uncheck\";\n              checkValue = true;\n          }\n\n          label = $\"{checkTitle}-{disableTitle}\";\n      }\n\n\n\n      void DisableClick()\n      {\n          if (disableValue)\n          {\n              disableTitle = \"Enabled\";\n              disableValue = false;\n          }\n          else\n          {\n              disableTitle = \"Disabled\";\n              disableValue = true;\n          }\n          label = $\"{checkTitle}-{disableTitle}\";\n      }\n  }",
        "Type": "Demos.Components.Checkbox.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Disable",
        "Title": "Disable",
        "Description": "<p>Disabled checkbox.</p>\n",
        "Code": "<div>\n            <Checkbox Disabled=\"true\"/>\n            <br />\n            <Checkbox Checked=\"true\" Disabled=\"true\"/>\n</div>",
        "Type": "Demos.Components.Checkbox.demo.Disable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "BackTop",
    "Type": "Other",
    "Desc": "<p><code>BackTop</code> makes it easy to go back to the top of the page.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When the page content is very long.</li>\n<li>When you need to go back to the top very frequently in order to view the contents.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/backtop#API\" class=\"anchor\">#</a></h2>\n<p>BackTop</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Target</td>\n<td>specifies the scrollable area dom node</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>VisibilityHeight</td>\n<td>the <code>BackTop</code> button will not show until the scroll height reaches this value</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>a callback function, which can be executed when you click the button</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/tJZ5jbTwX/BackTop.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>The most basic usage.</p>\n",
        "Code": "<div>\n    <div>\n        Scroll down to see the bottom <strong> gray</strong> button\n    </div>\n    <BackTop Title=\"Scroll down to see the bottom-right gray button.\" ></BackTop>\n\n</div>\n",
        "Type": "Demos.Components.BackTop.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Scroll",
        "Title": "Custom style",
        "Description": "<p>You can customize the style of the button, just note the size limit: no more than <code>40px * 40px</code>.</p>\n",
        "Code": "<div>\n    <style>\n        .myStyle {\n            height: 40px;\n            width: 40px;\n            line-height: 40;\n            border-radius: 4px;\n            background-color: #1088e9;\n            color: #fff;\n            text-align: center;\n            font-size: 14px;\n        }\n    </style>\n\n    <div style=\"height:300px; padding: 8px;  overflow:scroll;\">\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <BackTop Title=\"Scroll down to see the bottom-right gray button.\" />\n\n    </div>\n</div>\n",
        "Type": "Demos.Components.BackTop.demo.Scroll",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Form",
    "Type": "Data Entry",
    "Desc": "<p>High performance Form component with data scope management. Including data collection, verification, and styles.</p>\n<h2>When to use</h2>\n<ul>\n<li>When you need to create an instance or collect information.</li>\n<li>When you need to validate fields in certain rules.</li>\n</ul>\n<h2>API(TODO)</h2>\n<style>\n.code-box-demo .ant-form:not(.ant-form-inline):not(.ant-form-vertical) {\n  max-width: 600px;\n}\n.markdown.api-container table td:nth-of-type(4) {\n  white-space: nowrap;\n  word-wrap: break-word;\n}\n</style>\n<style>\n  .site-form-item-icon {\n    color: rgba(0, 0, 0, 0.25);\n  }\n  [data-theme=\"dark\"] .site-form-item-icon {\n    color: rgba(255,255,255,.3);\n  }\n</style>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/ORmcdeaoO/Form.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Usage",
        "Description": "<p>Basic Form data control. Includes layout, initial values, validation and submit.</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n    <Form Model=\"@model\"\n          LabelCol=\"new ColLayoutParam { Span = 8 }\"\n          WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n          OnFinish=\"OnFinish\"\n          OnFinishFailed=\"OnFinishFailed\">\n        <FormItem Label=\"Username\">\n            <Input @bind-Value=\"@context.Username\" />\n        </FormItem>\n        <FormItem Label=\"Password\">\n            <InputPassword @bind-Value=\"@context.Password\" />\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n            <Checkbox @bind-Value=\"context.RememberMe\">Remember me</Checkbox>\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n            <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n                Submit\n            </Button>\n        </FormItem>\n    </Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [Required]\n        public string Password { get; set; }\n        public bool RememberMe { get; set; } = true;\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Components.Form.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "control-hooks",
        "Title": "Form methods",
        "Description": "<p>Get form ref with <code>@ref</code>.</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n<Form @ref=\"form\" \n      Model=\"@model\" \n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Note\">\n        <Input @bind-Value=\"@context.Note\" />\n    </FormItem>\n\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n        <Button OnClick=\"Reset\">\n            Reset\n        </Button>\n        <Button Type=\"@ButtonType.Link\" OnClick=\"OnFill\">\n            Fill form\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Note { get; set; }\n    }\n\n    private Model model = new Model();\n    private Form<Model> form;\n\n    private void OnFill(MouseEventArgs args)\n    {\n        model.Note = \"Hello world!\";\n\n        Console.WriteLine($\"form ref:{form}\");\n    }\n\n    private void Reset(MouseEventArgs args)\n    {\n        form.Reset();\n    }\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Components.Form.demo.ControlHooks",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6.1,
        "Name": "customized-form-controls",
        "Title": "Customized Form Controls",
        "Description": "",
        "Code": "@using System.Text.Json;\n\n<Form Model=\"@model\"\n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\"\n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Input\">\n        <PriceInput @bind-Value=\"context.Price\" />\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button HtmlType=\"submit\">Submit</Button>\n    </FormItem>\n</Form>\n\n@code\n{\n    public class Model\n    {\n        public Price Price { get; set; } = new Price() { \n            Number = 0,\n            Currency = \"rmb\"\n        };\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Components.Form.demo.CustomizedFormControls",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "complex-form-control",
        "Title": "complex form control",
        "Description": "<p>Help Wanted</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n<Form Model=\"@model\"\n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\"\n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Username\">\n        <Input @bind-Value=\"context.Username\" Style=\"width: 160px\" Placeholder=\"Please input\" />\n        <Tooltip Title=@(\"Useful information\")>\n            <a href=\"#API\" Style=\"margin: 0 8px\" }>\n                Need Help?\n            </a>\n        </Tooltip>\n    </FormItem>\n    <FormItem label=\"Address\">\n        <InputGroup Compact>\n            <FormItem NoStyle>\n                <Input @bind-Value=\"context.Address.Province\" Placeholder=\"Select is not yet\" />\n            </FormItem>\n\n            <FormItem NoStyle>\n                <Input @bind-Value=\"context.Address.Street\" Style=\"width: 50%\" Placeholder=\"Input street\" />\n            </FormItem>\n        </InputGroup>\n    </FormItem>\n     <FormItem Label=\"BirthDate\" style=\"margin-bottom: 0\">\n        <FormItem Style=\"display: inline-block; width: calc(50% - 10px)\">\n          <Input @bind-Value=\"context.Year\" Placeholder=\"Input birth year\" />\n        </FormItem> \n         <FormItem Style=\"display: inline-block; width: calc(50% - 10px); margin: 0 8px\">\n          <Input @bind-Value=\"context.Month\" Placeholder=\"Input birth month\" />\n        </FormItem>\n      </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n\n@code\n{\n    public class Address\n    {\n        [Required]\n        public string Province { get; set; }\n        [Required]\n        public string Street { get; set; }\n    }\n\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [ValidateComplexType]\n        public Address Address { get; set; } = new Address();\n        [Required]\n        public string Year { get; set; }\n        [Required]\n        public string Month { get; set; }\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n\n}",
        "Type": "Demos.Components.Form.demo.ComplexFormControl",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "layout",
        "Title": "Form Layout",
        "Description": "<p>There are three layout for form: <code>horizontal</code>, <code>vertical</code>, <code>inline</code>.</p>\n",
        "Code": "@using System.Text.Json;\n\n<Form Layout=\"@model.Layout\" \n      LabelCol=\"GetFormLabelCol()\"\n      WrapperCol=\"GetFormWrapperCol()\"\n      Model=\"@model\" \n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Form Layout\" >\n        <RadioGroup @bind-Value=\"@context.Layout\">\n            <Radio RadioButton Value=\"@FormLayout.Horizontal\">Horizontal</Radio>\n            <Radio RadioButton Value=\"@FormLayout.Vertical\">Vertical</Radio>\n            <Radio RadioButton Value=\"@FormLayout.Inline\">Inline</Radio>\n        </RadioGroup>\n    </FormItem>\n\n    <FormItem Label=\"Field A\">\n        <Input @bind-Value=\"@context.FieldA\" />\n    </FormItem>\n\n    <FormItem Label=\"Field B\">\n        <Input @bind-Value=\"@context.FieldB\" />\n    </FormItem>\n\n    <FormItem WrapperCol=\"GetButtonItemLayout()\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        public string Layout { get; set; } = FormLayout.Horizontal;\n        public string FieldA { get; set; }\n        public string FieldB { get; set; }\n    }\n\n    private Model model = new Model();\n\n    private ColLayoutParam GetFormLabelCol()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"4\" } : null;\n    }\n\n    private ColLayoutParam GetFormWrapperCol()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"14\" } : null;\n    }\n\n    private ColLayoutParam GetButtonItemLayout()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"14\", Offset = \"4\" } : null;\n    }\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Components.Form.demo.Layout",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6.3,
        "Name": "is-modified",
        "Title": "Check if the form has been modified",
        "Description": "<p>Check if the form has been modified by using <code>IForm.IsModified</code>.</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n    <Form @ref=\"form\" Model=\"@model\"\n          LabelCol=\"new ColLayoutParam { Span = 8 }\"\n          WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n          OnFinish=\"OnFinish\"\n          OnFinishFailed=\"OnFinishFailed\">\n        <FormItem Label=\"Username\">\n            <Input @bind-Value=\"@context.Username\" />\n        </FormItem>\n        <FormItem Label=\"Password\">\n            <InputPassword @bind-Value=\"@context.Password\" />\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n            <Checkbox @bind-Value=\"context.RememberMe\">Remember me</Checkbox>\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n            <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\" Disabled=\"!form.IsModified\">\n                Submit\n            </Button>\n        </FormItem>\n    </Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [Required]\n        public string Password { get; set; }\n        public bool RememberMe { get; set; } = true;\n    }\n\n    Form<Model> form;\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Components.Form.demo.IsModified",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3.1,
        "Name": "size",
        "Title": "Form size",
        "Description": "<p>Set component size, only works for antd components.</p>\n",
        "Code": "@using System.Text.Json;\n\n<Form Model=\"@model\"\n        LabelCol=\"new ColLayoutParam { Span = 8 }\"\n        WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n        OnFinish=\"OnFinish\"\n        OnFinishFailed=\"OnFinishFailed\"\n        Size=\"@model.Size\">\n    <FormItem Label=\"Form Size\">\n        <RadioGroup @bind-Value=\"@context.Size\">\n            <Radio RadioButton Value=\"@AntSizeLDSType.Small\">Small</Radio>\n            <Radio RadioButton Value=\"@AntSizeLDSType.Default\">Default</Radio>\n            <Radio RadioButton Value=\"@AntSizeLDSType.Large\">Large</Radio>\n        </RadioGroup>\n    </FormItem>\n\n    <FormItem Label=\"Input\">\n        <Input @bind-Value=\"@context.Input\" />\n    </FormItem>\n    <FormItem Label=\"InputArea\">\n        <TextArea @bind-Value=\"@context.InputArea\" />\n    </FormItem>\n    <FormItem Label=\"Cascader\">\n        <Cascader @bind-Value=\"@context.Cascader\" Options=\"districts\" />\n    </FormItem>\n    <FormItem Label=\"DatePicker\">\n        <DatePicker @bind-Value=\"@context.DatePicker\" />\n    </FormItem>\n    <FormItem Label=\"RangePicker\">\n        <RangePicker @bind-Value=\"@context.RangePicker\" />\n    </FormItem>\n    <FormItem Label=\"InputNumber\">\n        <AntDesign.InputNumber @bind-Value=\"@context.Number\" />\n    </FormItem>\n    <FormItem Label=\"Switch\">\n        <Switch @bind-Value=\"@context.Switch\" />\n    </FormItem>\n    <FormItem Label=\"Radio\">\n        <RadioGroup @bind-Value=\"@context.Radio\">\n            <Radio RadioButton Value=\"@(\"Hangzhou\")\">Hangzhou</Radio>\n            <Radio RadioButton Value=\"@(\"Shanghai\")\">Shanghai</Radio>\n            <Radio RadioButton Value=\"@(\"Beijing\")\">Beijing</Radio>\n            <Radio RadioButton Value=\"@(\"Chengdu\")\">Chengdu</Radio>\n        </RadioGroup>\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n\n@code\n{\n    public class Model\n    {\n        public string Size { get; set; } = AntSizeLDSType.Small;\n        public string Input { get; set; } = \"input\";\n        public string InputArea { get; set; } = \"inputArea\";\n        public string Cascader { get; set; } = \"11\";\n        public DateTime? DatePicker { get; set; } = DateTime.Now;\n        public DateTime?[] RangePicker { get; set; } = new DateTime?[] { DateTime.Now, DateTime.Now.AddDays(10) };\n        public double Number { get; set; } = 1;\n        public bool Switch { get; set; } = true;\n        public string Radio { get; set; } = \"Beijing\";\n    }\n\n    private Model model = new Model();\n\n    private List<CascaderNode> districts = new List<CascaderNode>\n    {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"浙江\",\n            Children = new []\n            {\n                new CascaderNode {Value = \"11\", Label = \"杭州\"},\n                new CascaderNode {Value = \"12\", Label = \"温州\"},\n            }\n        },\n        new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"上海\",\n        }\n    };\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n\n}",
        "Type": "Demos.Components.Form.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "loading",
        "Title": "Form Loading",
        "Description": "<p>Modify the Loading property to change the existing form to the loading state..</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n<Form Loading=\"loading\" Model=\"@model\" \n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Username\" >\n        <Input @bind-Value=\"@context.Username\"/>\n    </FormItem>\n    <FormItem Label=\"Password\">\n        <InputPassword @bind-Value=\"@context.Password\" />\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Checkbox @bind-Value=\"context.RememberMe\">Remember me</Checkbox>\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n<div style=\"margin-top: 16px\">\n    Loading state：\n    <Switch Checked=loading OnChange=toggle />\n</div>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [Required]\n        public string Password { get; set; }\n        public bool RememberMe { get; set; } = true;\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Components.Form.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "form-context",
        "Title": "Control between forms",
        "Description": "<p>Use <code>FormProvider</code> to process data between forms. In this case, submit button is in the Modal which is out of Form. You can use <code>form.Submit</code> to submit form. Besides, we recommend native <code>&lt;Button HtmlType=&quot;submit&quot; /&gt;</code> to submit a form.</p>\n",
        "Code": "@using System.Text.Json;\n@using System.ComponentModel.DataAnnotations;\n\n<FormProvider OnFormFinish=\"OnFormFinish\">\n    <Form Model=\"@_baseFormModel\"\n          Name=\"basicForm\"\n          OnFinish=\"OnBasicFinish\"\n          LabelCol=\"new ColLayoutParam { Span = 8 }\"\n          WrapperCol=\"new ColLayoutParam { Span = 16 }\">\n        <FormItem Label=\"Group Name\">\n            <Input @bind-Value=\"context.GroupName\" />\n        </FormItem>\n        <FormItem Label=\"User List\">\n            @if (context.Users.Count > 0)\n            {\n                <ul>\n                    @for (int i = 0; i < context.Users.Count; i++)\n                    {\n                        <li class=\"user\">\n                            <Icon Type=\"user\" />\n                            @(context.Users[i].Name) - @(context.Users[i].Age)\n                        </li>\n                    }\n                </ul>\n            }\n            else\n            {\n                <Paragraph>\n                    <Text Class=\"ant-form-text\">\n                        ( <Icon Type=\"smile\" /> No user yet. )\n                    </Text>\n                </Paragraph>\n            }\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam { Offset = 8, Span = 16 }\">\n            <Button HtmlType=\"submit\" Type=\"@ButtonType.Primary\">\n                Submit\n            </Button>\n            <Button HtmlType=\"button\" Style=\"margin: 0 8px\" OnClick=\"ShowUserModal\">\n                Add User\n            </Button>\n        </FormItem>\n    </Form>\n\n    <Modal Title=@(\"Basic Drawer\")\n           Visible=\"@_modelVisible\"\n           OnOk=\"@HandleOk\"\n           OnCancel=\"@HideUserModal\">\n        <Form @ref=\"@_userForm\" Model=\"@_userFormModel\" Layout=\"@FormLayout.Vertical\" Name=\"userForm\">\n            <FormItem Label=\"User Name\">\n                <Input @bind-Value=\"@context.Name\" />\n            </FormItem>\n            <FormItem Label=\"User Age\">\n                <AntDesign.InputNumber @bind-Value=\"@context.Age\" />\n            </FormItem>\n        </Form>\n    </Modal>\n</FormProvider>\n\n\n@code {\n    public class User\n    {\n        [Required]\n        public string Name { get; set; }\n        [Required]\n        public int Age { get; set; }\n    }\n\n    public class UserGroup\n    {\n        [Required]\n        public string GroupName { get; set; }\n        [ValidateComplexType]\n        public List<User> Users { get; set; } = new List<User>();\n    }\n\n    private Form<User> _userForm;\n    private User _userFormModel = new User();\n    private UserGroup _baseFormModel = new UserGroup();\n    private bool _modelVisible = false;\n\n    private void OnFormFinish(FormProviderFinishEventArgs args)\n    {\n        if (args.FinishForm.Name == \"userForm\")\n        {\n            // if you can't get the reference of _userForm and _baseFormModel, you should:\n            User user = (User)args.FinishForm.Model;\n            UserGroup userGroup = (UserGroup)args.Forms[\"basicForm\"].Model;\n \n            userGroup.Users.Add(new User { Name = user.Name, Age = user.Age });\n\n            // if you have the reference of _userForm and _baseFormModel, you can:\n            //_baseFormModel.Users.Add(new User { Name = _userFormModel.Name, Age = _userFormModel.Age });\n        }\n        HideUserModal();\n    }\n\n    private void OnBasicFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(editContext.Model)}\");\n    }\n\n    private void HandleOk(MouseEventArgs args)\n    {\n        _userForm.Submit();\n    }\n\n    private void ShowUserModal()\n    {\n        _modelVisible = true;\n    }\n\n    private void HideUserModal()\n    {\n        _modelVisible = false;\n        _userForm.Reset();\n    }\n}\n\n<style>\n    #components-form-demo-form-context .user {\n        margin-bottom: 8px;\n    }\n\n        #components-form-demo-form-context .user .ant-avatar {\n            margin-right: 8px;\n        }\n\n    .ant-row-rtl #components-form-demo-form-context .user .ant-avatar {\n        margin-right: 0;\n        margin-left: 8px;\n    }\n</style>",
        "Type": "Demos.Components.Form.demo.FormContext",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Table",
    "Type": "Data Display",
    "Desc": "<p>A table displays rows of data.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To display a collection of structured data.</li>\n<li>To sort, search, paginate, filter data.</li>\n</ul>\n<h2>How To Use</h2>\n<p>Specify <code>dataSource</code> of Table as an array of data.</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/f-SbcX2Lx/Table.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Usage",
        "Description": "<p>Simple table with actions.</p>\n",
        "Code": "@using System.ComponentModel\n\n<Table DataSource=\"@data\">\n    <Column @bind-Field=\"@context.Name\">\n        <a>@context.Name</a>\n    </Column>\n    <Column @bind-Field=\"@context.Age\"></Column>\n    <Column @bind-Field=\"@context.Address\"></Column>\n    <Column @bind-Field=\"@context.Tags\">\n        @foreach (var tag in context.Tags)\n        {\n            var color = tag.Length > 5 ? \"geekblue\" : \"green\";\n            if (tag == \"loser\")\n            {\n                color = \"volcano\";\n            }\n            <Tag Color=\"@color\">@tag</Tag>\n        }\n    </Column>\n    <ActionColumn Title=\"Acton\">\n        <Space Size=\"middle\">\n            <SpaceItem>\n                <a>Invite @context.Name</a>\n            </SpaceItem>\n            <SpaceItem>\n                <a>Delete</a>\n            </SpaceItem>\n        </Space>\n    </ActionColumn>\n</Table>\n\n@code{\n    Data[] data =\n    {\n        new Data()\n        {\n            Key = \"1\",\n            Name = \"John Brown\",\n            Age = 32,\n            Address = \"New York No. 1 Lake Park\",\n            Tags = new[] {\"nice\", \"developer\"}\n        },\n        new Data()\n        {\n            Key = \"2\",\n            Name = \"Jim Green\",\n            Age = 42,\n            Address = \"London No. 1 Lake Park\",\n            Tags = new[] { \"loser\"}\n        },\n        new Data()\n        {\n            Key = \"3\",\n            Name = \"Joe Black\",\n            Age = 32,\n            Address = \"Sidney No. 1 Lake Park\",\n            Tags = new[] { \"cool\", \"teacher\" }\n        }\n    };\n\n    public class Data\n    {\n        [DisplayName(\"Key\")]\n        public string Key { get; set; }\n\n        [DisplayName(\"Name\")]\n        public string Name { get; set; }\n\n        [DisplayName(\"Age\")]\n        public int Age { get; set; }\n\n        [DisplayName(\"Address\")]\n        public string Address { get; set; }\n\n        [DisplayName(\"Tags\")]\n        public string[] Tags { get; set; }\n    }\n}",
        "Type": "Demos.Components.Table.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "router-pagging",
        "Title": "Router pagging",
        "Description": "<p>Pagging using router.</p>\n",
        "Code": "@using System.ComponentModel\n@using System.Reflection\n@using System.Web\n\n\n<div class=\"router-pagging-table\">\n    <Input @bind-Value=\"_url\" OnPressEnter=\"()=> navigation.NavigateTo(_url,true)\" />\n    <Table @ref=\"table\"\n           DataSource=\"@forecasts\"\n           Total=\"_total\"\n           Loading=\"_loading\"\n           @bind-PageIndex=\"_pageIndex\"\n           @bind-PageSize=\"_pageSize\"\n           OnPageIndexChange=\"fetchData\"\n           @bind-SelectedRows=\"selectedRows\">\n        <Selection Key=\"@(context.Id.ToString())\" />\n        <Column @bind-Field=\"@context.Id\" Sortable />\n        <Column @bind-Field=\"@context.Date\" Format=\"yyyy-MM-dd\" Sortable />\n        <Column @bind-Field=\"@context.TemperatureC\" Sortable />\n        <Column Title=\"Temp. (F)\" Field=\"@context.TemperatureF\" />\n        <Column @bind-Field=\"@context.Summary\" Sortable />\n    </Table>\n\n    <br />\n    <p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>\n</div>\n\n@inject NavigationManager navigation\n@code {\n\n    WeatherForecast[] forecasts;\n\n    IEnumerable<WeatherForecast> selectedRows;\n    ITable table;\n\n    int _pageIndex = 1;\n    int _pageSize = 5;\n    int _total = 0;\n    string _url;\n    bool _loading;\n\n    protected override async Task OnInitializedAsync()\n    {\n        _url = navigation.Uri;\n        var query = HttpUtility.ParseQueryString(_url);\n        _pageIndex = int.TryParse(query[\"page\"], out var index) ? index > 0 ? index : 1 : 1;\n        _pageSize = int.TryParse(query[\"size\"], out var size) ? size > 0 ? size : 5 : 5;\n\n        _loading = true;\n        forecasts = await GetForecastAsync(_pageIndex, _pageSize);\n        _total = 50;\n        _loading = false;\n    }\n\n    void fetchData(PaginationEventArgs args)\n    {\n        navigation.NavigateTo($\"mock?type={GetType().ToString().Replace($\"{Assembly.GetExecutingAssembly().GetName().Name}.\", \"\")}&page={args.PageIndex}&size={args.PageSize}\");\n    }\n\n    public class WeatherForecast\n    {\n        public int Id { get; set; }\n\n        [DisplayName(\"Date\")]\n        public DateTime Date { get; set; }\n\n        [DisplayName(\"Temp. (C)\")]\n        public int TemperatureC { get; set; }\n\n        [DisplayName(\"Summary\")]\n        public string Summary { get; set; }\n\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public bool Hot { get; set; }\n    }\n\n    private static readonly string[] Summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n    public async Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)\n    {\n        await Task.Delay(1000);\n        var rng = new Random();\n        return await Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>\n        {\n            var temperatureC = rng.Next(-20, 55);\n            return new WeatherForecast\n            {\n                Id = index,\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = temperatureC,\n                Summary = Summaries[rng.Next(Summaries.Length)],\n                Hot = temperatureC > 30,\n            };\n        }).ToArray());\n    }\n}\n\n\n<style>\n    .router-pagging-table {\n        padding: 1em;\n    }\n\n        .router-pagging-table input {\n            margin-bottom: 1em;\n        }\n</style>",
        "Type": "Demos.Components.Table.demo.RouterPagging",
        "Style": "",
        "Iframe": 480,
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "bordered",
        "Title": "border, title and footer",
        "Description": "<p>Add border, title and footer for table.</p>\n",
        "Code": "@using System.ComponentModel\n\n<Table DataSource=\"@data\" Bordered=@true Title=\"@title\" Footer=\"@footer\" HidePagination=\"@true\">\n    <Column @bind-Field=\"@context.Name\">\n        <a>@context.Name</a>\n    </Column>\n    <Column @bind-Field=\"@context.Money\" Style=\"text-align: right\"></Column>\n    <Column @bind-Field=\"@context.Address\"></Column>\n</Table>\n\n@code{\n\n    string title = \"Header\";\n    string footer = \"Footer\";\n\n    Data[] data =\n    {\n        new Data()\n        {\n            Key = \"1\",\n            Name = \"John Brown\",\n            Money = \"￥300,000.00\",\n            Address = \"New York No. 1 Lake Park\",\n        },\n        new Data()\n        {\n            Key = \"2\",\n            Name = \"Jim Green\",\n            Money = \"￥1,256,000.00\",\n            Address = \"London No. 1 Lake Park\",\n        },\n        new Data()\n        {\n            Key = \"3\",\n            Name = \"Joe Black\",\n            Money = \"￥120,000.00\",\n            Address = \"Sidney No. 1 Lake Park\",\n        }\n    };\n\n    public class Data\n    {\n        [DisplayName(\"Key\")]\n        public string Key { get; set; }\n\n        [DisplayName(\"Name\")]\n        public string Name { get; set; }\n\n        [DisplayName(\"Money\")]\n        public string Money { get; set; }\n\n        [DisplayName(\"Address\")]\n        public string Address { get; set; }\n    }\n}",
        "Type": "Demos.Components.Table.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 19,
        "Name": "fixed-columns",
        "Title": "Fixed Columns",
        "Description": "<p>To fix some columns and scroll inside other columns, and you must set <code>scroll.x</code> meanwhile.</p>\n<blockquote>\n<p>Specify the width of columns if header and cell do not align properly. If specified width is not working or have gutter between columns, please try to leave one column at least without width to fit fluid layout, or make sure no <a href=\"https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241\">long word to break table layout</a>.</p>\n<p>A fixed value which is greater than table width for <code>scroll.x</code> is recommended. The sum of unfixed columns should not greater than <code>scroll.x</code>.</p>\n</blockquote>\n<p><strong>Note: v4 using sticky to implement fixed effect. IE 11 will downgrade to horizontal scroll.</strong></p>\n",
        "Code": "@using System.ComponentModel\n<Table DataSource=\"data\" ScrollY=\"240px\" PageSize=\"50\" ScrollX=\"1300px\">\n    <Column @bind-Field=\"@context.Name\" Width=\"100\" Fixed=\"left\" />\n    <Column @bind-Field=\"@context.Age\" Width=\"100\" Fixed=\"left\" />\n    <Column Title=\"Column 1\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 2\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 3\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 4\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 5\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 6\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 7\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 8\" @bind-Field=\"@context.Address\" />\n    <ActionColumn Title=\"Action\" Width=\"100\" Fixed=\"right\">\n        <a>action</a>\n    </ActionColumn>\n</Table>\n\n@code {\n    class Column\n    {\n        [DisplayName(\"Full Name\")]\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n\n        public string Address { get; set; }\n    }\n\n    Column[] data = Enumerable.Range(0, 100).Select(i => new Column()\n    {\n        Name = $\"Edward King {i}\",\n        Age = 32,\n        Address = $\"Edward King {i}\"\n    }).ToArray();\n\n}",
        "Type": "Demos.Components.Table.demo.FixedColumns",
        "Style": "",
        "Debug": true
      },
      {
        "Order": -1,
        "Name": "blazor",
        "Title": "Fork official sample",
        "Description": "<p>Fork the table in official blazor template. The read-only field can only specify Title on the <code>Column</code> property, not <code>@bind-*</code>.</p>\n",
        "Code": "@using System.ComponentModel\n@using AntDesign.TableModels\n\n<Table @ref=\"table\"\n       DataSource=\"@forecasts\"\n       Total=\"_total\"\n       OnChange=\"@((QueryModel<WeatherForecast> _)=> onChange(_))\"\n       @bind-PageIndex=\"_pageIndex\"\n       @bind-PageSize=\"_pageSize\"\n       OnPageIndexChange=\"async e=>await fetchData(e)\"\n       @bind-SelectedRows=\"selectedRows\">\n    <Selection Key=\"@(context.Id.ToString())\" />\n    <Column @bind-Field=\"@context.Id\" Sortable />\n    <Column @bind-Field=\"@context.Date\" Format=\"yyyy-MM-dd\" Sortable />\n    <Column @bind-Field=\"@context.TemperatureC\" Sortable />\n    <Column Title=\"Temp. (F)\" Field=\"@context.TemperatureF\" />\n    <Column Title=\"Hot\" Field=\"@context.Hot\">\n        <Switch @bind-Value=\"@context.Hot\"></Switch>\n    </Column>\n    <Column @bind-Field=\"@context.Summary\" Sortable />\n    <ActionColumn>\n        <Space>\n            <SpaceItem><Button Danger OnClick=\"()=>Delete(context.Id)\">Delete</Button></SpaceItem>\n        </Space>\n    </ActionColumn>\n</Table>\n\n<br />\n<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>\n\n<br />\n<h5>selections:</h5>\n@if (selectedRows != null && selectedRows.Any())\n{\n    <Button Danger Size=\"small\" OnClick=\"@(e => { selectedRows = null; })\">Clear</Button>\n\n    @foreach (var selected in selectedRows)\n    {\n        <Tag @key=\"selected.Id\" Closable OnClose=\"e=>RemoveSelection(selected.Id)\">@selected.Id - @selected.Summary</Tag>\n    }\n}\n\n\n@code {\n\n    WeatherForecast[] forecasts;\n\n    IEnumerable<WeatherForecast> selectedRows;\n    ITable table;\n\n    int _pageIndex = 1;\n    int _pageSize = 10;\n    int _total = 0;\n\n    protected override async Task OnParametersSetAsync()\n    {\n        forecasts = await GetForecastAsync(1, 50);\n        _total = forecasts.Length;\n    }\n\n    async Task fetchData(PaginationEventArgs args)\n    {\n        //forecasts = await GetForecastAsync(args.PageIndex, args.PageSize);\n    }\n\n    void onChange(QueryModel<WeatherForecast> queryModel)\n    {\n        Console.WriteLine(queryModel);\n    }\n\n\n    public class WeatherForecast\n    {\n        public int Id { get; set; }\n\n        [DisplayName(\"Date\")]\n        public DateTime? Date { get; set; }\n\n        [DisplayName(\"Temp. (C)\")]\n        public int TemperatureC { get; set; }\n\n        [DisplayName(\"Summary\")]\n        public string Summary { get; set; }\n\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public bool Hot { get; set; }\n    }\n\n    private static readonly string[] Summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)\n    {\n        var rng = new Random();\n        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>\n        {\n            var temperatureC = rng.Next(-20, 55);\n            return new WeatherForecast\n            {\n                Id = index,\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = temperatureC,\n                Summary = Summaries[rng.Next(Summaries.Length)],\n                Hot = temperatureC > 30,\n            };\n        }).ToArray());\n    }\n\n    public void RemoveSelection(int id)\n    {\n        var selected = selectedRows.Where(x => x.Id != id);\n        selectedRows = selected;\n\n        //table.SetSelection(selected.Select(x => x.Id.ToString()).ToArray());\n    }\n\n    private void Delete(int id)\n    {\n        forecasts = forecasts.Where(x => x.Id != id).ToArray();\n        _total = forecasts.Length;\n    }\n}\n",
        "Type": "Demos.Components.Table.demo.Blazor",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 18,
        "Name": "fixed-header",
        "Title": "Fixed Header",
        "Description": "<p>Display large amounts of data in scrollable view.</p>\n<blockquote>\n<p>Specify width of columns if header and cell do not align properly. If specified width is not working or have gutter between columns, please try to leave one column at least without width to fit fluid layout, or make sure no <a href=\"https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241\">long word to break table layout</a>.</p>\n</blockquote>\n",
        "Code": "<Table DataSource=\"data\" ScrollY=\"240px\" PageSize=\"50\">\n    <Column @bind-Field=\"@context.Name\" Width=\"150\" />\n    <Column @bind-Field=\"@context.Age\"  Width=\"150\" />\n    <Column @bind-Field=\"@context.Address\" />\n</Table>\n\n@code {\n    class Column\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n\n        public string Address { get; set; }\n    }\n\n    Column[] data = Enumerable.Range(0, 100).Select(i => new Column()\n    {\n        Name = $\"Edward King {i}\",\n        Age = 32,\n        Address = $\"Edward King {i}\"\n    }).ToArray();\n\n}\n",
        "Type": "Demos.Components.Table.demo.FixedHeader",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "row-selection",
        "Title": "selection",
        "Description": "<p>Rows can be selectable by making first column as a selectable column. You can use <code>rowSelection.type</code> to set selection type. Default is <code>checkbox</code>.</p>\n<blockquote>\n<p>selection happens when clicking checkbox by default. You can see <a href=\"https://codesandbox.io/s/000vqw38rl\">https://codesandbox.io/s/000vqw38rl</a> if you need row-click selection behavior.</p>\n</blockquote>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"selectionType\">\n        <Radio Value=\"@(\"checkbox\")\">Checkbox</Radio>\n        <Radio Value=\"@(\"radio\")\">radio</Radio>\n    </RadioGroup>\n\n    <h5>\n        selections: \n        @if (selectedRows != null)\n        {\n            @foreach (var selected in selectedRows)\n            {\n                <Tag  Closable OnClose=\"e=>RemoveSelection(selected.Name)\">@selected.Name</Tag>\n            }\n            <Button Danger Size=\"small\" OnClick=\"@(e => { table.SetSelection(null); })\">Clear</Button>\n        }\n    </h5>\n\n    <Table @ref=\"table\" DataSource=\"@data\" SelectedRows=\"selectedRows\">\n        <Selection Key=\"@context.Name\" Type=\"@selectionType\" Disabled=\"@(context.Name==\"Disabled User\")\"/>\n        <Column @bind-Field=\"@context.Name\">\n            <a>@context.Name</a>\n        </Column>\n        <Column @bind-Field=\"@context.Age\" />\n        <Column @bind-Field=\"@context.Address\" />\n    </Table>\n</div>\n\n\n@code {\n\n    ITable table;\n\n    class Column\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n\n        public string Address { get; set; }\n    }\n\n    Column[] data =\n    {\n        new Column()\n        {\n            Name = \"John Brown\",\n            Age = 32,\n            Address = \"New York No. 1 Lake Park\",\n        },\n        new Column()\n        {\n            Name = \"Jim Green\",\n            Age = 42,\n            Address = \"London No. 1 Lake Park\",\n        },\n        new Column()\n        {\n            Name = \"Joe Black\",\n            Age = 32,\n            Address = \"Sidney No. 1 Lake Park\",\n        },\n        new Column()\n        {\n            Name = \"Disabled User\",\n            Age = 99,\n            Address = \"Sidney No. 1 Lake Park\",\n        }\n    };\n\n    IEnumerable<Column> selectedRows;\n    string selectionType = \"checkbox\";\n\n    public void RemoveSelection(string key)\n    {\n        var selected = selectedRows.Where(x => x.Name != key).ToList();\n        table.SetSelection(selected.Select(x => x.Name).ToArray());\n    }\n}\n",
        "Type": "Demos.Components.Table.demo.RowSelection_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "size",
        "Description": "<p>There are two compacted table sizes: middle and small. The small size is used in Modals only.</p>\n",
        "Code": "@using System.ComponentModel\n<p>Middle size table</p>\n<Table DataSource=\"@data\" Bordered=@true Size=@TableSize.Middle>\n    <Column @bind-Field=\"@context.Name\">\n        <a>@context.Name</a>\n    </Column>\n    <Column @bind-Field=\"@context.Age\"></Column>\n    <Column @bind-Field=\"@context.Address\"></Column>\n    <Column @bind-Field=\"@context.Tags\">\n        @foreach (var tag in context.Tags)\n        {\n            var color = tag.Length > 5 ? \"geekblue\" : \"green\";\n            if (tag == \"loser\")\n            {\n                color = \"volcano\";\n            }\n            <Tag Color=\"@color\">@tag</Tag>\n        }\n    </Column>\n    <ActionColumn Title=\"Acton\">\n        <Space Size=\"middle\">\n            <SpaceItem>\n                <a>Invite @context.Name</a>\n            </SpaceItem>\n            <SpaceItem>\n                <a>Delete</a>\n            </SpaceItem>\n        </Space>\n    </ActionColumn>\n</Table>\n<p>Small size table</p>\n<Table DataSource=\"@data\" Bordered=@true Size=@TableSize.Small>\n    <Column @bind-Field=\"@context.Name\">\n        <a>@context.Name</a>\n    </Column>\n    <Column @bind-Field=\"@context.Age\"></Column>\n    <Column @bind-Field=\"@context.Address\"></Column>\n    <Column @bind-Field=\"@context.Tags\">\n        @foreach (var tag in context.Tags)\n        {\n            var color = tag.Length > 5 ? \"geekblue\" : \"green\";\n            if (tag == \"loser\")\n            {\n                color = \"volcano\";\n            }\n            <Tag Color=\"@color\">@tag</Tag>\n        }\n    </Column>\n    <ActionColumn Title=\"Acton\">\n        <Space Size=\"middle\">\n            <SpaceItem>\n                <a>Invite @context.Name</a>\n            </SpaceItem>\n            <SpaceItem>\n                <a>Delete</a>\n            </SpaceItem>\n        </Space>\n    </ActionColumn>\n</Table>\n\n@code{\n    Data[] data =\n    {\n        new Data()\n        {\n            Key = \"1\",\n            Name = \"John Brown\",\n            Age = 32,\n            Address = \"New York No. 1 Lake Park\",\n            Tags = new[] {\"nice\", \"developer\"}\n        },\n        new Data()\n        {\n            Key = \"2\",\n            Name = \"Jim Green\",\n            Age = 42,\n            Address = \"London No. 1 Lake Park\",\n            Tags = new[] { \"loser\"}\n        },\n        new Data()\n        {\n            Key = \"3\",\n            Name = \"Joe Black\",\n            Age = 32,\n            Address = \"Sidney No. 1 Lake Park\",\n            Tags = new[] { \"cool\", \"teacher\" }\n        }\n    };\n\n    public class Data\n    {\n        [DisplayName(\"Key\")]\n        public string Key { get; set; }\n\n        [DisplayName(\"Name\")]\n        public string Name { get; set; }\n\n        [DisplayName(\"Age\")]\n        public int Age { get; set; }\n\n        [DisplayName(\"Address\")]\n        public string Address { get; set; }\n\n        [DisplayName(\"Tags\")]\n        public string[] Tags { get; set; }\n    }\n}\n",
        "Type": "Demos.Components.Table.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Statistic",
    "Type": "Data Display",
    "Desc": "<p>Display statistic number.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When want to highlight some data.</li>\n<li>When want to display statistic data with description.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/statistic#API\" class=\"anchor\">#</a></h2>\n<h4>Statistic</h4>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>decimalSeparator</td>\n<td>decimal separator</td>\n<td>string</td>\n<td>.</td>\n<td></td>\n</tr>\n<tr>\n<td>formatter</td>\n<td>customize value display logic</td>\n<td>(value) =&gt; ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>groupSeparator</td>\n<td>group separator</td>\n<td>string</td>\n<td>,</td>\n<td></td>\n</tr>\n<tr>\n<td>precision</td>\n<td>precision of input value</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>prefix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>suffix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Display title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>Display value</td>\n<td>string | number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>valueStyle</td>\n<td>Set value css style</td>\n<td>CSSProperties</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Statistic.Countdown</h4>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>format</td>\n<td>Format as <a href=\"http://momentjs.com/\">moment</a></td>\n<td>string</td>\n<td>'HH:mm:ss'</td>\n<td></td>\n</tr>\n<tr>\n<td>onFinish</td>\n<td>Trigger when time's up</td>\n<td>() =&gt; void</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>prefix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>suffix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Display title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>Set target countdown time</td>\n<td>number | moment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>valueStyle</td>\n<td>Set value css style</td>\n<td>CSSProperties</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/rcBNhLBrKbE/Statistic.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage.</p>\n",
        "Code": "\n<Row Gutter=\"16\">\n    <Col Span=\"12\">\n        <Statistic Title=\"Active Users\" Value=\"112893\" />\n    </Col>\n    <Col Span=\"12\">\n        <Statistic Title=\"Account Balance (CNY)\" Value=\"112893\" Precision=\"2\"/>\n        <Button Style=\"margin-top: 16px;\" Type=\"primary\">\n            Recharge\n        </Button>\n    </Col>\n</Row>\n",
        "Type": "Demos.Components.Statistic.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "countdown",
        "Title": "Countdown",
        "Description": "<p>Countdown component.</p>\n",
        "Code": "<Row Gutter=\"16\">\n    <Col Span=\"12\">\n        <CountDown Title=\"Countdown\" Value=\"@deadline\" OnFinish=\"OnFinish\" />\n    </Col>\n    <Col Span=\"12\">\n        <CountDown Title=\"Million\" Value=\"@deadline\" Format=\"hh:mm:ss:fff\" />\n    </Col>\n    <Col Span=\"24\">\n        <CountDown Title=\"Day Level\" Value=\"@deadline\" Format=\"dd 天  h 小时 m 分钟 s 秒\" />\n    </Col>\n</Row>\n\n@code\n{\n    DateTime deadline = DateTime.Now.AddMilliseconds(1000 * 60 * 60 * 24 * 2 + 1000 * 30);\n\n    void OnFinish()\n    {\n        Console.WriteLine(\"finished!\");\n    }\n}",
        "Type": "Demos.Components.Statistic.demo.Countdown",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "card",
        "Title": "In Card",
        "Description": "<p>Display statistic data in Card.</p>\n",
        "Code": "<div class=\"site-statistic-demo-card\">\n    <Row Gutter=\"16\">\n        <Col Span=\"12\">\n        <Card>\n            <Statistic Title=\"Active\" Value=\"11.28\" Precision=\"2\" ValueStyle=\"color: #3f8600;\" Suffix=\"%\">\n                <PrefixTemplate>\n                    <span><Icon Type=\"arrow-up\" /></span>\n                </PrefixTemplate>\n            </Statistic>\n        </Card>\n        </Col>\n        <Col Span=\"12\">\n        <Card>\n            <Statistic Title=\"Idle\" Value=\"9.3\" Precision=\"2\" ValueStyle=\"color: #cf1322;\" Suffix=\"%\">\n                <PrefixTemplate>\n                    <span><Icon Type=\"arrow-down\" /></span>\n                </PrefixTemplate>\n            </Statistic>\n        </Card>\n        </Col>\n    </Row>\n</div>\n\n<style>\n    .site-statistic-demo-card {\n        background: #ececec;\n        padding: 30px;\n    }\n</style>\n",
        "Type": "Demos.Components.Statistic.demo.Card_",
        "Style": "\n  [data-theme=\"dark\"] .site-statistic-demo-card {\n    background: #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "unit",
        "Title": "Unit",
        "Description": "<p>Add unit through <code>Prefix</code> and <code>Suffix</code>.</p>\n",
        "Code": "<Row Gutter=16>\n    <Col Span=12>\n    <Statistic Title=\"Feedback\" Value=\"1128\" PrefixTemplate=\"@prefix1\" />\n    </Col>\n    <Col Span=12>\n    <Statistic Title=\"Unmerged\" Value=\"93\" Suffix=\"/ 100\" />\n    </Col>\n</Row>\n\n\n@code\n{\n    RenderFragment prefix1 =@<Icon Type=\"like\" />;\n}\n",
        "Type": "Demos.Components.Statistic.demo.Unit",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Spin",
    "Type": "Feedback",
    "Desc": "<p>A spinner for displaying loading state of a page or a section.</p>\n<h2>When To Use</h2>\n<p>When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/spin#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>specifies a delay in milliseconds for loading state (prevent flush)</td>\n<td>number (milliseconds)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>React node of the spinning indicator</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size of Spin, options: <code>small</code>, <code>default</code> and <code>large</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>whether Spin is spinning</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>customize description content when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>className of wrapper when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Static Method</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>You can define default spin element globally.</p>\n</li>\n</ul>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/LBcJqCPRv/Spin.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "basic Usage",
        "Description": "<p>A simple loading status.</p>\n",
        "Code": "<Spin />",
        "Type": "Demos.Components.Spin.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "custom-indicator",
        "Title": "Custom spinning indicator",
        "Description": "<p>Use custom loading indicator.</p>\n",
        "Code": "<Spin Indicator=antIcon />\n@code{\n    RenderFragment antIcon = @<Icon Type=\"loading\" Theme=\"outline\" Style=\"font-size: 24px\" Spin />;\n}",
        "Type": "Demos.Components.Spin.demo.CustomIndicator",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "delayAndDebounce",
        "Title": "delay",
        "Description": "<p>Specifies a delay for loading state. If <code>spinning</code> ends during delay, loading status won't appear.</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading Delay=500>\n        <Alert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <Switch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}\n",
        "Type": "Demos.Components.Spin.demo.DelayAndDebounce",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "nested",
        "Title": "Embedded mode",
        "Description": "<p>Embedding content into <code>Spin</code> will set it into loading state.</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading>\n        <Alert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <Switch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Components.Spin.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tip",
        "Title": "Customized description",
        "Description": "<p>Customized description content.</p>\n",
        "Code": "<Spin Tip=\"Loading...\">\n    <Alert\n        Message=\"Alert message title\"\n        Description=\"Further details about the context of this alert.\"\n        Type=\"info\"\n    />\n</Spin>",
        "Type": "Demos.Components.Spin.demo.Tip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inside",
        "Title": "Inside a container",
        "Description": "<p>Spin in a container.</p>\n",
        "Code": "<div class=\"example\">\n    <Spin />\n</div>\n\n<style>\n    .example {\n        text-align: center;\n        background: rgba(0, 0, 0, 0.05);\n        border-radius: 4px;\n        margin-bottom: 20px;\n        padding: 30px 50px;\n        margin: 20px 0;\n    }\n</style>",
        "Type": "Demos.Components.Spin.demo.Inside",
        "Style": "\n  .example {\n    background: rgba(255,255,255,0.08);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>A small <code>Spin</code> is used for loading text, default sized <code>Spin</code> for loading a card-level block, and large <code>Spin</code> used for loading a <strong>page</strong>.</p>\n",
        "Code": "<div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n</div>\n",
        "Type": "Demos.Components.Spin.demo.Size",
        "Style": "\n.ant-spin.ant-spin-spinning {\n  display: inline-block;\n  margin-right: 16px;\n}\n\n",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Result",
    "Type": "Feedback",
    "Desc": "<p>Used to feed back the results of a series of operational tasks.</p>\n<h2>When To Use</h2>\n<p>Use when important operations need to inform the user to process the results and the feedback is more complicated.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/result#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>result status,decide icons and colors</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>custom back icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>operating area</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/9nepwjaLa/Result.svg",
    "DemoList": [
      {
        "Order": 7,
        "Name": "error",
        "Title": "Error",
        "Description": "<p>Complex error feedback.</p>\n",
        "Code": "<Result\n    Status=\"error\"\n    Title=\"Submission Failed\"\n    SubTitle=\"Please check and modify the following information before resubmitting.\"\n    Extra=extra\n>\n<div class=\"desc\">\n    <Paragraph>\n        <Text Strong Style=\"font-size: 16px;\">\n            The content you submitted has the following error:\n        </Text>\n    </Paragraph>\n    <Paragraph>\n        <Icon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account has been frozen\n        <a>Thaw immediately &gt;</a>\n    </Paragraph>\n    <Paragraph>\n        <Icon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account is not yet\n        eligible to apply <a>Apply Unlock &gt;</a>\n    </Paragraph>\n</div>\n</Result>\n\n@code {\n    RenderFragment extra =\n        @<Template>\n            <Button Type=\"primary\">Go Console</Button>\n            <Button>Buy Again</Button>\n        </Template>\n        ;\n}\n",
        "Type": "Demos.Components.Result.demo.Error",
        "Style": "\n[data-theme=\"dark\"] .site-result-demo-error-icon {\n  color: #a61d24;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "info",
        "Title": "Info",
        "Description": "<p>Show processing results.</p>\n",
        "Code": "<Result\n    Title=\"Your operation has been executed\"\n    Extra=extra\n/>\n@code {\n\n    RenderFragment extra =\n        @<Button Type=\"primary\">\n            Go Console\n        </Button>;\n\n}\n",
        "Type": "Demos.Components.Result.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "500",
        "Title": "500",
        "Description": "<p>Something went wrong on server.</p>\n",
        "Code": "<Result Status=\"500\"\n        Title=\"500\"\n        SubTitle=\"Sorry, something went wrong.\"\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Back Home</Button>;\n}",
        "Type": "Demos.Components.Result.demo._500",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "customIcon",
        "Title": "Custom icon",
        "Description": "<p>Custom icon.</p>\n",
        "Code": "<Result Icon=\"smile-outline\"\n        Title=\"Great, we have done all the operations!\"\n        Extra=\"extra\">\n</Result>\n<Divider></Divider>\n<Result IsShowIcon=\"false\"\n        Title=\"Great, we can hide the icon!\"\n        Extra=\"extra\">\n</Result>\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Next</Button>;\n}\n",
        "Type": "Demos.Components.Result.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "warning",
        "Title": "Warning",
        "Description": "<p>The result of the warning.</p>\n",
        "Code": "<Result Status=\"warning\"\n        Title=\"There are some problems with your operation.\"\n        Extra=extra />\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Go Console</Button>;\n}",
        "Type": "Demos.Components.Result.demo.Warning",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "success",
        "Title": "Success",
        "Description": "<p>Show successful results.</p>\n",
        "Code": "<Result Status=\"success\"\n        Title=\"Successfully Purchased Cloud Server ECS!\"\n        SubTitle=\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\">\n    <Extra>\n        <Button Type=\"primary\">Go Console</Button>\n        <Button>Buy Again</Button>\n    </Extra>\n\n</Result>\n",
        "Type": "Demos.Components.Result.demo.Success",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "404",
        "Title": "404",
        "Description": "<p>The page you visited does not exist.</p>\n",
        "Code": "<Result Status=\"404\"\n        Title=\"404\"\n        SubTitle=\"Sorry, the page you visited does not exist.\"\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Back Home</Button>;\n}",
        "Type": "Demos.Components.Result.demo._404",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "403",
        "Title": "403",
        "Description": "<p>you are not authorized to access this page.</p>\n",
        "Code": "<Result Status=\"403\"\n        Title=\"403\"\n        SubTitle=\"Sorry, you are not authorized to access this page.\"\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Back Home</Button>;\n}\n",
        "Type": "Demos.Components.Result.demo._403",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Popconfirm",
    "Type": "Feedback",
    "Desc": "<p>A simple and compact confirmation dialog of an action.</p>\n<h2>When To Use</h2>\n<p>A simple and compact dialog used for asking for user confirmation.</p>\n<p>The difference with the <code>confirm</code> modal dialog is that it's more lightweight than the static popped full-screen confirm modal.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/popconfirm#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cancelText</td>\n<td>text of the Cancel button</td>\n<td>string</td>\n<td><code>Cancel</code></td>\n</tr>\n<tr>\n<td>okText</td>\n<td>text of the Confirm button</td>\n<td>string</td>\n<td><code>OK</code></td>\n</tr>\n<tr>\n<td>okType</td>\n<td>Button <code>type</code> of the Confirm button</td>\n<td>string</td>\n<td><code>primary</code></td>\n</tr>\n<tr>\n<td>okButtonProps</td>\n<td>The ok button props</td>\n<td><a href=\"/components/button/#API\">ButtonProps</a></td>\n<td>-</td>\n</tr>\n<tr>\n<td>cancelButtonProps</td>\n<td>The cancel button props</td>\n<td><a href=\"/components/button/#API\">ButtonProps</a></td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>title of the confirmation box</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onCancel</td>\n<td>callback of cancel</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onConfirm</td>\n<td>callback of confirmation</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>customize icon of confirmation</td>\n<td>ReactNode</td>\n<td><code>&lt;ExclamationCircle /&gt;</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>is show popconfirm when click its childrenNode</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>Consult <a href=\"/components/tooltip/#API\">Tooltip's documentation</a> to find more APIs.</p>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Popconfirm</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/fjMCD9xRq/Popconfirm.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The basic example.</p>\n",
        "Code": "@inject MessageService _message\n\n<Popconfirm Title=\"Are you sure delete this task?\"\n            OnConfirm=\"Confirm\"\n            OnCancel=\"Cancel\"\n            OkText=\"Yes\"\n            CancelText=\"No\">\n    <a>Delete</a>\n</Popconfirm>\n\n@code{\n\n    private void Confirm()\n    {\n        _message.Success(\"Clicked on Yes\");\n    }\n\n    private void Cancel()\n    {\n        _message.Error(\"Clicked on No\");\n    }\n\n}",
        "Type": "Demos.Components.Popconfirm.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "dynamic-trigger",
        "Title": "Conditional trigger",
        "Description": "<p>Make it pop up under some conditions.</p>\n",
        "Code": "@inject MessageService _message\n\n<div>\n    <Popconfirm Title=\"Are you sure delete this task?\"\n                Visible=\"_visible\"\n                OnVisibleChange=\"OnVisibleChange\"\n                OnConfirm=\"Confirm\"\n                OnCancel=\"Cancel\"\n                OkText=\"Yes\"\n                CancelText=\"No\">\n        <a>Delete a task</a>\n    </Popconfirm>\n    <br />\n    <br />\n    Whether directly execute��\n    <Switch Checked=\"_condition\" OnChange=\"OnConditionChange\" />\n</div>\n\n@code{\n    private void Confirm()\n    {\n        _visible = false;\n        _message.Success(\"Next step.\");\n    }\n\n    private void Cancel()\n    {\n        _visible = false;\n        _message.Error(\"Click on cancel.\");\n    }\n\n    private bool _visible = false;\n    private void OnVisibleChange(bool visible)\n    {\n        if (!visible)\n        {\n            _visible = visible;\n            return;\n        }\n        if (_condition)\n        {\n            Confirm();\n        }\n        else\n        {\n            _visible = visible;\n        }\n    }\n\n    private bool _condition = true;\n    private void OnConditionChange(bool condition)\n    {\n        _condition = condition;\n    }\n}",
        "Type": "Demos.Components.Popconfirm.demo.DynamicTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "Customize icon",
        "Description": "<p>Set <code>icon</code> props to customize the icon.</p>\n",
        "Code": "<Popconfirm Title=\"Are you sure？\"\n            Icon=\"close-circle\">\n    <a>Delete</a>\n</Popconfirm>\n<br />\n<Popconfirm Title=\"Are you sure？\"\n            IconTemplate=\"@_icon\">\n    <a>Delete</a>\n</Popconfirm>\n\n@code{\n\n    private RenderFragment _icon = @<AntDesign.Icon Type=\"question-circle\" Fill=\"outline\" Style=\"@(\"color: 'red'\")\"/>;\n\n}\n",
        "Type": "Demos.Components.Popconfirm.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>There are 12 <code>placement</code> options available. Use <code>arrowPointAtCenter</code> if you want the arrow to point at the center of target.</p>\n",
        "Code": "@inject MessageService _message\n\n<div class=\"demo\">\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); white-space: nowrap;\">\n        <Popconfirm Placement=\"@PlacementType.TopLeft\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>TL</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.Top\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>Top</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.TopRight\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>TR</Button>\n        </Popconfirm>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); float: left;\">\n        <Popconfirm Placement=\"@PlacementType.LeftTop\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>LT</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.Left\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>Left</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.LeftBottom\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>LB</Button>\n        </Popconfirm>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); margin-left: @($\"{ButtonWidth * 4 + 24}px\");\">\n        <Popconfirm Placement=\"@PlacementType.RightTop\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>RT</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.Right\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>Right</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.RightBottom\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>RB</Button>\n        </Popconfirm>\n    </div>\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); clear: both; white-space: nowrap;\">\n        <Popconfirm Placement=\"@PlacementType.BottomLeft\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>BL</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.Bottom\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>Bottom</Button>\n        </Popconfirm>\n        <Popconfirm Placement=\"@PlacementType.BottomRight\" Title=\"@_title\" OkText=\"@_okText\" CancelText=\"@_cancelText\" OnConfirm=\"Confirm\">\n            <Button>BR</Button>\n        </Popconfirm>\n    </div>\n</div>\n\n@code\n{\n\n    const int ButtonWidth = 70;\n\n    private string _cancelText = \"No\";\n    private string _okText = \"Yes\";\n    private string _title = \"Are you sure to delete this task?\";\n    private void Confirm()\n    {\n        _message.Info(\"Clicked on Yes\");\n    }\n}",
        "Type": "Demos.Components.Popconfirm.demo.Placement",
        "Style": "\n.code-box-demo .demo {\n  overflow: auto;\n}\n.code-box-demo .ant-popover-wrap > a {\n  margin-right: 8px;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n#components-popconfirm-demo-placement .ant-btn {\n  width: 70px;\n  text-align: center;\n  padding: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "locale",
        "Title": "Locale text",
        "Description": "<p>Set <code>okText</code> and <code>cancelText</code> props to customize the button's labels.</p>\n",
        "Code": "<Popconfirm Title=\"Are you sure��\" OkText=\"Yes\" CancelText=\"No\">\n    <a>Delete</a>\n</Popconfirm>",
        "Type": "Demos.Components.Popconfirm.demo.Locale",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "InputNumber",
    "Type": "Data Entry",
    "Desc": "<p>Enter a number within certain range with the mouse or keyboard.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a numeric value needs to be provided.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/inputnumber#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>initial value</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>disable the input</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Formatter</td>\n<td>Specifies the format of the value presented</td>\n<td>function(double,string)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>max value</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>min value</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parser</td>\n<td>Specifies the value extracted from formatter</td>\n<td>function(string, double)</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>height of input box</td>\n<td><code>large</code> ,<code>middle</code>,<code>small</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Step</td>\n<td>The number to which the current value is increased or decreased. It can be an integer or decimal.</td>\n<td>double</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>current value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>The callback triggered when the value is changed.</td>\n<td>function(double)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/XOS8qZ0kU/InputNumber.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>Numeric-only input box.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber @bind-Value=\"myValue\" Min=\"1\" Max=\"10\" DefaultValue=\"3\"></AntDesign.InputNumber>\n</div>\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.Components.InputNumber.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Generic",
        "Title": "Generic",
        "Description": "<p>Numeric-only input box.</p>\n",
        "Code": "<div>\n\n    <Text>int</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_int\" />\n    <p>value:@_int</p>\n    <br />\n\n    <Text>int?</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_intNull\" />\n    <p>value:@_intNull</p>\n    <br />\n\n    <Text>decimal</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_dec\" />\n    <p>value:@_dec</p>\n    <br />\n\n    <Text>decimal?</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_decNull\" />\n    <p>value:@_decNull</p>\n    <br />\n\n    <Text>double</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_double\" />\n    <p>value:@_double</p>\n    <br />\n\n    <Text>double?</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_doubleNull\" />\n    <p>value:@_doubleNull</p>\n    <br />\n</div>\n@code{\n\n    int _int;\n    int? _intNull;\n    decimal _dec;\n    decimal? _decNull;\n    double _double;\n    double? _doubleNull;\n}\n",
        "Type": "Demos.Components.InputNumber.demo.Generic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Size",
        "Title": "Sizes",
        "Description": "<p>There are three sizes available to a numeric input box. By default, the size is 32px. The two additional sizes are large and small which means 40px and 24px, respectively.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Large\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber DefaultValue=\"3\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Small\" @bind-Value=\"myValue\"/>\n</div>\n\t\t\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.Components.InputNumber.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Decimal",
        "Title": "Decimal",
        "Description": "<p>A numeric-only input box whose values can be increased or decreased using a decimal step. The number of decimals (also known as precision) is determined by the step prop.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber Step=\"0.1\" Min=\"-1\" Max=\"5\" @bind-Value=\"myValue\" />\n</div>\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.Components.InputNumber.demo.Decimal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Disable",
        "Title": "Disabled",
        "Description": "<p>Click the button to toggle between available and disabled states.</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber DefaultValue=\"3\" Disabled=\"@disabled\" @bind-Value=\"myValue\" />\n    <div style=\"margin: 20px 0px 20px 0px;\">\n        <Button Type=\"@ButtonType.Primary\" OnClick=\"(e)=> ToggleDisable()\">Toggle disabled</Button>\n    </div>\n</div>\n\n@code{\n    private bool disabled = true;\n\n    private double myValue { get; set; }\n\n\n    private void ToggleDisable()\n    {\n        disabled = !disabled;\n    }\n}\t\t",
        "Type": "Demos.Components.InputNumber.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Formatter",
        "Title": "Formatter",
        "Description": "<p>Display value within it's situation with <code>formatter</code>, and we usually use <code>parser</code> at the same time.</p>\n",
        "Code": "@using System.Text.RegularExpressions\n<div>\n    <AntDesign.InputNumber Formatter=\"Format1\" Parser=\"Parse1\" DefaultValue=\"1000d\"/>\n    <AntDesign.InputNumber Formatter=\"Format2\" Parser=\"Parse2\" DefaultValue=\"100d\" Min=\"0\" Max=\"100\"/>\n</div>\n\n\n@code{\n\n    private double myValue { get; set; }\n\n    private string Format1(double value)\n    {\n        return \"$ \" + value.ToString(\"n0\");\n    }\n\n    private string Parse1(string value)\n    {\n       return Regex.Replace(value, @\"\\$\\s?|(,*)\", \"\");\n    }\n\n    private string Format2(double value)\n    {\n        return value.ToString() + \"%\";\n    }\n\n    private string Parse2(string value)\n    {\n        return value.Replace(\"%\", \"\");\n    }\n}\t\t",
        "Type": "Demos.Components.InputNumber.demo.Formatter",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Popover",
    "Type": "Data Display",
    "Desc": "<p>The floating card popped by clicking or hovering.</p>\n<h2>When To Use</h2>\n<p>A simple popup menu to provide extra information or operations.</p>\n<p>Comparing with <code>Tooltip</code>, besides information <code>Popover</code> card can also provide action elements like links and buttons.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/popover#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>Content of the card</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Title of the card</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Consult <a href=\"/components/tooltip/#API\">Tooltip's documentation</a> to find more APIs.</p>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Popover</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/1PNL1p_cO/Popover.svg",
    "DemoList": [
      {
        "Order": 3,
        "Name": "control",
        "Title": "Controlling the close of the dialog",
        "Description": "<p>Use <code>visible</code> prop to control the display of the card.</p>\n",
        "Code": "<Popover OnVisibleChange=\"OnVisibleChange\" Visible=\"_visible\" ContentTemplate=\"@_content\" Title=\"Title\" Trigger=\"@(new AntDesign.TriggerType[] { AntDesign.TriggerType.Click})\">\n  <Button type=\"primary\">Click me</Button>\n</Popover>\n\n\n@code{\n\n    private RenderFragment _content =>\n        @<a @onclick=\"_=>this._visible = false\">Close</a>;\n\n    private bool _visible = false;\n\n    private void OnVisibleChange(bool visible)\n    {\n        _visible = visible;\n    }\n}",
        "Type": "Demos.Components.Popover.demo.Control",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic example. The size of the floating layer depends on the contents region.</p>\n",
        "Code": "<Popover ContentTemplate=\"@_content\" Title=\"Title\">\n    <Button type=\"primary\">Hover me</Button>\n</Popover>\n\n@code{\n    RenderFragment _content =\n    @<div>\n        <p>Content</p>\n        <p>Content</p>\n    </div>;\n}",
        "Type": "Demos.Components.Popover.demo.Basic",
        "Style": "\n.ant-popover-content p {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "triggerType",
        "Title": "Three ways to trigger",
        "Description": "<p>Mouse to click, focus and move in.</p>\n",
        "Code": "<div>\n    <Popover ContentTemplate=\"@_content\" Title=\"Title\" Trigger=\"@(new AntDesign.TriggerType[] { AntDesign.TriggerType.Hover})\">\n        <AntDesign.Button>Hover me</AntDesign.Button>\n    </Popover>\n    <Popover ContentTemplate=\"@_content\" Title=\"Title\" Trigger=\"@(new AntDesign.TriggerType[] { AntDesign.TriggerType.Focus})\">\n        <AntDesign.Button>Focus me</AntDesign.Button>\n    </Popover>\n    <Popover ContentTemplate=\"@_content\" Title=\"Title\" Trigger=\"@(new AntDesign.TriggerType[] { AntDesign.TriggerType.Click})\">\n        <AntDesign.Button>Click me</AntDesign.Button>\n    </Popover>\n</div>\n\n@code{\n    private RenderFragment _content =\n    @<div>\n        <p>Content</p>\n        <p>Content</p>\n    </div>;\n}",
        "Type": "Demos.Components.Popover.demo.TriggerType",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "hover-with-click",
        "Title": "Hover with click popover",
        "Description": "<p>The following example shows how to create a popover which can be hovered and clicked.</p>\n",
        "Code": "<Popover Style=\"{width: 500}\" OnVisibleChange=\"OnHoverVisibleChange\" Visible=\"_hoverVisible\" Title=\"Hover title\" Trigger=\"@(new AntDesign.TriggerType[] { AntDesign.TriggerType.Hover})\">\n    <ContentTemplate>\n        <div> This is hover content.</div>\n    </ContentTemplate>\n    <ChildContent>\n        <Popover OnVisibleChange=\"OnClickVisibleChange\" Visible=\"_clickVisible\" Content=\"_clickContent\" Title=\"Click title\" Trigger=\"@(new AntDesign.TriggerType[] { AntDesign.TriggerType.Click})\">\n            <ContentTemplate>\n                <div>\n                    <div>This is click content.</div>\n                    <a @onclick=\"_=>Close()\">Close</a>\n                </div>\n            </ContentTemplate>\n            <ChildContent>\n                <Button>Hover and click / 悬停并单击</Button>\n            </ChildContent>\n\n        </Popover>\n    </ChildContent>\n</Popover>\n\n@code{\n\n    private bool _hoverVisible = false;\n    private bool _clickVisible = false;\n\n    private void OnHoverVisibleChange(bool visible)\n    {\n        _hoverVisible = visible;\n    }\n\n    private void OnClickVisibleChange(bool visible)\n    {\n        _clickVisible = visible;\n        _hoverVisible = false;\n    }\n\n    private void Close()\n    {\n        _hoverVisible = false;\n        _clickVisible = false;\n    }\n}\n",
        "Type": "Demos.Components.Popover.demo.HoverWithClick",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>There are 12 <code>placement</code> options available.</p>\n",
        "Code": "<div class=\"demo\">\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); white-space: nowrap;\">\n        <Popover Placement=\"@PlacementType.TopLeft\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>TL</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.Top\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>Top</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.TopRight\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>TR</Button>\n        </Popover>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); float: left;\">\n        <Popover Placement=\"@PlacementType.LeftTop\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>LT</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.Left\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>Left</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.LeftBottom\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>LB</Button>\n        </Popover>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); margin-left: @($\"{ButtonWidth * 4 + 24}px\");\">\n        <Popover Placement=\"@PlacementType.RightTop\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>RT</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.Right\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>Right</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.RightBottom\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>RB</Button>\n        </Popover>\n    </div>\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); clear: both; white-space: nowrap;\">\n        <Popover Placement=\"@PlacementType.BottomLeft\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>BL</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.Bottom\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>Bottom</Button>\n        </Popover>\n        <Popover Placement=\"@PlacementType.BottomRight\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n            <Button>BR</Button>\n        </Popover>\n    </div>\n</div>\n\n@code\n{\n    private RenderFragment _text =@<span>Title</span>;\n        \n    const int ButtonWidth = 70;\n\n    private RenderFragment _content =\n        @<div>\n            <p>Content</p>\n            <p>Content</p>\n        </div>;\n}",
        "Type": "Demos.Components.Popover.demo.Placement",
        "Style": "\n.code-box-demo .demo {\n  overflow: auto;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n.code-box-demo .ant-btn-rtl {\n  margin-right: 0;\n  margin-left: 8px;\n  margin-bottom: 8px;\n}\n#components-popover-demo-placement .ant-btn {\n  width: 70px;\n  text-align: center;\n  padding: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "arrow-point-at-center",
        "Title": "Arrow pointing",
        "Description": "<p>The arrow points to the center of the target element, which set <code>arrowPointAtCenter</code>.</p>\n",
        "Code": "<div>\n    <Popover Placement=\"PlacementType.TopLeft\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\">\n        <Button>Align edge / 边缘对齐</Button>\n    </Popover>\n    <Popover Placement=\"PlacementType.TopLeft\" TitleTemplate=\"@_text\" ContentTemplate=\"@_content\" ArrowPointAtCenter=\"true\">\n        <Button>Arrow points to center / 箭头指向中心</Button>\n    </Popover>\n</div>\n\n@code\n{\n    private RenderFragment _text =@<span>Title</span>;\n    \n    private RenderFragment _content =\n        @<div>\n            <p>Content</p>\n            <p>Content</p>\n        </div>;\n}",
        "Type": "Demos.Components.Popover.demo.ArrowPointAtCenter",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Anchor",
    "Type": "Other",
    "Desc": "<p>Hyperlinks to scroll on one page.</p>\n<h2>When To Use</h2>\n<p>For displaying anchor hyperlinks on page and jumping between them.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/anchor#API\" class=\"anchor\">#</a></h2>\n<h3>Anchor Props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>affix</td>\n<td>Fixed mode of Anchor</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>bounds</td>\n<td>Bounding distance of anchor area</td>\n<td>number</td>\n<td>5(px)</td>\n<td></td>\n</tr>\n<tr>\n<td>getContainer</td>\n<td>Scrolling container</td>\n<td>() =&gt; HTMLElement</td>\n<td>() =&gt; window</td>\n<td></td>\n</tr>\n<tr>\n<td>offsetBottom</td>\n<td>Pixels to offset from bottom when calculating position of scroll</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>offsetTop</td>\n<td>Pixels to offset from top when calculating position of scroll</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>showInkInFixed</td>\n<td>Whether show ink-balls in Fixed mode</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>set the handler to handle <code>click</code> event</td>\n<td>Function(e: Event, link: Object)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getCurrentAnchor</td>\n<td>Customize the anchor highlight</td>\n<td>() =&gt; string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>targetOffset</td>\n<td>Anchor scroll offset, default as <code>offsetTop</code>, <a href=\"#components-anchor-demo-targetOffset\">example</a></td>\n<td>number</td>\n<td><code>offsetTop</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Listening for anchor link change</td>\n<td>(currentActiveLink: string) =&gt; void</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Link Props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>target of hyperlink</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>content of hyperlink</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>target</td>\n<td>Specifies where to display the linked URL</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 2,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/_1-C1JwsC/Anchor.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "@*<Affix>\n        <Anchor>\n            <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n            <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-static\" Title=\"@(\"Static demo\")\" />\n            <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo with Target\")\" />\n            <AnchorLink Href=\"/en-US/components/anchor#API\" Title=\"@(\"API\")\">\n                <AnchorLink Href=\"/en-US/components/anchor#Anchor-Props\" Title=\"@(\"Anchor Props\")\" />\n                <AnchorLink Href=\"/en-US/components/anchor#Link-Props\" Title=\"@(\"Link Props\")\" />\n            </AnchorLink>\n        </Anchor>\n    </Affix>*@\n\n<Affix>\n    <Anchor>\n        <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n        <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-onClick\" Title=\"@(\"OnClick demo\")\" />\n        <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-targetOffset\" Title=\"@(\"TargetOffset demo\")\" />\n    </Anchor>\n</Affix>",
        "Type": "Demos.Components.Anchor.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "onClick",
        "Title": "Customize the onClick event",
        "Description": "<p>Clicking on an anchor does not record history.</p>\n",
        "Code": "<Anchor OnClick=\"(e)=>OnLinkClick(e)\">\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-onClick\" Title=\"@(\"OnClick demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-targetOffset\" Title=\"@(\"TargetOffset demo\")\" />\n</Anchor>\n\n@code{\n    public void OnLinkClick(Tuple<MouseEventArgs, AnchorLink> tuple)\n    {\n        Console.WriteLine($\"OnClick {tuple.Item2.Href}\");\n    }\n}",
        "Type": "Demos.Components.Anchor.demo.OnClick",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "static",
        "Title": "Static Anchor",
        "Description": "<p>Do not change state when page is scrolling.</p>\n",
        "Code": "@*<Anchor Affix=\"false\">\n        <AnchorLink Href=\"#components-anchor-demo-basic\" Title=\"Basic demo\" />\n        <AnchorLink Href=\"#components-anchor-demo-static\" Title=\"Static demo\" />\n        <AnchorLink Href=\"#API\" Title=\"API\">\n            <AnchorLink Href=\"#Anchor-Props\" Title=\"Anchor Props\" />\n            <AnchorLink Href=\"#Link-Props\" Title=\"Link Props\" />\n        </AnchorLink>\n    </Anchor>*@\n\n<Anchor Affix=\"false\">\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-onClick\" Title=\"@(\"OnClick demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-targetOffset\" Title=\"@(\"TargetOffset demo\")\" />\n</Anchor>",
        "Type": "Demos.Components.Anchor.demo.Static",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "targetOffset",
        "Title": "Set Anchor scroll offset",
        "Description": "<p>Anchor target scroll to screen center.</p>\n",
        "Code": "<Anchor OffsetTop=\"200\">\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-onClick\" Title=\"@(\"OnClick demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-targetOffset\" Title=\"@(\"TargetOffset demo\")\" />\n</Anchor>",
        "Type": "Demos.Components.Anchor.demo.TargetOffset",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "onChange",
        "Title": "Listening for anchor link change",
        "Description": "<p>Listening for anchor link change.</p>\n",
        "Code": "<Anchor OnChange=\"(e)=>OnLinkChange(e)\">\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-onClick\" Title=\"@(\"OnClick demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-targetOffset\" Title=\"@(\"TargetOffset demo\")\" />\n</Anchor>\n\n@code{\n    public void OnLinkChange(string href)\n    {\n        Console.WriteLine($\"changed to {href}\");\n    }\n}",
        "Type": "Demos.Components.Anchor.demo.OnChange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customizeHighlight",
        "Title": "Customize the anchor highlight",
        "Description": "<p>Customize the anchor highlight.</p>\n",
        "Code": "<Anchor Affix=\"false\" GetCurrentAnchor=\"GetHref\">\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-basic\" Title=\"@(\"Basic demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-onClick\" Title=\"@(\"OnClick demo\")\" />\n    <AnchorLink Href=\"/en-US/components/anchor#components-anchor-demo-targetOffset\" Title=\"@(\"TargetOffset demo\")\" />\n</Anchor>\n\n@code{\n    public string GetHref()\n    {\n        return \"/en-US/components/anchor#components-anchor-demo-onClick\";\n    }\n}",
        "Type": "Demos.Components.Anchor.demo.CustomizeHighlight",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "TimePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select/input a time.</p>\n<h2>When To Use</h2>\n<hr />\n<p>By clicking the input box, you can select a time from a popup panel.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/h04Zsl98I/TimePicker.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Click <code>TimePicker</code>, and then we could select or input a time in panel.</p>\n",
        "Code": "<TimePicker TValue=\"DateTime?\" />\n",
        "Type": "Demos.Components.TimePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "hours12",
        "Title": "12 hours",
        "Description": "<p>TimePicker of 12 hours format, with default format <code>h:mm:ss a</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.Components.TimePicker.demo.Hours12",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "hide-column",
        "Title": "Hour and minute",
        "Description": "<p>While part of <code>format</code> is omitted, the corresponding column in panel will disappear, too.</p>\n",
        "Code": "<TimePicker TValue=\"DateTime?\" Format='@(\"hh:mm\")' />\n",
        "Type": "Demos.Components.TimePicker.demo.HideColumn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "value",
        "Title": "Under Control",
        "Description": "<p><code>value</code> and <code>onChange</code> should be used together,</p>\n",
        "Code": "<TimePicker TValue=\"DateTime?\" Value=\"_value\" OnChange=\"OnChange\" />\n\n@code\n{\n    private DateTime _value = DateTime.Now;\n\n    private void OnChange(DateTime value, string dateString)\n    {\n        _value = value;\n    }\n}",
        "Type": "Demos.Components.TimePicker.demo.Value",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "addon",
        "Title": "Addon",
        "Description": "<p>Render addon contents to time picker panel's bottom.</p>\n",
        "Code": "<TimePicker TValue=\"DateTime?\" RenderExtraFooter=\"ExtraFooter\" />\n\n@code {\n    private RenderFragment ExtraFooter =@<Button Type=\"@ButtonType.Primary\">Ok</Button>;\n}",
        "Type": "Demos.Components.TimePicker.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "range-picker",
        "Title": "Range Picker",
        "Description": "<p>Use time range picker with <code>RangePicker</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.Components.TimePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "interval-options",
        "Title": "interval option",
        "Description": "<p>Show stepped options by <code>hourStep</code> <code>minuteStep</code> <code>secondStep</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.Components.TimePicker.demo.IntervalOptions",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "disabled",
        "Description": "<p>A disabled state of the <code>TimePicker</code>.</p>\n",
        "Code": "<TimePicker TValue=\"DateTime?\" Disabled=\"@true\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />",
        "Type": "Demos.Components.TimePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Three Sizes",
        "Description": "<p>The input box comes in three sizes. large is used in the form, while the medium size is the default.</p>\n",
        "Code": "<TimePicker TValue=\"DateTime?\" Size=\"@DatePickerSize.Large\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker TValue=\"DateTime?\" Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker TValue=\"DateTime?\" Size=\"@DatePickerSize.Small\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n",
        "Type": "Demos.Components.TimePicker.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Avatar",
    "Type": "Data Display",
    "Desc": "<p>Avatars can be used to represent people or objects. It supports images, <code>Icon</code>s, or letters.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/aBcnbw68hP/Avatar.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Three sizes and two shapes are available.</p>\n",
        "Code": "<div>\n    <div>\n        <Avatar Size=\"64\" Icon=\"user\" />\n        <Avatar Size=\"large\" Icon=\"user\" />\n        <Avatar Icon=\"user\" />\n        <Avatar Size=\"small\" Icon=\"user\" />\n    </div>\n    <div>\n        <Avatar Shape=\"square\" Size=\"64\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Size=\"large\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Size=\"small\" Icon=\"user\" />\n    </div>\n</div>",
        "Type": "Demos.Components.Avatar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "badge",
        "Title": "With Badge",
        "Description": "<p>Usually used for messages remind.</p>\n",
        "Code": "<div>\n    <span class=\"avatar-item\">\n        <Badge Count=\"1\">\n            <Avatar Shape=\"square\" Icon=\"user\" />\n        </Badge>\n    </span>\n    <span>\n        <Badge Dot>\n            <Avatar Shape=\"square\" Icon=\"user\"/>\n        </Badge>\n    </span>\n</div>\n<style>\n    /* tile uploaded pictures */\n    .avatar-item {\n        margin-right: 24px;\n    }\n\n    [class*='-col-rtl'] .avatar-item {\n        margin-right: 0;\n        margin-left: 24px;\n    }\n</style>",
        "Type": "Demos.Components.Avatar.demo.Badge_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "dynamic",
        "Title": "Autoset Font Size",
        "Description": "<p>For letter type Avatar, when the letters are too long to display, the font size can be automatically adjusted according to the width of the Avatar.</p>\n",
        "Code": "<div>\n    <Avatar Style=\"@($\"background-color: {color}; vertical-align: middle;\")\" Size=\"large\">\n        @user\n    </Avatar>\n    <Button\n        Size=\"small\"\n        Style=\"margin:0 16px; vertical-align: middle;\"\n        OnClick=\"_=>changeUser()\"\n    >\n        Change\n    </Button>\n</div>\n\n@code\n{\n    private static string[] userList = {\"U\", \"Lucy\", \"Tom\", \"Edward\"};\n    private static string[] colorList = {\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"};\n\n    private string user { get; set; } = userList[0];\n    private string color { get; set; } = colorList[0];\n\n    private void changeUser()\n    {\n        var index = Array.IndexOf(userList, user);\n        user = index < userList.Length - 1 ? userList[index + 1] : userList[0];\n        color = index < colorList.Length - 1 ? colorList[index + 1] : colorList[0];\n    }\n}\n",
        "Type": "Demos.Components.Avatar.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "type",
        "Title": "Type",
        "Description": "<p>Image, Icon and letter are supported, and the latter two kinds avatar can have custom colors and background colors.</p>\n",
        "Code": "<div>\n    <Avatar Icon=\"user\" />\n    <Avatar>U</Avatar>\n    <Avatar>USER</Avatar>\n    <Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <Avatar Style=\"color: #f56a00; background-color: #fde3cf; \">U</Avatar>\n    <Avatar Style=\"background-color: #87d068\" Icon=\"user\" />\n</div>",
        "Type": "Demos.Components.Avatar.demo.Type",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Grid",
    "Type": "Layout",
    "Desc": "<p>24 Grids System。</p>\n<h2>Design concept#</h2>\n<p>In most business situations, Ant Design needs to solve a lot of information storage problems within the design area, so based on 12 Grids System, we divided the design area into 24 sections.</p>\n<p>We name the divided area 'box'. We suggest four boxes for horizontal arrangement at most, one at least. Boxes are proportional to the entire screen as shown in the picture above. To ensure a high level of visual comfort, we customize the typography inside of the box based on the box unit.</p>\n<h2>Outline</h2>\n<p>In the grid system, we define the frame outside the information area based on row and column, to ensure that every area can have stable arrangement.</p>\n<p>Following is a brief look at how it works:</p>\n<ul>\n<li>Establish a set of column in the horizontal space defined by row (abbreviated col)</li>\n<li>Your content elements should be placed directly in the col, and only col should be placed directly in row</li>\n<li>The column grid system is a value of 1-24 to represent its range spans. For example, three columns of equal width can be created by <Col span={8} />.</li>\n<li>If the sum of col spans in a row are more than 24, then the overflowing col as a whole will start a new line arrangement.</li>\n</ul>\n<p>Our grid systems base on Flex layout to allow the elements within the parent to be aligned horizontally - left, center, right, wide arrangement, and decentralized arrangement. The Grid system also supports vertical alignment - top aligned, vertically centered, bottom-aligned. You can also define the order of elements by using order.</p>\n<p>Layout uses a 24 grid layout to define the width of each &quot;box&quot;, but does not rigidly adhere to the grid layout.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/grid#API\" class=\"anchor\">#</a></h2>\n<p>Row</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>align</td>\n<td>the vertical alignment of the flex layout:：<code>top</code> <code>middle</code> <code>bottom</code></td>\n<td>string</td>\n<td>top</td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}. or you can use array to make horizontal and vertical spacing work at the same time <code>[horizontal, vertical]</code> (supported after 1.5.0)</td>\n<td>number, object, array</td>\n<td>0</td>\n</tr>\n<tr>\n<td>justify</td>\n<td>horizontal arrangement of the flex layout:<code>start</code> <code>end</code> <code>center</code> <code>space-around</code> <code>space-between</code></td>\n<td>string</td>\n<td>start</td>\n</tr>\n<tr>\n<td>type</td>\n<td>layout mode, optional <code>flex</code>， browser support</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Col</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>offset</td>\n<td>the number of cells to offset Col from the left</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>order</td>\n<td>raster order, used in flex layout mode</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pull</td>\n<td>the number of cells that raster is moved to the left</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>push</td>\n<td>the number of cells that raster is moved to the right</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>span</td>\n<td>raster number of cells to occupy, 0 corresponds to  <code>display: none</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> and also default setting, could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>The breakpoints of responsive grid follow BootStrap 4 media queries rules(not including <code>occasionally</code> part).</p>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5rWLU27so/Grid.svg",
    "DemoList": [
      {
        "Order": 4,
        "Name": "Setting",
        "Title": "Typesetting",
        "Description": "<p>Child elements depending on the value of the start,center, end,space-between, space-around, which are defined in its parent node typesetting mode.</p>\n",
        "Code": "<div>\n    <div id=\"flex-demo\">\n        <p>sub-element Align left</p>\n        <Row Justify=\"start\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element Align center</p>\n        <Row Justify=\"center\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element Align right</p>\n        <Row Justify=\"end\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element monospaced arrangement</p>\n        <Row Justify=\"space-between\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element Align full</p>\n        <Row Justify=\"space-around\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n    </div>\n\n        <style>\n            #flex-demo .ant-row {\n                background-color: rgba(128, 128, 128, 0.08);\n            }\n        </style>\n\n</div>\n@code{\n\n}",
        "Type": "Demos.Components.Grid.demo.Setting",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic Grid",
        "Description": "<p>From the stack to the horizontal arrangement.\nYou can create a basic grid system by using a single set of <code>Row</code> and <code>Col</code> grid assembly, all of the columns (Col) must be placed in <code>Row</code>.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"24\">col-24</Col>   \n    </Row>\n    <Row>\n        <Col Span=\"12\">col-12</Col>\n        <Col Span=\"12\">col-12</Col>\n    </Row>\n    <Row>\n        <Col Span=\"8\">col-8</Col>\n        <Col Span=\"8\">col-8</Col>\n        <Col Span=\"8\">col-8</Col>\n    </Row>\n    <Row>\n        <Col Span=\"6\">col-6</Col>\n        <Col Span=\"6\">col-6</Col>\n        <Col Span=\"6\">col-6</Col>\n        <Col Span=\"6\">col-6</Col>\n    </Row>\n</div>\n",
        "Type": "Demos.Components.Grid.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Responsive",
        "Title": "Responsive",
        "Description": "<p>Referring to the Bootstrap responsive design, here preset six dimensions: xs sm md lg xl.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Xs=\"2\" Sm=\"4\" Md=\"6\" Lg=\"8\" Xl=\"10\">\n            Col\n        </Col>\n        <Col Xs=\"20\" Sm=\"16\" Md=\"12\" Lg=\"8\" Xl=\"4\">\n            Col\n        </Col>\n        <Col Xs=\"2\" Sm=\"4\" Md=\"6\" Lg=\"8\" Xl=\"10\">\n            Col\n        </Col>\n    </Row>\n</div>\n",
        "Type": "Demos.Components.Grid.demo.Responsive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Stretch",
        "Title": "Flex Stretch",
        "Description": "<p>Col provides flex prop to support fill rest.</p>\n",
        "Code": "<div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Percentage columns\n    </Divider>\n    <p>To do</p>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Fill rest\n    </Divider>\n    <p>To do</p>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Raw flex style\n    </Divider>\n    <p>To do</p>\n</div>\n\n\n@code{\n\n}",
        "Type": "Demos.Components.Grid.demo.Stretch",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "Breakpoint",
        "Title": "useBreakpoint Hook",
        "Description": "<p>Use useBreakpoint Hook provide personalized layout.</p>\n",
        "Code": "<div>\n    <Text> Current break point:</Text>\n    <Tag Color=\"blue\">\n        sm\n    </Tag>\n    <Tag Color=\"blue\">\n        md\n    </Tag>\n    <Tag Color=\"blue\">\n        lg\n    </Tag>\n    <Tag Color=\"blue\">\n        xl\n    </Tag>\n    <Tag Color=\"blue\">\n        xxl\n    </Tag>\n</div>\n@code{\n\n}",
        "Type": "Demos.Components.Grid.demo.Breakpoint",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Sort",
        "Title": "Grid sort",
        "Description": "<p>By using <code>push</code> and <code>pull</code> class you can easily change column order.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"18\" Push=\"6\">\n            col-18 col-Push-6\n        </Col>\n        <Col Span=\"6\" Pull=\"18\">\n            col-6 col-Pull-18\n        </Col>\n    </Row>\n</div>\n@code{\n\n}",
        "Type": "Demos.Components.Grid.demo.Sort",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "More",
        "Title": "More responsive",
        "Description": "<p>span pull push offset order property can be embedded into xs sm md lg xl properties to use, where xs={6} is equivalent to xs={{span: 6}}.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Xs=\"@xs1\" Lg=\"lg1\">\n            Col\n        </Col>\n        <Col Xs=\"@xs2\" Lg=\"lg1\">\n            Col\n        </Col>\n        <Col Xs=\"@xs3\" Lg=\"lg1\">\n                Col\n        </Col>\n    </Row>\n</div>\n\n@code\n{\n    EmbeddedProperty xs1 = new EmbeddedProperty()\n    {\n        Span=\"5\",\n        Offset=\"1\"\n    };\n\n    EmbeddedProperty lg1 = new EmbeddedProperty()\n    {\n        Span = \"6\",\n        Offset = \"2\"\n    };\n\n    EmbeddedProperty xs2 = new EmbeddedProperty()\n    {\n        Span = \"11\",\n        Offset = \"1\"\n    };\n\n    EmbeddedProperty xs3= new EmbeddedProperty()\n    {\n        Span = \"5\",\n        Offset = \"1\"\n    };\n}",
        "Type": "Demos.Components.Grid.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Order",
        "Title": "Order",
        "Description": "<p>To change the element sort by order.</p>\n",
        "Code": "\n<div id=\"grid-demo-flex-Order\">\n    <Row>\n        <Col Span=\"6\" Order=\"4\">\n            1 col-Order-4\n        </Col>\n        <Col Span=\"6\" Order=\"3\">\n            2 col-Order-3\n        </Col>\n        <Col Span=\"6\" Order=\"2\">\n            3 col-Order-2\n        </Col>\n        <Col Span=\"6\" Order=\"1\">\n            4 col-Order-1\n        </Col>\n    </Row>\n\n    <style>\n        #grid-demo-flex-Order .ant-row {\n            background-color: rgba(128, 128, 128, 0.08);\n        }\n    </style>\n</div>\n\n\n\n@code{\n\n}",
        "Type": "Demos.Components.Grid.demo.Order",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Gutterx",
        "Title": "Grid Gutter",
        "Description": "<p>You can use the <code>gutter</code> property of <code>Row</code> as grid spacing, we recommend set it to <code>(16 + 8n) px</code>. (<code>n</code> stands for natural number.)\nYou can set it to a object like <code>{ xs: 8, sm: 16, md: 24, lg: 32 }</code> for responsive design.\nYou can use a array to set vertical spacing, <code>[horizontal, vertical]</code> <code>[16, { xs: 8, sm: 16, md: 24, lg: 32 }]</code>. vertical gutter was supported after <code>3.24.0</code></p>\n",
        "Code": "<div>\n    <style>\n        .Gutter-box {\n            background: #00a0e9;\n            padding: 5px 0;\n        }\n    </style>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Horizontal\n    </Divider>\n\n    <div class=\"Gutter-example\">\n        <Row Gutter=\"16\">\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n        </Row>\n    </div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Responsive\n    </Divider>\n    <div class=\"Gutter-example\">\n        <Row Gutter=\"@Gutter1\">\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div>col-6</div>\n            </Col>\n        </Row>\n    </div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Vertical\n    </Divider>\n    <div class=\"Gutter-example\">\n        <Row Gutter=\"(8,24)\">\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n        </Row>\n    </div>\n</div>\n@code{\n    Dictionary<string, int> Gutter1 = new Dictionary<string, int>()\n    {\n        [\"xs\"] = 8,\n        [\"sm\"] = 16,\n        [\"md\"] = 24,\n        [\"lg\"] = 32,\n        [\"xl\"] = 48,\n        [\"xxl\"] = 64\n    };\n   \n\n}",
        "Type": "Demos.Components.Grid.demo.Gutterx",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "Playround",
        "Title": "Playground",
        "Description": "<p>A simple playground for column count and gutter.</p>\n",
        "Code": "<div>\nTo do   \n</div>\n",
        "Type": "Demos.Components.Grid.demo.Playround",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Offset",
        "Title": "Column offset",
        "Description": "<p><code>Offset</code> can set the column to the right side. For example, using <code>offset = {4}</code> can set the element shifted to the right four columns width.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"8\">\n            col-8\n        </Col>\n        <Col Span=\"8\" Offset=\"8\">\n            col-8\n        </Col>\n    </Row>\n    <Row>\n        <Col Span=\"6\" Offset=\"6\">\n            col-6 col-offset-6\n        </Col>\n        <Col Span=\"6\" Offset=\"6\">\n            col-6 col-offset-6\n        </Col>\n    </Row>\n    <Row>\n        <Col Span=\"12\" Offset=\"6\">\n            col-12 col-offset-6\n        </Col>\n    </Row>\n</div>\n@code{\n\n}",
        "Type": "Demos.Components.Grid.demo.Offset",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Alignment",
        "Title": "Alignment",
        "Description": "<p>Child elements vertically aligned.</p>\n",
        "Code": "<div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Align Top\n    </Divider>\n\n    <div class=\"flex-demo\">\n        <Row Justify=\"center\" Align=\"top\">\n            <Col Span=\"4\"><p class=\"height-100\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-50\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-120\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-80\">col-4</p></Col>\n        </Row>\n    </div>\n\n\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Align Center\n    </Divider>\n    <div class=\"flex-demo\">\n        <Row Justify=\"space-around\" Align=\"middle\">\n            <Col  Span=\"4\"><p class=\"height-100\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-50\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-120\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-80\">col-4</p></Col>\n        </Row>\n    </div>\n\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Align Bottom\n    </Divider>\n    <div class=\"flex-demo\">\n        <Row Justify=\"space-between\" Align=\"bottom\">\n            <Col Span=\"4\"><p class=\"height-100\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-50\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-120\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-80\">col-4</p></Col>\n        </Row>\n    </div>\n    </div>\n    <style>\n        .flex-demo {\n            background-color: rgba(128, 128, 128, 0.08);\n        }\n    </style>\n\n    @code{\n\n    }\n",
        "Type": "Demos.Components.Grid.demo.Alignment",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Menu",
    "Type": "Navigation",
    "Desc": "<p>A versatile menu for navigation.</p>\n<h2>When To Use</h2>\n<p>Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. Ant Design offers top and side navigation options. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website.</p>\n<p>More layouts with navigation: <a href=\"/components/layout\">Layout</a>.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/menu#API\" class=\"anchor\">#</a></h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;Menu&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;SubMenu&quot;&gt;\n    &lt;Menu.Item&gt;SubMenuItem&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>Array with the keys of default opened sub menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>Array with the keys of default selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>Render submenu into DOM before it becomes visible</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>Specifies the collapsed status when menu is inline mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>Indent (in pixels) of inline menu items on each level</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>Type of menu; <code>vertical</code>, <code>horizontal</code>, or <code>inline</code></td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>Allows selection of multiple items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>Array with the keys of currently opened sub-menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>Allows selecting menu items</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Array with the keys of currently selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>Style of the root node</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>Delay time to hide submenu when mouse leaves (in seconds)</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>Delay time to show submenu when mouse enters, (in seconds)</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>Color theme of the menu</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>Called when a menu item is clicked</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>Called when a menu item is deselected (multiple mode only)</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>Called when sub-menus are opened or closed</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Called when a menu item is selected</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>none</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>Customized icon when menu is collapsed</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>Whether menu item is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the menu item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Set display title for collapsed item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>Sub-menu class name</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>Sub-menus or sub-menu items</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Whether sub-menu is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the sub-menu</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Title of the sub-menu</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>Callback executed when the sub-menu title is clicked</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>sub-menu items</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>title of the group</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>Divider line in between menu items, only used in vertical popup Menu or Dropdown Menu.</p>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/3XZcjGpvK/Menu.svg",
    "DemoList": [
      {
        "Order": 5,
        "Name": "switch-mode",
        "Title": "Switch the menu type",
        "Description": "<p>Show the dynamic switching mode (between 'inline' and 'vertical').</p>\n",
        "Code": "<div>\n    <Switch OnChange=changeMode /> Change Mode\n    <div class=\"ant-divider ant-divider-vertical\" role=\"separator\"></div>\n    <Switch OnChange=changeTheme/> Change Style\n    <br />\n    <br />\n    <Menu Style=\" width: 256px ;\"\n          DefaultSelectedKeys=@(new[]{\"1\"})\n          DefaultOpenKeys=@(new[]{\"sub1\"})\n          Mode=this.mode\n          Theme=this.theme>\n        <MenuItem Key=\"1\">\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            Navigation One\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <Icon Type=\"calendar\" Theme=\"outline\"></Icon>\n            Navigation Two\n        </MenuItem>\n        <SubMenu Key=\"sub1\" TitleTemplate=@sub1Title>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n            <SubMenu Key=\"sub1-2\" Title=\"Submenu\">\n                <MenuItem Key=\"5\">Option 5</MenuItem>\n                <MenuItem Key=\"6\">Option 6</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" TitleTemplate=@sub2Title>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Four</span>\n        </span>;\n\n    MenuMode mode = MenuMode.Inline;\n    MenuTheme theme = MenuTheme.Light;\n\n    void changeMode(bool value)\n    {\n        this.mode = value ? MenuMode.Vertical : MenuMode.Inline;\n    }\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n}",
        "Type": "Demos.Components.Menu.demo.SwitchMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "Vertical menu",
        "Description": "<p>Submenus open as pop-ups.</p>\n",
        "Code": "<Menu OnMenuItemClicked=handleClick Style=\" width: 256px\" Mode=MenuMode.Vertical>\n    <SubMenu Key=\"sub1\" TitleTemplate=@sub1Title>\n        <MenuItemGroup Title=\"Item 1\">\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Title=\"Item 2\">\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" TitleTemplate=@sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=\"Submenu\">\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" TitleTemplate=@sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n@code {\n\n    RenderFragment sub1Title =\n    @<span>\n        <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n        <span>Navigation One</span>\n    </span>;\n\n    RenderFragment sub2Title =\n    @<span>\n        <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n        <span>Navigation Two</span>\n    </span>;\n\n    RenderFragment sub4Title =\n    @<span>\n        <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n        <span>Navigation Three</span>\n    </span>;\n\n\n        void handleClick()\n        {\n\n        }\n    }\n",
        "Type": "Demos.Components.Menu.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "horizontal",
        "Title": "Top Navigation",
        "Description": "<p>Horizontal top navigation menu.</p>\n",
        "Code": "<Menu Mode=MenuMode.Horizontal>\n    <MenuItem Key=\"mail\">\n        <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n        Navigation One\n    </MenuItem>\n    <MenuItem Key=\"app\" Disabled>\n        <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n        Navigation Two\n    </MenuItem>\n    <SubMenu TitleTemplate=@sub1Title>\n        <MenuItemGroup Title=\"Item 1\">\n            <MenuItem Key=\"setting:1\">Option 1</MenuItem>\n            <MenuItem Key=\"setting:2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Title=\"Item 2\">\n            <MenuItem Key=\"setting:3\">Option 3</MenuItem>\n            <SubMenu Title=\"Option 4\">\n                <MenuItem Key=\"setting4:1\">Option 1</MenuItem>\n                <MenuItem Key=\"setting4:2\">Option 2</MenuItem>\n            </SubMenu>\n        </MenuItemGroup>\n    </SubMenu>\n    <MenuItem Key=\"alipay\">\n        <MenuLink Href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Navigation Four - Link\n        </MenuLink>\n    </MenuItem>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n    @<Template>\n        <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n        Navigation Three - Submenu\n    </Template>;\n}\n",
        "Type": "Demos.Components.Menu.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inline-collapsed",
        "Title": "Collapsed inline menu",
        "Description": "<p>Inline menu could be collapsed.</p>\n<p>Here is <a href=\"/components/layout/#components-layout-demo-side\">a complete demo</a> with sider layout.</p>\n",
        "Code": "<div style=\"width: 256px;\">\n    <Button Type=\"primary\" OnClick=\"ToggleCollapsed\" Style=\"margin-bottom: 16px\">\n        @if (collapsed)\n        {\n            <Icon Type=\"menu-unfold\" Theme=\"outline\"></Icon>\n        }\n        else\n        {\n            <Icon Type=\"menu-fold\" Theme=\"outline\"></Icon>\n        }\n    </Button>\n    <Menu DefaultSelectedKeys=@(new[] { \"1\" })\n          DefaultOpenKeys=@(new[] { \"sub1\" })\n          Mode=MenuMode.Inline\n          Theme=MenuTheme.Dark\n          InlineCollapsed=collapsed>\n        <MenuItem Key=\"1\">\n            <Icon Type=\"pie-chart\" Theme=\"outline\"></Icon>\n            <span>Option 1</span>\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <Icon Type=\"desktop\" Theme=\"outline\"></Icon>\n            <span>Option 2</span>\n        </MenuItem>\n        <MenuItem Key=\"3\">\n            <Icon Type=\"container\" Theme=\"outline\"></Icon>\n            <span>Option 3</span>\n        </MenuItem>\n        <SubMenu Key=\"sub1\" TitleTemplate=@sub1Title>\n            <MenuItem Key=\"5\">Option 5</MenuItem>\n            <MenuItem Key=\"6\">Option 6</MenuItem>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" TitleTemplate=@sub2Title>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n            <SubMenu Key=\"sub3\" Title=\"Submenu\">\n                <MenuItem Key=\"11\">Option 11</MenuItem>\n                <MenuItem Key=\"12\">Option 12</MenuItem>\n            </SubMenu>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n    bool collapsed = false;\n\n    RenderFragment sub1Title =\n    @<span>\n        <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n        <span>Navigation One</span>\n    </span>;\n\n    RenderFragment sub2Title =\n    @<span>\n        <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n        <span>Navigation Two</span>\n    </span>;\n\n        void ToggleCollapsed()\n        {\n            collapsed = !collapsed;\n        }\n    }\n",
        "Type": "Demos.Components.Menu.demo.InlineCollapsed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "router",
        "Title": "Router",
        "Description": "<p>Automatically activate menu items based on routing, use <code>MenuLink</code> property.</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Horizontal\">\n    <MenuItem RouterLink=\"/en-US/components/menu\" RouterMatch=\"NavLinkMatch.All\">English Menu Document</MenuItem>\n    <MenuItem RouterLink=\"/zh-CN/components/menu\" RouterMatch=\"NavLinkMatch.All\">Chinese Menu Document</MenuItem>\n</Menu>\n\n<br />\n<br />\n\n<div style=\"width: 256px;\">\n    <Menu Mode=\"MenuMode.Inline\">\n        <SubMenu Title=\"Sub Menu1\">\n            <MenuItem RouterLink=\"/en-US/components/menu\" RouterMatch=\"NavLinkMatch.All\">English Menu Document</MenuItem>\n        </SubMenu>\n        <SubMenu Title=\"Sub Menu2\">\n            <MenuItem RouterLink=\"/zh-CN/components/menu\" RouterMatch=\"NavLinkMatch.All\">Chinese Menu Document</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>",
        "Type": "Demos.Components.Menu.demo.Router",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "sider-current",
        "Title": "Open current submenu only",
        "Description": "<p>Click the menu and you will see that all the other menus gets collapsed to keep the entire menu compact.</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Inline\"\n      OpenKeys=this.openKeys\n      OnOpenChange=this.onOpenChange\n      Style=\"width:256px ;\">\n    <SubMenu Key=\"sub1\" TitleTemplate=@sub1Title>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" TitleTemplate=@sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=\"Submenu\">\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" TitleTemplate=@sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code {\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n    // submenu keys of first level\n    string[] rootSubmenuKeys = {\"sub1\", \"sub2\", \"sub4\"};\n\n    string[] openKeys = {\"sub1\"};\n\n    void onOpenChange(string[] openKeys)\n    {\n        var latestOpenKey = openKeys.FirstOrDefault(key => !this.openKeys.Contains(key));\n        if (!rootSubmenuKeys.Contains(latestOpenKey))\n        {\n            this.openKeys = openKeys;\n        }\n        else\n        {\n            this.openKeys = !string.IsNullOrEmpty(latestOpenKey) ? new[] {latestOpenKey} : Array.Empty<string>();\n        }\n    }\n}\n",
        "Type": "Demos.Components.Menu.demo.SiderCurrent",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "inline",
        "Title": "Inline menu",
        "Description": "<p>Vertical menu with inline submenus.</p>\n",
        "Code": "<Menu Style=\"width: 256px;\"\n      DefaultSelectedKeys=@(new[] { \"1\" })\n      DefaultOpenKeys=@(new[] { \"sub1\" })\n      Mode=@MenuMode.Inline>\n    <SubMenu Key=\"sub1\" TitleTemplate=@sub1Title>\n        <MenuItemGroup Key=\"g1\" Title=\"Item 1\">\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Key=\"g2\" Title=\"Item 2\">\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" TitleTemplate=@sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=\"Submenu\">\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" TitleTemplate=@sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n    @<span>\n        <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n        <span>Navigation One</span>\n    </span>;\n\n    RenderFragment sub2Title =\n    @<span>\n        <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n        <span>Navigation Two</span>\n    </span>;\n\n    RenderFragment sub4Title =\n    @<span>\n        <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n        <span>Navigation Three</span>\n    </span>;\n    }\n",
        "Type": "Demos.Components.Menu.demo.Inline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "theme",
        "Title": "Menu Themes",
        "Description": "<p>There are two built-in themes: 'light' and 'dark'. The default value is 'light'.</p>\n",
        "Code": "<div>\n    <Switch Checked=\"theme == MenuTheme.Dark\" OnChange=changeTheme CheckedChildren=@(\"Dark\") UnCheckedChildren=@(\"Light\") />\n    <br />\n    <br />\n    <Menu Theme=theme\n          OnMenuItemClicked=handleClick\n          Style=\" width: 256px \"\n          DefaultOpenKeys=@(new []{\"sub1\"})\n          SelectedKeys=@(new []{current})\n          Mode=\"MenuMode.Inline\">\n        <SubMenu Key=\"sub1\" TitleTemplate=@sub1Title>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" TitleTemplate=@sub2Title>\n            <MenuItem Key=\"5\">Option 5</MenuItem>\n            <MenuItem Key=\"6\">Option 6</MenuItem>\n            <SubMenu Key=\"sub3\" Title=\"Submenu\">\n                <MenuItem Key=\"7\">Option 7</MenuItem>\n                <MenuItem Key=\"8\">Option 8</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub4\" TitleTemplate=@sub4Title>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n    MenuTheme theme = MenuTheme.Dark;\n    string current = \"1\";\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n    void handleClick(MenuItem e)\n    {\n        current = e.Key;\n    }\n\n}\n",
        "Type": "Demos.Components.Menu.demo.Theme",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Badge",
    "Type": "Data Display",
    "Desc": "<p>Small numerical value or status descriptor for UI elements.</p>\n<h2>When To Use</h2>\n<p>Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/badge#API\" class=\"anchor\">#</a></h2>\n<h3>Badge</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>Customize Badge dot color</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>Number to show in badge</td>\n<td>ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>Whether to display a red dot instead of <code>count</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>set offset of the badge dot, like<code>[x, y]</code></td>\n<td><code>[number, number]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverflowCount</td>\n<td>Max count to show</td>\n<td>number</td>\n<td>99</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowZero</td>\n<td>Whether to show badge when <code>count</code> is zero</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>Set Badge as a status dot</td>\n<td><code>success</code> | <code>processing</code> | <code>default</code> | <code>error</code> | <code>warning</code></td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>If <code>count</code> is set, <code>size</code> sets the size of badge</td>\n<td><code>default</code> | <code>small</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Text</td>\n<td>If <code>status</code> is set, <code>text</code> sets the display text of the status <code>dot</code></td>\n<td>string</td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Text to show when hovering over the badge</td>\n<td>string</td>\n<td><code>count</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Badge.Ribbon</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>Customize Ribbon color</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Ribbon</td>\n<td><code>start</code> | <code>end</code></td>\n<td><code>end</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Text</td>\n<td>Content inside the Ribbon</td>\n<td>String or RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/6%26GF9WHwvY/Badge.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage. Badge will be hidden when <code>count</code> is <code>0</code>, but we can use <code>showZero</code> to show it.</p>\n",
        "Code": "<div>\n    <Badge Count=\"5\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"0\" ShowZero>\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n\n    <Badge>\n        <CountTemplate>\n            <Icon Type=\"clock-circle\" Fill=\"#f5222d\" />\n        </CountTemplate>\n        <ChildContent>\n            <a href=\"#\" class=\"head-example\" />\n        </ChildContent>\n    </Badge>\n</div>\n\n",
        "Type": "Demos.Components.Badge.demo.Basic",
        "Style": "\n    .ant-badge:not(.ant-badge-not-a-wrapper) {\n        margin-right: 20px;\n    }\n    .ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n        margin-right: 0;\n        margin-left: 20px;\n    }\n    .head-example {\n        width: 42px;\n        height: 42px;\n        border-radius: 2px;\n        background: #eee;\n        display: inline-block;\n        vertical-align: middle;\n    }\n    [data-theme=\"dark\"] .head-example {\n        background: rgba(255,255,255,.12);\n    }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "link",
        "Title": "Clickable",
        "Description": "<p>The badge can be wrapped with <code>a</code> tag to make it linkable.</p>\n",
        "Code": "<a href=\"#\">\n    <Badge Count=\"5\">\n        <span class=\"head-example\" />\n    </Badge>\n</a>",
        "Type": "Demos.Components.Badge.demo.Link",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "dot",
        "Title": "Red badge",
        "Description": "<p>This will simply display a red badge, without a specific count. If count equals 0, it won't display the dot.</p>\n",
        "Code": "<div>\n    <Badge Dot>\n        <Icon Type=\"notification\"/>\n    </Badge>\n    <Badge Count=\"0\" Dot>\n        <Icon Type=\"notification\" />\n    </Badge>\n    <Badge Dot>\n        <a href=\"#\">Link something</a>\n    </Badge>\n    <Badge Dot Status=\"warning\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>",
        "Type": "Demos.Components.Badge.demo.Dot",
        "Style": "\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "no-wrapper",
        "Title": "Standalone",
        "Description": "<p>Used in standalone when children is empty.</p>\n",
        "Code": "<div>\n    <Badge Count=\"25\" />\n    <Badge Count=\"4\" Class=\"site-badge-count-4\" />\n    <Badge Class=\"site-badge-count-109\" Count=\"109\" Style=\"background-color: #52c41a\" />\n</div>\n\n<style>\n    .site-badge-count-4 .ant-badge-count {\n        background-color: #fff;\n        color: #999;\n        box-shadow: 0 0 0 1px #d9d9d9 inset;\n    }\n</style>",
        "Type": "Demos.Components.Badge.demo.NoWrapper",
        "Style": "\n.ant-badge-not-a-wrapper:not(.ant-badge-status) {\n  margin-right: 8px;\n}\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n[data-theme=\"dark\"] .site-badge-count-4 .ant-badge-count {\n  background-color: #141414;\n  box-shadow: 0 0 0 1px #434343 inset;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "overflow",
        "Title": "Overflow Count",
        "Description": "<p><code>${overflowCount}+</code> is displayed when count is larger than <code>overflowCount</code>. The default value of <code>overflowCount</code> is <code>99</code>.</p>\n",
        "Code": "<div>\n    <Badge Count=\"99\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"100\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"99\" OverflowCount=\"10\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"1000\" OverflowCount=\"999\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>\n",
        "Type": "Demos.Components.Badge.demo.Overflow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "colorful",
        "Title": "Colorful Badge",
        "Description": "<p>We preset a series of colorful Badge styles for use in different situations. You can also set it to a hex color string for custom color.</p>\n",
        "Code": "<div>\n    <h4 style=\"margin-bottom: 16px\">Presets:</h4>\n    <div>\n        @foreach (var color in colors)\n        {\n            <div key=\"@color\">\n                <Badge Color=\"@color\" Text=\"@color\" />\n            </div>\n        }\n    </div>\n    <h4 style=\"margin:16px 0;\">Custom:</h4>\n    <div>\n        <Badge Color=\"#f50\" Text=\"#f50\" />\n        <br />\n        <Badge Color=\"#2db7f5\" Text=\"#2db7f5\" />\n        <br />\n        <Badge Color=\"#87d068\" Text=\"#87d068\" />\n        <br />\n        <Badge Color=\"#108ee9\" Text=\"#108ee9\" />\n    </div>\n</div>\n\n<style>\n    .ant-tag {\n        margin-bottom: 8px;\n    }\n</style>\n\n@code\n{\n    string[] colors =\n    {\n        \"pink\",\n        \"red\",\n        \"yellow\",\n        \"orange\",\n        \"cyan\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"geekblue\",\n        \"magenta\",\n        \"volcano\",\n        \"gold\",\n        \"lime\",\n    };\n}\n",
        "Type": "Demos.Components.Badge.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 15,
        "Name": "ribbon",
        "Title": "Ribbon",
        "Description": "<p>Use ribbon badge.</p>\n",
        "Code": "<BadgeRibbon Text=\"Pushes open the window\">\n    <Card Bordered>And raises the spyglass.</Card>\n</BadgeRibbon>\n<br />\n<BadgeRibbon >\n    <TextTemplate>\n        <Icon Type=\"windows\" Theme=\"outline\" />Pushes open the window\n    </TextTemplate>\n    <ChildContent>\n        <Card Bordered>And raises the spyglass.</Card>\n    </ChildContent>\n</BadgeRibbon>",
        "Type": "Demos.Components.Badge.demo.Ribbon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "offset",
        "Title": "Offset",
        "Description": "<p>Set offset of the badge dot, the format is <code>[left, top]</code>, which represents the offset of the status dot from the left and top of the default position.</p>\n",
        "Code": "<Badge Count=\"5\" Offset=\"(10, 10)\">\n    <a href=\"#\" class=\"head-example\" />\n</Badge>",
        "Type": "Demos.Components.Badge.demo.Offset",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 100,
        "Name": "title",
        "Title": "Title",
        "Description": "<p>The badge will display <code>title</code> when hovered over, instead of <code>count</code>.</p>\n",
        "Code": "<div>\n    <Badge Count=\"5\" Title=\"Custom hover text\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>",
        "Type": "Demos.Components.Badge.demo.Title",
        "Style": "\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-right: 20px;\n}\n\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 2px;\n  background: #eee;\n  display: inline-block;\n}\n[data-theme=\"dark\"] .head-example {\n  background: rgba(255,255,255,.12);\n}\n\n",
        "Debug": true
      },
      {
        "Order": 6,
        "Name": "status",
        "Title": "Status",
        "Description": "<p>Standalone badge with status.</p>\n",
        "Code": "<div>\n    <Badge Status=\"success\" />\n    <Badge Status=\"error\" />\n    <Badge Status=\"default\" />\n    <Badge Status=\"processing\" />\n    <Badge Status=\"warning\" />\n    <br />\n    <Badge Status=\"success\" Text=\"Success\" />\n    <br />\n    <Badge Status=\"error\" Text=\"Error\" />\n    <br />\n    <Badge Status=\"default\" Text=\"Default\" />\n    <br />\n    <Badge Status=\"processing\" Text=\"Processing\" />\n    <br />\n    <Badge Status=\"warning\" Text=\"Warning\" />\n</div>",
        "Type": "Demos.Components.Badge.demo.Status",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "change",
        "Title": "Dynamic",
        "Description": "<p>The count will be animated as it changes.</p>\n",
        "Code": "<div>\n    <div>\n        <Badge Count=\"@count\">\n            <a href=\"#\" class=\"head-example\" />\n        </Badge>\n        <ButtonGroup>\n            <Button @onclick=\"_=>decline()\">\n                <Icon Type=\"minus\"></Icon>\n            </Button>\n            <Button @onclick=\"_=>increase()\">\n                <Icon Type=\"plus\"></Icon>\n            </Button>\n        </ButtonGroup>\n    </div>\n    <div style=\"margin-top: 10px\">\n        <Badge Dot=\"@show\">\n            <a href=\"#\" class=\"head-example\" />\n        </Badge>\n        <Switch OnChange=\"onChange\" Checked=\"@show\" />\n    </div>\n</div>\n\n@code {\n    int count = 5;\n    bool show = true;\n\n    void increase()\n    {\n        count++;\n    }\n\n    void decline()\n    {\n        count--;\n        if (count < 0)\n        {\n            count = 0;\n        }\n    }\n\n    void onChange(bool show)\n    {\n        this.show = show;\n    }\n}\n",
        "Type": "Demos.Components.Badge.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>Set size of numeral Badge.</p>\n",
        "Code": "<Badge Size=\"default\" Count=\"5\">\n    <a href=\"#\" class=\"head-example\" />\n</Badge>\n<Badge Size=\"small\" Count=\"5\">\n    <a href=\"#\" class=\"head-example\" />\n</Badge>",
        "Type": "Demos.Components.Badge.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Modal",
    "Type": "Feedback",
    "Desc": "<p>Modal dialogs.</p>\n<h2>When To Use</h2>\n<p>When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use <code>Modal</code> to create a new floating layer over the current page to get user feedback or display information. Additionally, if you need show a simple confirmation dialog, you can use <code>ModalService.Confirm()</code>, and so on.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/modal#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AfterClose</td>\n<td>Specify a function that will  be called when modal is closed completely.</td>\n<td>EventCallback</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Body style for modal body  element. Such as height, padding etc.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelText</td>\n<td>Text of the Cancel button</td>\n<td>string|RenderFragment</td>\n<td>Cancel</td>\n</tr>\n<tr>\n<td>Centered</td>\n<td>Centered Modal</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is  visible on top right of the modal dialog or not</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>custom close icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ConfirmLoading</td>\n<td>Whether to apply loading  visual effect for OK button or not</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>DestroyOnClose</td>\n<td>Whether to unmount child  components on onClose</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>Footer content, set as  footer={null} when you don't need default buttons</td>\n<td>string|RenderFragment</td>\n<td>确定取消按钮</td>\n</tr>\n<tr>\n<td>ForceRender</td>\n<td>Force render Modal</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>GetContainer</td>\n<td>Return the mount node for  Modal</td>\n<td>ElementReference?</td>\n<td>document.body</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to close</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>Whether show mask or not.</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Whether to close the modal  dialog when the mask (area outside the modal) is clicked</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for modal's mask  element.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OkText</td>\n<td>Text of the OK button</td>\n<td>string|RenderFragment</td>\n<td>OK</td>\n</tr>\n<tr>\n<td>OkType</td>\n<td>Button type of the OK button</td>\n<td>string</td>\n<td>primary</td>\n</tr>\n<tr>\n<td>OkButtonProps</td>\n<td>The ok button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelButtonProps</td>\n<td>The cancel button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Style of floating layer,  typically used at least for adjusting the position.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>The modal dialog's title</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the modal dialog is  visible or not</td>\n<td>bool</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the modal dialog</td>\n<td>string|double</td>\n<td>520</td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the  container of the modal dialog</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Modal</td>\n<td>int</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>Specify a function that will  be called when a user clicks mask, close button on top right or Cancel button</td>\n<td>EventCallback<MouseEventArgs></td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnOk</td>\n<td>Specify a function that will  be called when a user clicks the OK button</td>\n<td>EventCallback<MouseEventArgs></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Draggable</td>\n<td>Is it allowed to drag Modal through its Header</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>DragInViewport</td>\n<td>If Draggable is true, and is it only allowed drag Modal in the viewport</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h4>Note</h4>\n<blockquote>\n<p>The state of Modal will be preserved at it's component lifecycle by default, if you wish to open it with a brand new state everytime, set <code>DestroyOnClose</code> on it.</p>\n</blockquote>\n<h3>Modal.method()</h3>\n<p>There are five ways to display the information based on the content's nature:</p>\n<ul>\n<li><code>ModalService.Info</code></li>\n<li><code>ModalService.Success</code></li>\n<li><code>ModalService.Error</code></li>\n<li><code>ModalService.Warning</code></li>\n<li><code>ModalService.Confirm</code></li>\n<li><code>ModalService.CreateAsync</code></li>\n<li><code>ModalService.ConfirmAsync</code></li>\n<li><code>ModalService.InfoAsync</code></li>\n<li><code>ModalService.SuccessAsync</code></li>\n<li><code>ModalService.ErrorAsync</code></li>\n<li><code>ModalService.WarningAsync</code></li>\n</ul>\n<blockquote>\n<p>Please confirm that the <code>&lt;AntContainer /&gt;</code> component has been added to <code>App.Razor</code>.\n<code>ConfirmAsync</code>、<code>InfoAsync</code>、<code>SuccessAsync</code>、<code>ErrorAsync</code>、<code>WarningAsync</code> will return Task<bool>，it can be used to determine whether the button the user clicks is an OK button (true) or a cancel button (false)</p>\n</blockquote>\n<h4>ConfirmOptions</h4>\n<table>\n<thead>\n<tr>\n<th>CancelText</th>\n<th>Text  of the Cancel button with Modal.confirm</th>\n<th>string</th>\n<th>Cancel</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centered</td>\n<td>Centered Modal</td>\n<td>bool</td>\n<td>fasle</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>className of container</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Content</td>\n<td>Content</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>custom icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to  close</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>Whether show mask or not.</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Whether to close the modal  dialog when the mask (area outside the modal) is clicked</td>\n<td>bool</td>\n<td>fasle</td>\n</tr>\n<tr>\n<td>OkText</td>\n<td>Text of the OK button</td>\n<td>string</td>\n<td>OK</td>\n</tr>\n<tr>\n<td>OkType</td>\n<td>Button type of the OK button</td>\n<td>string</td>\n<td>primary</td>\n</tr>\n<tr>\n<td>OkButtonProps</td>\n<td>The ok button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelButtonProps</td>\n<td>The cancel button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Title</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the modal dialog</td>\n<td>string|double</td>\n<td>416</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Modal</td>\n<td>int</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>Specify a function that will  be called when the user clicks the Cancel button. The parameter of this  function is a function whose execution should include closing the dialog. You  can also just return a promise and when the promise is resolved, the modal dialog  will also be closed</td>\n<td>EventCallback<MouseEventArgs>?</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnOk</td>\n<td>Specify a function that will  be called when the user clicks the OK button. The parameter of this function  is a function whose execution should include closing the dialog. You can also  just return a promise and when the promise is resolved, the modal dialog will  also be closed</td>\n<td>EventCallback<MouseEventArgs>?</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>All the <code>ModalService.Method</code>s will return a reference, and then we can update and close the modal dialog by the reference.</p>\n<pre><code class=\"language-c#\">ConfirmOptions config = new ConfirmOptions();\nvar modelRef = await ModalService.Info(config);\n\nmodelRef.UpdateConfig();\n\nModalService.Destroy(modelRef);\n</code></pre>\n<ul>\n<li><code>ModalService.DestroyAll</code></li>\n</ul>\n<p><code>ModalService.DestroyAll()</code> could destroy all confirmation modal dialogs(ModalService.Info/ModalService.Success/ModalService.Error/ModalService.Warning/ModalService.Confirm). Usually, you can use it in router change event to destroy confirm modal dialog automatically without use modal reference to close( it's too complex to use for all modal dialogs)</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/3StSdUlSH/Modal.svg",
    "DemoList": [
      {
        "Order": 10,
        "Name": "button-props",
        "Title": "Customize footer buttons props",
        "Description": "<p>Passing <code>okButtonProps</code> and <code>cancelButtonProps</code> will customize the OK button and cancel button props.</p>\n",
        "Code": "<Button Type=\"primary\" OnClick=\"@ShowModal\">\n    Open Modal with customized button props\n</Button>\n<Modal Title=\"@(\"BasicModal\")\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\"\n       OkButtonProps=\"new AntDesign.ButtonProps(){ Disabled = true }\"\n       CancelButtonProps=\"new AntDesign.ButtonProps(){ Disabled = true }\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n@code{\n    bool _visible = false;\n\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n    private void HandleOk(MouseEventArgs e)\n    {\n        Console.WriteLine(\"e\");\n        _visible = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        Console.WriteLine(\"e\");\n        _visible = false;\n    }\n}",
        "Type": "Demos.Components.Modal.demo.ButtonProps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic modal.</p>\n",
        "Code": "<Button Type=\"primary\" OnClick=\"@(()=>{ _visible = true; })\">\n    Open Modal\n</Button>\n<Modal Title=\"@title\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n@code{\n    string title = \"BasicModal\";\n    bool _visible = false;\n\n    private void HandleOk(MouseEventArgs e)\n    {\n        Console.WriteLine(e);\n        _visible = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        Console.WriteLine(e);\n        _visible = false;\n    }\n}",
        "Type": "Demos.Components.Modal.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "modal_service",
        "Title": "Template",
        "Description": "",
        "Code": "@inject ModalService ModalService\n\n<Input @bind-Value=\"@value\" />\n<br />\n<br />\n<Button OnClick=\"OpenTemplate\" Type=\"primary\">Use Template</Button>\n<Button OnClick=\"OpenComponent\" Type=\"primary\">Use Component</Button>\n\n@code{\n\n    private string value = \"blazor\";\n\n    private ModalRef _drawerRef;\n\n    private async Task OpenTemplate()\n    {\n        RenderFragment content =@<div>value: @value <br /><Button OnClick=\"CloseModal\">close</Button></div>;\n\n            var options = new ConfirmOptions()\n            {\n                Title = \"Modal\",\n                Width = 350,\n                Content = content,\n                OnOk = e => { Console.WriteLine(\"OnOk\"); return Task.CompletedTask; },\n                OnCancel = e => { Console.WriteLine(\"OnCancel\"); return Task.CompletedTask; }\n            };\n\n            _drawerRef = await ModalService.CreateAsync(options);\n\n            _drawerRef.OnOpen = () =>\n            {\n                Console.WriteLine(\"Open Modal\");\n                return Task.CompletedTask;\n            };\n\n            _drawerRef.OnClose = () =>\n            {\n                Console.WriteLine(\"Close Modal\");\n                return Task.CompletedTask;\n            };\n        }\n\n        private async Task CloseModal()\n        {\n            if (_drawerRef != null)\n            {\n                await _drawerRef.CloseAsync();\n            }\n        }\n\n        private async Task OpenComponent()\n        {\n            var options = new ConfirmOptions()\n            {\n                Title = \"Component\",\n\n            };\n\n            var drawerRef = await ModalService.CreateAsync<ModalTemplateDemo, string, string>(options, value);\n\n            drawerRef.OnOpen = () =>\n            {\n                Console.WriteLine(\"OnOpen\");\n                return Task.CompletedTask;\n            };\n\n            drawerRef.OnClose = () =>\n            {\n                Console.WriteLine(\"OnClose\");\n                return Task.CompletedTask;\n            };\n\n            drawerRef.OnOk = (result) =>\n            {\n                Console.WriteLine($\"OnOk:{result}\");\n                return Task.CompletedTask;\n            };\n\n        }\n\n\n    }",
        "Type": "Demos.Components.Modal.demo.Modal_service",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "confirm_service",
        "Title": "ConfirmService",
        "Description": "<p>Use <code>ConfirmService.Show</code> to show a built-in confirm dialog, similar to Windows MessageBox.</p>\n",
        "Code": "@inject MessageService _message\n@inject ConfirmService _confirmService\n\n\n<Divider>Buttons</Divider>\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> { await ShowConfirm(ConfirmButtons.OK); })\">OK</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> { await ShowConfirm(ConfirmButtons.OKCancel); })\">OKCancel</Button>\n    </SpaceItem>\n</Space>\n\n<br />\n<br />\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> { await ShowConfirm(ConfirmButtons.YesNo); })\">YesNo</Button>\n    </SpaceItem>\n\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> { await ShowConfirm(ConfirmButtons.YesNoCancel); })\">YesNoCancel</Button>\n    </SpaceItem>\n</Space>\n\n<br />\n<br />\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> { await ShowConfirm(ConfirmButtons.RetryCancel); })\">RetryCancel</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> { await ShowAbortRetryIgnore(); })\">AbortRetryIgnore</Button>\n    </SpaceItem>\n\n</Space>\n\n<Divider>Icon</Divider>\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> await ShowConfirmIcon(ConfirmIcon.Error))\">Error</Button>\n    </SpaceItem>\n</Space>\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> await ShowConfirmIcon(ConfirmIcon.Info))\">Info</Button>\n    </SpaceItem>\n</Space>   \n <Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> await ShowConfirmIcon(ConfirmIcon.None))\">None</Button>\n    </SpaceItem>\n</Space>   \n <Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> await ShowConfirmIcon(ConfirmIcon.Question))\">Question</Button>\n    </SpaceItem>\n</Space>  \n  <Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> await ShowConfirmIcon(ConfirmIcon.Success))\">Success</Button>\n    </SpaceItem>\n</Space>  \n  <Space>\n    <SpaceItem>\n        <Button OnClick=\"@(async ()=> await ShowConfirmIcon(ConfirmIcon.Warning))\">Warning</Button>\n    </SpaceItem>\n</Space>\n\n@code{\n\n    private async Task ShowConfirm(ConfirmButtons confirmButtons)\n    {\n        var content = \"Here is a blocking confirm, you can get OK or cancel button is click\";\n        var title = \"Info\";\n        var confirmResult = await _confirmService.Show(content, title, confirmButtons);\n\n        var _ = _message.Info($\"{confirmResult} button is clicked\", 2);\n    }\n\n    private async Task ShowConfirmIcon(ConfirmIcon confirmIcon)\n    {\n        var content = \"You can set different icons\";\n        var title = confirmIcon.ToString();\n        var confirmResult = await _confirmService.Show(content, title, ConfirmButtons.OK, confirmIcon);\n\n        var _ = _message.Info($\"{confirmResult} button is clicked\", 2);\n    }\n\n    private async Task ShowAbortRetryIgnore()\n    {\n        var content = \"Here is from ConfirmService, you can get which button is click from result\";\n        var title = \"Info\";\n        var confirmResult =\n            await _confirmService.Show(\n                content,\n                title,\n                ConfirmButtons.AbortRetryIgnore,\n                ConfirmIcon.Error,\n                new ConfirmButtonOptions()\n                {\n                    Button1Props = new AntDesign.ButtonProps()\n                    {\n                        Type = AntDesign.ButtonType.Dashed,\n                        ChildContent = \"Abort\"\n                    },\n                    Button2Props = new AntDesign.ButtonProps()\n                    {\n                        Type = AntDesign.ButtonType.Primary,\n                        Disabled = true,\n                        ChildContent = \"Retry\"\n                    },\n                    Button3Props = new AntDesign.ButtonProps()\n                    {\n                        ChildContent = \"Ignore\"\n                    }\n                }\n            );\n\n        var _ = _message.Info($\"{confirmResult} button is clicked\", 2);\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.Confirm_Service",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "position",
        "Title": "To customize the position of modal",
        "Description": "<p>You can use <code>centered</code>,<code>style.top</code> or other styles to set position of modal dialog.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" OnClick=\"@SetModal1Visible\">\n        Display a modal dialog at 20px to Top\n    </Button>\n    <Modal Title=\"@(\"20px to Top\")\"\n           Style=\"top: 20px\"\n           Visible=\"_visible1\"\n           OnOk=\"@HideModal1\"\n           OnCancel=\"@HideModal1\"\n           >\n        <p>some contents...</p>\n        <p>some contents...</p>\n        <p>some contents...</p>\n    </Modal>\n    <br />\n    <br />\n    <Button Type=\"primary\" OnClick=\"@SetModal2Visible\">\n        Vertically centered modal dialog\n    </Button>\n    <Modal Title=\"@(\"Vertically centered modal dialog\")\"\n           Centered=\"true\"\n           Visible=\"_visible2\"\n           OnOk=\"@HideModal2\"\n           OnCancel=\"@HideModal2\"\n           >\n        <p>some contents...</p>\n        <p>some contents...</p>\n        <p>some contents...</p>\n    </Modal>\n</div>\n@code {\n    string title = \"BasicModal\";\n    bool _visible1 = false;\n    bool _visible2 = false;\n\n    private void HideModal1()\n    {\n        if (_visible1)\n        {\n            _visible1 = false;\n        }\n    }\n\n    private void HideModal2()\n    {\n        if (_visible2)\n        {\n            _visible2 = false;\n        }\n    }\n\n    private void SetModal1Visible()\n    {\n        _visible1 = true;\n    }\n    private void SetModal2Visible()\n    {\n        _visible2 = true;\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.Position",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "confirm-promise",
        "Title": "Promise Confirmation modal dialog",
        "Description": "<p>Use <code>Confirm()</code> to show a confirmation modal dialog. Asynchronous event OnCancel/OnOk can delay closing the dialog.</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Button OnClick=\"@ShowConfirm\">Confirm</Button>\n\n\n<Button OnClick=\"@ShowConfirmNotClose\">Confirm</Button>\n\n\n@code {\n\n    private Func<ModalClosingEventArgs, Task> OnOkClick = async (e) =>\n    {\n        await Task.Delay(1000);\n    };\n\n    private void ShowConfirm()\n    {\n        RenderFragment icon =@<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Do you want to delete these items?\",\n            Icon = icon,\n            Content = \"When clicked the OK button, this dialog will be closed after 1 second\",\n            OnOk = OnOkClick\n        });\n    }\n\n\n\n    private Func<ModalClosingEventArgs, Task> OnNotOkClick = async (e) =>\n    {\n        await Task.Delay(1000);\n        e.Cancel = true;\n    };\n\n    private void ShowConfirmNotClose()\n    {\n        RenderFragment icon =@<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Do you want to delete these items?\",\n            Icon = icon,\n            Content = \"When clicked the OK button, this dialog will be closed after 1 second, Not Close Modal\",\n            OnOk = OnNotOkClick\n        });\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.ConfirmPromise",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "info",
        "Title": "Information modal dialog",
        "Description": "<p>In the various types of information modal dialog, only one button to close dialog is provided.</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"HandleInfo\">Info</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"HandleSuccess\">Success</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"HandleError\">Error</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"HandleWarning\">Warning</Button>\n    </SpaceItem>\n</Space>\n@code {\n    private void HandleInfo()\n    {\n        RenderFragment content =@<div>\n                <p>some messages...some messages...</p>\n                <p>some messages...some messages...</p>\n            </div>;\n        _modalService.Info(new ConfirmOptions()\n        {\n            Title = \"This is a notification message\",\n            Content = content\n        });\n    }\n\n    private void HandleSuccess()\n    {\n        _modalService.Success(new ConfirmOptions()\n        {\n            Content = \"some messages...some messages...\"\n        });\n    }\n\n    private void HandleError()\n    {\n        _modalService.Error(new ConfirmOptions()\n        {\n            Title = \"This is an error message\",\n            Content = \"some messages...some messages...\"\n        });\n    }\n\n    private void HandleWarning()\n    {\n        _modalService.Warning(new ConfirmOptions()\n        {\n            Title = \"This is a warning message\",\n            Content = \"some messages...some messages...\"\n        });\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "confirm-router",
        "Title": "destroy confirmation modal dialog",
        "Description": "<p><code>Modal.destroyAll()</code> will destroy all confirmation modal dialogs. Usually, you can use it in router change event to destroy confirm modal dialog automatically.</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Button OnClick=\"@ShowConfirm\">Confirm</Button>\n\n\n@code {\n\n    private async Task DestroyAll()\n    {\n        await _modalService.DestroyAll();\n    }\n\n    private async Task ShowConfirm()\n    {\n        RenderFragment icon =@<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n        RenderFragment content = @<Button OnClick=\"DestroyAll\"> Click to destroy all </Button>;\n\n        for (int i = 0; i < 3; i++)\n        {\n            _modalService.Confirm(new ConfirmOptions()\n            {\n                Icon = icon,\n                Content = content,\n            });\n            await Task.Delay(500);\n        }\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.ConfirmRouter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "async",
        "Title": "Asynchronously close",
        "Description": "<p>Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form.</p>\n",
        "Code": "\n<Button Type=\"primary\" OnClick=\"@ShowModal\">\n    Open Modal with async logic\n</Button>\n<Modal Title=\"@(\"Title\")\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\"\n       ConfirmLoading=\"@_confirmLoading\">\n    <p>@_modalText</p>\n</Modal>\n\n\n@code{\n    bool _visible = false;\n    bool _confirmLoading = false;\n    string _modalText = \"Content of the modal\";\n\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n\n    private async Task HandleOk(MouseEventArgs e)\n    {\n        _modalText = \"The modal will be closed after two seconds\";\n        _confirmLoading = true;\n\n        await Task.Delay(2000);\n        _visible = false;\n        _confirmLoading = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        Console.WriteLine(\"Clicked cancel button\");\n        _visible = false;\n    }\n}",
        "Type": "Demos.Components.Modal.demo.Async",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "footer",
        "Title": "Customized Footer",
        "Description": "<p>A more complex example which define a customized footer button bar. The dialog will change to loading state after clicking the submit button, and when the loading is done, the modal dialog will be closed.</p>\n<p>You could set <code>footer</code> to <code>null</code> if you don't need default footer buttons.</p>\n",
        "Code": "\n<Button Type=\"primary\" OnClick=\"@ShowModal\">\n    Open Modal with customized footer\n</Button>\n@{\n    RenderFragment footer = @<Template>\n    <Button OnClick=\"@HandleOk\" @key=\"@( \"submit\" )\"\n            Type=\"primary\"\n            Loading=\"@_loading\">\n        Submit\n    </Button>\n    <Button OnClick=\"@HandleCancel\" @key=\"@( \"back\" )\">Return</Button>\n</Template>;\n}\n\n<Modal Title=\"@(\"Title\")\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\"\n       Footer=\"@footer\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n\n@code{\n    bool _visible = false;\n    bool _loading = false;\n\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n\n    private async Task HandleOk(MouseEventArgs e)\n    {\n        _loading = true;\n        await Task.Delay(3000);\n        _visible = false;\n        _loading = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        _visible = false;\n    }\n}",
        "Type": "Demos.Components.Modal.demo.Footer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "confirm",
        "Title": "Confirmation modal dialog",
        "Description": "<p>Use <code>confirm()</code> to show a confirmation modal dialog.</p>\n",
        "Code": "@inject ModalService _modalService\n@inject MessageService _message\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@ShowConfirm\">Confirm</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"@ShowDeleteConfirm\" Type=\"dashed\">Delete</Button>\n    </SpaceItem>\n\n    <SpaceItem>\n        <Button OnClick=\"@ShowPropsConfirm\" Type=\"dashed\"> With extra props</Button>\n    </SpaceItem>\n</Space>\n<br />\n<br />\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@BlockingConfirm\">Blocking Confirm</Button>\n    </SpaceItem>\n</Space>\n@code{\n    Func<ModalClosingEventArgs, Task> onOk = (e) =>\n    {\n        Console.WriteLine(\"Ok\");\n        return Task.CompletedTask;\n    };\n    Func<ModalClosingEventArgs, Task> onCancel = (e) =>\n    {\n        Console.WriteLine(\"Cancel\");\n        return Task.CompletedTask;\n    };\n    RenderFragment icon = @<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n\n    private void ShowConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Do you Want to delete these items?\",\n            Icon = icon,\n            Content = \"Some descriptions\",\n            OnOk = onOk,\n            OnCancel = onCancel\n        });\n    }\n\n    private void ShowDeleteConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Are you sure delete this task?\",\n            Icon = icon,\n            Content = \"Some descriptions\",\n            OnOk = onOk,\n            OnCancel = onCancel,\n            OkText = \"Yes\",\n            OkType = \"danger\",\n            CancelText = \"No\",\n        });\n    }\n\n    private void ShowPropsConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Are you sure delete this task?\",\n            Icon = icon,\n            Content = \"Some descriptions\",\n            OnOk = onOk,\n            OnCancel = onCancel,\n            OkText = \"Yes\",\n            OkType = \"danger\",\n            CancelText = \"No\",\n            OkButtonProps = new AntDesign.ButtonProps()\n            {\n                Disabled = true,\n            }\n        });\n    }\n\n\n    private async Task BlockingConfirm()\n    {\n        var content = \"Here is a blocking confirm, you can get OK or cancel button is click\";\n        var title = \"Info\";\n\n        var isTrue = await _modalService.ConfirmAsync(new ConfirmOptions()\n        {\n            Content = content,\n            Title = title\n        });\n\n        await _message.Info($\"The confirm return {isTrue}\");\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.Confirm",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "draggable_modal",
        "Title": "Draggable Modal",
        "Description": "<p>Use <code>Draggable</code> to create a draggable Modal dialog, and you can control whether dragging is allowed only within the viewport through the parameter <code>DragInViewport</code>.</p>\n",
        "Code": "<Space>\n    <SpaceItem>\n        <Button Type=\"primary\" OnClick=\"@(()=>{ _visible1 = true; })\">\n            DragInViewport\n        </Button>\n    </SpaceItem>\n\n    <SpaceItem>\n        <Button Type=\"primary\" OnClick=\"@(()=>{ _visible2 = true; })\">\n            DragAcrossViewport\n        </Button>\n    </SpaceItem>\n</Space>\n\n<Modal Title=\"@(\"DraggableModal\")\"\n       Visible=\"@_visible1\"\n       OnOk=\"(e)=>{_visible1 = false;}\"\n       Draggable=\"@(true)\"\n       OnCancel=\"(e)=>{_visible1 = false;}\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n<Modal Title=\"@(\"DraggableModal\")\"\n       Visible=\"@_visible2\"\n       OnOk=\"(e)=>{_visible2 = false;}\"\n       Draggable=\"@(true)\"\n       DragInViewport=\"@(false)\"\n       OnCancel=\"(e)=>{_visible2 = false;}\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n@code{\n    string title = \"DraggableModal\";\n    bool _visible1 = false;\n    bool _visible2 = false;\n}",
        "Type": "Demos.Components.Modal.demo.DraggableModal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "locale",
        "Title": "Internationalization",
        "Description": "<p>To customize the text of the buttons, you need to set <code>okText</code> and <code>cancelText</code> props.</p>\n",
        "Code": "@inject ModalService _modalService\n\n<div>\n    <Button Type=\"primary\" OnClick=\"@ShowModal\">\n        Modal\n    </Button>\n    <Modal Title=\"@(\"Modal\")\"\n           Visible=\"@_visible\"\n           OnOk=\"@HideModal\"\n           OnCancel=\"@HideModal\"\n           OkText=\"@(\"确认\")\"\n           CancelText=\"@(\"取消\")\">\n        <p>Bla bla ...</p>\n        <p>Bla bla ...</p>\n        <p>Bla bla ...</p>\n    </Modal>\n\n    <Button OnClick=\"@HandleConfirm\">Confirm</Button>\n\n</div>\n\n\n@code {\n    private bool _visible = false;\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n    private void HideModal()\n    {\n        _visible = false;\n    }\n\n    private void HandleConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Confirm\",\n            Icon =@<Icon Type=\"exclamation-circle\" Theme=\"Outline\"></Icon>,\n            Content = \"Bla bla ...\",\n            OkText = \"确认\",\n            CancelText = \"取消\"\n        });\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.Locale",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "manual",
        "Title": "Manual to update destroy",
        "Description": "<p>Manually updating and destroying a modal from <code>Modal.method</code>.</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Button OnClick=\"@CountDown\">Open modal to close in 5s</Button>\n\n\n@code {\n\n    private async Task CountDown()\n    {\n        var secondsToGo = 5;\n        var props = new ConfirmOptions()\n        {\n            Title = \"This is a notification message\",\n            Content = $\"This modal will be destroyed after {secondsToGo} second.\"\n        };\n        var modelRef = _modalService.Success(props);\n        while (secondsToGo > 0)\n        {\n            secondsToGo -= 1;\n            await Task.Delay(1000);\n            props.Content = $\"This modal will be destroyed after {secondsToGo} second.\";\n            await modelRef.UpdateConfig();\n        }\n        await _modalService.Destroy(modelRef);\n    }\n}\n",
        "Type": "Demos.Components.Modal.demo.Manual",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 30,
        "Name": "dropdown-in-modal",
        "Title": "Other components",
        "Description": "<p>use dropdown or popup in modal.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"@(()=>{ _visible = true; })\">\n    Open Modal\n</Button>\n<Modal Title=\"@title\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\">\n    <b>Select:</b><br />\n\n    <Form Model=\"_formModal\">\n        <FormItem Label=\"类型\">\n            <RadioGroup @bind-Value=\"@context.Type\">\n                <Radio Value=\"1\">Select</Radio>\n                <Radio Value=\"2\">None</Radio>\n            </RadioGroup>\n        </FormItem>\n        @if (context.Type == 1)\n        {\n            <FormItem>\n                <Select @bind-Value=\"@context.Name\" DefaultValue=@(\"lucy\") Style=\"width:120px\" AllowClear>\n                    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n                </Select>\n            </FormItem>\n        }\n    </Form>\n    <div style=\"margin: 64px\" />\n\n    <b>Dropdown:</b><br />\n    <Dropdown>\n        <Overlay>\n            <Menu>\n                <MenuItem>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                        1st menu item\n                    </a>\n                </MenuItem>\n            </Menu>\n        </Overlay>\n        <ChildContent>\n            <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n                Hover me <Icon Type=\"down\" />\n            </a>\n        </ChildContent>\n    </Dropdown>\n\n    <div style=\"margin: 64px\" />\n\n    <b>DatePicker:</b><br />\n    <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Date\" />\n\n    <div style=\"margin: 64px\" />\n\n    <b>Tooltip:</b><br />\n    <Tooltip Title=\"@(\"prompt text\")\">\n        <span>Tooltip will show on mouse enter.</span>\n    </Tooltip>\n\n    <div style=\"margin: 64px\" />\n\n    <b>Popconfirm:</b><br />\n    <Popconfirm Title=\"Are you sure delete this task?\"\n                OkText=\"Yes\"\n                CancelText=\"No\">\n        <a>Delete</a>\n    </Popconfirm>\n\n</Modal>\n\n@code{\n    class FormModal\n    {\n        public string Name { get; set; }\n        public int Type { get; set; }\n    }\n\n    string title = \"BasicModal\";\n    bool _visible = false;\n\n    RenderFragment _content =\n    @<div>\n        <p>Content</p>\n        <p>Content</p>\n    </div>;\n\nprivate FormModal _formModal = new FormModal();\n\nprivate void HandleOk(MouseEventArgs e)\n{\n  Console.WriteLine(e);\n  _visible = false;\n}\n\nprivate void HandleCancel(MouseEventArgs e)\n{\n  Console.WriteLine(e);\n  _visible = false;\n}\n}",
        "Type": "Demos.Components.Modal.demo.DropdownInModal",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Dropdown",
    "Type": "Navigation",
    "Desc": "<p>A dropdown list.</p>\n<h2>When To Use</h2>\n<p>When there are more than a few options to choose from, you can wrap them in a <code>Dropdown</code>. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/eedWN59yJ/Dropdown.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic dropdown menu.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Components.Dropdown.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "overlay-visible",
        "Title": "The way of hiding menu.",
        "Description": "<p>The default is to close the menu when you click on menu items, this feature can be turned off.</p>\n",
        "Code": "<Dropdown @ref=\"@_dropdown\">\n    <Overlay>\n        <Menu OnMenuItemClicked=\"HandleMenuClick\" AutoCloseDropdown=\"@false\">\n            <MenuItem Id=\"1\">Clicking me will not close the menu.</MenuItem>\n            <MenuItem Id=\"2\">Clicking me will not close the menu also.</MenuItem>\n            <MenuItem Id=\"3\">Clicking me will close the menu.</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private Dropdown _dropdown;\n\n    private async void HandleMenuClick(MenuItem item)\n    {\n        if (item.Id == \"3\")\n        {\n           await _dropdown.Close();\n        }\n    }\n}",
        "Type": "Demos.Components.Dropdown.demo.OverlayVisible",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "context-menu",
        "Title": "Context Menu TODO",
        "Description": "<p>The default trigger mode is <code>hover</code>, you can change it to <code>contextMenu</code>.</p>\n",
        "Code": "<Dropdown Trigger=\"new TriggerType[] { TriggerType.ContextMenu }\">\n    <Overlay>\n        <Menu>\n            <MenuItem>1st menu item</MenuItem>\n            <MenuItem>2nd menu item</MenuItem>\n            <MenuItem>3rd menu item</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <div style=\"text-align: center; width: 200px; height: 200px; line-height: 200px;background: #f7f7f7;color: #777;\">\n            Right Click on here (TODO)\n        </div>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Components.Dropdown.demo.ContextMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "trigger",
        "Title": "Trigger mode",
        "Description": "<p>The default trigger mode is <code>hover</code>, you can change it to <code>click</code>.</p>\n",
        "Code": "<Dropdown Trigger=\"@(new TriggerType[] { TriggerType.Click })\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Click me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Components.Dropdown.demo.Trigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "sub-menu",
        "Title": "Cascading menu",
        "Description": "<p>The menu has multiple levels.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItemGroup Title=@(\"Group title\")>\n                <MenuItem>1st menu item</MenuItem>\n                <MenuItem>2nd menu item</MenuItem>\n            </MenuItemGroup>\n            <SubMenu Title=@(\"sub menu\")>\n                <MenuItem>3rd menu item</MenuItem>\n                <MenuItem>4th menu item</MenuItem>\n            </SubMenu>\n            <SubMenu Title=@(\"disabled sub menu\") Disabled>\n                <MenuItem>5d menu item</MenuItem>\n                <MenuItem>6th menu item</MenuItem>\n            </SubMenu>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Cascading menu <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Components.Dropdown.demo.SubMenuDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>Support 6 placements.</p>\n",
        "Code": "<Dropdown Placement=\"@PlacementType.BottomLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomLeft</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomCenter</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomRight</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopLeft</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopCenter</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopRight</Button>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n}",
        "Type": "Demos.Components.Dropdown.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "dropdown-button",
        "Title": "Button with dropdown menu",
        "Description": "<p>A button is on the left, and a related functional menu is on the right. You can set the icon property to modify the icon of right.</p>\n",
        "Code": "<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }'>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton Icon=\"user\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }' Disabled=\"@true\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton ButtonsRender=\"ButtonsRender\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        TODO: With ToolTip\n    </ChildContent>\n</DropdownButton>\n<Dropdown>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>Button <Icon Type=\"down\" /></Button>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n\n    \n    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)\n    {\n        return @<Template>\n            <span>@leftButton</span>@rightButton\n        </Template>;\n    }\n}",
        "Type": "Demos.Components.Dropdown.demo.DropdownButtonDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "event",
        "Title": "Click event",
        "Description": "<p>An event will be triggered when you click menu items, in which you can make different operations according to item's key.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"1\">1st menu item</MenuItem>\n            <MenuItem @key=\"2\">2nd memu item</MenuItem>\n            <MenuItem @key=\"3\">3rd menu item</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me, Click menu item <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Components.Dropdown.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 20,
        "Name": "popup-container",
        "Title": "fix popup container",
        "Description": "<p>Fix popup container.</p>\n",
        "Code": "<div style=\"margin: 10px; overflow: scroll; height: 200px\">\n    <div style=\"padding: 100px; height: 1000px; background: #eee; position: relative \" id=\"area\">\n        <Dropdown PopupContainerSelector=\"#area\" Placement=\"@PlacementType.BottomLeft\">\n            <Overlay>\n                @_overlayMenu\n            </Overlay>\n            <ChildContent>\n                <Button>BottomLeft</Button>\n            </ChildContent>\n        </Dropdown>\n        <Dropdown PopupContainerSelector=\"#area\" Placement=\"@PlacementType.BottomCenter\">\n            <Overlay>\n                @_overlayMenu\n            </Overlay>\n            <ChildContent>\n                <Button>BottomCenter</Button>\n            </ChildContent>\n        </Dropdown>\n        <Dropdown PopupContainerSelector=\"#area\" Placement=\"@PlacementType.BottomRight\">\n            <Overlay>\n                @_overlayMenu\n            </Overlay>\n            <ChildContent>\n                <Button>BottomRight</Button>\n            </ChildContent>\n        </Dropdown>\n        <Dropdown PopupContainerSelector=\"#area\" Placement=\"@PlacementType.TopLeft\">\n            <Overlay>\n                @_overlayMenu\n            </Overlay>\n            <ChildContent>\n                <Button>TopLeft</Button>\n            </ChildContent>\n        </Dropdown>\n        <Dropdown PopupContainerSelector=\"#area\" Placement=\"@PlacementType.TopCenter\">\n            <Overlay>\n                @_overlayMenu\n            </Overlay>\n            <ChildContent>\n                <Button>TopCenter</Button>\n            </ChildContent>\n        </Dropdown>\n        <Dropdown PopupContainerSelector=\"#area\" Placement=\"@PlacementType.TopRight\">\n            <Overlay>\n                @_overlayMenu\n            </Overlay>\n            <ChildContent>\n                <Button>TopRight</Button>\n            </ChildContent>\n        </Dropdown>\n    </div>\n</div>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n}",
        "Type": "Demos.Components.Dropdown.demo.PopupContainer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "item",
        "Title": "Other elements",
        "Description": "<p>Divider and disabled menu item.</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"0\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem @key=\"1\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            --- TODO: Need MenuDivider ---\n            <MenuItem @key=\"3\" disabled>\n                3rd menu item（disabled）\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Components.Dropdown.demo.Item",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Space",
    "Type": "Layout",
    "Desc": "<p>Set components spacing.</p>\n<h2>When To Use</h2>\n<p>Avoid components clinging together and set a unified space.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/space#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>space size</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>space direction</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/wc6%263gJ0Y8/Space.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "vertical",
        "Title": "Vertical Space",
        "Description": "<p>Crowded components vertical spacing.</p>\n<p>Can set <code>width: 100%</code> fill a row.</p>\n",
        "Code": "<Space Direction=\"vertical\">\n    <SpaceItem>\n        <Card Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </Card>\n    </SpaceItem>\n    <SpaceItem>\n        <Card Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </Card>\n    </SpaceItem>\n</Space>",
        "Type": "Demos.Components.Space.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "debug",
        "Title": "Diverse Child",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<h3>Debug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Space.demo.Debug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 0,
        "Name": "base",
        "Title": "Basic Usage",
        "Description": "<p>Crowded components horizontal spacing.</p>\n",
        "Code": "<Space>\n    <SpaceItem>\n        Space\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"primary\">Button</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>\n            <Icon Type=\"upload\" Theme=\"outline\" /> Click to Upload\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Confirm</Button>\n    </SpaceItem>\n</Space>\n",
        "Type": "Demos.Components.Space.demo.Base",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customize",
        "Title": "Customize Size",
        "Description": "<p>Custom spacing size.</p>\n",
        "Code": "\n<Slider Type=\"double\" Value=size OnChange=\"v=>setSize(v)\" />\n<br />\n<br />\n<Space Size=\"@($\"{size}\")\">\n    <SpaceItem>\n        <Button Type=\"primary\">Primary</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Default</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"dashed\">Dashed</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"link\">Link</Button>\n    </SpaceItem>\n</Space>\n\n@code{\n    double size = 8;\n\n    void setSize(double value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}",
        "Type": "Demos.Components.Space.demo.Customize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "Space Size",
        "Description": "<p><code>large</code>, <code>middle</code> and <code>small</code> preset sizes.</p>\n<p>Set the size to <code>large</code> and <code>middle</code> by setting size to large and middle respectively. If <code>size</code> is not set, the spacing is <code>small</code>.</p>\n",
        "Code": "<RadioGroup @bind-Value=@size OnChange=\"e=> setSize(e)\" TValue=\"string\">\n    <Radio Value=\"@(\"small\")\">Small</Radio>\n    <Radio Value=\"@(\"middle\")\">Middle</Radio>\n    <Radio Value=\"@(\"large\")\">Large</Radio>\n</RadioGroup>\n<br />\n<br />\n<Space Size=@size>\n    <SpaceItem>\n        <Button Type=\"primary\">Primary</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Default</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"dashed\">Dashed</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"link\">Link</Button>\n    </SpaceItem>\n</Space>\n\n@code {\n    string size = \"small\";\n    void setSize(string value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}\n",
        "Type": "Demos.Components.Space.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Progress",
    "Type": "Feedback",
    "Desc": "<p>Display the current progress of an operation flow.</p>\n<h2>When To Use</h2>\n<p>If it will take a long time to complete an operation, you can use <code>Progress</code> to show the current progress and status.</p>\n<ul>\n<li>When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.</li>\n<li>When you need to display the completion percentage of an operation.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/progress#API\" class=\"anchor\">#</a></h2>\n<p>Properties that shared by all types.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>to set the type, options: <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>template function of the content</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>to set the completion percentage</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>whether to display the progress value and the status icon</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>to set the status of the Progress, options: <code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(line only)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>to set the style of the progress linecap</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>segmented success percent</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>color of unfilled part</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the progress bar, unit: <code>px</code></td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar, render <code>linear-gradient</code> when passing an object</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>the total step count</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the circular progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the circular progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of circular progress, render <code>linear-gradient</code> when passing an object</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the dashboard progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the dashboard progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>the gap degree of half circle, 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>the gap position, options: <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/xqsDu4ZyR/Progress.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "circle",
        "Title": "Circular progress bar",
        "Description": "<p>A circular progress bar.</p>\n",
        "Code": "<style>\n    .ant-progress-circle-wrap,\n    .ant-progress-line-wrap {\n        margin-right: 8px;\n        margin-bottom: 5px;\n    }\n</style>\n\n<div>\n    <Progress Type=\"ProgressType.Circle\" Percent=75 />\n    <Progress Type=\"ProgressType.Circle\" Percent=70 Status=\"ProgressStatus.Exception\" />\n    <Progress Type=\"ProgressType.Circle\" Percent=100 />\n</div>",
        "Type": "Demos.Components.Progress.demo.Circle",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "linecap",
        "Title": "Square linecaps",
        "Description": "<p>By setting <code>strokeLinecap=&quot;square&quot;</code>, you can change the linecaps from round to square.</p>\n",
        "Code": "<div>\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Circle Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Dashboard Percent=75 />\n</div>",
        "Type": "Demos.Components.Progress.demo.Linecap",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "gradientline",
        "Title": "Custom line gradient",
        "Description": "<p>A package of <code>linear-gradient</code>. It is recommended to only pass two colors.</p>\n",
        "Code": "<div>\n    <Progress StrokeColor=_gradients Percent=99.9 />\n    <Progress StrokeColor=_gradients Percent=99.9 Status=ProgressStatus.Active />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=90 />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=100 />\n</div>\n\n@code{\n    private Dictionary<int, string> _gradients = new Dictionary<int, string>()\n{\n        { 0,\"#108ee9\"},\n        { 100,\"#87d068\"}\n    };\n}",
        "Type": "Demos.Components.Progress.demo.GradientLine",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "segment",
        "Title": "Progress bar with success segment",
        "Description": "<p>A standard progress bar.</p>\n",
        "Code": "<div>\n    <Progress Percent=60 SuccessPercent=30 />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Circle />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Dashboard />\n</div>",
        "Type": "Demos.Components.Progress.demo.Segment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "format",
        "Title": "Custom text format",
        "Description": "<p>You can set a custom text by setting the <code>format</code> prop.</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Format=_fortmat1 />\n    <Progress Type=ProgressType.Circle Percent=100 Format=_fortmat2 />\n\n</div>\n\n@code{\n    private Func<double, string> _fortmat1 = (p) => $\"{p} Days\";\n    private Func<double, string> _fortmat2 = (p) => \"Done\";\n}",
        "Type": "Demos.Components.Progress.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "circledynamic",
        "Title": "Dynamic circular progress bar",
        "Description": "<p>A dynamic progress bar is better.</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent Type=ProgressType.Circle />\n    <ButtonGroup>\n        <Button OnClick=Decline Icon=Minus />\n        <Button OnClick=Increase Icon=Plus />\n    </ButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Components.Progress.demo.CircleDynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "circlemini",
        "Title": "Mini size circular progress bar",
        "Description": "<p>A smaller circular progress bar.</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Size=ProgressSize.Small />\n    <Progress Type=ProgressType.Circle Percent=70 Size=ProgressSize.Small Status=\"ProgressStatus.Exception\" />\n    <Progress Type=ProgressType.Circle Percent=100 Size=ProgressSize.Small />\n</div>",
        "Type": "Demos.Components.Progress.demo.CircleMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "steps",
        "Title": "Progress bar with steps",
        "Description": "<p>A progress bar with steps.</p>\n",
        "Code": "<div>\n    <Progress Percent=50 Steps=3 StrokeColor=_color />\n    <br />\n    <Progress Percent=30 Steps=5 StrokeColor=_color />\n    <br />\n    <Progress Percent=100 Steps=5 Size=ProgressSize.Small StrokeColor=_color />\n</div>\n\n@code{\n    private string _color = \"#1890ff\";\n}",
        "Type": "Demos.Components.Progress.demo.Steps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "dynamic",
        "Title": "Dynamic",
        "Description": "<p>A dynamic progress bar is better.</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent/>\n    <ButtonGroup>\n        <Button OnClick=Decline Icon=Minus />\n        <Button OnClick=Increase Icon=Plus />\n    </ButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Components.Progress.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "line",
        "Title": "Progress bar",
        "Description": "<p>A standard progress bar.</p>\n",
        "Code": "<div>\n    <Progress Percent=30 />\n    <Progress Percent=50 Status=\"@ProgressStatus.Active\" />\n    <Progress Percent=70 Status=\"@ProgressStatus.Exception\" />\n    <Progress Percent=100 />\n    <Progress Percent=50 ShowInfo=\"false\" />\n</div>",
        "Type": "Demos.Components.Progress.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "linemini",
        "Title": "Mini size progress bar",
        "Description": "<p>Appropriate for a narrow area.</p>\n",
        "Code": "<div style=\"width: 170px;\">\n    <Progress Percent=\"30\" Size=\"@ProgressSize.Small\" />\n    <Progress Percent=\"50\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Active\" />\n    <Progress Percent=\"70\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Exception\" />\n    <Progress Percent=\"100\" Size=\"@ProgressSize.Small\" />\n</div>",
        "Type": "Demos.Components.Progress.demo.LineMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "dashboard",
        "Title": "Dashboard",
        "Description": "<p>By setting <code>type=dashboard</code>, you can get a dashboard style of progress easily.</p>\n",
        "Code": "<Progress Type=ProgressType.Dashboard Percent=75 />\n<Progress Type=\"ProgressType.Dashboard\" Percent=75 GapDegree=30 />",
        "Type": "Demos.Components.Progress.demo.Dashboard",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "AutoComplete",
    "Type": "Data Entry",
    "Desc": "<p>Autocomplete function of input field.</p>\n<h2>When To Use</h2>\n<p>When there is a need for autocomplete functionality.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/autocomplete#API\" class=\"anchor\">#</a></h2>\n<h3>AutoComplete</h3>\n<table>\n<thead>\n<tr>\n<th>����</th>\n<th>˵��</th>\n<th>����</th>\n<th>Ĭ��ֵ</th>\n<th>�汾</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Backfill</code></td>\n<td>backfill selected item the input when using keyboard</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>DataSource</code></td>\n<td>Data source for autocomplete</td>\n<td><code>AutocompleteDataSource</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td><code>DefaultActiveFirstOption</code></td>\n<td>Whether active first option by default</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>Width</code></td>\n<td>Custom width, unit px</td>\n<td><code>int</code></td>\n<td>����Ԫ�ؿ���</td>\n<td></td>\n</tr>\n<tr>\n<td><code>OverlayClassName</code></td>\n<td>Class name of the dropdown root element</td>\n<td><code>string</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td><code>OverlayStyle</code></td>\n<td>Style of the dropdown root element</td>\n<td><code>object</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td><code>CompareWith</code></td>\n<td><code>(o1: object, o2: object) =&gt; bool</code></td>\n<td><code>(o1: object, o2: object) =&gt; o1===o2</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>AutoCompleteOption</h3>\n<table>\n<thead>\n<tr>\n<th>����</th>\n<th>˵��</th>\n<th>����</th>\n<th>Ĭ��ֵ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Value</code></td>\n<td>bind ngModel of the trigger element</td>\n<td><code>object</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Label</code></td>\n<td>display value of the trigger element</td>\n<td><code>string</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Disabled</code></td>\n<td>disabled option</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/qtJm4yt45/AutoComplete.svg",
    "DemoList": [
      {
        "Order": 7,
        "Name": "property",
        "Title": "Property",
        "Description": "",
        "Code": "<AutoComplete  @bind-Value=\"@value\" Options=\"@options\" Backfill=\"switchBackfill\" DefaultActiveFirstOption=\"switchDefaultActiveFirstOption\" Width=\"120\"/>\n<Divider Text=\"属性\"></Divider>\n\n<div>\n    <Switch @bind-Value=\"switchBackfill\" />Backfill\n    <br />\n    <Switch @bind-Value=\"switchDefaultActiveFirstOption\" />DefaultActiveFirstOption\n\n</div>\n\n<Divider></Divider>\n<span>bind-Value:@value</span>\n\n\n@code\n{\n    private string value;\n\n    List<AutoCompleteDataItem> options = new List<AutoCompleteDataItem>() {\n        new AutoCompleteDataItem(\"Burns Bay Road\",\"Burns Bay Road\"),\n        new AutoCompleteDataItem(\"Downing Street\",\"Downing Street\"){ IsDisabled=true },\n        new AutoCompleteDataItem(\"Wall Street\",\"Wall Street\")\n        };\n\n    bool switchBackfill { get; set; } = false;\n\n    bool switchDefaultActiveFirstOption { get; set; } = true;\n\n}",
        "Type": "Demos.Components.AutoComplete.demo.Property",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic Usage, set data source of autocomplete with DataSource property.</p>\n",
        "Code": "<AutoComplete @bind-Value=\"@value\" Options=\"@options\" OnInput=\"OnInput\" OnSelectionChange=\"OnSelectionChange\" OnActiveChange=\"OnActiveChange\"/>\n<Divider></Divider>\n<span>bind-Value:@value</span>\n<br />\n<span>SelectedValue:@selectItem?.Value</span>\n<br />\n<span>ActiveValue:@activeItem?.Value</span>\n\n@code\n{\n    private string value;\n\n    List<string> options = new List<string>();\n\n\n    void OnInput(ChangeEventArgs e)\n    {\n        var v = e.Value.ToString();\n        if (string.IsNullOrWhiteSpace(v))\n            options = new List<string>();\n        else\n            options = new List<string>()\n{\n                v, v + \"1\", v + \"2\"\n            };\n    }\n\n    private AutoCompleteOption selectItem;\n\n    void OnSelectionChange(AutoCompleteOption item)\n    {\n        selectItem = item;\n    }\n\n    private AutoCompleteOption activeItem;\n\n    void OnActiveChange(AutoCompleteOption item)\n    {\n        activeItem = item;\n    }\n}",
        "Type": "Demos.Components.AutoComplete.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "options",
        "Title": "Customized",
        "Description": "",
        "Code": "<div>\n    <AutoComplete @bind-Value=\"@value\" Options=\"@options\" OnInput=\"OnInput\"/>\n</div>\n<Divider></Divider>\n<span>bind-Value:@value</span>\n\n@code\n{\n    private string value;\n\n    List<string> options = new List<string>();\n\n\n    void OnInput(ChangeEventArgs e)\n    {\n        var value = e.Value?.ToString() ?? \"\";\n        if (string.IsNullOrWhiteSpace(value) || value.IndexOf(\"@\") >= 0)\n        {\n            this.options = new List<string>();\n        }\n        else\n        {\n            this.options = new List<string>() { \"gmail.com\", \"163.com\", \"qq.com\" }.Select(x => $\"{value}@{x}\").ToList();\n        }\n    }\n}",
        "Type": "Demos.Components.AutoComplete.demo.Options",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "custom",
        "Title": "Customize Input Component",
        "Description": "<p>Customize Input Component</p>\n",
        "Code": "\n<div>Input</div>\n<AutoComplete Options=\"@options\" OnInput=\"OnInput\">\n    <AutoCompleteInput Placeholder=\"input here\" @bind-Value=\"@value\" />\n</AutoComplete>\n<div>Search</div>\n<AutoComplete Options=\"@options\" OnInput=\"OnInput\">\n    <AutoCompleteSearch Placeholder=\"input here\" @bind-Value=\"@value\" />\n</AutoComplete>\n\n<Divider></Divider>\n<span>bind-Value:@value</span>\n\n\n@code\n{\n    private string value;\n\n    List<string> options = new List<string>();\n\n    void OnInput(ChangeEventArgs e)\n    {\n        var v = e.Value.ToString();\n        if (string.IsNullOrWhiteSpace(v))\n            options = new List<string>();\n        else\n            options = new List<string>()\n{\n                v, v + \"1\", v + \"2\"\n            };\n    }\n    void AAAA(KeyboardEventArgs e)\n    {\n        Console.WriteLine(e.Key);\n    }\n}\n",
        "Type": "Demos.Components.AutoComplete.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "ObjectValue",
        "Title": "Use option with object type",
        "Description": "<p>Use <code>compareWith</code> when the <code>Value</code> type is <code>object</code>.</p>\n",
        "Code": "<AutoComplete @bind-Value=\"@value\" CompareWith=\"CompareWith\" OnSelectionChange=\"OnSelectionChange\">\n    <AutoCompleteOptions>\n        @foreach (var option in options)\n        {\n            <AutoCompleteOption Value=\"@option\" Label=\"@option.label\">\n            </AutoCompleteOption>\n        }\n    </AutoCompleteOptions>\n\n</AutoComplete>\n<Divider></Divider>\n<span>bind-Value:@value</span>\n<br />\n<span>SelectedValue:@(System.Text.Json.JsonSerializer.Serialize(selectItem?.Value))</span>\n\n\n\n@code\n{\n    private string value;\n\n    ObjectValueOption inputValue = new ObjectValueOption() { label = \"Lucy\", value = \"lucy\", age = 20 };\n    ObjectValueOption[] options = new ObjectValueOption[] {\n                                    new ObjectValueOption()   { label= \"Lucy\", value= \"lucy\", age= 20 },\n                                    new ObjectValueOption()  { label= \"Jack\", value= \"jack\", age= 22 },\n                                    };\n\n\n    Func<object, object, bool> CompareWith = (a, b) =>\n    {\n        if (a is ObjectValueOption o1 && b is ObjectValueOption o2)\n        {\n            return o1.value == o2.value;\n        }\n        else\n        {\n            return false;\n        }\n    };\n\n    private AutoCompleteOption selectItem;\n\n    void OnSelectionChange(AutoCompleteOption item)\n    {\n        selectItem = item;\n    }\n\n    public class ObjectValueOption\n    {\n        public string label { get; set; }\n        public string value { get; set; }\n        public int age { get; set; }\n\n    }\n}",
        "Type": "Demos.Components.AutoComplete.demo.ObjectValue",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "non-case-sensitive",
        "Title": "Non-case-sensitive AutoComplete",
        "Description": "<p>A non-case-sensitive AutoComplete</p>\n",
        "Code": "<span>DataSource</span>\n<AutoComplete @bind-Value=\"@value\" Options=\"@options\" FilterOption=\"@(option=>option.Label.Contains(value??\"\",StringComparison.InvariantCultureIgnoreCase))\"/>\n<span>AutoCompleteOptions</span>\n<AutoComplete>\n    <ChildContent>\n        <AutoCompleteInput @bind-Value=\"@value\" Placeholder=\"try to type 'b'\" />\n    </ChildContent>\n    <AutoCompleteOptions>\n        @foreach (var option in options.Where(x=>x.Contains(value ?? \"\", StringComparison.InvariantCultureIgnoreCase)))\n        {\n            <AutoCompleteOption Value=\"option\"></AutoCompleteOption>\n        }\n    </AutoCompleteOptions>\n</AutoComplete>\n\n<Divider></Divider>\n<span>bind-Value:@value</span>\n\n@code\n{\n    private string value;\n\n    private List<string> options = new List<string>() { \"Burns Bay Road\", \"Downing Street\", \"Wall Street\" };\n}",
        "Type": "Demos.Components.AutoComplete.demo.NonCaseSensitive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "uncertain-category",
        "Title": "Lookup-Patterns - Uncertain Category",
        "Description": "<p>Demonstration of <a href=\"https://ant.design/docs/spec/reaction#Lookup-Patterns\">Lookup Patterns: Uncertain Category</a>.</p>\n",
        "Code": "<AutoComplete OnInput=\"OnInput\">\n    <ChildContent>\n        <AutoCompleteSearch Placeholder=\"input here\" @bind-Value=\"@value\" />\n    </ChildContent>\n    <AutoCompleteOptions>\n        @foreach (var option in options)\n        {\n            <AutoCompleteOption Style=\"display: flex;\" Value=\"@option.category\">\n                Found @option.value on\n                <a style=\" flex: auto; text-overflow: ellipsis; overflow: hidden;\"\n                   href=\"https://s.taobao.com/search?q=@(option.value)\"\n                   target=\"_blank\"\n                   rel=\"noopener noreferrer\">\n                    @option.category\n                </a>\n                <span style=\"flex: none;\">@option.count results</span>\n            </AutoCompleteOption>\n        }\n    </AutoCompleteOptions>\n</AutoComplete>\n\n@code{\n    private string value;\n\n    List<UncertainCategoryOption> options = new List<UncertainCategoryOption>();\n\n\n    void OnInput(ChangeEventArgs e)\n    {\n        var v = e.Value.ToString();\n\n        var r = new Random();\n        var i = 0;\n        this.options = new int[7].Select(x => new UncertainCategoryOption()\n        {\n            value = v,\n            category = $\"{v}{i++}\",\n            count = r.Next(100, 200),\n        }).ToList();\n    }\n\n    public class UncertainCategoryOption\n    {\n        public string value { get; set; }\n\n        public string category { get; set; }\n        public int count { get; set; }\n    }\n}",
        "Type": "Demos.Components.AutoComplete.demo.UncertainCategory",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 30,
        "Name": "popup-container",
        "Title": "fix popup container",
        "Description": "<p>Fix popup container.</p>\n",
        "Code": "<div style=\"margin: 10px; overflow: scroll; height: 200px\">\n    <div style=\"padding: 100px; height: 1000px; background: #eee; position: relative \" id=\"area\">\n        <AutoComplete PopupContainerSelector=\"#area\"\n                      @bind-Value=\"@value\" \n                      Options=\"@options\" \n                      OnInput=\"OnInput\" \n                      OnSelectionChange=\"OnSelectionChange\" \n                      OnActiveChange=\"OnActiveChange\" />\n    </div>\n</div>\n\n@code\n{\n    private string value;\n\n    List<string> options = new List<string>();\n\n\n    void OnInput(ChangeEventArgs e)\n    {\n        var v = e.Value.ToString();\n        if (string.IsNullOrWhiteSpace(v))\n            options = new List<string>();\n        else\n            options = new List<string>()\n            {\n                v, v + \"1\", v + \"2\"\n            };\n    }\n\n    private AutoCompleteOption selectItem;\n\n    void OnSelectionChange(AutoCompleteOption item)\n    {\n        selectItem = item;\n    }\n\n    private AutoCompleteOption activeItem;\n\n    void OnActiveChange(AutoCompleteOption item)\n    {\n        activeItem = item;\n    }\n}",
        "Type": "Demos.Components.AutoComplete.demo.PopupContainer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "certain-category",
        "Title": "Lookup-Patterns - Certain Category",
        "Description": "<p>Demonstration of <a href=\"https://ant.design/docs/spec/reaction#Lookup-Patterns\">Lookup Patterns: Certain Category</a>. Basic Usage, set options of autocomplete with <code>options</code> property.</p>\n",
        "Code": "\n<AutoComplete>\n    <ChildContent>\n        <AutoCompleteSearch Placeholder=\"input here\" @bind-Value=\"@value\" />\n    </ChildContent>\n\n    <AutoCompleteOptions>\n        @foreach (var group in optionGroups)\n        {\n            <AutoCompleteOptGroup>\n                <LabelFragment>\n                    <span>\n                        @group.title<a style=\"float: right;\" href=\"https://www.google.com/search?q=ng+zorro\" target=\"_blank\">更多</a>\n                    </span>\n                </LabelFragment>\n                <ChildContent>\n                    @foreach (var option in group.children)\n                    {\n                        <AutoCompleteOption Value=\"@option.title\" Label=\"@option.title\">\n                            @option.title\n                            <span style=\"position: absolute; color: #999; right: 16px;\">@option.count 人 关注</span>\n                        </AutoCompleteOption>\n                    }\n\n                </ChildContent>\n            </AutoCompleteOptGroup>\n        }\n    </AutoCompleteOptions>\n\n</AutoComplete>\n\n@code\n{\n\n    private string value;\n\n    CertainCategoryGroup[] optionGroups = new CertainCategoryGroup[] {\n    new CertainCategoryGroup() {\n        title= \"话题\",\n        children=new CertainCategoryOption[]{\n            new CertainCategoryOption() {\n                title= \"Ant Design\",\n                count= 10000\n            },\n            new CertainCategoryOption()  {\n                title= \"Ant Design Blazor\",\n                count= 10600\n            }\n        },\n    },\n    new CertainCategoryGroup() {\n        title= \"问题\",\n        children= new CertainCategoryOption[]{\n            new CertainCategoryOption()   {\n                title= \"Ant Design Blazor 有多好\",\n                count= 60100\n            },\n            new CertainCategoryOption()     {\n                title= \"Ant Design 是啥\",\n                count= 30010\n            }\n\n        },\n    },\n    new CertainCategoryGroup() {\n        title = \"文章\",\n        children =new CertainCategoryOption[]{\n            new CertainCategoryOption()   {\n                title = \"Ant Design 是一个设计语言\",\n                count = 100000\n            }\n        }\n    }\n};\n\n\n    public class CertainCategoryGroup\n    {\n        public string title { get; set; }\n\n        public CertainCategoryOption[] children { get; set; }\n\n    }\n\n    public class CertainCategoryOption\n    {\n        public string title { get; set; }\n        public int count { get; set; }\n    }\n\n}\n",
        "Type": "Demos.Components.AutoComplete.demo.CertainCategory",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Breadcrumb",
    "Type": "Navigation",
    "Desc": "<p>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When the system has more than two layers in a hierarchy.</li>\n<li>When you need to inform the user of where they are.</li>\n<li>When the user may need to navigate back to a higher level.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/breadcrumb#API\" class=\"anchor\">#</a></h2>\n<p>Breadcrumb</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ItemRender</td>\n<td>Custom item renderer</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Params</td>\n<td>Routing parameters</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Routes</td>\n<td>The routing stack information of router</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Separator</td>\n<td>Custom separator</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>BreadcrumbItem</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Href</td>\n<td>Target of hyperlink</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Overlay</td>\n<td>The dropdown menu</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>Set the handler to handle click event</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DropdownProps</td>\n<td>The dropdown props</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/9Ltop8JwH/Breadcrumb.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic Usage",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "<div>\n\t<Breadcrumb>\n        <BreadcrumbItem>\n                Home\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            <a>Application List</a>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            An Application\n        </BreadcrumbItem>\n</Breadcrumb>\n</div>",
        "Type": "Demos.Components.Breadcrumb.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "With",
        "Title": "With an Icon",
        "Description": "<p>The icon should be placed in front of the text.</p>\n",
        "Code": "<div>\n\t<Breadcrumb>\n    <BreadcrumbItem>\n        <Icon Type=\"home\"></Icon>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        <a><Icon Type=\"user\"></Icon><span>Application List</span></a>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        Application\n    </BreadcrumbItem>\n</Breadcrumb>\n</div>",
        "Type": "Demos.Components.Breadcrumb.demo.With",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Integration",
        "Title": "Other Router Integration",
        "Description": "<p>Used together with react-router@4+ or other router.</p>\n",
        "Code": "<div>\n\t<Breadcrumb RouteLabel=\"\">\n    <BreadcrumbItem>\n        Home\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        <a>Application List</a>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        An Application\n    </BreadcrumbItem>\n</Breadcrumb>\n</div>",
        "Type": "Demos.Components.Breadcrumb.demo.Integration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Dropdownmenu",
        "Title": "Bread crumbs with drop down menu",
        "Description": "<p>Breadcrumbs support drop down menu.</p>\n",
        "Code": "<div>\n\t<Breadcrumb Separator=\"/\">\n    <BreadcrumbItem>\n        Ant Design Blazor\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        <a>Component</a>\n    </BreadcrumbItem>\n    <BreadcrumbItem >\n        <Menu Mode=MenuMode.Horizontal>\n            <MenuItem Key=\"mail\">\n                <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n                Navigation One\n            </MenuItem>\n            <MenuItem Key=\"app\" Disabled>\n                <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n                Navigation Two\n            </MenuItem>\n        </Menu>\n    </BreadcrumbItem>\n</Breadcrumb>\n</div>\n\n@code{\n    object abc { get; set; } = new object();\n }\n",
        "Type": "Demos.Components.Breadcrumb.demo.Dropdownmenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Separator",
        "Title": "Configuring the Separator",
        "Description": "<p>The separator can be customized by setting the separator property: separator=&quot;&gt;&quot;</p>\n",
        "Code": "<div>\n    <Breadcrumb Separator=\">\" Style=\"color:red\">  \n        <BreadcrumbItem>\n            Home\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            <a>Application List</a>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            An Application\n        </BreadcrumbItem>\n    </Breadcrumb>\n</div>",
        "Type": "Demos.Components.Breadcrumb.demo.Separator",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Input",
    "Type": "Data Entry",
    "Desc": "<p>A basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A user input in a form field is needed.</li>\n<li>A search input is required.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/input#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AddOnBefore</td>\n<td>The label text displayed before (on the left side of) the input field.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AddOnAfter</td>\n<td>The label text displayed after (on the right side of) the input field.</td>\n<td>RenderFragment</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Child content</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>The size of the input box. Note: in the context of a form, the <code>large</code> size is used. Available: <code>large</code> <code>default</code> <code>small</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>提供可描述输入字段预期值的提示信息</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>The initial input content</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>MaxLength</td>\n<td>max length</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether the input is disabled.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AllowClear</td>\n<td>allow to remove input content with clear icon</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Prefix</td>\n<td>The prefix icon for the Input.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Suffix</td>\n<td>The suffix icon for the Input.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>The type of input, see: MDN(use <code>Input.TextArea</code> instead of type=<code>textarea</code>)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>callback when the content is change</td>\n<td>function(e)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>OnPressEnter</td>\n<td>The callback function that is triggered when Enter key is pressed.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnInput</td>\n<td>callback when user input</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/xS9YEJhfe/Input.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic Usage",
        "Description": "<p>Basic usage example.</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"Basic usage\" Value=\"@txtValue\"  />\n    <br />\n    <br />\n    <Text>@txtValue</Text>\n</div>\n@code{\n    string txtValue { get; set; }\n}\n",
        "Type": "Demos.Components.Input.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "Generic",
        "Title": "Generic",
        "Description": "<p>Generic usage example.</p>\n",
        "Code": "<div>\n    <Text>string</Text>\n    <Input @bind-Value=\"@_str\" />\n    <p>value:@_str</p>\n    <br />\n\n    <Text>int</Text>\n    <Input @bind-Value=\"@_int\" />\n    <p>value:@_int</p>\n    <br />\n\n    <Text>int?</Text>\n    <Input Placeholder=\"Null\" @bind-Value=\"@_intNull\" />\n    <p>value:@_intNull</p>\n    <br />\n\n    <Text>decimal</Text>\n    <Input @bind-Value=\"@_dec\" />\n    <p>value:@_dec</p>\n    <br />\n\n    <Text>decimal?</Text>\n    <Input Placeholder=\"Null \" @bind-Value=\"@_decNull\" />\n    <p>value:@_decNull</p>\n    <br />\n\n    <Text>double</Text>\n    <Input @bind-Value=\"@_double\" />\n    <p>value:@_double</p>\n    <br />\n\n    <Text>double?</Text>\n    <Input Placeholder=\"Null \" @bind-Value=\"@_doubleNull\" />\n    <p>value:@_doubleNull</p>\n    <br />\n\n    <Text>DateTime</Text>\n    <Input @bind-Value=\"@_date\" />\n    <p>value:@_date</p>\n    <br />\n\n    <Text>DateTime?</Text>\n    <Input Placeholder=\"Null\" @bind-Value=\"@_dateNull\" />\n    <p>value:@_dateNull</p>\n</div>\n@code{\n    string _str;\n    int _int;\n    int? _intNull;\n    decimal _dec;\n    decimal? _decNull;\n    double _double;\n    double? _doubleNull;\n    DateTime _date;\n    DateTime? _dateNull;\n}\n",
        "Type": "Demos.Components.Input.demo.Generic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Clear",
        "Title": "With clear icon",
        "Description": "<p>Input box with the remove icon, click the icon to delete everything.</p>\n",
        "Code": "<div>    \n    <Input Placeholder=\"input with clear icon\" AllowClear=\"true\" OnChange=\"onChange\" TValue=\"string\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"textarea with clear icon\"  AllowClear=\"true\" OnChange=\"onChange\" />\n</div>\n@code{\n\n    private void onChange(string value)\n    {\n        Console.WriteLine(\"onChange =>\" + value);\n    }\n}",
        "Type": "Demos.Components.Input.demo.Clear",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Password",
        "Title": "Password box",
        "Description": "<p>Input type of password.</p>\n",
        "Code": "<div>\n<InputPassword @bind-Value=\"@txtValue\" Placeholder=\"large Password\" Size=\"@InputSize.Large\" OnPressEnter=\"(e)=>Submit(e)\" />\n</div>\n@code{\n    private string txtValue { get; set; }\n\n    private void Submit(KeyboardEventArgs args)\n    {\n        Console.WriteLine($\"password: {txtValue}\");\n    }\n}\n",
        "Type": "Demos.Components.Input.demo.Password",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Group",
        "Title": "Input Group",
        "Description": "<p>Input.Group example Note: You don't need Col to control the width in the compact mode.</p>\n",
        "Code": "<div>\n    <InputGroup Size=\"@InputSize.Large\">\n        <Row Gutter=\"8\">\n            <Col Span=\"5\">\n            <Input DefaultValue=\"@(\"0571\")\" @bind-Value=\"code\" />\n            </Col>\n            <Col Span=\"8\">\n            <Input DefaultValue=\"@(\"26888888\")\" @bind-Value=\"phonenumber\" />\n            </Col>\n        </Row>\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"@(\"0571\")\" Style=\"width: 20%;\" @bind-Value=\"code\" />\n        <Input DefaultValue=\"@(\"26888888\")\" Style=\"width: 30%;\" @bind-Value=\"phonenumber\" />\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"@(\"0571\")\" Style=\"width: 20%;\" @bind-Value=\"code\" />\n        <Search DefaultValue=\"26888888\" Style=\"width: 30%;\" @bind-Value=\"phonenumber\" />\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"@(\"0571\")\" Style=\"width: 20%;\" />\n        <DatePicker TValue=\"DateTime?\" Size=\"@DatePickerSize.Small\" Style=\"width: 100%\"></DatePicker>\n    </InputGroup>\n</div>\n\n\n@code{\n    private string code { get; set; }\n    private string phonenumber { get; set; }\n}\n",
        "Type": "Demos.Components.Input.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Search",
        "Title": "Search box with loading",
        "Description": "<p>Search loading when onSearch.</p>\n",
        "Code": "<div>\n    <Search Placeholder=\"input search text\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" OnPressEnter=\"OnSearch\"  />\n    <br />\n    <br />\n    <Search Placeholder=\"input search text\" OnChange=\"(e)=>Handle(e)\" EnterButton=\"true\" @bind-Value=\"@txtValue\" />\n    <br />\n    <br />\n    <Search Placeholder=\"input search text\" Size=\"@InputSize.Large\" EnterButton=\"@(\"Search\")\" @bind-Value=\"@txtValue\" OnSearch=\"OnSearch\"/>\n</div>\n\n@inject MessageService message;\n\n@code{\n\n    private string txtValue { get; set; }\n\n    private void Handle(string value)\n    {\n        Console.WriteLine(value);\n    }\n\n    public async Task OnSearch()\n    {\n        await message.Loading($\"searching {txtValue}\", 2);\n    }\n\n}\n\n",
        "Type": "Demos.Components.Input.demo.Search_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Addon",
        "Title": "Pre / Post tab",
        "Description": "<p>Using pre &amp; post tabs example.</p>\n",
        "Code": "<div>\n    <AntDesign.Input DefaultValue=\"@(\"mysite\")\"  >\n        <AddOnBefore>https://</AddOnBefore>\n        <AddOnAfter>.com</AddOnAfter>\n    </AntDesign.Input>    \n    <br />\n    <br />\n    <AntDesign.Input DefaultValue=\"@(\"mysite\")\"  >\n        <AddOnAfter><Icon Type=\"setting\"></Icon></AddOnAfter>\n    </AntDesign.Input>\n    <br />\n    <br />\n    <AntDesign.Input DefaultValue=\"@(\"mysite\")\" >\n        <AddOnBefore>https://</AddOnBefore>\n    </AntDesign.Input>\n\n</div>\n",
        "Type": "Demos.Components.Input.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Size",
        "Title": "Three size of input",
        "Description": "<p>There are three sizes of an Input box: large (40px), default (32px) and small (24px).</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"large size\"  Size=\"@InputSize.Large\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"default size\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"small size\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n\n</div>\n@code{\n    private string txtValue { get; set; }\n  \n}",
        "Type": "Demos.Components.Input.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Area",
        "Title": "Autosizing the height to fit the content",
        "Description": "<p>autoSize prop for a textarea type of Input makes the height to automatically adjust based on the content. An options object can be provided to autoSize to specify the minimum and maximum number of lines the textarea will automatically adjust.\nautosize is deprecated after 1.5.0, please use autoSize.</p>\n",
        "Code": "@using AntDesign;\n\n<div>\n    <TextArea Placeholder=\"Autosize height based on content lines\" AutoSize=\"true\" OnResize=\"OnResize\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"2\" MaxRows=\"6\" OnResize=\"OnResize\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"3\" MaxRows=\"5\" OnResize=\"OnResize\" @bind-Value=\"@txtValue\"/>\n</div>\n\n@code{\n    string txtValue { get; set; }\n\n    private void OnResize(OnResizeEventArgs args)\n    {\n        Console.WriteLine($\"OnResizeEvent width:{args.Width},height:{args.Height}\");\n    }\n}\n",
        "Type": "Demos.Components.Input.demo.Area",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Prefix",
        "Title": "prefix and suffix",
        "Description": "<p>Add prefix or suffix icons inside input.</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"Prefix and Suffix\" DefaultValue=\"@(\"123\")\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"default size\" @bind-Value=\"@txtValue\">\n    <Prefix> ￥ </Prefix>\n    <Suffix>RMB </Suffix>\n    </Input>\n</div>\n\n@code {\n    private string txtValue { get; set; }\n}\n",
        "Type": "Demos.Components.Input.demo.Prefix",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Pagination",
    "Type": "Navigation",
    "Desc": "<p>A long list can be divided into several pages using <code>Pagination</code>, and only one page will be loaded at a time.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When it will take a long time to load/render all items.</li>\n<li>If you want to browse the data by navigating through pages.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/pagination#API\" class=\"anchor\">#</a></h2>\n<pre><code class=\"language-jsx\">&lt;Pagination onChange={onChange} total={50} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Current</td>\n<td>Current page number</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultCurrent</td>\n<td>Default initial page number</td>\n<td>number</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultPageSize</td>\n<td>Default number of data items per page</td>\n<td>number</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable pagination</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>HideOnSinglePage</td>\n<td>Whether to hide pager on single page</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ItemRender</td>\n<td>To customize item's innerHTML</td>\n<td>(page, type: 'page' | 'prev' | 'next', originalElement) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSize</td>\n<td>Number of data items per page</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSizeOptions</td>\n<td>Specify the sizeChanger options</td>\n<td>string[]</td>\n<td>['10', '20', '50', '100']</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowLessItems</td>\n<td>Show less page items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowQuickJumper</td>\n<td>Determine whether you can jump to pages directly</td>\n<td>boolean | <code>{ goButton: ReactNode }</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSizeChanger</td>\n<td>Determine whether to show <code>pageSize</code> select, it will be <code>true</code> when <code>total&gt;=50</code></td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTitle</td>\n<td>Show page item's title</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTotal</td>\n<td>To display the total number and range</td>\n<td>Function(total, range)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Simple</td>\n<td>Whether to use simple mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Specify the size of <code>Pagination</code>, can be set to <code>small</code>.</td>\n<td>'default' | 'small'.</td>\n<td>&quot;&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>Responsive</td>\n<td>If <code>size</code> is not specified, <code>Pagination</code> would resize according to the width of the window</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Total</td>\n<td>Total number of data items</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Called when the page number is changed, and it takes the resulting page number and pageSize as its arguments</td>\n<td>Function(page, pageSize)</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>OnShowSizeChange</td>\n<td>Called when <code>pageSize</code> is changed</td>\n<td>Function(current, size)</td>\n<td>noop</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/1vqv2bj68/Pagination.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "more",
        "Title": "More",
        "Description": "<p>More pages.</p>\n",
        "Code": "<Pagination DefaultCurrent=\"6\" Total=\"500\" />",
        "Type": "Demos.Components.Pagination.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic pagination.</p>\n",
        "Code": "<Pagination PageIndex=\"1\" Total=\"50\"></Pagination>",
        "Type": "Demos.Components.Pagination.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "jump",
        "Title": "Jumper",
        "Description": "<p>Jump to a page directly.</p>\n",
        "Code": "<div>\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" CurrentChanged=onChange />\n    <br />\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" CurrentChanged=onChange Disabled />\n</div>\n@code{\n\n    void onChange(int pageNumber) {\n        Console.WriteLine($\"Page: {pageNumber}\");\n    }\n\n}\n",
        "Type": "Demos.Components.Pagination.demo.Jump",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "simple",
        "Title": "Simple mode",
        "Description": "<p>Simple mode.</p>\n",
        "Code": "<Pagination Simple DefaultCurrent=\"2\" Total=\"50\" />",
        "Type": "Demos.Components.Pagination.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "itemRender",
        "Title": "Prev and next",
        "Description": "<p>Use text link for prev and next button.</p>\n",
        "Code": "<Pagination Total=\"500\" ItemRender=itemRender />\n\n@code {\n\n    RenderFragment<PaginationItemRenderContext> itemRender = ctx =>\n        @<Template>\n            @if (ctx.Type == \"prev\") {\n                <a>Previous</a>\n            }\n            else if (ctx.Type == \"next\") {\n                <a>Next</a>\n            }\n            else\n            {\n                @ctx.DefaultRender(ctx)\n            }\n        </Template>;\n\n}\n",
        "Type": "Demos.Components.Pagination.demo.ItemRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "mini",
        "Title": "Mini size",
        "Description": "<p>Mini size pagination.</p>\n",
        "Code": "<div>\n    <Pagination Size=\"small\" Total=\"50\" />\n    <Pagination Size=\"small\" Total=\"50\" ShowSizeChanger ShowQuickJumper />\n    <Pagination Size=\"small\" Total=\"50\" ShowTotal=showTotal />\n</div>\n\n@code\n{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Components.Pagination.demo.Mini",
        "Style": "\n#components-pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "controlled",
        "Title": "Controlled",
        "Description": "<p>Controlled page number.</p>\n",
        "Code": "<div>\n    <Pagination Current=\"@current\" CurrentChanged=onChange Total=\"50\" />\n</div>\n\n\n@code {\n\n    int current = 3;\n\n    void onChange(int page)\n    {\n        Console.WriteLine(page);\n        current = page;\n    }\n}\n",
        "Type": "Demos.Components.Pagination.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "total",
        "Title": "Total number",
        "Description": "<p>You can show the total number of data by setting <code>showTotal</code>.</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n    <br />\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal2\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n    Func<PaginationTotalContext, string> showTotal2 =  ctx => $\"{ctx.Range.Item1}-{ctx.Range.Item2} of {ctx.Total} items\";\n}",
        "Type": "Demos.Components.Pagination.demo.Total",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "changer",
        "Title": "Changer",
        "Description": "<p>Change <code>pageSize</code>.</p>\n",
        "Code": "<div>\n    To do\n</div>",
        "Type": "Demos.Components.Pagination.demo.Changer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "all",
        "Title": "Show All",
        "Description": "<p>Show all configured prop.</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowSizeChanger\n        ShowQuickJumper\n        ShowTotal=@showTotal\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Components.Pagination.demo.All",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "PageHeader",
    "Type": "Navigation",
    "Desc": "<p>A header with common actions and design elements built in.</p>\n<h2>When To Use</h2>\n<p>PageHeader can be used to highlight the page topic, display important information about the page, and carry the action items related to the current page (including page-level operations, inter-page navigation, etc.) It can also be used as inter-page navigation.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/pageheader#API\" class=\"anchor\">#</a></h2>\n<h3>PageHeader</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>全局配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Ghost</code></td>\n<td>Make background transparent</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Title</code></td>\n<td>Title string</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Subtitle</code></td>\n<td>subTitle string</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>BackIcon</code></td>\n<td>Custom back icon</td>\n<td><code>bool \\| string \\| RenderFragment</code></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>OnBack</code></td>\n<td>Back icon click event</td>\n<td><code>EventCallback</code></td>\n<td>default Call history.back</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Page Header 组成部分</h3>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PageHeaderTitle</code></td>\n<td>Title section</td>\n</tr>\n<tr>\n<td><code>PageHeaderSubtitle</code></td>\n<td>Subtitle section，<code>Subtitle</code> has high priority</td>\n</tr>\n<tr>\n<td><code>PageHeaderContent</code></td>\n<td>Content section</td>\n</tr>\n<tr>\n<td><code>PageHeaderFooter</code></td>\n<td>Footer section</td>\n</tr>\n<tr>\n<td><code>PageHeaderTags</code></td>\n<td>Tags container after the title</td>\n</tr>\n<tr>\n<td><code>PageHeaderExtra</code></td>\n<td>Operating area, at the end of the line of the title line</td>\n</tr>\n<tr>\n<td><code>PageHeaderBreadcrumb</code></td>\n<td>Breadcrumb section</td>\n</tr>\n<tr>\n<td><code>PageHeaderAvatar</code></td>\n<td>Avatar section</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/6bKE0Cq0R/PageHeader.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "basic",
        "Title": "Basic Page Header",
        "Description": "<p>Standard header, suitable for use in scenarios that require a brief description.</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\" Title=\"@_title\" Subtitle=\"This is a subtitle\" />\n<br />\n<PageHeader Class=\"site-page-header\" Title=\"@_title\" Subtitle=\"Custom `OnBack` callback\" OnBack=\"@(()=> { Console.WriteLine(\"OnBack\");})\" />\n<br />\n<PageHeader Class=\"site-page-header\" Title=\"@_title\" Subtitle=\"Custom Icon\" BackIcon=\"@(\"backward\")\" />\n<br />\n<PageHeader Class=\"site-page-header\" Title=\"@_title\" Subtitle=\"Custom Icon and `OnBack` callback\" BackIconTemplate=\"icon\" OnBack=\"@(()=> { Console.WriteLine(\"OnBack\");})\" />\n@code{\n    private string _title = \"Title\";\n\n    RenderFragment icon =@<Icon Type=\"backward\" />;\n}\n",
        "Type": "Demos.Components.PageHeader.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "actions",
        "Title": "Various forms of PageHeader",
        "Description": "<p>Use the operating area and customize the sub-nodes, suitable for use in the need to display some complex information to help users quickly understand the information and operations of this page.</p>\n",
        "Code": "<PageHeader BackIcon=\"true\" Class=\"site-page-header\">\n    <PageHeaderTitle>Title</PageHeaderTitle>\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n    </PageHeaderExtra>\n    <PageHeaderContent>\n        <Descriptions Size=\"small\" Column=\"3\">\n            <DescriptionsItem Title=\"Created\" Span=\"1\">Lili Qu</DescriptionsItem>\n            <DescriptionsItem Title=\"Association\" Span=\"1\"><a>421421</a></DescriptionsItem>\n            <DescriptionsItem Title=\"Creation Time\" Span=\"1\">2017-01-10</DescriptionsItem>\n            <DescriptionsItem Title=\"Effective Time\" Span=\"1\">2017-10-10</DescriptionsItem>\n            <DescriptionsItem Title=\"Remarks\" Span=\"2\">\n                Gonghu Road, Xihu District, Hangzhou, Zhejiang, China\n            </DescriptionsItem>\n        </Descriptions>\n    </PageHeaderContent>\n</PageHeader>\n<br />\n<PageHeader BackIcon=\"true\">\n    <PageHeaderTitle>Title</PageHeaderTitle>\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n    <PageHeaderTags>\n        <Tag Color=\"blue\">Running</Tag>\n    </PageHeaderTags>\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n    </PageHeaderExtra>\n    <PageHeaderContent>\n        <Row Type=\"flex\">\n            <Statistic Title=\"Status\" Value=@(\"Pending\")></Statistic>\n            <Statistic Title=\"Price\" Value=\"568.08\" Prefix=\"$\" Style=\"margin: 0 32px\"></Statistic>\n            <Statistic Title=\"Balance\" Value=\"3345.08\" Prefix=\"$\"></Statistic>\n        </Row>\n    </PageHeaderContent>\n</PageHeader>",
        "Type": "Demos.Components.PageHeader.demo.Actions",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "ghost",
        "Title": "white background mode",
        "Description": "<p>The default PageHeader is a transparent background. In some cases, PageHeader needs its own background color.</p>\n",
        "Code": "<div class=\"site-page-header-ghost-wrapper\">\n    <PageHeader BackIcon=\"true\" Ghost=\"false\">\n        <PageHeaderTitle>Title</PageHeaderTitle>\n        <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n        <PageHeaderExtra>\n            <Button>Operation</Button>\n            <Button>Operation</Button>\n            <Button Type=\"@ButtonType.Primary\">Primary</Button>\n        </PageHeaderExtra>\n        <PageHeaderContent>\n            <Descriptions Size=\"small\" Column=\"3\">\n                <DescriptionsItem Title=\"Created\" Span=\"1\">Lili Qu</DescriptionsItem>\n                <DescriptionsItem Title=\"Association\" Span=\"1\"><a>421421</a></DescriptionsItem>\n                <DescriptionsItem Title=\"Creation Time\" Span=\"1\">2017-01-10</DescriptionsItem>\n                <DescriptionsItem Title=\"Effective Time\" Span=\"1\">2017-10-10</DescriptionsItem>\n                <DescriptionsItem Title=\"Remarks\" Span=\"2\">\n                    Gonghu Road, Xihu District, Hangzhou, Zhejiang, China\n                </DescriptionsItem>\n            </Descriptions>\n        </PageHeaderContent>\n    </PageHeader>\n</div>",
        "Type": "Demos.Components.PageHeader.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "page-header-breadcrumb",
        "Title": "Use with breadcrumbs",
        "Description": "<p>With breadcrumbs, it is suitable for deeper pages, allowing users to navigate quickly.</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\" Title=\"Title\" Subtitle=\"This is a subtitle\">\n    <PageHeaderBreadcrumb>\n        <Breadcrumb>\n            <BreadcrumbItem>First-level Menu</BreadcrumbItem>\n            <BreadcrumbItem>\n                <a>Second-level Menu</a>\n            </BreadcrumbItem>\n            <BreadcrumbItem>Third-level Menu</BreadcrumbItem>\n        </Breadcrumb>\n    </PageHeaderBreadcrumb>\n</PageHeader>",
        "Type": "Demos.Components.PageHeader.demo.PageHeaderBreadcrumb",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "responsive",
        "Title": "responsive",
        "Description": "<p>Under different screen sizes, there should be different performance</p>\n",
        "Code": "<PageHeader BackIcon=\"true\" Class=\"site-page-header\">\n    <PageHeaderTitle>Title</PageHeaderTitle>\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n    </PageHeaderExtra>\n    <PageHeaderContent>\n        <div class=\"pageheader-content\">\n            <div class=\"pageheader-main\">\n                <Descriptions Size=\"small\" Column=\"2\">\n                    <DescriptionsItem Title=\"Created\" Span=\"1\">Lili Qu</DescriptionsItem>\n                    <DescriptionsItem Title=\"Association\" Span=\"1\"><a>421421</a></DescriptionsItem>\n                    <DescriptionsItem Title=\"Creation Time\" Span=\"1\">2017-01-10</DescriptionsItem>\n                    <DescriptionsItem Title=\"Effective Time\" Span=\"1\">2017-10-10</DescriptionsItem>\n                    <DescriptionsItem Title=\"Remarks\" Span=\"2\">\n                        Gonghu Road, Xihu District, Hangzhou, Zhejiang, China\n                    </DescriptionsItem>\n                </Descriptions>\n            </div>\n            <div class=\"pageheader-extra\">\n                <div>\n                    <Statistic Title=\"Status\" Value=\"@(\"Pending\")\"></Statistic>\n                    <Statistic Title=\"Price\" Value=\"568.08\" Prefix=\"$\" Style=\"margin: 0 32px\"></Statistic>\n                </div>\n            </div>\n        </div>\n    </PageHeaderContent>\n    <PageHeaderFooter>\n        <Tabs DefaultActiveKey=\"1\">\n            <TabPane Key=\"1\">\n                <Tab>Details</Tab>\n            </TabPane>\n            <TabPane Key=\"2\">\n                <Tab>Rule</Tab>\n            </TabPane>\n        </Tabs>\n    </PageHeaderFooter>\n</PageHeader>\n\n<style>\n    .pageheader-content {\n        display: flex;\n    }\n\n    .pageheader-extra div {\n        display: flex;\n        width: max-content;\n        justify-content: flex-end;\n    }\n\n    @@media (max-width: 576px) {\n        .pageheader-content {\n            display: block;\n        }\n\n        .pageheader-main {\n            width: 100%;\n            margin-bottom: 12px;\n        }\n\n        .pageheader-extra {\n            width: 100%;\n            margin-left: 0;\n            text-align: left;\n        }\n    }\n</style>",
        "Type": "Demos.Components.PageHeader.demo.Responsive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "content",
        "Title": "Complete example",
        "Description": "<p>Used all the capabilities provided by PageHeader.</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\">\n    <!--breadcrumb-->\n    <PageHeaderBreadcrumb>\n        <Breadcrumb>\n            <BreadcrumbItem>First-level Menu</BreadcrumbItem>\n            <BreadcrumbItem>\n                <a>Second-level Menu</a>\n            </BreadcrumbItem>\n            <BreadcrumbItem>Third-level Menu</BreadcrumbItem>\n        </Breadcrumb>\n    </PageHeaderBreadcrumb>\n\n    <!--avatar-->\n    <PageHeaderAvatar>\n        <Avatar Src=\"https://avatars0.githubusercontent.com/u/22736418?s=88&v=4\" />\n    </PageHeaderAvatar>\n    <!--title-->\n    <PageHeaderTitle>Title</PageHeaderTitle>\n\n    <!--subtitle-->\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n\n    <!--tags-->\n    <PageHeaderTags>\n        <Tag Color=\"blue\">Running</Tag>\n    </PageHeaderTags>\n\n    <!--extra-->\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n        <Dropdown Placement=\"@PlacementType.BottomRight\">\n            <Overlay>\n                <Menu>\n                    <MenuItem>\n                        1st menu item\n                    </MenuItem>\n                    <MenuItem>\n                        2nd menu item\n                    </MenuItem>\n                    <MenuItem>\n                        3rd menu item\n                    </MenuItem>\n                </Menu>\n            </Overlay>\n            <ChildContent>\n                <Button><Icon Type=\"ellipsis\" /></Button>\n            </ChildContent>\n        </Dropdown>\n    </PageHeaderExtra>\n\n    <!--content-->\n    <PageHeaderContent>\n        <Row>\n            <div class=\"pageheader-content\">\n                <Paragraph>\n                    Ant Design interprets the color system into two levels: a system-level color system and a product-level color system.\n                </Paragraph>\n                <Paragraph>\n                    Ant Design's design team preferred to design with the HSB color model, which makes it easier for designers to have a clear\n                    psychological expectation of color when adjusting colors, as well as facilitate communication in teams.\n                </Paragraph>\n                <div class=\"pageheader-content-link\">\n                    <a> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/MjEImQtenlyueSmVEfUD.svg\" alt=\"start\" />Quick Start </a>\n                    <a> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/NbuDUAuBlIApFuDvWiND.svg\" alt=\"info\" />Product Info </a>\n                    <a> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/ohOEPSYdDTNnyMbGuyLb.svg\" alt=\"doc\" />Product Doc </a>\n                </div>\n            </div>\n            <div class=\"pageheader-content-image\">\n                <img src=\"https://gw.alipayobjects.com/zos/antfincdn/K%24NnlsB%26hz/pageHeader.svg\" alt=\"content\" />\n            </div>\n        </Row>\n    </PageHeaderContent>\n</PageHeader>\n\n<style>\n    .pageheader-content {\n        flex: 1;\n    }\n\n        .pageheader-content p {\n            margin-bottom: 1em;\n        }\n\n    .pageheader-content-link a {\n        margin-right: 16px;\n    }\n\n        .content-link a img {\n            margin-right: 8px;\n        }\n\n    .pageheader-content-image {\n        margin: 0 0 0 60px;\n        display: flex;\n        align-items: center;\n    }\n\n        .pageheader-content-image img {\n            width: 100%;\n        }\n</style>",
        "Type": "Demos.Components.PageHeader.demo.Content",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Typography",
    "Type": "General",
    "Desc": "<p>Basic text writing, including headings, body text, lists, and more.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When need to display a title or paragraph contents in Articles/Blogs/Notes.</li>\n<li>When you need copyable/editable/ellipsis texts.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/typography#API\" class=\"anchor\">#</a></h2>\n<p>Typography.Text</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>Code style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>Config copy. Can set copy text and callback when is an object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Deleted line style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>Editable. Can control edit state when is object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>Display ellipsis when text overflows. Should set width when ellipsis needed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>Marked style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Keyboard  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>Underlined  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when user edits the content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Strong</td>\n<td>Bold style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Content type <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Typography.Title</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>Code style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>Config copy. Can set copy text and callback when is an object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Deleted line style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>Editable. Can control edit state when is object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>Display ellipsis when text overflows. Should set width when ellipsis needed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Level</td>\n<td>Set content importance. Match with <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code></td>\n<td>int</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>Marked style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>Underlined  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when user edits the content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Content type <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Typography.Paragraph</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>Code style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>Config copy. Can set copy text and callback when is an object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Deleted line style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>Editable. Can control edit state when is object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>Display ellipsis when text overflows. Should set width when ellipsis needed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>Marked style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>Underlined  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when user edits the content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Strong</td>\n<td>Bold style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Content type <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/GOM1KQ24O/Typography.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>Display the document sample.</p>\n",
        "Code": "\n<div>\n   <Title Level=\"1\">Introduction</Title>\n        <Paragraph>In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development.</Paragraph>\n        <Paragraph>\n            After massive project practice and summaries, Ant Design, a design language for background applications, is refined by Ant UED Team, which aims to\n            <Text Strong>\n                uniform the user interface specs for internal background projects, lower the unnecessary cost of design differences and implementation and liberate the resources of design and front-end development.\n            </Text>\n        </Paragraph>\n        <Title Level=\"2\">Guildelines and Resources</Title>\n        <Paragraph>\n            We supply a series of design principles, practical patterns and high quality design resources\n            (<Text Code>Sketch</Text> and <Text Code>Axure</Text>), to help people create their product\n            prototypes beautifully and efficiently.\n        </Paragraph>\n        <Paragraph>\n            <ul>\n                <li>\n                    <a href=\"/docs/spec/proximity\">Principles</a>\n                </li>\n                <li>\n                    <a href=\"/docs/pattern/navigation\">Patterns</a>\n                </li>\n                <li>\n                    <a href=\"/docs/resource/download\">Resource Download</a>\n                </li>\n            </ul>\n        </Paragraph>\n\n        <Divider />\n\n        <Title>介绍</Title>\n        <Paragraph>\n            蚂蚁的企业级产品是一个庞大且复杂的体系。这类产品不仅量级巨大且功能复杂，而且变动和并发频繁，常常需要设计与开发能够快速的做出响应。同时这类产品中有存在很多类似的页面以及组件，可以通过抽象得到一些稳定且高复用性的内容。\n        </Paragraph>\n        <Paragraph>\n            随着商业化的趋势，越来越多的企业级产品对更好的用户体验有了进一步的要求。带着这样的一个终极目标，我们（蚂蚁金服体验技术部）经过大量的项目实践和总结，逐步打磨出一个服务于企业级产品的设计体系\n            Ant Design。基于<Text Mark>『确定』和『自然』</Text>\n            的设计价值观，通过模块化的解决方案，降低冗余的生产成本，让设计者专注于\n            <Text Strong>更好的用户体验</Text>。\n        </Paragraph>\n        <Title Level=\"2\">设计资源</Title>\n        <Paragraph>\n            我们提供完善的设计原则、最佳实践和设计资源文件（<Text Code>Sketch</Text> 和\n            <Text Code>Axure</Text>），来帮助业务快速设计出高质量的产品原型。\n        </Paragraph>\n\n        <Paragraph>\n            <ul>\n                <li>\n                    <a href=\"/docs/spec/proximity\">设计原则</a>\n                </li>\n                <li>\n                    <a href=\"/docs/pattern/navigation\">设计模式</a>\n                </li>\n                <li>\n                    <a href=\"/docs/resource/download\">设计资源</a>\n                </li>\n            </ul>\n        </Paragraph>\n\n</div>\n",
        "Type": "Demos.Components.Typography.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Style",
        "Title": "Text and Link Component",
        "Description": "<p>Provides multiple types of text and link.</p>\n",
        "Code": "<div>\n    <Text>Ant Design</Text>\n    <br />\n    <Text Type=\"secondary\">Ant Design</Text>\n    <br />\n    <Text Type=\"success\">Ant Design</Text>\n    <br />\n    <Text Type=\"warning\">Ant Design</Text>\n    <br />\n    <Text Type=\"danger\">Ant Design</Text>\n    <br />\n    <Text Disabled>Ant Design</Text>\n    <br />\n    <Text Mark>Ant Design</Text>\n    <br />\n    <Text Code>Ant Design</Text>\n    <br />\n    <Text Keyboard>Ant Design</Text>\n    <br />\n    <Text Underline>Ant Design</Text>\n    <br />\n    <Text Delete>Ant Design</Text>\n    <br />\n    <Text Strong>Ant Design</Text>\n</div>\n\n",
        "Type": "Demos.Components.Typography.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Interactive",
        "Title": "Interactive",
        "Description": "<p>Provide additional interactive capacity of editable and copyable.</p>\n",
        "Code": "<div>\n\t<Paragraph Copyable>Simple copyable text</Paragraph>\n\t<Paragraph Copyable CopyConfig=\"@selfDefinedText\">Copy a self defiend text</Paragraph>\n\t<Paragraph Copyable CopyConfig=\"@selfDefinedCopy\">在控制台中查看此文本的log</Paragraph>\n\t<Title Copyable>可复制的标题</Title>\n\t<Paragraph >不可复制的段落中穿插着<Text Strong Copyable>可复制的文字</Text>以及其他</Paragraph>\n</div>\n\n\n@code \n{\n    public TypographyCopyableConfig selfDefinedText;\n    public TypographyCopyableConfig selfDefinedCopy;\n\n    protected override void OnInitialized()\n    {\n        selfDefinedText = new TypographyCopyableConfig() { Text = \"Just copied from self defined text\" };\n        selfDefinedCopy = new TypographyCopyableConfig();\n        selfDefinedCopy.OnCopy += () => System.Console.WriteLine(\"Log in console as a self defined copy behavior\");\n        base.OnInitialized();\n    }\n\n}",
        "Type": "Demos.Components.Typography.demo.Interactive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Ellipsis",
        "Title": "Ellipsis",
        "Description": "<p>Multiple line ellipsis support.</p>\n",
        "Code": "<div>\nTo do\n</div>\n\n",
        "Type": "Demos.Components.Typography.demo.Ellipsis",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Level",
        "Title": "Title Component",
        "Description": "<p>Display title in different level.</p>\n",
        "Code": "<div>\n\t<Title Level=\"1\">h1. Ant Design 标题一</Title>\n\t<Title Level=\"2\">h2. Ant Design 标题二</Title>\n\t<Title Level=\"3\">h3. Ant Design 标题三</Title>\n\t<Title Level=\"4\">h4. Ant Design 标题四</Title>\n\n</div>\n\n\n",
        "Type": "Demos.Components.Typography.demo.Level",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Suffix",
        "Title": "suffix",
        "Description": "<p>add suffix ellipsis support.</p>\n",
        "Code": "<div>\nTo do\n</div>\n\n",
        "Type": "Demos.Components.Typography.demo.Suffix",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Drawer",
    "Type": "Feedback",
    "Desc": "<p>A panel which slides in from the edge of the screen.</p>\n<h2>When To Use</h2>\n<p>A Drawer is a panel that is typically overlaid on top of a page and slides in from the side.\nIt contains a set of information or actions.<br />\nSince the user can interact with the Drawer without leaving the current page,\ntasks can be achieved more efficiently within thesame context.</p>\n<ul>\n<li>Use a Form to create or edit a set of information.</li>\n<li>Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task,\nDrawer comes very handy.</li>\n<li>When the same Form is needed in multiple places.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/drawer#API\" class=\"anchor\">#</a></h2>\n<h3>Drawer</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>the title for drawer</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Style of the drawer content part</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is visible on top right of the Drawer dialog or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Subcomponent</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Clicking on the mask (area outside the Drawer) to close the Drawer or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for Drawer's mask element.</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Drawer, option could be <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the container of the Drawer dialog.</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the Drawer dialog.</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>placement is top or bottom, height of the Drawer dialog.</td>\n<td>int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Drawer.</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>the offset of in X-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>the offset of in Y-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the Drawer dialog is visible or not.</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to close</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a callback that will be called when a user clicks mask, close button or Cancel button.</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>Specify a callback that will be called before drawer displayed</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DrawerService</h3>\n<table>\n<thead>\n<tr>\n<th>������</th>\n<th>˵��</th>\n<th>����</th>\n<th>����</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CreateAsync</td>\n<td>create and open an Drawer</td>\n<td><code>DrawerConfig</code></td>\n<td><code>DrawerRef</code></td>\n</tr>\n<tr>\n<td>CreateAsync</td>\n<td>create and open an Drawer</td>\n<td><code>DrawerConfig</code> , TContentParams</td>\n<td><code>DrawerRef&lt;R&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h3>DrawerOptions</h3>\n<table>\n<thead>\n<tr>\n<th>����</th>\n<th>˵��</th>\n<th>����</th>\n<th>Ĭ��ֵ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>The drawer body content.</td>\n<td><code>OneOf&lt;RenderFragment, string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>ContentParams</td>\n<td>The component inputs the param / The Template context.</td>\n<td><code>D</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is visible on top right of the Drawer dialog or not.</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Clicking on the mask (area outside the Drawer) to close the Drawer or not.</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>Whether to show mask or not.</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>CloseOnNavigation</td>\n<td>Whether to close the drawer when the navigation history changes</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>�Ƿ�֧�ּ���esc�ر�</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for Drawer's mask element.</td>\n<td><code>string</code></td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Body style for modal body element. Such as height, padding etc.</td>\n<td><code>string</code></td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>The title for Drawer.</td>\n<td><code>OneOf&lt;RenderFragment, string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the Drawer dialog.</td>\n<td><code>int</code></td>\n<td><code>256</code></td>\n</tr>\n<tr>\n<td>Height</td>\n<td>Height of the Drawer dialog, only when placement is <code>'top'</code> or <code>'bottom'</code>.</td>\n<td><code>int</code></td>\n<td><code>256</code></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the container of the Drawer dialog.</td>\n<td><code>string</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The <code>z-index</code> of the Drawer.</td>\n<td><code>int</code></td>\n<td><code>1000</code></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Drawer.</td>\n<td><code>'top' \\| 'right' \\| 'bottom' \\| 'left'</code></td>\n<td><code>'right'</code></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>The the X coordinate offset(px).</td>\n<td><code>int</code></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>The the Y coordinate offset(px), only when placement is <code>'top'</code> or <code>'bottom'</code>.</td>\n<td><code>int</code></td>\n<td><code>0</code></td>\n</tr>\n</tbody>\n</table>\n<h3>DrawerRef</h3>\n<p>| ����  | ˵��        | ����                   |\n| ----- | ----------- | ---------------------- |\n| CloseAsync | close the drawer. | <code>| | OpenAsync  | open the drawer. |</code>           |</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/7z8NJQhFb/Drawer.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic Drawer",
        "Description": "<p>Simplest Usage. Drawer will be displayed on right, and it will be closed when you click the masked area.</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" @onclick=\"_=>open()\">Open</Button>\n    <Drawer Closable=\"true\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>\n\n   @code{\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Components.Drawer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "drawer_service",
        "Title": "Drawer's service",
        "Description": "",
        "Code": "@inject DrawerService DrawerService\n\n<Input @bind-Value=\"@value\" />\n<br />\n<br />\n<Button OnClick=\"OpenContent\" Type=\"primary\">Use Template</Button>\n<Button OnClick=\"OpenComponent\" Type=\"primary\">Use Component</Button>\n<Button OnClick=\"OpenDialogMode\" Type=\"primary\">Use Dialog Mode</Button>\n\n@inject ModalService confirm\n@code{\n\n    private string value = \"blazor\";\n\n    private IDrawerRef _drawerRef;\n   \n    private async Task OpenContent()\n    {\n        RenderFragment content = @<div>\n                        <Input @bind-Value=\"@value\" /><br />\n                        <Button OnClick=\"CloseDrawer\">close</Button>\n                    </div>;\n\n        var options = new DrawerOptions()\n        {\n            Title = \"Drawer\",\n            Width = 350,\n            Content = content,\n        };\n\n        _drawerRef = await DrawerService.CreateAsync(options);\n\n        _drawerRef.OnClosing = async (handle) =>\n        {\n            Console.WriteLine(\"Closing Drawer\");\n\n            if (!(await confirm.ConfirmAsync(new ConfirmOptions\n            {\n                Title = \"Confirm to close?\"\n            })))\n            {\n                handle.Reject();\n            }\n        };\n    }\n\n    private async Task CloseDrawer()\n    {\n        if (_drawerRef != null)\n        {\n            await _drawerRef.CloseAsync();\n        }\n    }\n\n\n    // use custom component\n    private async Task OpenComponent()\n    {\n        var options = new DrawerOptions()\n        {\n            Title = \"Component\",\n            Width = 350,\n        };\n\n        var drawerRef = await DrawerService.CreateAsync<DrawerTemplateDemo, string, string>(options, value);\n\n        drawerRef.OnOpen = () =>\n        {\n            Console.WriteLine(\"OnAfterOpen\");\n            return Task.CompletedTask;\n        };\n\n        drawerRef.OnClosing = args =>\n        {\n            Console.WriteLine(\"OnAfterClosing:\");\n            return Task.CompletedTask;\n        };\n\n        drawerRef.OnClosed = async result =>\n        {\n            Console.WriteLine(\"OnAfterClosed:\" + result);\n            if (result != null)\n                value = result;\n            await InvokeAsync(StateHasChanged);\n        };\n\n    }\n\n    // dialog mode\n    private async Task OpenDialogMode()\n    {\n        var options = new DrawerOptions()\n        {\n            Title = \"Component\",\n            Width = 350,\n        };\n\n        var result = await DrawerService.CreateDialogAsync<DrawerTemplateDemo, string, string>(options, value);\n\n        if (result != null)\n            value = result;\n    }\n}",
        "Type": "Demos.Components.Drawer.demo.Drawer_service",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "userprofile",
        "Title": "Preview Drawer",
        "Description": "<p>Use Drawer to quickly preview details of an object, such as those in a list.</p>\n",
        "Code": "<div>\n    <AntList DataSource=\"datasource\">\n        <ChildContent Context=\"item\">\n            <ListItem>\n                <ListItemMeta Avatar=@(\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\")\n                                 Description=\"Progresser XTech\">\n                    <TitleTemplate>\n                        @item.Title\n                    </TitleTemplate>\n                </ListItemMeta>\n                <Button Type=\"@ButtonType.Link\" OnClick=\"(e)=>open(e, item.Title)\">View Profile</Button>\n            </ListItem>\n        </ChildContent>\n    </AntList>\n    \n    <Drawer Width=\"640\" Closable=\"true\" Visible=\"visible\" Title='(\"User Profile\")' OnClose=\"_=>close()\">\n        <Text Strong=\"true\">Personal</Text>\n        <Row></Row>\n        <Row Gutter=\"12\">\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Full Name:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text>Henry</Text>\n            </Col>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Account:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text>AntDesign@example.com</Text>\n            </Col>\n        </Row>\n        <Row Gutter=\"12\">\n            <Col Span=\"4\">\n                <Text Strong=\"true\">City:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text>HangZhou</Text>\n            </Col>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Country:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text>China</Text>\n            </Col>\n        </Row>\n        <Row Gutter=\"12\">\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Birthday:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text>February 2,1900</Text>\n            </Col>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Website:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text>www.baidu.com</Text>\n            </Col>\n        </Row>\n    \n        <Divider></Divider>\n        <Text Strong=\"true\">Company</Text>\n        <Row></Row>\n        <Row>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Position:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text Strong=\"false\">Programmer</Text>\n            </Col>\n            <Col Span=\"6\">\n                <Text Strong=\"true\">Responsibilities:</Text>\n            </Col>\n            <Col Span=\"6\">\n                <Text Strong=\"false\">Coding</Text>\n            </Col>\n        </Row>\n        <Row>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Department:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text Strong=\"false\">XTech</Text>\n            </Col>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Supervisor:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text Strong=\"false\">Lin</Text>\n            </Col>\n        </Row>\n        <Row>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Skills:</Text>\n            </Col>\n            <Col Span=\"20\">\n                <Text Strong=\"false\">\n                    C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.\n                </Text>\n            </Col>\n    \n        </Row>\n    \n        <Divider ></Divider>\n        <Text Strong=\"true\">Contacts</Text>\n        <Row></Row>\n        <Row>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Email:</Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text Strong=\"false\"> ant-design-Blazor@example.com</Text>\n            </Col>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">    Phone Number:     </Text>\n            </Col>\n            <Col Span=\"8\">\n                <Text Strong=\"false\">+86 181 0000 0000 </Text>\n            </Col>\n        </Row>\n        <Row>\n            <Col Span=\"4\">\n                <Text Strong=\"true\">Github:</Text>\n            </Col>\n            <Col Span=\"20\">\n                <Text Strong=\"false\">https://ant-design-blazor.gitee.io/ </Text>\n            </Col>\n        </Row>\n    </Drawer>   \n</div>\n\n   @code{\n\n       public class ListDataSource\n       {\n           public string Title { get; set; }\n       };\n\n       List<ListDataSource> datasource = new List<ListDataSource>() {\n        new ListDataSource(){Title=\"Henry\"},\n        new ListDataSource(){Title=\"Henry\"}\n    };\n       bool visible = false;\n\n\n       void open(MouseEventArgs arg, string Title)\n       {\n           this.visible = true;\n       }\n\n       void close()\n       {\n           this.visible = false;\n       }\n\n}",
        "Type": "Demos.Components.Drawer.demo.Userprofile",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "render_dom",
        "Title": "Render in current dom",
        "Description": "<p>Render in current dom. custom container.</p>\n",
        "Code": "<div>\n    <div style=\"height:200px;overflow:hidden;position:relative;border:1px solid #ebedf0; border-radius:2px;padding:48px;text-align:center;background:#fafafa\">\n        Render in this\n        <div style=\"margin-top: 16px\">\n            <Button Type=\"primary\" @onclick=\"_=>open()\">Open</Button>\n        </div>\n        <Drawer Style=\"position:absolute\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Drawer>\n    </div>\n</div>\n\n@code{\n\n    bool visible = false;\n\n\n\n    void open()\n    {\n\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Components.Drawer.demo.Render_dom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "multiple",
        "Title": "Multi-level drawer",
        "Description": "<p>Open a new drawer on top of an existing drawer to handle multi branch tasks.</p>\n",
        "Code": "<div>\n    <Button  Type=\"primary\" OnClick=\"_=>open()\">Open</Button>\n\n    <Drawer Width=\"@wdFirstLayer\" Closable=\"true\" Visible=\"visible1\" Title='(\"Multi-level drawer\")' OnClose=\"_=>close()\">\n        <Button Type=\"primary\" OnClick=\"_=>ShowDrawer()\">Two-level Drawer</Button>\n        <Drawer Width=\"260\" Closable=\"true\" Visible=\"visible2\" Title='(\"two-level drawer\")' OnClose=\"_=>CloseDrawer()\">\n            <Button Type=\"primary\">This is two-level drawer</Button>\n        </Drawer>\n\n    </Drawer>\n</div>\n\n   @code{\n\n       bool visible1 = false;\n       bool visible2 = false;\n       int wdFirstLayer = 520;\n\n       void open()\n       {\n           this.visible1 = true;\n       }\n\n       void ShowDrawer()\n       {\n\n           this.visible2 = true;\n           wdFirstLayer += 260;\n       }\n\n       void close()\n       {\n           this.visible1 = false;\n       }\n\n       void CloseDrawer()\n       {\n           wdFirstLayer -= 260;\n           this.visible2 = false;\n       }\n\n}",
        "Type": "Demos.Components.Drawer.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "formindrawer",
        "Title": "Submit form in drawe",
        "Description": "<p>Use form in drawer with submit button.</p>\n",
        "Code": "<div>\n    <Button Icon=\"plus\" Type=\"primary\" @onclick=\"_=>open()\">New account</Button>\n    <Drawer Closable=\"true\" Width=\"720\" Visible=\"visible\" Title='(\"Submit from in Drawer\")' OnClose=\"_=>close()\">\n        <Template style=\"height:90%\">\n            <Row Gutter=\"16\">\n                <AntDesign.Col Span=\"12\">\n                    <Text>Name</Text>\n                    <Input Placeholder=\"Please enter user name\" TValue=\"string\"></Input>\n                </AntDesign.Col>\n                <AntDesign.Col Span=\"12\">\n                    <Text>Url</Text>\n                    <AntDesign.Input Placeholder=\"please enter url\" TValue=\"string\">\n                        <AddOnBefore>Http://</AddOnBefore>\n                        <AddOnAfter>.Com</AddOnAfter>\n                    </AntDesign.Input>\n                </AntDesign.Col>\n            </Row>\n            <br />\n            <Row Gutter=\"16\">\n                <AntDesign.Col Span=\"12\">\n                    <Text>Owner</Text>\n                    <Input Placeholder=\"Please select a owner\" TValue=\"string\" />\n                </AntDesign.Col>\n                <AntDesign.Col Span=\"12\">\n                    <Text>Type</Text>\n                    <Input Placeholder=\"please enter url\" TValue=\"string\" />\n                </AntDesign.Col>\n            </Row>\n            <br />\n\n            <Row>\n                <AntDesign.Col Span=\"24\">\n                    <Text>Description</Text>\n                    <TextArea Placeholder=\"Please enter your description\">\n\n                    </TextArea>\n                </AntDesign.Col>\n            </Row>\n            <br />\n            <Row>\n                <AntDesign.Col Span=\"18\">\n\n                </AntDesign.Col>\n                <AntDesign.Col Span=\"6\">\n                    <Button Type=\"default\">Cancel</Button>\n                    <Button Type=\"primary\">Submit</Button>\n                </AntDesign.Col>\n            </Row>\n        </Template>\n    </Drawer>\n</div>\n\n\n@code{\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Components.Drawer.demo.Formindrawer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Placement",
        "Title": "Custom Placement",
        "Description": "<p>The Drawer can appear from any edge of the screen.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"placement\">\n        <Radio Value=\"@(\"top\")\">top</Radio>\n        <Radio Value=\"@(\"right\")\">right</Radio>\n        <Radio Value=\"@(\"bottom\")\">bottom</Radio>\n        <Radio Value=\"@(\"left\")\">left</Radio>\n    </RadioGroup>\n\n    <Button Type=\"primary\" @onclick=\"_ => open()\">Open</Button>\n    <Drawer Visible=\"@visible\" Placement=\"@placement\" Title='(\"Basic Drawer\")' OnClose=\"_ => close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>\n\n@code{\n\n    string placement = \"right\";\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Components.Drawer.demo.Placement",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Comment",
    "Type": "Data Display",
    "Desc": "<p>A comment displays user feedback and discussion to website content.</p>\n<h2>When To Use</h2>\n<p>Comments can be used to enable discussions on an entity such as a page, blog post, issue or other.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/comment#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>List of action items rendered below the comment content</td>\n<td>Array<ReactNode></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>author</td>\n<td>The element to display as the comment author</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>avatar</td>\n<td>The element to display as the comment avatar - generally an antd <code>Avatar</code> or src</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>Nested comments should be provided as children of the Comment</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>content</td>\n<td>The main content of the comment</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>A datetime element containing the time to be displayed</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/ILhxpGzBO/Comment.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic comment",
        "Description": "<p>A basic comment with author, avatar, time and actions.</p>\n",
        "Code": "<Comment Actions=\"@(new []{likeAction,dislikeAction,replyAction})\"\n         Author=\"Han Solo\"\n         Avatar=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n         Content=\"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\"\n         Datetime=\"dateTime\">\n</Comment>\n\n@code\n{\n    bool like = false;\n    bool dislike = false;\n\n    RenderFragment likeAction=>\n        @<span>\n            <Tooltip Title=\"@(\"Like\")\">\n                <Icon Type=\"like\" Theme=\"@(like ? \"fill\" : \"outline\")\" OnClick=\"SetLike\" />\n            </Tooltip>\n            <span>@(like ? 1 : 0)</span>\n        </span>;\n\n    RenderFragment dislikeAction=>\n        @<span>\n            <Tooltip Title=\"@(\"Dislike\")\">\n                <Icon Type=\"dislike\" Theme=\"@(dislike ? \"fill\" : \"outline\")\" OnClick=\"SetDislike\" />\n            </Tooltip>\n            <span>@(dislike ? 1:0)</span>\n        </span>;\n\n    RenderFragment replyAction =@<span>Reply to</span>;\n\n    RenderFragment dateTime =\n        @<Tooltip Title=\"@(DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"))\">\n            <span>\n                @(MomentHelper.FromNow(DateTime.Now))\n            </span>\n        </Tooltip>;\n\n    void SetLike()\n    {\n        like = true;\n        dislike = false;\n    }\n\n    void SetDislike()\n    {\n        like = false;\n        dislike = true;\n    }\n}\n",
        "Type": "Demos.Components.Comment.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "editor",
        "Title": "Reply Editor",
        "Description": "<p>Comment can be used as an editor, so the user can customize the contents of the component.</p>\n",
        "Code": "<div>\n    @if (datas.Count > 0)\n    {\n        <AntList DataSource=\"datas\" TItem=\"Data\" Header=\"@header\">\n            <ListItem>\n                <Comment Avatar=\"context.Avatar\" Author=\"context.Author\" Datetime=\"context.Datetime\" Content=\"context.Content\"></Comment>\n            </ListItem>\n        </AntList>\n    }\n    <Comment Avatar=\"@(@\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\")\">\n        <ContentTemplate>\n            @GetEditor(@onSubmit)\n        </ContentTemplate>\n</Comment>\n</div>\n\n\n@code{\n    List<Data> datas=new List<Data>();\n    RenderFragment replyAction =@<span>Reply to</span>;\n\n    RenderFragment header =>\n        @<div>\n            @if (datas.Any())\n            {\n                <span>\n                    @($\"{datas.Count} {(datas.Count > 1 ? \"replies\" : \"reply\")}\")\n                </span>\n            }\n        </div>;\n\n    async void onSubmit()\n    {\n        submitting = true;\n\n        await Task.Delay(1000);\n        this.datas.Add(new Data()\n        {\n            Author = \"Han Solo\",\n            Avatar = @\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n            Content = _value,\n            Datetime = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"),\n        });\n        submitting = false;\n        _value = \"\";\n        await InvokeAsync(StateHasChanged);\n    }\n\n    bool submitting=false;\n    string _value = \"\";\n\n    //TODO::Form\n    RenderFragment GetEditor(Action onSubmit)\n    {\n        return\n            @<div>\n                <TextArea MinRows=\"4\" @bind-Value=\"@_value\" />\n                <br/>\n                <br/>\n                <Button Loading=\"@submitting\" OnClick=\"onSubmit \" type=\"primary\">\n                    Add Comment\n                </Button>\n            </div>;\n    }\n\n\n    class Data\n    {\n        public string Author { get; set; }\n        public string Avatar { get; set; }\n        public string Content { get; set; }\n        public string Datetime;\n    }\n}",
        "Type": "Demos.Components.Comment.demo.Editor",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "nested",
        "Title": "Nested comments",
        "Description": "<p>Comments can be nested.</p>\n",
        "Code": "<Comment Author=\"@author\" Avatar=\"@avatar\" Content=\"@content\" Actions=\"@(new []{replyAction})\">\n    <Comment Author=\"@author\" Avatar=\"@avatar\" Content=\"@content\" Actions=\"@(new []{replyAction})\">\n        <Comment Author=\"@author\" Avatar=\"@avatar\" Content=\"@content\" Actions=\"@(new []{replyAction})\"/>\n        <Comment Author=\"@author\" Avatar=\"@avatar\" Content=\"@content\" Actions=\"@(new []{replyAction})\"/>\n    </Comment>\n</Comment>\n\n\n@code{\n    string author = \"Han Solo\";\n    string avatar = @\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\";\n    string content = \"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\";\n    RenderFragment replyAction =@<span>Reply to</span>;\n}",
        "Type": "Demos.Components.Comment.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "list",
        "Title": "Usage with list",
        "Description": "<p>Displaying a series of comments using the <code>antd</code> List Component.</p>\n",
        "Code": "<AntList DataSource=\"@datas\" TItem=\"Data\" Header=\"header\" Class=\"comment-list\">\n    <ListItem >\n        <Comment Actions=\"context.Actions\" Avatar=\"context.Avatar\" Author=\"context.Author\" Datetime=\"context.Datetime\" Content=\"context.Content\"></Comment>\n    </ListItem>\n</AntList>\n\n@code{\n\n    List<Data> datas => new List<Data>()\n    {\n        new Data()\n        {\n            Author = \"Han Solo\",\n            Avatar = @\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n            Content = \"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\",\n            Datetime = @<Tooltip Title=\"@(DateTime.Now.AddDays(-1).ToString(\"yyyy-MM-dd HH:mm:ss\"))\">\n                               <span>\n                                   @(MomentHelper.FromNow(DateTime.Now.AddDays(-1)))\n                               </span>\n                            </Tooltip>,\n                Actions = new List<RenderFragment>() {replyAction}\n            },\n            new Data()\n            {\n                Author = \"Han Solo\",\n                Avatar = @\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n                Content = \"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\",\n                Datetime = @<Tooltip Title=\"@(DateTime.Now.AddDays(-2).ToString(\"yyyy-MM-dd HH:mm:ss\"))\">\n                               <span>\n                                   @(MomentHelper.FromNow(DateTime.Now.AddDays(-2)))\n                               </span>\n                            </Tooltip>,\n                Actions = new List<RenderFragment>() {replyAction}\n            }\n        };\n\n    RenderFragment replyAction =@<span>Reply to</span>;\n\n\n    RenderFragment header =>\n        @<div>\n            @if (datas.Any())\n            {\n                <span>\n                    @($\"{datas.Count} {(datas.Count > 1 ? \"replies\" : \"reply\")}\")\n                </span>\n            }\n        </div>;\n\n    class Data\n    {\n        public string Author { get; set; }\n        public string Avatar { get; set; }\n        public string Content { get; set; }\n        public List<RenderFragment> Actions;\n        public RenderFragment Datetime;\n    }\n}\n\n",
        "Type": "Demos.Components.Comment.demo.List",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Timeline",
    "Type": "Data Display",
    "Desc": "<p>Vertical display timeline.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a series of information needs to be ordered by time (ascending or descending).</li>\n<li>When you need a timeline to make a visual connection.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/timeline#API\" class=\"anchor\">#</a></h2>\n<p>Timeline</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pending</td>\n<td>Set the last ghost node's existence or its content</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>PendingDot</td>\n<td>Set the dot of the last ghost node when pending is true</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Reverse</td>\n<td>reverse nodes or not</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Mode</td>\n<td>By sending <code>alternate</code> the timeline will distribute the nodes to the <code>left</code> and <code>right</code>.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Timeline.Item\nNode of timeline</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>Set the circle's color blue, red, green, gray or other custom colors</td>\n<td>string,</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>Customize timeline dot</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Position</td>\n<td>Customize node position <code>left</code>,<code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Label</td>\n<td>Set the label</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/vJmo00mmgR/Timeline.svg",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Reverse",
        "Title": "Last node and Reversing",
        "Description": "<p>When the timeline is incomplete and ongoing, put a ghost node at last. Set <code>pending</code> as truthy value to enable displaying pending item. You can customize the pending content by passing a <code>React Element</code>. Meanwhile, pendingDot={a React Element} is used to customize the dot of the pending item. <code>reverse={true}</code> is used for reversing nodes.</p>\n",
        "Code": "<div>\n    <Timeline Pending=\"pending\" Reverse=@bReverse>\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem>Technical testing 2015-09-01</TimelineItem>\n    </Timeline>\n    <Button Type=\"primary\" Style=\"margin-top: 16px \" OnClick=\"HandleClick\">\n        Toggle Reverse\n    </Button>\n</div>\n@code{\n    private bool bReverse { get; set; } = false;\n    RenderFragment pending = @<Template>\n                                                        Recording...\n                                                    </Template>;\n    void HandleClick()\n    {\n     bReverse = !bReverse;\n    }\n}",
        "Type": "Demos.Components.Timeline.demo.Reverse",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>Basic timeline.</p>\n",
        "Code": "<div>\n    <Timeline>\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem Color=\"red\" >Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem>Technical testing 2015-09-01</TimelineItem>\n        <TimelineItem>Network problems being solved 2015-09-01</TimelineItem>\n    </Timeline>\n</div>\n",
        "Type": "Demos.Components.Timeline.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Color",
        "Title": "Color",
        "Description": "<p>Set the color of circles. <code>green</code> means completed or success status, <code>red</code> means warning or error, and <code>blue</code> means ongoing or other default status, <code>gray</code> for unfinished or disabled status.</p>\n",
        "Code": "<div>\n    <Timeline>\n        <TimelineItem Color=\"green\">Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem Color=\"green\">Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem Color=\"red\">\n            <p>Solve initial network problems 1</p>\n            <p>Solve initial network problems 2</p>\n            <p>Solve initial network problems 3 2015-09-01</p>\n        </TimelineItem>\n        <TimelineItem>\n            <p>Technical testing 1</p>\n            <p>Technical testing 2</p>\n            <p>Technical testing 3 2015-09-01</p>\n        </TimelineItem>\n        <TimelineItem Color=\"gray\">\n            <p>Technical testing 1</p>\n            <p>Technical testing 2</p>\n            <p>Technical testing 3 2015-09-01</p>\n        </TimelineItem>\n        <TimelineItem Color=\"gray\">\n            <p>Technical testing 1</p>\n            <p>Technical testing 2</p>\n            <p>Technical testing 3 2015-09-01</p>\n        </TimelineItem>\n    </Timeline>\n</div>\n",
        "Type": "Demos.Components.Timeline.demo.Color",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Right",
        "Title": "Right alternate",
        "Description": "<p>Right alternate timeline.</p>\n",
        "Code": "<div>\n    <Timeline Mode=\"right\">\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem Dot=\"dotTemplate\" Color=\"red\">\n            Technical testing 2015-09-01\n        </TimelineItem>\n        <TimelineItem Color=\"red\">Network problems being solved 2015-09-01</TimelineItem>\n    </Timeline>,\n</div>\n\n@code{\n    RenderFragment dotTemplate =\n    @<Template>\n        <Icon Type=\"clock-circle\" Theme=\"outline\" Style=\"font-size: 16px;\" />\n    </Template>;\n}",
        "Type": "Demos.Components.Timeline.demo.Right",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Custom",
        "Title": "Basic",
        "Description": "<p>Basic usage.</p>\n",
        "Code": "<div>\n    <Timeline>\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem Dot=\"dotTemplate\"  Color=\"red\">\n        Technical testing 2015-09-01\n        </TimelineItem>\n       <TimelineItem>Network problems being solved 2015-09-01</TimelineItem>\n    </Timeline>\n</div>\n\n@code {\n    RenderFragment dotTemplate =\n        @<Template>\n            <Icon Type=\"clock-circle\" Style=\"font-size: 16px;\" />\n        </Template>;\n}\n",
        "Type": "Demos.Components.Timeline.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Alternate",
        "Title": "Alternate",
        "Description": "<p>Alternate timeline.</p>\n",
        "Code": "<div>\n<Timeline Mode=\"alternate\"  >\n    <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n    <TimelineItem Color=\"green\">Solve initial network problems 2015-09-01</TimelineItem>\n    <TimelineItem Dot=\"dotTemplate\">\n        Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n        quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n    </TimelineItem>\n    <TimelineItem Color=\"red\">Network problems being solved 2015-09-01</TimelineItem>\n    <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n    <TimelineItem Dot=\"dotTemplate\">Technical testing 2015-09-01</TimelineItem>\n</Timeline>\n</div>\n\n@code {\n    RenderFragment dotTemplate =\n    @<Template>\n        <Icon Type=\"clock-circle\" Style=\"font-size: 16px;\" />\n    </Template>;\n }\n\n",
        "Type": "Demos.Components.Timeline.demo.Alternate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Label",
        "Title": "label",
        "Description": "<p>Use <code>label</code> show time alone.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@mode\" Style=\"margin-bottom:20px\">\n        <Radio Value=\"@(\"left\")\">Left</Radio>\n        <Radio Value=\"@(\"right\")\">Right</Radio>\n        <Radio Value=\"@(\"alternate\")\">Alternate</Radio>\n    </RadioGroup>\n    <Timeline Mode=\"@mode\">\n        <TimelineItem>Create a services 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01 09:12:11</TimelineItem>\n        <TimelineItem>Technical testing</TimelineItem>\n        <TimelineItem>Network problems being solved 2015-09-01 09:12:11</TimelineItem>\n    </Timeline>\n</div>\n\n@code{\n    private string mode = \"left\";\n\n\n}\n",
        "Type": "Demos.Components.Timeline.demo.Label",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Alert",
    "Type": "Feedback",
    "Desc": "<p>Alert component for feedback.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When you need to show alert messages to users.</li>\n<li>When you need a persistent static container which is closable by user actions.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/8emPa3fjl/Alert.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage for short messages.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Success\" Message=\"Success Text\" />\n",
        "Type": "Demos.Components.Alert.demo.Basic",
        "Style": "\n.code-box-demo .ant-alert {\n  margin-bottom: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "description",
        "Title": "Description",
        "Description": "<p>Additional description for alert message.</p>\n",
        "Code": "<Alert Message=\"Success Text\"\n          Description=\"Success Description Success Description Success Description\"\n          Type=\"@AlertType.Success\" />\n\n<Alert Message=\"Info Text\"\n          Description=\"Info Description Info Description Info Description Info Description\"\n          Type=\"@AlertType.Info\" />\n\n<Alert Message=\"Warning Text\"\n          Description=\"Warning Description Warning Description Warning Description Warning Description\"\n          Type=\"@AlertType.Warning\" />\n\n<Alert Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description\"\n          Type=\"@AlertType.Error\" />\n",
        "Type": "Demos.Components.Alert.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "banner",
        "Title": "Banner",
        "Description": "<p>Display Alert as a banner at top of page.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text\"\n          Banner\n          Closable />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text\"\n          Description=\"Very long warning text warning text text text text text text text\"\n          Banner\n          Closable />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text Without Icon\"\n          Banner\n          ShowIcon=\"false\" />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error Text\"\n          Banner />",
        "Type": "Demos.Components.Alert.demo.Banner",
        "Style": "",
        "Iframe": 250,
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "smooth-closed",
        "Title": "Smoothly Unmount",
        "Description": "<p>Smoothly unmount Alert upon close.</p>\n",
        "Code": "<div>\n    @if (visible)\n    {\n        <Alert Message=\"Alert Message Text\" Type=\"success\" Closable AfterClose=\"handleClose\" />\n    }\n    <p>placeholder text here</p>\n</div>\n\n@code{\n    bool visible = true;\n\n    void handleClose()\n    {\n        visible = false;\n    }\n}",
        "Type": "Demos.Components.Alert.demo.SmoothClosed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "style",
        "Title": "More types",
        "Description": "<p>There are 4 types of Alert: <code>success</code>, <code>info</code>, <code>warning</code>, <code>error</code>.</p>\n",
        "Code": "<Alert Message=\"Success Text\" Type=\"@AlertType.Success\" />\n\n<Alert Message=\"Info Text\" Type=\"@AlertType.Info\" />\n\n<Alert Message=\"Warning Text\" Type=\"@AlertType.Warning\" />\n\n<Alert Message=\"Error Text\" Type=\"@AlertType.Error\" />\n",
        "Type": "Demos.Components.Alert.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "closable",
        "Title": "Closable",
        "Description": "<p>To show close button.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n@code{\n    private void LogSomething()\n    {\n        Console.WriteLine(\"Logging Something...\");\n    }\n}",
        "Type": "Demos.Components.Alert.demo.Closable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "close-text",
        "Title": "Customized Close Text",
        "Description": "<p>Replace the default icon with customized content.</p>\n",
        "Code": "<Alert Message=\"Info Text\" Type=\"@AlertType.Info\" CloseText=\"Close Now\"  Closable/>\n",
        "Type": "Demos.Components.Alert.demo.CloseText",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p>Decent icon make information more clear and more friendly.</p>\n",
        "Code": "<Alert Type=\"@AlertType.Success\"\n          Message=\"Success Tips\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Info\"\n          Message=\"Informational Notes\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Success\"\n          Message=\"Success Tips\"\n          Description=\"Detailed description and advice about successful copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Info\"\n          Message=\"Informational Notes\"\n          Description=\"Additional description and information about copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning\"\n          Description=\"This is a warning notice about copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error\"\n          Description=\"This is an error message about copywriting.\"\n          ShowIcon />",
        "Type": "Demos.Components.Alert.demo.Icon_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Slider",
    "Type": "Data Entry",
    "Desc": "<p>A Slider component for displaying current value and intervals in range.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To input a value in a range.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/slider#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>The default value of slider. When range is false, use number, otherwise, use [number, number]</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>If true, the slider will not be interactable.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dots</td>\n<td>Whether the thumb can drag over tick only.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>included</td>\n<td>Make effect when marks not null, true means containment and false means coordinative</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>marks</td>\n<td>Tick mark of Slider, type of key must be number, and must in closed interval [min, max], each mark can declare its own style.</td>\n<td>object</td>\n<td></td>\n</tr>\n<tr>\n<td>max</td>\n<td>The maximum value the slider can slide to</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>min</td>\n<td>The minimum value the slider can slide to.</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>range</td>\n<td>dual thumb mode</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>reverse the component</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>step</td>\n<td>The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When marks no null, step can be null.</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>The value of slider. When range is false, use number, otherwise, use [number, number]</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>vertical</td>\n<td>If true, the slider will be vertical.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onAfterChange</td>\n<td>Fire when onmouseup is fired.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback function that is fired when the user changes the slider's value.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipPlacement</td>\n<td>Set Tooltip display position. Ref Tooltip.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipVisible</td>\n<td>If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getTooltipPopupContainer</td>\n<td>The DOM container of the Tooltip, the default behavior is to create a div element in body.</td>\n<td>Rendfragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/HZ3meFc6W/Silder.svg",
    "DemoList": [
      {
        "Order": 4,
        "Name": "Customer",
        "Title": "Customize tooltip",
        "Description": "<p>Use <code>tipFormatter</code> to format content of Tooltip. If <code>tipFormatter is null</code>, hide it.</p>\n",
        "Code": "<div>\n    <Slider TValue=\"double\" DefaultValue=\"34\" Value=\"@value\" TipFormatter=\"tipFormatter\"  />\n</div>\n\n@code\n{\n\n    private int value { get; set; }\n\n    string tipFormatter()\n    {\n        return $\"{value}%\";\n    }\n}\n\n\n\n",
        "Type": "Demos.Components.Slider.demo.Customer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>Basic slider. When <code>range</code> is <code>true</code>, display as dual thumb mode. When <code>disable</code> is <code>true</code>, the slider will not be interactable.</p>\n",
        "Code": "<div>\n    <Slider TValue=\"double\" DefaultValue=\"35\" Disabled=\"@Diabled\"  />\n    <Slider TValue=\"(double, double)\" DefaultValue=\"(20, 50)\" Disabled=\"@Diabled\" />\n    Diabled: <Switch Size=\"small\" Checked=\"@Diabled\" OnChange=\"(e)=>OnSwitch(e)\" />\n</div>\n\n@code\n{\n\n    private bool Diabled;\n\n    private void OnSwitch(bool args)\n    {\n        Diabled = args;\n    }\n}\n",
        "Type": "Demos.Components.Slider.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Tooltip",
        "Title": "Control visible of ToolTip",
        "Description": "<p>When <code>tooltipVisible</code> is true, ToolTip will show always, or ToolTip will not show anyway, even if dragging or hovering.</p>\n",
        "Code": "<div>\n    <Slider TValue=\"double\" DefaultValue=\"32\" TooltipPlacement=\"top\" TooltipVisible=\"true\" />\n</div>\n",
        "Type": "Demos.Components.Slider.demo.Tooltip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Reversed",
        "Title": "Reverse",
        "Description": "<p>Using <code>reverse</code> to render slider reversely.</p>\n",
        "Code": "<div>\n    <Slider TValue=\"double\" Reverse=\"@reversed\" DefaultValue=\"33\" />\n    <Slider TValue=\"(double, double)\" Reverse=\"@reversed\" DefaultValue=\"(20, 50)\" />\n    Reversed: <Switch Size=\"small\" Checked=\"@reversed\" OnChange=\"(e)=>OnSwitchReverse(e)\" />\n</div>\n\n\n@code\n{\n    private bool reversed = true;\n\n    private void OnSwitchReverse(bool args)\n    {\n        reversed = args;\n    }\n}\n",
        "Type": "Demos.Components.Slider.demo.Reversed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Input",
        "Title": "Slider with InputNumber",
        "Description": "<p>Synchronize with InputNumber component.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"12\">\n        <Slider TValue=\"double\" Min=\"1\" Max=\"20\" @bind-Value=\"@inputValue1\" />\n        </Col>\n        <Col Span=\"4\">\n        <AntDesign.InputNumber Min=\"1\" Max=\"20\" Style=\"margin:0 16px;\" @bind-Value=\"@inputValue1\" TValue=\"double\" />\n        </Col>\n    </Row>\n    <Row>\n        <Col Span=\"12\">\n        <Slider TValue=\"double\" Min=\"0\" Max=\"1\" Step=\"0.01\" @bind-Value=\"@inputValue2\" />\n        </Col>\n        <Col Span=\"4\">\n        <AntDesign.InputNumber Min=\"0\" Max=\"10\" Step=\"0.1\" Style=\"margin:0 16px;\" @bind-Value=\"@inputValue2\" TValue=\"double\" />\n        </Col>\n    </Row>\n</div>\n\n\n@code\n{\n    private double inputValue1 = 1;\n\n    private double inputValue2 = 0.5;\n}\n\n\n",
        "Type": "Demos.Components.Slider.demo.Input",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Vslider",
        "Title": "vertical",
        "Description": "<p>The vertical Slider.</p>\n",
        "Code": "<div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider TValue=\"double\" Vertical DefaultValue=\"31\" />\n    </div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider TValue=\"(double, double)\" Vertical Step=\"10\" DefaultValue=\"(20, 50 )\" />\n    </div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider TValue=\"(double, double)\" Vertical Marks=\"@_marks1\" DefaultValue=\"(26, 37 )\" />\n    </div>\n</div>\n\n@code\n{\n        private SliderMark[] _marks1 =\n        {\n            new SliderMark(0, \"0℃\"),\n            new SliderMark(26, \"26℃\"),\n            new SliderMark(37, \"37℃\"),\n            new SliderMark(100, (b)=>{\n                b.OpenElement(0,\"strong\");\n                b.AddContent(1,\"100℃\");\n                b.CloseElement();\n            }, \"color: #f50;\")\n        };\n}\n",
        "Type": "Demos.Components.Slider.demo.Vslider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Event",
        "Title": "Event",
        "Description": "<p>The <code>onChange</code> callback function will fire when the user changes the slider's value. The <code>onAfterChange</code> callback function will fire when <code>onmouseup</code> fired.</p>\n",
        "Code": "<div>\n    <Slider TValue=\"double\" DefaultValue=\"30.5\" OnChange=\"(e)=>OnChange1(e)\" OnAfterChange=\"(e)=>OnAfterChange1(e)\" />\n    <Slider TValue=\"(double, double)\" Step=\"10\" DefaultValue=\"( 20.3, 50.3 )\" OnChange=\"(e)=>OnChange2(e)\" OnAfterChange=\"(e)=>OnAfterChange2(e)\" />\n</div>\n\n\n@code {\n\n    private void OnChange1(double args)\n    {\n    }\n\n    private void OnAfterChange1(double args)\n    {\n    }\n\n    private void OnChange2((double, double) args)\n    {\n    }\n\n    private void OnAfterChange2((double, double) args)\n    {\n    }\n}\n",
        "Type": "Demos.Components.Slider.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Icon1",
        "Title": "Slider with icon",
        "Description": "<p>You can add an icon beside the slider to make it meaningful.</p>\n",
        "Code": "<div>\n    <Icon Style=\"display: inline-block\" Type=\"Frown\" Theme=\"outline\" />\n    <Slider TValue=\"double\" Style=\"display: inline-block; width: 300px;\" Min=\"0\" Max=\"20\" DefaultValue=\"5\" />\n    <Icon Style=\"display: inline-block\" Type=\"Smile\" Theme=\"outline\" />\n</div>\n\n\n",
        "Type": "Demos.Components.Slider.demo.Icon1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Graduated",
        "Title": "Graduated slider",
        "Description": "<p>Using <code>marks</code> property to mark a graduated slider, use <code>value</code> or <code>defaultValue</code> to specify the position of thumb. When <code>included is false</code>, means that different thumbs are coordinative. when <code>step is null</code>, users can only slide the thumbs onto <code>marks</code>.</p>\n",
        "Code": "<div>\n    <h4>included=true</h4>\n    <Slider TValue=\"double\" Marks=\"@nMarks\" DefaultValue=\"37\" />\n    <Slider TValue=\"(double, double)\" Marks=\"@nMarks\" DefaultValue=\"(26, 37)\" />\n\n    <h4>included=false</h4>\n    <Slider TValue=\"double\" Marks=\"@nMarks\" Included=\"false\" DefaultValue=\"37\" />\n\n    <h4>marks & step</h4>\n    <Slider TValue=\"double\" Marks=\"@nMarks\" Step=\"10\" DefaultValue=\"37\" />\n\n    <h4>step=null</h4>\n    <Slider TValue=\"double\" Marks=\"@nMarks\" Step=\"null\" DefaultValue=\"37\" />\n\n</div>\n\n@code\n{\n    private SliderMark[] nMarks =\n     {\n            new SliderMark(0, \"0℃\"),\n            new SliderMark(26, \"26℃\"),\n            new SliderMark(37, \"37℃\"),\n            new SliderMark(100, (b)=>{\n                b.OpenElement(0,\"strong\");\n                b.AddContent(1,\"100℃\");\n                b.CloseElement();\n            }, \"color: #f50;\")\n     };\n}",
        "Type": "Demos.Components.Slider.demo.Graduated",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Collapse",
    "Type": "Data Display",
    "Desc": "<p>A content area which can be collapsed and expanded.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Can be used to group or hide complex regions to keep the page clean.</li>\n<li><code>Accordion</code> is a special kind of <code>Collapse</code>, which allows only one panel to be expanded at a time.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/collapse#API\" class=\"anchor\">#</a></h2>\n<h3>Collapse</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Accordion</code></td>\n<td>Accordion mode</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Bordered</code></td>\n<td>Set border style</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>ExpandIconPosition</code></td>\n<td>Set expand icon position</td>\n<td><code>'left' \\| 'right'</code></td>\n<td><code>left</code></td>\n</tr>\n</tbody>\n</table>\n<h3>Panel</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Disabled</code></td>\n<td>If <code>true</code>, panel cannot be opened or closed</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Header</code></td>\n<td>Title of the panel</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ExpandedIcon</code></td>\n<td>Customize an icon for toggle</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Extra</code></td>\n<td>Extra element in the corner</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ShowArrow</code></td>\n<td>Display arrow or not</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>Active</code></td>\n<td>Active status of panel, double binding</td>\n<td><code>boolean</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ActiveChange</code></td>\n<td>Callback function of the active status</td>\n<td><code>EventCallback&lt;boolean&gt;</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/IxH16B9RD/Collapse.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Collapse",
        "Description": "<p>More than one panel can be expanded at a time, the first panel is initialized to be active in this case.</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" OnChange=\"Callback\">\n    <Panel Header=\"This is panel header 1\" Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel Key=\"2\">\n        <HeaderTemplate>\n            This is panel header 2\n        </HeaderTemplate>\n        <ChildContent>\n            <p>@text</p>\n        </ChildContent>\n    </Panel>\n    <Panel Header=\"This is panel header 3\" Key=\"3\" Disabled>\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}\n\n",
        "Type": "Demos.Components.Collapse.demo.Basic",
        "Style": "\n[data-theme=\"compact\"] p, p {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "borderless",
        "Title": "Borderless",
        "Description": "<p>A borderless style of Collapse.</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" Bordered=\"false\">\n    <Panel Header=\"This is panel header 1\" Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=\"This is panel header 2\" Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=\"This is panel header 3\" Key=\"3\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n}",
        "Type": "Demos.Components.Collapse.demo.Borderless",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "accordion",
        "Title": "Accordion",
        "Description": "<p>Accordion mode, only one panel can be expanded at a time.</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" Accordion>\n    <Panel Header=\"This is panel header 1\" Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=\"This is panel header 2\" Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=\"This is panel header 3\" Key=\"3\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n}",
        "Type": "Demos.Components.Collapse.demo.Accordion",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "noarrow",
        "Title": "No arrow",
        "Description": "<p>You can disable showing arrow icon by passing <code>[ShowArrow]=&quot;false&quot;</code> to <code>Panel</code> component.</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" OnChange=\"Callback\">\n    <Panel Header=\"This is panel header with arrow icon\" Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel ShowArrow=\"false\" Header=\"This is panel header with no arrow icon\" Key=\"2\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}",
        "Type": "Demos.Components.Collapse.demo.Noarrow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "extra",
        "Title": "Extra Node",
        "Description": "<p>You can use <code>Extra</code> to put extra elements in the top right corner.</p>\n",
        "Code": "<div>\n    <Collapse DefaultActiveKey=\"@(new[] { \"1\" })\"\n              OnChange=\"Callback\"\n              ExpandIconPosition=\"@expandIconPosition\"\n              ExpandIcon=\"caret-right\">\n        <Panel Header=\"This is panel header 1\" Key=\"1\" ExtraTemplate=\"@extra\">\n            <div>@text</div>\n        </Panel>\n        <Panel Header=\"This is panel header 2\" Key=\"2\" ExtraTemplate=\"@extra\">\n            <div>@text</div>\n        </Panel>\n        <Panel Header=\"This is panel header 3\" Key=\"3\">\n            <ExtraTemplate>\n                <div @onclick:stopPropagation><Icon Type=\"snippets\" /></div>\n            </ExtraTemplate>\n            <ChildContent>\n                <div>@text</div>\n            </ChildContent>\n        </Panel>\n    </Collapse>\n</div>\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    RenderFragment extra =@<div @onclick:stopPropagation><Icon Type=\"setting\"></Icon></div>;\n\n        string expandIconPosition = \"left\";\n\n        void Callback(string[] key)\n        {\n            Console.WriteLine(key);\n        }\n    }\n",
        "Type": "Demos.Components.Collapse.demo.Extra",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "custom",
        "Title": "Custom Panel",
        "Description": "<p>Customize the background, border, margin and icon styles for each panel.</p>\n",
        "Code": "<Collapse Bordered=\"false\"\n          DefaultActiveKey=\"@(new[]{\"1\"})\"\n          Class=\"site-collapse-custom-collapse\">\n    <ExpandIconTemplate>\n        <Icon Type=\"caret-right\" Rotate=\"@(context ? 90 : 0)\"></Icon>\n    </ExpandIconTemplate>\n    <ChildContent>\n        <Panel Header=\"This is panel header 1\" Key=\"1\"\n               Class=\"site-collapse-custom-panel\">\n            <p>@text</p>\n        </Panel>\n        <Panel Header=\"This is panel header 2\" Key=\"2\"\n               Class=\"site-collapse-custom-panel\">\n            <p>@text</p>\n        </Panel>\n        <Panel Header=\"This is panel header 3\" Key=\"3\"\n               Class=\"site-collapse-custom-panel\">\n            <p>@text</p>\n        </Panel>\n    </ChildContent>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n}\n\n<style>\n    [data-theme='compact'] .site-collapse-custom-collapse .site-collapse-custom-panel,\n    .site-collapse-custom-collapse .site-collapse-custom-panel {\n        background: #f7f7f7;\n        border-radius: 2px;\n        margin-bottom: 24px;\n        border: 0px;\n        overflow: hidden;\n    }\n</style>",
        "Type": "Demos.Components.Collapse.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "mix",
        "Title": "Nested panel",
        "Description": "<p><code>Collapse</code> is nested inside the <code>Collapse</code>.</p>\n",
        "Code": "<Collapse OnChange=\"Callback\">\n    <Panel Header=\"This is panel header 1\" Key=\"1\">\n        <Collapse DefaultActiveKey=@(new[]{\"1\"})>\n            <Panel Header=\"This is panel nest panel\" Key=\"1\">\n                <p>@text</p>\n            </Panel>\n        </Collapse>\n    </Panel>\n    <Panel Header=\"This is panel header 2\" Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=\"This is panel header 3\" Key=\"3\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}",
        "Type": "Demos.Components.Collapse.demo.Mix",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "List",
    "Type": "Data Display",
    "Desc": "<p>Simple List.</p>\n<h2>When To Use</h2>\n<p>A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/list#API\" class=\"anchor\">#</a></h2>\n<h3>List</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>Toggles rendering of the border around the list</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>footer</td>\n<td>List footer renderer</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>grid</td>\n<td>The grid type of list. You can set grid to something like {gutter: 16, column: 4}</td>\n<td><a href=\"#List-grid-props\">object</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>header</td>\n<td>List header renderer</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>itemLayout</td>\n<td>The layout of list, default is <code>horizontal</code>, If a vertical list is desired, set the itemLayout property to <code>vertical</code></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>rowKey</td>\n<td>Item's unique key, could be a string or function that returns a string</td>\n<td>string|Function(record):string</td>\n<td><code>key</code></td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>Shows a loading indicator while the contents of the list are being fetched</td>\n<td>boolean|<a href=\"/components/spin/#API\">SpinProps</a> (<a href=\"https://github.com/ant-design/ant-design/issues/8659\">more</a>)</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>loadMore</td>\n<td>Shows a load more content</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale</td>\n<td>i18n text including empty text</td>\n<td>object</td>\n<td>emptyText: 'No Data' <br></td>\n<td></td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>Pagination <a href=\"/components/pagination/\">config</a>, hide it by setting it to false</td>\n<td>boolean | object</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>Size of list</td>\n<td><code>default</code> | <code>large</code> | <code>small</code></td>\n<td><code>default</code></td>\n<td></td>\n</tr>\n<tr>\n<td>split</td>\n<td>Toggles rendering of the split under the list item</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>dataSource array for list</td>\n<td>any[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>customize list item when using <code>dataSource</code></td>\n<td><code>item =&gt; ReactNode</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnItemClick</td>\n<td>onclick callback of list items</td>\n<td><code>item =&gt; void</code></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>pagination</h3>\n<p>Properties for pagination.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>position</td>\n<td>specify the position of <code>Pagination</code></td>\n<td><code>top</code> | <code>bottom</code> | <code>both</code></td>\n<td><code>bottom</code></td>\n</tr>\n</tbody>\n</table>\n<p>More about pagination, please check <a href=\"/components/pagination/\"><code>Pagination</code></a>.</p>\n<h3>List grid props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>column</td>\n<td>column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>spacing between grid</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>The actions content of list item. If <code>itemLayout</code> is <code>vertical</code>, shows the content on bottom, otherwise shows content on the far right.</td>\n<td>Array<ReactNode></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>extra</td>\n<td>The extra content of list item. If <code>itemLayout</code> is <code>vertical</code>, shows the content on right, otherwise shows content on the far right.</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item.Meta</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>avatar</td>\n<td>The avatar of list item</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>description</td>\n<td>The description of list item</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>The title of list item</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5FrZKStG_/List.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "basic",
        "Title": "Basic list",
        "Description": "<p>Basic list.</p>\n",
        "Code": "<AntList DataSource=\"@data\" TItem=\"BasicItem\" OnItemClick=\"ItemClick\">\n    <ListItem>\n        <ListItemMeta Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\n            <TitleTemplate>\n                <a href=\"https://ng.ant.design\">@context.Title</a>\n            </TitleTemplate>\n        </ListItemMeta>\n    </ListItem>\n</AntList>\n\n\n@code{\n\n    RenderFragment avatar = @<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n\n    public List<BasicItem> data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Ant Design Title 1\"},\n        new BasicItem { Title = \"Ant Design Title 2\"},\n        new BasicItem { Title = \"Ant Design Title 3\"},\n        new BasicItem { Title = \"Ant Design Title 4\"},\n    };\n\n    public void ItemClick(BasicItem item)\n    {\n        Console.WriteLine($\"item was clicked: {item.Title}\");\n    }\n}\n\n",
        "Type": "Demos.Components.List.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "Vertical",
        "Description": "<p>Set the <code>itemLayout</code> property to <code>vertical</code> to create a vertical list.</p>\n",
        "Code": "@inject HttpClient HttpClient\n\n<AntList DataSource=\"@ListData\" ItemLayout=\"@ListItemLayout.Vertical\">\n    <ChildContent Context=\"item\">\n        <ListItem Extra=\"@extra\" Actions=\"@(new[] { iconText((\"start\",\"156\")),iconText((\"like\",\"156\")),iconText((\"message\",\"2\")) })\">\n            <ListItemMeta Description=\"@item.Description\">\n                <AvatarTemplate>\n                    @avatar\n                </AvatarTemplate>\n                <TitleTemplate>\n                    <a href=\"@item.Href\">@item.Title</a>\n                </TitleTemplate>\n            </ListItemMeta>\n            @item.Content\n        </ListItem>\n    </ChildContent>\n    <Footer>\n        <div>\n            <b>ant design</b> footer part\n        </div>\n    </Footer>\n</AntList>\n\n@code {\n\n    RenderFragment avatar =@<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    RenderFragment extra = @<img width=\"272\" alt=\"logo\" src=\"https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png\" />;\n\n    RenderFragment<(string icon, string text)> iconText = context =>\n    @<Template>\n        <Space>\n            <SpaceItem><Icon Type=\"@context.icon\" /></SpaceItem>\n            <SpaceItem>@context.text</SpaceItem>\n        </Space>\n    </Template> ;\n\n    public int count = 3;\n\n    public string FakeDataUrl { get { return $\"https://randomuser.me/api/?results={count}&inc=name,gender,email,nat&noinfo\"; } }\n\n    public List<DataModel> ListData { get; set; } = new List<DataModel>();\n\n    public bool Loading { get; set; } = false;\n\n    protected override async Task OnInitializedAsync()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            ListData.Add(new DataModel\n            {\n                Href = \"http://ant.design\",\n                Title = $\"ant design part {i}\",\n                Avatar = \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n                Description = \"Ant Design, a design language for background applications, is refined by Ant UED Team.\",\n                Content = \"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\",\n            });\n        }\n        await base.OnInitializedAsync();\n    }\n\n\n    public class DataModel\n    {\n        public string Href { get; set; }\n\n        public string Title { get; set; }\n\n        public string Avatar { get; set; }\n\n        public string Description { get; set; }\n\n        public string Content { get; set; }\n    }\n\n}",
        "Type": "Demos.Components.List.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "simple",
        "Title": "Simple list",
        "Description": "<p>Ant Design supports a default list size as well as a large and small size.</p>\n<p>If a large or small list is desired, set the size property to either large or small respectively. Omit the size property for a list with the default size.</p>\n<p>Customizing the header and footer of list by setting <code>header</code> and <code>footer</code> property.</p>\n",
        "Code": "<Divider Orientation=\"left\">Default Size</Divider>\n\n<AntList Bordered DataSource=\"@data\">\n    <Header>Header</Header>\n    <ChildContent Context=\"item\">\n        <ListItem>\n            <span><Text Mark>[ITEM]</Text></span>@item\n        </ListItem>\n    </ChildContent>\n\n    <Footer>Footer</Footer>\n</AntList>\n\n<Divider Orientation=\"left\">Small Size</Divider>\n\n<AntList Bordered DataSource=\"@data\" Size=\"small\">\n    <Header>Header</Header>\n    <ChildContent Context=\"item\">\n        <ListItem>\n            <span><Text Mark>[ITEM]</Text></span>@item\n        </ListItem>\n    </ChildContent>\n    <Footer>Footer</Footer>\n</AntList>\n\n<Divider Orientation=\"left\">Large Size</Divider>\n\n<AntList Bordered DataSource=\"@data\" Size=\"large\">\n    <Header>Header</Header>\n    <Header>Header</Header>\n    <ChildContent Context=\"item\">\n        <ListItem>\n            <span><Text Mark>[ITEM]</Text></span>@item\n        </ListItem>\n    </ChildContent>\n    <Footer>Footer</Footer>\n</AntList>\n\n@code{\n\n    public List<string> data = new List<string>\n{\n        \"Racing car sprays burning fuel into crowd.\",\n        \"Japanese princess to wed commoner.\",\n        \"Australian walks 100km after outback crash.\",\n        \"Man charged over missing wedding girl.\",\n        \"Los Angeles battles huge wildfires.\"\n    };\n}",
        "Type": "Demos.Components.List.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "grid",
        "Title": "Grid",
        "Description": "<p>Create a grid layout by setting the <code>grid</code> property of List.</p>\n",
        "Code": "<AntList Grid=\"gutter\" DataSource=\"@Data\">\n    <ListItem >\n        <Card Bordered Title=\"@(context.Title)\">\n            <Body>\n                Card context\n            </Body>\n        </Card>\n    </ListItem>\n</AntList>\n\n@code{\n\n    public ListGridType gutter = new ListGridType { Gutter = 16, Column = 4 };\n\n    public List<BasicItem> Data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Title 1\"},\n        new BasicItem { Title = \"Title 2\"},\n        new BasicItem { Title = \"Title 3\"},\n        new BasicItem { Title = \"Title 4\"},\n    };\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n}\n\n\n",
        "Type": "Demos.Components.List.demo.Grid",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "infinite-virtualized-load",
        "Title": "Infinite & virtualized",
        "Description": "<p>An example of infinite list &amp; virtualized loading using <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a>. <a href=\"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/\">Learn more</a>.</p>\n<p><code>Virtualized</code> rendering is a technique to mount big sets of data. It reduces the amount of rendered DOM nodes by tracking and hiding whatever isn't currently visible.</p>\n",
        "Code": "<h3>InfiniteVirtualizedLoad</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.List.demo.InfiniteVirtualizedLoad",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "infinite-load",
        "Title": "Scrolling loaded",
        "Description": "<p>The example of infinite load with <a href=\"https://github.com/CassetteRocks/react-infinite-scroller\">react-infinite-scroller</a>.</p>\n",
        "Code": "<h3>InfiniteLoad</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.List.demo.InfiniteLoad",
        "Style": "\n  [data-theme=\"dark\"] .demo-infinite-container {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "loadmore",
        "Title": "Load more",
        "Description": "<p>Load more list with <code>loadMore</code> property.</p>\n",
        "Code": "@inject HttpClient HttpClient\n\n<AntList Class=\"demo-loadmore-list\" DataSource=\"@Data\" ItemLayout=\"ListItemLayout.Horizontal\" Loading=\"@InitLoading\">\n    <ChildContent Context=\"item\">\n        <ListItem Actions=\"actions\">\n            <ListItemMeta Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\n                <TitleTemplate>\n                    <a href=\"https://ant.design\">@item.Name.Last</a>\n                </TitleTemplate>\n            </ListItemMeta>\n            <div>content</div>\n        </ListItem>\n    </ChildContent>\n    <LoadMore>\n        @if (!InitLoading && !Loading)\n        {\n            <div class=\"demo-loadmore-btn-content \">\n                <Button OnClick=\"OnLoadMore\">loading more</Button>\n            </div>\n        }\n    </LoadMore>\n</AntList>\n\n<style>\n\n    .demo-loadmore-list {\n        min-height: 350px;\n    }\n\n    .demo-loadmore-btn-content {\n        text-align: center;\n        margin-top: 12px;\n        height: 32px;\n        line-height: 32px;\n    }\n</style>\n\n@code {\n\n    static RenderFragment avatar =@<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\nstatic RenderFragment edit = @<a key=\"list-loadmore-edit\">edit</a>;\n\nstatic RenderFragment add = @<a key=\"list-loadmore-more\">more</a>;\n\n\npublic RenderFragment[] actions = new[] { edit, add };\n\npublic int count = 3;\n\npublic string FakeDataUrl { get { return $\"https://randomuser.me/api/?results={count}&inc=name,gender,email,nat&noinfo\"; } }\n\npublic List<DataModel> Data { get; set; }\n\npublic bool InitLoading { get; set; } = true;\n\npublic bool Loading { get; set; } = false;\n\nprotected override async Task OnInitializedAsync()\n{\nData = await GetData();\nInitLoading = false;\nawait base.OnInitializedAsync();\n}\n\npublic async Task OnLoadMore()\n{\nLoading = true;\nvar res = await GetData();\nData.AddRange(res);\nLoading = false;\n}\n\npublic async Task<List<DataModel>> GetData()\n{\ntry\n{\nvar res = await HttpClient.GetFromJsonAsync<Response>(FakeDataUrl);\nreturn res.Results;\n}\ncatch (Exception ex)\n{\nConsole.WriteLine(ex);\nreturn new List<DataModel>();\n}\n}\n\npublic class Response\n{\npublic List<DataModel> Results { get; set; }\n}\n\npublic class DataModel\n{\npublic string Gender { get; set; }\n\npublic Name Name { get; set; }\n\npublic string Email { get; set; }\n\npublic string Nat { get; set; }\n}\n\npublic class Name\n{\npublic string Title { get; set; }\n\npublic string First { get; set; }\n\npublic string Last { get; set; }\n}\n}\n",
        "Type": "Demos.Components.List.demo.Loadmore",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "resposive",
        "Title": "Responsive grid list",
        "Description": "<p>Responsive grid list. The size property the is as same as <a href=\"/components/grid/#Col\">Layout Grid</a>.</p>\n",
        "Code": "<AntList Grid=\"gutter\" DataSource=\"@Data\">\n    <ListItem >\n        <Card Bordered Title=\"@(context.Title)\">\n            <Body>\n            Card context\n            </Body>\n        </Card>\n    </ListItem>\n</AntList>\n\n@code{\n\n    private ListGridType gutter = new ListGridType\n    {\n        Gutter = 16,\n        Xs = 1,\n        Sm = 2,\n        Md = 4,\n        Lg = 4,\n        Xl = 6,\n        Xxl = 3,\n        Column = 3\n    };\n\n    public List<BasicItem> Data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Title 1\"},\n        new BasicItem { Title = \"Title 2\"},\n        new BasicItem { Title = \"Title 3\"},\n        new BasicItem { Title = \"Title 4\"},\n        new BasicItem { Title = \"Title 5\"},\n        new BasicItem { Title = \"Title 6\"},\n    };\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n\n}",
        "Type": "Demos.Components.List.demo.Resposive",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Message",
    "Type": "Feedback",
    "Desc": "<p>Display global messages as feedback in response to user operations.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To provide feedback such as success, warning, error etc.</li>\n<li>A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/message#API\" class=\"anchor\">#</a></h2>\n<blockquote>\n<p>Please confirm that the <code>&lt;AntContainer /&gt;</code> component has been added to <code>App.Razor</code>.</p>\n</blockquote>\n<p>This components provides some static methods, with usage and arguments as following:</p>\n<ul>\n<li><code>MessageService.Success(content, [duration], onClose)</code></li>\n<li><code>MessageService.Error(content, [duration], onClose)</code></li>\n<li><code>MessageService.Info(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warning(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warn(content, [duration], onClose)</code> // alias of warning</li>\n<li><code>MessageService.Loading(content, [duration], onClose)</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>content of the message</td>\n<td>string|ReactNode|config</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>time(seconds) before auto-dismiss, don't dismiss if set to 0 or null</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>Specify a function that will be called when the message is closed</td>\n<td>Action</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><code>afterClose</code> can be called in thenable interface:</p>\n<ul>\n<li><code>MessageService.[level](content, [duration]).ContinueWith(afterClose)</code></li>\n<li><code>MessageService.[level](content, [duration], onClose).ContinueWith(afterClose)</code></li>\n</ul>\n<p>where <code>level</code> refers one static methods of <code>Message</code>. The result of <code>ContinueWith</code> method will be a Task.</p>\n<p>Supports passing parameters wrapped in an object:</p>\n<ul>\n<li><code>MessageService.Open(config:MessageConfig)</code></li>\n<li><code>MessageService.Success(config:MessageConfig)</code></li>\n<li><code>MessageService.Error(config:MessageConfig)</code></li>\n<li><code>MessageService.Info(config:MessageConfig)</code></li>\n<li><code>MessageService.Warning(config:MessageConfig)</code></li>\n<li><code>MessageService.Warn(config:MessageConfig)</code> // alias of warning</li>\n<li><code>MessageService.Loading(config:MessageConfig)</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>content of the message</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>time(seconds) before auto-dismiss, don't dismiss if set to 0 or null</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a function that will be called when the message is closed</td>\n<td>event Action</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized Icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Message</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Global static methods</h3>\n<p>Methods for global configuration and destruction are also provided:</p>\n<ul>\n<li><code>MessageService.Config(options:MessageGlobalConfig)</code></li>\n<li><code>MessageService.Destroy()</code></li>\n</ul>\n<h4>message.config</h4>\n<pre><code class=\"language-c#\">MessageService.Config(new MessageGlobalConfig{\n  Top: 100,\n  Duration: 2,\n  MaxCount: 3,\n  Rtl: true,\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Duration</td>\n<td>time before auto-dismiss, in seconds</td>\n<td>double</td>\n<td>3</td>\n</tr>\n<tr>\n<td>MaxCount</td>\n<td>max message show, drop oldest if exceed limit</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Top</td>\n<td>distance from top</td>\n<td>double</td>\n<td>24</td>\n</tr>\n<tr>\n<td>Rtl</td>\n<td>whether to enable RTL mode</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/hAkKTIW0K/Message.svg",
    "DemoList": [
      {
        "Order": 2,
        "Name": "duration",
        "Title": "Customize duration",
        "Description": "<p>Customize message display duration from default <code>3s</code> to <code>10s</code>.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"default\" OnClick=\"OnClick\">\n    Customized display duration\n</Button>\n\n@code{\n    private void OnClick()\n    {\n        _message.Success(\"This is a prompt message for success, and it will disappear in 10 seconds\", 10);\n    }\n}",
        "Type": "Demos.Components.Message.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "other",
        "Title": "Other types of message",
        "Description": "<p>Messages of success, error and warning types.</p>\n",
        "Code": "@inject MessageService _message\n\n<Space>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Success\">\n            Success\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Error\">\n            Error\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Warning\">\n            Warning\n        </Button>\n    </SpaceItem>\n</Space>\n\n@code{\n    private async Task Success()\n    {\n        await _message.Success(\"This is a success message\");\n    }\n\n    private async Task Error()\n    {\n        await _message.Error(\"This is an error message\");\n\n    }\n\n    private async Task Warning()\n    {\n        await _message.Warning(\"This is a warning message\");\n    }\n}\n",
        "Type": "Demos.Components.Message.demo.Other",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "info",
        "Title": "Normal prompt",
        "Description": "<p>Normal message for information.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private void OnClick()\n    {\n        Console.WriteLine(\"onclick\");\n        _message.Info(\"This is a normal message\");\n    }\n}",
        "Type": "Demos.Components.Message.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "update",
        "Title": "Update Message Content",
        "Description": "<p>Update message content with unique <code>key</code>.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"updatable-{DateTime.Now.Ticks}\";\n        var config = new MessageConfig()\n        {\n            Content = \"Loading...\",\n            Key = key\n        };\n        _message.Loading(config);\n\n        await Task.Delay(2000);\n\n        config.Content = \"Loaded\";\n        config.Duration = 2;\n        await _message.Success(config);\n    }\n}",
        "Type": "Demos.Components.Message.demo.Update",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "continue-with",
        "Title": "Task interface",
        "Description": "<p><code>Message</code> provides a Task interface for <code>onClose</code>. The above example will display a new message when the old message is about to close.</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"default\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _message.Loading(\"Action in progress..\", 2.5)\n            .ContinueWith((result) =>\n            {\n                _message.Info(\"Loading finished\", 2.5)\n                .ContinueWith((result) =>\n                {\n                    _message.Info(\"Loading finished is finished\", 2.5);\n                });\n            });\n    }\n}",
        "Type": "Demos.Components.Message.demo.ContinueWith",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "loading",
        "Title": "Message with loading indicator",
        "Description": "<p>Display a global loading indicator, which is dismissed by itself asynchronously.</p>\n",
        "Code": "@inject MessageService _message\n\n    <Button Type=\"default\" OnClick=\"OnClick\">\n        Display a loading indicator\n    </Button>\n\n@code{\n    private async Task OnClick()\n    {\n        var cofig = new MessageConfig()\n        {\n            Content = \"Action in progress..\",\n            Duration = 0\n        };\n        var task =  _message.Loading(cofig);\n        await Task.Delay(2000);\n        task.Start();\n    }\n}",
        "Type": "Demos.Components.Message.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Select",
    "Type": "Data Entry",
    "Desc": "<p>Select component to select value from options.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A dropdown menu for displaying choices - an elegant alternative to the native <code>&lt;Select&gt;</code> element.</li>\n<li>Utilizing <a href=\"/components/radio/\">Radio</a> is recommended when there are fewer total options (less than 5).</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/select#API\" class=\"anchor\">#</a></h2>\n<pre><code class=\"language-jsx\">&lt;Select&gt;\n  &lt;SelectOption Value=&quot;lucy&quot;&gt;lucy&lt;/SelectOption&gt;\n&lt;/Select&gt;\n</code></pre>\n<h3>Select props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>Show clear button.</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>AutoClearSearchValue</td>\n<td>Whether the current search will be cleared on selecting an item. Only applies when <code>mode</code> is set to <code>multiple</code> or <code>tags</code>.</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>AutoFocus</td>\n<td>Get focus by default</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultActiveFirstOption</td>\n<td>Whether active first option by default</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>Initial selected option.</td>\n<td>string|IEnumerable&lt;string&gt;<br />LabeledValue|IEnumerable&lt;LabeledValue&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether disabled select</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownClassName</td>\n<td>className of dropdown menu</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownMatchSelectWidth</td>\n<td>Determine whether the dropdown menu and the select input are the same width. Default set <code>min-width</code> same as input. <code>false</code> will disable virtual scroll</td>\n<td>Boolean | number</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownRender</td>\n<td>Customize dropdown content</td>\n<td>(menuNode: RenderFragment, props: Properties) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownStyle</td>\n<td>style of dropdown menu</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>FilterOption</td>\n<td>If true, filter options by input, if function, filter options against it. The function will receive two arguments, <code>inputValue</code> and <code>option</code>, if the function returns <code>true</code>, the option will be included in the filtered set; Otherwise, it will be excluded.</td>\n<td>Boolean or function(inputValue, option)</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>GetPopupContainer</td>\n<td>Parent Node which the selector should be rendered to. Default to <code>body</code>. When position issues happen, try to modify it into scrollable content and position it relative. <a href=\"https://codesandbox.io/s/4j168r7jw0\">Example</a></td>\n<td>function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>LabelInValue</td>\n<td>whether to embed label in value, turn the format of value from <code>string</code> to <code>{key: string, label: RenderFragment}</code></td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ListHeight</td>\n<td>Config popup height</td>\n<td>number</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagCount</td>\n<td>Max tag count to show</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagTextLength</td>\n<td>Max tag text length to show</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagPlaceholder</td>\n<td>Placeholder for not showing tags</td>\n<td>RenderFragment/function(omittedValues)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>TagRender</td>\n<td>Customize tag render</td>\n<td>(props: Properties) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Mode</td>\n<td>Set mode of Select</td>\n<td><code>multiple</code> | <code>tags</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>NotFoundContent</td>\n<td>Specify content to show when no result matches..</td>\n<td>RenderFragment</td>\n<td>'Not Found'</td>\n<td></td>\n</tr>\n<tr>\n<td>OptionFilterProp</td>\n<td>Which prop value of option will be used for filter if filterOption is true</td>\n<td>string</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>OptionLabelProp</td>\n<td>Which prop value of option will render as content of select. <a href=\"https://codesandbox.io/s/antd-reproduction-template-tk678\">Example</a></td>\n<td>string</td>\n<td><code>value</code> for <code>combobox</code>, <code>children</code> for other modes</td>\n<td></td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>Placeholder of select</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowArrow</td>\n<td>Whether to show the drop-down arrow</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>Whether show search input in single mode.</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Size of Select input.</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SuffixIcon</td>\n<td>The custom suffix icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>RemoveIcon</td>\n<td>The custom remove icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ClearIcon</td>\n<td>The custom clear icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MenuItemSelectedIcon</td>\n<td>The custom menuItemSelected icon with multiple options</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>TokenSeparators</td>\n<td>Separator used to tokenize on tag/multiple mode</td>\n<td>IEnumerable&lt;string&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Current selected option.</td>\n<td>string|IEnumerable&lt;string&gt;<br />LabeledValue|IEnumerable&lt;LabeledValue&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Virtual</td>\n<td>Disable virtual scroll when set to <code>false</code></td>\n<td>Boolean</td>\n<td>true</td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>OnBlur</td>\n<td>Called when blur</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Called when select an option or input value change, or value of input is changed in combobox mode</td>\n<td>function(value, option:SelectOption/IEnumerable&lt;SelectOption&gt;)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnDeselect</td>\n<td>Called when a option is deselected, param is the selected option's value. Only called for multiple or tags, effective in multiple or tags mode only.</td>\n<td>function(string|number|LabeledValue)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnFocus</td>\n<td>Called when focus</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnInputKeyDown</td>\n<td>Called when key pressed</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnMouseEnter</td>\n<td>Called when mouse enter</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnMouseLeave</td>\n<td>Called when mouse leave</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnPopupScroll</td>\n<td>Called when dropdown scrolls</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>Callback function that is fired when input changed.</td>\n<td>function(value: string)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelect</td>\n<td>Called when a option is selected, the params are option's value (or key) and option instance.</td>\n<td>function(string|LabeledValue, option:Option)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultOpen</td>\n<td>Initial open state of dropdown</td>\n<td>Boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Open</td>\n<td>Controlled open state of dropdown</td>\n<td>Boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnDropdownVisibleChange</td>\n<td>Call when dropdown open</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>indicate loading state</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Bordered</td>\n<td>whether has border style</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Select Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Blur()</td>\n<td>Remove focus</td>\n<td></td>\n</tr>\n<tr>\n<td>Focus()</td>\n<td>Get focus</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>SelectOption props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Disabled</td>\n<td>Disable this SelectOption</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td><code>title</code> of Select after select this SelectOption</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>default to filter with this property</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>additional class to SelectOption</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>OptGroup props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key</td>\n<td></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Label</td>\n<td>Group label</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>FAQ</h2>\n<h3>The dropdown is closed when click <code>dropdownRender</code> area?</h3>\n<p>See the instruction in <a href=\"#components-select-demo-custom-dropdown-menu\">dropdownRender example</a>.</p>\n<h3>Why sometime customize SelectOption cause scroll break?</h3>\n<p>Virtual scroll internal set item height as <code>32px</code>. You need to adjust <code>ListItemHeight</code> when your option height is less and <code>ListHeight</code> config list container height:</p>\n<pre><code class=\"language-tsx\">&lt;Select ListItemHeight=&quot;10&quot; ListHeight=&quot;250&quot; /&gt;\n</code></pre>\n<p>Note: <code>ListItemHeight</code> and <code>ListHeight</code> are internal props. Please only modify when necessary.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/_0XzgOis7/Select.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Usage",
        "Description": "<p>Basic Usage.</p>\n",
        "Code": "<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" OnChange=\"OnChange\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"disabled\" Disabled>Disabled</SelectOption>\n    <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n</Select>\n<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" Disabled>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" Loading>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" AllowClear>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "automatic-tokenization",
        "Title": "Automatic tokenization",
        "Description": "<p>Try to copy <code>Lucy,Jack</code> to the input. Only available in tags and multiple mode.</p>\n",
        "Code": "<Select Mode=\"tags\"\n        Style=\"width:100%\"\n        OnChange=\"OnChange\"\n        TokenSeparators=\"@(new[] { \",\" })\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    protected override void OnInitialized()\n    {\n        const int min = 10;\n        const int max = 36;\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.AutomaticTokenization",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 21,
        "Name": "custom-dropdown-menu",
        "Title": "Custom dropdown",
        "Description": "<p>Customize the dropdown menu via <code>dropdownRender</code>.</p>\n",
        "Code": "<Select Style=\"width:240px\"\n        Placeholder=\"custom dropdown render\"\n        DropdownRender=\"@OnDropdownRender\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@code{\n    private int _index = 0;\n    private string _name = \"\";\n    private List<string> _items = new List<string> { \"jack\", \"lucy\" };\n\n    private void AddItem(MouseEventArgs args)\n    {\n        var newItem = !string.IsNullOrWhiteSpace(_name) ? _name : $\"New Item {_index++}\";\n        _items.Add(newItem);\n        _name = \"\";\n    }\n\n    private RenderFragment OnDropdownRender(RenderFragment originNode, Properties props)\n    {\n        RenderFragment customDropdownRender =\n        @<Template>\n            <div>\n                @originNode\n                <Divider Style=\"margin:4px 0\"></Divider>\n                <div style=\"display:flex;flex-wrap:nowrap;padding:8px\">\n                    <Input Style=\"flex:auto\" @bind-Value=\"@_name\"/>\n                    <a style=\"flex:none;padding:8px;display:block;cursor:pointer\" @onclick=\"AddItem\">\n                        <Icon Type=\"plus\" Theme=\"outline\"></Icon>\n                        Add Item\n                    </a>\n                </div>\n            </div>\n        </Template>;\n        return customDropdownRender;\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.CustomDropdownMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "coordinate",
        "Title": "coordinate",
        "Description": "<p>Coordinating the selection of provinces and cities is a common use case and demonstrates how selection can be coordinated.</p>\n<p>Using the <a href=\"/components/cascader\">Cascader</a> component is strongly recommended instead as it is more flexible and capable.</p>\n",
        "Code": "<Select Style=\"width: 120px\" DefaultValue=\"@_provinceData[0]\" OnChange=\"OnChange\">\n    @foreach (var province in _provinceData)\n    {\n        <SelectOption Value=\"@province\">@province</SelectOption>\n    }\n</Select>\n\n<Select Style=\"width: 120px\" Value=\"@_cityValue\" OnChange=\"OnChangeCity\">\n    @foreach (var city in _cities)\n    {\n        <SelectOption Value=\"@city\">@city</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string _cityValue;\n    private string[] _cities = new string[0];\n    private readonly string[] _provinceData = new[] { \"Zhejiang\", \"Jiangsu\" };\n\n    private readonly Dictionary<string, string[]> _cityData = new Dictionary<string, string[]>\n    {\n        {\"Zhejiang\",new[]{ \"Hangzhou\", \"Ningbo\", \"Wenzhou\"}},\n        {\"Jiangsu\",new[]{\"Nanjing\",\"Suzhou\",\"Zhenjiang\"}}\n    };\n\n    protected override void OnParametersSet()\n    {\n        _cities = _cityData[_provinceData[0]];\n        _cityValue = _cities.First();\n        base.OnParametersSet();\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        _cities = _cityData[value.AsT0];\n        _cityValue = _cities.First();\n        InvokeAsync(StateHasChanged);\n        Console.WriteLine($\"selected: ${value}\");\n    }\n\n    private void OnChangeCity(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Coordinate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 999,
        "Name": "debug",
        "Title": "4.0 Debug",
        "Description": "<p>Basic Usage.</p>\n",
        "Code": "<style>\n    #components-select-demo-debug .debug-align {\n        position: relative;\n        display: inline-block;\n        line-height: 32px;\n        height: 32px;\n        background: rgba(255, 0, 0, 0.1);\n        box-sizing: border-box;\n    }\n\n        #components-select-demo-debug .debug-align:after {\n            position: absolute;\n            content: '';\n            border: 1px solid green;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            pointer-events: none;\n        }\n\n    #SelectDemoDebugContainer {\n        z-index: 1;\n        width: 500px;\n        background: #FFF;\n        position: relative;\n        border: 1px solid red;\n    }\n</style>\n\n<div id=\"SelectDemoDebugContainer\">\n    <Input Style=\"width: 100px\" Value=\"222\" />\n    <Select ShowSearch\n            Placeholder=\"233\"\n            OnChange=\"@OnChange\"\n            Style=\"width: 120px\">\n        <SelectOption Value=\"jack\">Jack</SelectOption>\n        <SelectOption Value=\"lucy\">Lucy</SelectOption>\n        <SelectOption Value=\"disabled\" disabled>Disabled</SelectOption>\n        <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n        <SelectOption Value=\"long\">I am super super long!</SelectOption>\n    </Select>\n    <Select ShowSearch\n            Mode=\"multiple\"\n            Style=\"width: 120px\"\n            DefaultValue=\"@(new[]{\"lucy\"})\"\n            OnChange=\"@OnChange\"\n            Placeholder=\"233\">\n        <SelectOption Value=\"jack\">Jack</SelectOption>\n        <SelectOption Value=\"lucy\">Lucy</SelectOption>\n        <SelectOption Value=\"disabled\" disabled>Disabled</SelectOption>\n        <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n        <SelectOption Value=\"long\">I am super super long!</SelectOption>\n    </Select>\n    <span className=\"debug-align\">AntDesign</span>\n    <Button>222</Button>\n</div>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Debug",
        "Style": "\n#components-select-demo-debug .debug-align {\n  position: relative;\n  display: inline-block;\n  line-height: 32px;\n  height: 32px;\n  background: rgba(255, 0, 0, 0.1);\n  box-sizing: border-box;\n}\n#components-select-demo-debug .debug-align:after {\n  position: absolute;\n  content: '';\n  border: 1px solid green;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n}\n\n",
        "Debug": true
      },
      {
        "Order": 10,
        "Name": "label-in-value",
        "Title": "Get value of selected item",
        "Description": "<p>As a default behavior, the onChange callback can only get the value of the selected item. The labelInValue prop can be used to get the label property of the selected item.</p>\n<p>The label of the selected item will be packed as an object for passing to the onChange callback.</p>\n",
        "Code": "<Select LabelInValue\n        DefaultValue=\"_defaultValue\"\n        Style=\"width:120px\"\n        OnChange=\"OnChange\">\n    <SelectOption Value=\"jack\">Jack (100)</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy (101)</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private LabeledValue _defaultValue = new LabeledValue(\"jack\", \"Jack (100)\");\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.LabelInValue",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "Bordered-less",
        "Description": "<p>Bordered-less style component.</p>\n",
        "Code": "<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" Bordered=\"false\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n</Select>\n\n<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" Bordered=\"false\" Disabled>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n",
        "Type": "Demos.Components.Select.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "optgroup",
        "Title": "Option Group",
        "Description": "<p>Using <code>OptGroup</code> to group the options.</p>\n",
        "Code": "<Select DefaultValue=\"@(\"lucy\")\"\n        Style=\"width:200px\"\n        OnChange=OnChange>\n    <SelectOptGroup Label=\"Manager\">\n        <SelectOption Value=\"jack\">Jack</SelectOption>\n        <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    </SelectOptGroup>\n    <SelectOptGroup Label=\"Engineer\">\n        <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n    </SelectOptGroup>\n</Select>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Optgroup",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "search-box",
        "Title": "Search Box",
        "Description": "<p>Search with remote data.</p>\n",
        "Code": "<Select ShowSearch\n        Style=\"width:200px\"\n        Placeholder=\"input search text\"\n        ShowArrow=\"false\"\n        FilterOption=\"false\"\n        DefaultActiveFirstOption=\"false\"\n        OnSearch=\"@OnSearch\"\n        OnChange=\"@OnChange\">\n    @foreach (var value in _items)\n    {\n        <SelectOption Value=\"@value\">@value</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@using System.Web;\n@using System.Text.Json;\n@inject HttpClient Http\n@code\n{\n    private Task<string> _oldTask;\n    private List<string> _items = new List<string>();\n\n    private async void OnSearch(string value)\n    {\n        if (!string.IsNullOrWhiteSpace(value))\n        {\n            if (_oldTask == null || _oldTask.IsCompleted)\n            {\n                var key = HttpUtility.UrlEncode(value);\n                var url = $\"https://suggest.taobao.com/sug?code=utf-8&q={key}\";\n\n                _oldTask = Http.GetStringAsync(url);\n                var content = await _oldTask;\n\n                var result = JsonSerializer.Deserialize<ApiResult>(content);\n                _items.Clear();\n                foreach (var item in result.result)\n                {\n                    _items.Add(item[0]);\n                }\n\n                StateHasChanged();\n            }\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n\n    public class ApiResult\n    {\n        public List<string[]> result { get; set; }\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.SearchBox",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 24,
        "Name": "custom-tag-render",
        "Title": "Custom Tag Render",
        "Description": "<p>Allows for custom rendering of tags</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        Style=\"width:100%\"\n        TagRender=\"TagRender\"\n        DefaultValue=\"@(new[]{\"gold\",\"cyan\"})\"\n        Options=\"@_options\">\n</Select>\n\n@using OneOf;\n@code\n{\n    private LabeledValue[] _options;\n    protected override void OnInitialized()\n    {\n        _options = new LabeledValue[]\n        {\n            new LabeledValue(\"gold\",\"gold\"),\n            new LabeledValue(\"lime\",\"lime\"),\n            new LabeledValue(\"green\",\"green\"),\n            new LabeledValue(\"cyan\",\"cyan\")\n        };\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: {value}\");\n    }\n\n    private RenderFragment TagRender(Properties props)\n    {\n        RenderFragment tag =@<Tag Color=@props.Value Closable=@props.Closable Style=\"margin-right:3px\" OnClose=\"@props.OnClose\">@props.Value</Tag>;\n        return tag;\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.CustomTagRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "big-data",
        "Title": "Big Data",
        "Description": "<p>Select use <a href=\"https://github.com/react-component/virtual-list\">virtual scroll</a> which get better performance <a href=\"https://codesandbox.io/s/beautiful-banzai-m72lv\">than 3.0</a>.</p>\n",
        "Code": "<Title Level=\"4\">@_options.Length Items</Title>\n\n<Select Mode=\"multiple\"\n        Style=\"width:100%\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@(new[] { \"a10\", \"c12\", })\"\n        OnChange=\"@OnChange\"\n        Options=\"@_options\">\n</Select>\n\n@using OneOf;\n@code\n{\n    private LabeledValue[] _options;\n    protected override void OnInitialized()\n    {\n        const int min = 0;\n        const int max = 36;\n        _options = new LabeledValue[max - min];\n\n        for (var i = min; max > i; i++)\n        {\n            var disabled = i == 10;\n            var value = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n            _options[i] = new LabeledValue(value, value);\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.BigData",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 55,
        "Name": "clear-values",
        "Title": "Clear Values",
        "Description": "<p>Call the <code>ClearAll()</code> method to clear values.</p>\n",
        "Code": "<Select @ref=\"select\" Mode=\"tags\"\n        Style=\"width: 100%\"\n        Placeholder=\"Tags Mode\" SelectedValue=\"@selectedItems\" AllowClear=true>\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n<Button OnClick=\"Reset\">\n    Reset\n</Button>\n\n@using OneOf;\n@code\n{\n    Select select;\n    private string[] _items;\n    private OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> selectedItems = new List<string>();\n\n    protected override void OnInitialized()\n    {\n        var min = 10;\n        var max = 36;\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private async Task Reset(MouseEventArgs args)\n    {\n        var values = selectedItems.AsT1.ToList();\n        Console.WriteLine(\"Before delete count: \" + values.Count());\n        values.Clear();\n        selectedItems = values;\n\n        await select.ClearAll();\n        Console.WriteLine(\"After delete count: \" + selectedItems.AsT1.Count());\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.ClearValues",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tags",
        "Title": "Tags",
        "Description": "<p>Select with tags, transform input to tag (scroll the menu)</p>\n",
        "Code": "<Select Mode=\"tags\"\n        Style=\"width: 100%\"\n        Placeholder=\"Tags Mode\"\n        OnChange=\"@OnChange\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    protected override void OnInitialized()\n    {\n        var min = 10;\n        var max = 36;\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Tags",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "multiple",
        "Title": "multiple selection",
        "Description": "<p>Multiple selection, selecting from existing items.</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        Style=\"width: 100%\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@_defaultValues\"\n        @bind-Value=\"@_value\"\n        OnChange=\"OnChange\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n<label>Selected Values: @_value</label>\n\n@using OneOf;\n@code\n{\n    private string _value;\n    private string[] _items;\n    private string[] _defaultValues;\n\n    protected override void OnInitialized()\n    {\n        const int min = 10;\n        const int max = 36;\n        _defaultValues = new[] { \"0a10\", \"0c12\" };\n\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 22,
        "Name": "hide-selected",
        "Title": "Hide Already Selected",
        "Description": "<p>Hide already selected options in the dropdown.</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        Style=\"width: 100%\"\n        HideSelected=\"true\"\n        Placeholder=\"Inserted are removed\"\n        OnChange=\"@OnChange\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private readonly string[] _items = new[] { \"Apples\", \"Nails\", \"Bananas\", \"Helicopters\" };\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.HideSelected",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "search",
        "Title": "Select with search field",
        "Description": "<p>Search the options while expanded.</p>\n",
        "Code": "<Select ShowSearch\n        Style=\"width: 200px\"\n        Placeholder=\"Select a person\"\n        OptionFilterProp=\"children\"\n        OnBlur=\"OnBlur\"\n        OnFocus=\"OnFocus\"\n        OnChange=\"OnChange\"\n        OnSearch=\"OnSearch\"\n        @bind-Value=\"@_value\"\n        FilterOption=\"FilterOptionValue\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"tom\">Tom</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private string _value;\n    private readonly Func<string, SelectOption, bool> FilterOptionValue = FilterOption;\n\n    private void OnBlur()\n    {\n        Console.WriteLine(\"blur\");\n    }\n\n    private void OnFocus()\n    {\n        Console.WriteLine(\"focus\");\n    }\n\n    private void OnSearch(string value)\n    {\n        Console.WriteLine($\"search: {value}\");\n    }\n\n    private static bool FilterOption(string value, SelectOption option)\n    {\n        var optionContent = option.Children.ToUpperInvariant();\n        return optionContent.Contains(value, StringComparison.OrdinalIgnoreCase);\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Search",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 20,
        "Name": "suffix",
        "Title": "Suffix",
        "Description": "<p>Basic Usage.</p>\n",
        "Code": "<Select SuffixIcon=\"_syncIcon\"\n        DefaultValue=\"@(\"luck\")\"\n        Style=\"width: 120px\"\n        OnChange=\"@OnChange\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"disabled\" Disabled>Disabled</SelectOption>\n    <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n</Select>\n\n<Select SuffixIcon=\"_smileIcon\"\n        DefaultValue=\"@(\"luck\")\"\n        Style=\"width: 120px\" Disabled>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private RenderFragment _syncIcon;\n    private RenderFragment _smileIcon;\n\n    protected override void OnParametersSet()\n    {\n        _syncIcon =@<Icon Type=\"sync\" Theme=\"true\"></Icon>;\n        _smileIcon =@<Icon Type=\"smile\" Theme=\"outline\" Rotate=\"180\"></Icon>;\n        base.OnParametersSet();\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Suffix",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 30,
        "Name": "popup-container",
        "Title": "fix popup container",
        "Description": "<p>Fix popup container.</p>\n",
        "Code": "<div style=\"margin: 10px; overflow: scroll; height: 200px\">\n    <div style=\"padding: 100px; height: 1000px; background: #eee; position: relative \" id=\"area\">\n        <Select PopupContainerSelector=\"#area\" DefaultValue=@(\"lucy\") Style=\"width:120px\">\n            <SelectOption Value=\"jack\">Jack</SelectOption>\n            <SelectOption Value=\"lucy\">Lucy</SelectOption>\n            <SelectOption Value=\"disabled\" Disabled>Disabled</SelectOption>\n            <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n        </Select>\n    </div>\n</div>",
        "Type": "Demos.Components.Select.demo.PopupContainer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "size",
        "Title": "Sizes",
        "Description": "<p>The height of the input field for the select defaults to 32px. If size is set to large, the height will be 40px, and if set to small, 24px.</p>\n",
        "Code": "<style>\n    .code-box-demo .ant-select {\n        margin: 0 8px 10px 0;\n    }\n\n    .ant-row-rtl .code-box-demo .ant-select {\n        margin: 0 0 10px 8px;\n    }\n\n    #components-select-demo-search-box .code-box-demo .ant-select {\n        margin: 0;\n    }\n</style>\n\n<RadioGroup @bind-Value=\"@_sizeValue\" OnChange=\"OnChangeSize\" TValue=\"string\">\n    <Radio RadioButton Value=\"@(\"large\")\">Large</Radio>\n    <Radio RadioButton Value=\"@(\"default\")\">Default</Radio>\n    <Radio RadioButton Value=\"@(\"small\")\">Small</Radio>\n</RadioGroup>\n<br />\n<br />\n\n<Select Size=\"@_sizeValue\"\n        DefaultValue=\"@(\"0a10\")\"\n        OnChange=OnChange\n        Style=\"width: 200px\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\" Title=\"@item\">@item</SelectOption>\n    }\n</Select>\n<br />\n<br />\n\n<Select Mode=\"multiple\"\n        Size=\"@_sizeValue\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@_defaultValues\"\n        OnChange=OnChange\n        Style=\"width: 100%\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n<br />\n\n<Select Mode=\"multiple\"\n        Size=\"@_sizeValue\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@_defaultValues\"\n        OnChange=OnChange\n        Style=\"width: 100%\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n<br />\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    private string[] _defaultValues;\n    private string _sizeValue = AntSizeLDSType.Default;\n\n    protected override void OnInitialized()\n    {\n        var min = 10;\n        var max = 36;\n        _defaultValues = new[] { \"0a10\", \"0c12\" };\n\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChangeSize(string value)\n    {\n        _sizeValue = value;\n        Console.WriteLine($\"selected size: ${value}\");\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "option-label-prop",
        "Title": "Custom selection render",
        "Description": "<p>Spacified the prop name of Option which will be rendered in select box.</p>\n",
        "Code": "<style>\n    .demo-option-label-item > span {\n        margin-right: 6px;\n    }\n</style>\n\n<Select Mode=\"multiple\"\n        Style=\"width: 100%\"\n        Placeholder=\"select one country\"\n        DefaultValue=\"@(new[]{\"china\"})\"\n        OptionLabelProp=\"label\"\n        OnChange=OnChange>\n    <SelectOption Value=\"china\" Label=\"China\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"China\">\uD83C\uDDE8\uD83C\uDDF3</span>China (中国)\n        </div>\n    </SelectOption>\n    <SelectOption Value=\"usa\" Label=\"USA\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"USA\">\uD83C\uDDFA\uD83C\uDDF8</span>USA (美国)\n        </div>\n    </SelectOption>\n    <SelectOption Value=\"japan\" Label=\"Japan\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"Japan\">\uD83C\uDDEF\uD83C\uDDF5</span>Japan (日本)\n        </div>\n    </SelectOption>\n    <SelectOption Value=\"korea\" Label=\"Korea\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"Korea\">\uD83C\uDDF0\uD83C\uDDF7</span>Korea (韩国)\n        </div>\n    </SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.OptionLabelProp",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "select-users",
        "Title": "Search and Select Users",
        "Description": "<p>A complete multiple select sample with remote search, debounce fetch, ajax callback order flow, and loading state.</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        LabelInValue\n        Placeholder=\"Select users\"\n        FilterOption=true\n        OnSearch=\"@OnSearch\"\n        OnChange=\"@OnChange\"\n        Style=\"width:100%\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private readonly string[] _items = new string[0];\n\n    private void OnSearch(string value) { }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Components.Select.demo.SelectUsers",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Icon",
    "Type": "General",
    "Desc": "<p>Semantic vector graphics. Before use icons。</p>\n<h2>List of icons</h2>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/icon#API\" class=\"anchor\">#</a></h2>\n<p>Common Icon</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassName</td>\n<td>className of Icon</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Style properties of icon, like fontSize and color</td>\n<td>Css propertities</td>\n<td></td>\n</tr>\n<tr>\n<td>Spin</td>\n<td>Rotate icon with animation</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Rotate</td>\n<td>Rotate by n degrees (not working in IE9)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>TwoToneColor</td>\n<td>Only supports the two-tone icon. Specify the primary color.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>We still have three different themes for icons, icon component name is the icon name suffixed by the theme name.</p>\n<p>Custom Icon</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Style</td>\n<td>Style properties of icon, like fontSize and color</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>Spin</td>\n<td>Rotate icon with animation</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Rotate</td>\n<td>Rotate degrees (not working in IE9)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Component</td>\n<td>The component used for the root node.</td>\n<td></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/rrwbSt3FQ/Icon.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Import icons from <code>@ant-design/icons</code>, component name of icons with different theme is the icon name suffixed by the theme name. Specific the <code>spin</code> property to show spinning animation.</p>\n",
        "Code": "<div  class=\"icons-list\">\n    <Icon Type=\"home\" />\n    <Icon Type=\"setting\" Theme=\"fill\" />\n    <Icon Type=\"smile\" Theme=\"outline\" />\n    <Icon Type=\"sync\" Theme=\"outline\" Spin />\n    <Icon Type=\"smile\" Theme=\"outline\" Rotate=\"180\" />\n    <Icon Type=\"loading\" Theme=\"outline\" />\n</div>\n",
        "Type": "Demos.Components.Icon.demo.Basic",
        "Style": "\n.icons-list .anticon {\n  margin-right: 6px;\n  font-size: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "two-tone",
        "Title": "Two-tone icon and colorful icon",
        "Description": "<p>You can set <code>twoToneColor</code> prop to specific primary color for two-tone icons.</p>\n",
        "Code": "<div>\n    <Icon Type=\"smile\" Theme=\"twotone\" Height=\"2em\" Width=\"2em\" />\n    <Icon Type=\"heart\" Theme=\"twotone\" TwotoneColor=\"#eb2f96\" Height=\"2em\" Width=\"2em\" />\n    <Icon Type=\"check-circle\" Theme=\"twotone\" TwotoneColor=\"#52c41a\" Height=\"2em\" Width=\"2em\" />\n</div>\n\n\n",
        "Type": "Demos.Components.Icon.demo.Twotone",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "scriptUrl",
        "Title": "Multiple resources from iconfont.cn",
        "Description": "<p>You can use <code>scriptUrl</code> as an array after <code>@ant-design/icons@4.1.0</code>, manage icons in one <code>&lt;Icon /&gt;</code> from multiple <a href=\"http://iconfont.cn/\">iconfont.cn</a> resources. If icon with a duplicate name in resources, it will overrided in array order.</p>\n",
        "Code": "@inject IconService iconService;\n\n<div class=\"icons-list\">\n    <IconFont Type=\"icon-javascript\" />\n    <IconFont Type=\"icon-java\" />\n    <IconFont Type=\"icon-shoppingcart\" />\n    <IconFont Type=\"icon-python\" />\n</div>\n\n@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        await iconService.CreateFromIconfontCN(\"//at.alicdn.com/t/font_1788044_0dwu4guekcwr.js\");\n        await iconService.CreateFromIconfontCN(\"//at.alicdn.com/t/font_1788592_a5xf2bdic3u.js\");\n    }\n}",
        "Type": "Demos.Components.Icon.demo.ScriptUrl",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "custom",
        "Title": "Custom Icon",
        "Description": "<p>Create a reusable React component by using <code>&lt;Icon component={...} /&gt;</code>. The property <code>component</code> takes a React component that renders to <code>svg</code> element.</p>\n",
        "Code": "@{\n    RenderFragment HeartSvg =\n        @<svg width=\"1em\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 1024 1024\">\n            <path d=\"M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9z\"/>\n        </svg>;\n\n    RenderFragment PandaSvg =\n        @<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\" fill=\"currentColor\">\n            <path d=\"M99.096 315.634s-82.58-64.032-82.58-132.13c0-66.064 33.032-165.162 148.646-148.646 83.37 11.91 99.096 165.162 99.096 165.162l-165.162 115.614zM924.906 315.634s82.58-64.032 82.58-132.13c0-66.064-33.032-165.162-148.646-148.646-83.37 11.91-99.096 165.162-99.096 165.162l165.162 115.614z\"\n                  fill=\"#6B676E\"\n                  p-id=\"1143\"/>\n            <path d=\"M1024 561.548c0 264.526-229.23 429.42-512.002 429.42S0 826.076 0 561.548 283.96 66.064 512.002 66.064 1024 297.022 1024 561.548z\"\n                  fill=\"#FFEBD2\"\n                  p-id=\"1144\"/>\n            <path d=\"M330.324 842.126c0 82.096 81.34 148.646 181.678 148.646s181.678-66.55 181.678-148.646H330.324z\"\n                  fill=\"#E9D7C3\"\n                  p-id=\"1145\"/>\n            <path d=\"M644.13 611.098C594.582 528.516 561.55 512 512.002 512c-49.548 0-82.58 16.516-132.13 99.096-42.488 70.814-78.73 211.264-49.548 247.742 66.064 82.58 165.162 33.032 181.678 33.032 16.516 0 115.614 49.548 181.678-33.032 29.18-36.476-7.064-176.93-49.55-247.74z\"\n                  fill=\"#FFFFFF\"\n                  p-id=\"1146\"/>\n            <path d=\"M611.098 495.484c0-45.608 36.974-82.58 82.58-82.58 49.548 0 198.194 99.098 198.194 165.162s-79.934 144.904-148.646 99.096c-49.548-33.032-132.128-148.646-132.128-181.678zM412.904 495.484c0-45.608-36.974-82.58-82.58-82.58-49.548 0-198.194 99.098-198.194 165.162s79.934 144.904 148.646 99.096c49.548-33.032 132.128-148.646 132.128-181.678z\"\n                  fill=\"#6B676E\"\n                  p-id=\"1147\"/>\n            <path d=\"M512.002 726.622c-30.06 0-115.614 5.668-115.614 33.032 0 49.638 105.484 85.24 115.614 82.58 10.128 2.66 115.614-32.944 115.614-82.58-0.002-27.366-85.556-33.032-115.614-33.032z\"\n                  fill=\"#464655\"\n                  p-id=\"1148\"/>\n            <path d=\"M330.324 495.484m-33.032 0a33.032 33.032 0 1 0 66.064 0 33.032 33.032 0 1 0-66.064 0Z\"\n                  fill=\"#464655\"\n                  p-id=\"1149\"/>\n            <path d=\"M693.678 495.484m-33.032 0a33.032 33.032 0 1 0 66.064 0 33.032 33.032 0 1 0-66.064 0Z\"\n                  fill=\"#464655\"\n                  p-id=\"1150\"/>\n        </svg>;\n}\n\n<div className=\"custom-icons-list\">\n    <Icon Component=\"HeartSvg\" Style=\"color: hotpink;\" />\n    <Icon Component=\"PandaSvg\" Style=\"font-size: 32px;\" />\n</div>\n\n<style>\n    .custom-icons-list .anticon {\n        margin-right: 6px;\n    }\n</style>",
        "Type": "Demos.Components.Icon.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "iconfont",
        "Title": "Use iconfont.cn",
        "Description": "<p>If you are using <a href=\"http://iconfont.cn/\">iconfont.cn</a>, you can use the icons in your project gracefully.</p>\n",
        "Code": "@inject IconService iconService;\n\n<div class=\"icons-list\">\n    <IconFont Type=\"icon-tuichu\" />\n    <IconFont Type=\"icon-facebook\" />\n    <IconFont Type=\"icon-twitter\" />\n</div>\n\n@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        await iconService.CreateFromIconfontCN(\"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\");\n    }\n}\n",
        "Type": "Demos.Components.Icon.demo.Iconfont",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "list",
        "Title": "Basic",
        "Description": "",
        "Code": "\n<div style=\"display: flex; justify-content: space-between;\">\n    <RadioGroup @bind-Value=\"currentTheme\" ButtonStyle=\"solid\" Size=\"large\" TValue=\"string\" OnChange=\"OnThemeChanged\">\n        <Radio RadioButton Value=\"@(\"outline\")\">\n            <Icon Component=\"OutlineSvg\" Style=\"font-size:16px\" />@LanguageService.Resources[\"app.docs.components.icon.outlined\"]\n        </Radio>\n        <Radio RadioButton Value=\"@(\"fill\")\">\n            <Icon Component=\"FilledSvg\" Style=\"font-size:16px\" />@LanguageService.Resources[\"app.docs.components.icon.filled\"]\n        </Radio>\n        <Radio RadioButton Value=\"@(\"twotone\")\">\n            <Icon Component=\"TwoToneSvg\" Style=\"font-size:16px\" />@LanguageService.Resources[\"app.docs.components.icon.two-tone\"]\n        </Radio>\n    </RadioGroup>\n    <Search Size=\"@InputSize.Large\"\n            Style=\"margin: 0px 10px; flex: 1 1 0%;\"\n            Placeholder=\"@LanguageService.Resources[\"app.docs.components.icon.search.placeholder\"]\"\n            OnInput=\"@(args => OnSearching(args.Value?.ToString()))\" />\n</div>\n\n@if (displayIcons == null || displayIcons.Count == 0)\n{\n    <div style=\"text-align:center; margin-top:20px;\">\n        <Spin Size=\"large\" Tip=\"Loading...\" />\n    </div>\n}\nelse\n{\n    foreach (var item in displayIcons)\n    {\n        <h3>@LanguageService.Resources[\"app.docs.components.icon.category.\" + @item.Category]</h3>\n\n        <ul class=\"anticons-list\">\n            @foreach (var name in item.IconNames)\n            {\n                <li class=\"@item.Category\" @onclick=\"(() => OnCopyClick(currentTheme, name))\">\n                    <Icon Type=\"@name\" Theme=\"@currentTheme\" Style=\"font-size:36px\" @key=\"@($\"{currentTheme}-{name}\")\"></Icon>\n                    <div class=\"anticon-class\">\n                        <Badge>@name</Badge>\n                    </div>\n                </li>\n            }\n        </ul>\n    }\n}\n\n\n@inject AntDesign.Docs.Services.IconListService iconListService\n@inject IconService IconService\n@inject ILanguageService LanguageService\n@inject MessageService messageService\n@inject IJSRuntime JsRuntime\n\n@code{\n\n    private string currentTheme = \"outline\";\n    RenderFragment OutlineSvg =@<svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\" viewBox=\"0 0 1024 1024\"><path d=\"M864 64H160C107 64 64 107 64 160v704c0 53 43 96 96 96h704c53 0 96-43 96-96V160c0-53-43-96-96-96z m-12 800H172c-6.6 0-12-5.4-12-12V172c0-6.6 5.4-12 12-12h680c6.6 0 12 5.4 12 12v680c0 6.6-5.4 12-12 12z\"></path></svg>;\n    RenderFragment FilledSvg =@<svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\" viewBox=\"0 0 1024 1024\"><path d=\"M864 64H160C107 64 64 107 64 160v704c0 53 43 96 96 96h704c53 0 96-43 96-96V160c0-53-43-96-96-96z\"></path></svg>;\n    RenderFragment TwoToneSvg =@<svg width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\" class=\"\" viewBox=\"0 0 1024 1024\"><path d=\"M16 512c0 273.932 222.066 496 496 496s496-222.068 496-496S785.932 16 512 16 16 238.066 16 512z m496 368V144c203.41 0 368 164.622 368 368 0 203.41-164.622 368-368 368z\"></path></svg>;\n\n    private IList<AntDesign.Docs.Services.IconItem> lstIcons { get; set; }\n    private IList<AntDesign.Docs.Services.IconItem> displayIcons { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n\n        await base.OnInitializedAsync();\n\n        LanguageService.LanguageChanged += async (_, args) =>\n        {\n            await InvokeAsync(StateHasChanged);\n        };\n\n        lstIcons = await iconListService.GetIcons();      \n        await OnThemeChanged(currentTheme);\n    }\n\n    private async Task OnSearching(string word)\n    {\n        lstIcons =await iconListService.Search(word);\n        await OnThemeChanged(currentTheme);\n\n    }\n\n    private async Task OnThemeChanged(string newTheme)\n    {\n        displayIcons = null;\n\n        displayIcons = new List<Services.IconItem>();\n        foreach (var categorys in lstIcons)\n        {\n            var itemIcons = new AntDesign.Docs.Services.IconItem();\n            itemIcons.Category = categorys.Category;\n            itemIcons.IconNames = new List<string>();\n            foreach (var item in categorys.IconNames)\n            {\n                var isExist = await IconService.IconExists(currentTheme, item);\n\n                if (isExist)\n                {\n                    itemIcons.IconNames.Add(item);\n                }\n            }\n\n            if (itemIcons.IconNames.Count > 0)\n            {\n                displayIcons.Add(itemIcons);\n            }\n        }\n\n        await InvokeAsync(StateHasChanged);\n    }\n\n    protected override bool ShouldRender()\n    {\n        return displayIcons.Any();\n    }\n\n\n    private void OnCopyClick(string theme, string iconName)\n    {\n        string htmlIcon = $\"<Icon Type=\\\"{iconName}\\\" Theme=\\\"{theme}\\\"/>\";\n        JsRuntime.InvokeAsync<object>(JSInteropConstants.Copy, htmlIcon);\n\n        messageService.Success(htmlIcon+ \"  copied \uD83C\uDF89!\");\n    }\n    }\n",
        "Type": "Demos.Components.Icon.demo.List",
        "Style": "",
        "Docs": true,
        "Debug": false
      }
    ]
  },
  {
    "Title": "DatePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select or input a date.</p>\n<h2>When To Use</h2>\n<p>By clicking the input box, you can select a date from a popup calendar.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/datepicker#API\" class=\"anchor\">#</a></h2>\n<p>There are six kinds of picker:</p>\n<ul>\n<li>DatePicker</li>\n<li>MonthPicker</li>\n<li>RangePicker</li>\n<li>WeekPicker</li>\n<li>YearPicker</li>\n<li>QuarterPicker (Added in 4.1.0)</li>\n</ul>\n<h3>Localization（TODO）</h3>\n<p>The default locale is en-US, if you need to use other languages, recommend to use internationalized components provided by us at the entrance. Look at: <a href=\"http://ant.design/components/config-provider/\">ConfigProvider</a>.</p>\n<p>If there are special needs (only modifying single component language), Please use the property: local. Example: <a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a>.</p>\n<pre><code class=\"language-jsx\">import locale from 'antd/es/date-picker/locale/zh_CN';\n\n&lt;DatePicker locale={locale} /&gt;;\n</code></pre>\n<pre><code class=\"language-jsx\">// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\nimport moment from 'moment';\n\n&lt;DatePicker defaultValue={moment('2015-01-01', 'YYYY-MM-DD')} /&gt;;\n</code></pre>\n<h3>Common API</h3>\n<p>The following APIs are shared by DatePicker, YearPicker, MonthPicker, RangePicker, WeekPicker.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear（TODO）</td>\n<td>Whether to show clear button</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>className</td>\n<td>picker className</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>dateRender</td>\n<td>custom rendering function for date cells</td>\n<td>function(currentDate: moment, today: moment) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>determine whether the DatePicker is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>specify the date that cannot be selected</td>\n<td>(currentDate: moment) =&gt; boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>dropdownClassName</td>\n<td>to customize the className of the popup calendar</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>to set the container of the floating layer, while the default is to create a <code>div</code> element in <code>body</code></td>\n<td>function(trigger)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale（TODO）</td>\n<td>localization configuration</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode（TODO）</td>\n<td>picker panel mode（<a href=\"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?\">Cannot select year or month anymore?</a></td>\n<td><code>time</code> | <code>date</code> | <code>month</code> | <code>year</code> | <code>decade</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>open state of picker</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>picker</td>\n<td>Set picker type</td>\n<td><code>date</code> | <code>week</code> | <code>month</code> | <code>quarter</code> (4.1.0) | <code>year</code></td>\n<td><code>date</code></td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>placeholder of date input</td>\n<td>string|RangePicker[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>popupStyle</td>\n<td>to customize the style of the popup calendar</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>determine the size of the input box, the height of <code>large</code> and <code>small</code>, are 40px and 24px respectively, while default size is 32px</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>bordered</td>\n<td>whether has border style</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>suffixIcon</td>\n<td>The custom suffix icon</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the style of the input box</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>a callback function, can be executed whether the popup calendar is popped up or closed</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>callback when picker panel mode is changed</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inputReadOnly</td>\n<td>Set the <code>readonly</code> attribute of the input tag (avoids virtual keyboard on touch devices)</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Common Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date, if start time or end time is null or undefined, the date range will be an open interval</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>to specify the time that cannot be selected</td>\n<td>function(date)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a>. When an array is provided, all values are used for parsing and first value is used for formatting.</td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>to provide an additional time selection</td>\n<td>object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue（TODO）</td>\n<td>to set default time of selected date, <a href=\"#components-date-picker-demo-disabled-date\">demo</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>moment()</td>\n<td></td>\n</tr>\n<tr>\n<td>showToday</td>\n<td>whether to show &quot;Today&quot; button</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOk（TODO）</td>\n<td>callback when click ok button</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>Callback function for panel changing</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>YearPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>QuarterPicker</h3>\n<p>Added in <code>4.1.0</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-\\QQ&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>MonthPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-MM&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>Custom month cell content render method</td>\n<td>function(date, locale): ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>WeekPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-wo&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>RangePicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowEmpty（TODO）</td>\n<td>Allow start or end input leave empty</td>\n<td>[boolean, boolean]</td>\n<td>[false, false]</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disable start or end</td>\n<td><code>[boolean, boolean]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>to specify the time that cannot be selected</td>\n<td>function(dates: [moment, moment], partial: <code>'start'|'end'</code>)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a>. When an array is provided, all values are used for parsing and first value is used for formatting.</td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD HH:mm:ss&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>ranges（TODO）</td>\n<td>preseted ranges for quick selection</td>\n<td>{ [range: string]: <a href=\"http://momentjs.com/\">moment</a>[] } | { [range: string]: () =&gt; <a href=\"http://momentjs.com/\">moment</a>[] }</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>separator（TODO）</td>\n<td>set separator between inputs</td>\n<td>string</td>\n<td>'~'</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>to provide an additional time selection</td>\n<td>object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue</td>\n<td>to set default time of selected date, <a href=\"#components-date-picker-demo-disabled-date\">demo</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>[moment(), moment()]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onCalendarChange（TODO）</td>\n<td>a callback function, can be executed when the start time or the end time of the range is changing</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<style>\n.code-box-demo .ant-picker {\n  margin: 0 8px 12px 0;\n}\n</style>\n<h2>FAQ</h2>\n<ul>\n<li><p><a href=\"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?\">When set mode to DatePicker/RangePicker, cannot select year or month anymore?</a></p>\n</li>\n<li><p><a href=\"/docs/react/replace-moment#DatePicker\">How to use DatePicker with customize date library like dayjs</a></p>\n</li>\n</ul>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/RT_USzA48/DatePicker.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic use case. Users can select or input a date in panel.</p>\n",
        "Code": "@inject ILanguageService LS;\n\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Year\"/>\n<br />",
        "Type": "Demos.Components.DatePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "date-render",
        "Title": "Customized Date Rendering",
        "Description": "<p>We can customize the rendering of date cells in the calendar by providing a <code>dateRender</code> function to <code>DatePicker</code>.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\"/><br />\n<RangePicker TValue=\"DateTime?[]\" Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" />\n\n@code\n{\n    private Func<DateTime, DateTime, RenderFragment> CustomRender = (currentViewDate, today) =>\n    {\n        string style = \"\";\n        if (currentViewDate.Day == 1)\n        {\n            style = \"border: 1px solid #1890ff; borderRadius: 50%\";\n        }\n\n        return @<div class=\"ant-picker-cell-inner\" style=\"@style\">\n            @currentViewDate.Day\n        </div>;\n    };\n}",
        "Type": "Demos.Components.DatePicker.demo.DateRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "format",
        "Title": "Date Format",
        "Description": "<p>We can set the date format by <code>format</code>.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM/dd\"/>\n<br />\n<DatePicker TValue=\"DateTime?\" DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"dd/MM/yyyy\" />\n<br />\n<DatePicker TValue=\"DateTime?\" DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM\" />\n<br />\n<DatePicker TValue=\"DateTime?\" DefaultValue=\"new DateTime[] { new DateTime(2015, 1, 1), new DateTime(2015, 1, 1) }\" Format=\"yyyy/MM/dd\" />",
        "Type": "Demos.Components.DatePicker.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "presetted-ranges",
        "Title": "Preset Ranges TODO",
        "Description": "<p>We can set preset ranges to RangePicker to improve user experience. TODO</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.Components.DatePicker.demo.PresettedRanges",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "select-in-range",
        "Title": "Select range dates in 7 days TODO",
        "Description": "<p>A example shows how to select a dynamic range by using <code>onCalendarChange</code> and <code>disabledDate</code>.</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.Components.DatePicker.demo.SelectInRange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "Bordered-less",
        "Description": "<p>Bordered-less style component.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" Bordered=\"@false\" Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker TValue=\"DateTime?\" Bordered=\"@false\" Picker=\"@DatePickerType.Week\"  />\n<br />\n<DatePicker TValue=\"DateTime?\" Bordered=\"@false\" Picker=\"@DatePickerType.Month\"  />\n<br />\n<DatePicker TValue=\"DateTime?\" Bordered=\"@false\" Picker=\"@DatePickerType.Quarter\"  />\n<br />\n<DatePicker TValue=\"DateTime?\" Bordered=\"@false\" Picker=\"@DatePickerType.Year\"  />\n<br />",
        "Type": "Demos.Components.DatePicker.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "disabled-date",
        "Title": "Disabled Date & Time",
        "Description": "<p>Disabled part of dates and time by <code>disabledDate</code> and <code>disabledTime</code> respectively, and <code>disabledTime</code> only works with <code>showTime</code>.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" ShowTime=\"@true\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 0, 0, 0)\"\n               Format=\"yyyy-MM-dd HH:mm:ss\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n               DisabledTime=\"date => GetDisabledTime(date)\" \n               />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Month\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n                />\n<br />\n<RangePicker TValue=\"DateTime?[]\" DisabledDate=\"date => date <= DateTime.Now\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" ShowTime='@true'\n                DisabledDate=\"date => date <= DateTime.Now\" \n                />\n\n@code {\n    private DatePickerDisabledTime GetDisabledTime(DateTime date)\n    {\n        int[] timeRange = new int[60];\n        for (int i = 0; i < timeRange.Length; i++)\n        {\n            timeRange[i] = i;\n        }\n\n        return new DatePickerDisabledTime(timeRange[4..15], timeRange[20..55], timeRange[3..19]);\n    }\n}",
        "Type": "Demos.Components.DatePicker.demo.DisabledDate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "range-picker",
        "Title": "Range Picker",
        "Description": "<p>Set range picker type by <code>picker</code> prop.</p>\n",
        "Code": "<RangePicker TValue=\"DateTime?[]\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" ShowTime=\"@true\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" Picker=\"@DatePickerType.Week\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" Picker=\"@DatePickerType.Month\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" Picker=\"@DatePickerType.Quarter\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" Picker=\"@DatePickerType.Year\"/>",
        "Type": "Demos.Components.DatePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "globalization",
        "Title": "Globalization",
        "Description": "<p>We can set the default globalization formatting with <code>CultureInfo</code> Property. The default is <code>CultureInfo.CuurrentCulture</code>.</p>\n",
        "Code": "@using System.Globalization\n<Row>\n    <Col Span=\"12\">\n        <Text>en-US</Text>\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Date\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Week\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Month\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Quarter\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Year\" CultureInfo=\"@EN\" />\n        <br />\n    </Col>\n    <Col Span=\"12\">\n        <Text>zh-CN</Text>\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Date\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Week\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Month\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Quarter\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Year\" CultureInfo=\"@CN\" />\n        <br />\n    </Col>\n</Row>\n\n@code{\n    CultureInfo EN = CultureInfo.GetCultureInfo(\"en-US\");\n    CultureInfo CN = CultureInfo.GetCultureInfo(\"zh-CN\");\n}",
        "Type": "Demos.Components.DatePicker.demo.Globalization",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "extra-footer",
        "Title": "Extra Footer",
        "Description": "<p>Render extra footer in panel for customized requirements.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" RenderExtraFooter=\"extraFooter\"/>\n<br />\n<DatePicker TValue=\"DateTime?\" ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker TValue=\"DateTime?[]\" ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\"/>\n<br />\n<DatePicker TValue=\"DateTime?[]\" Picker=\"@DatePickerType.Month\" RenderExtraFooter=\"extraFooter\"/>\n\n@code {\n    private RenderFragment extraFooter =@<span>extra footer</span>;\n}\n",
        "Type": "Demos.Components.DatePicker.demo.ExtraFooter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "time",
        "Title": "Choose Time",
        "Description": "<p>This property provide an additional time selection. When <code>showTime</code> is an Object, its properties will be passed on to built-in <code>TimePicker</code>.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" ShowTime=\"@true\" OnChange=\"OnChange\"/>\n<br />\n<RangePicker TValue=\"DateTime?[]\" ShowTime='@(\"HH:mm\")' OnChange=\"OnChange\"/>\n\n@code\n{\n    private void OnChange(DateTime value, string dateString)\n    {\n        Console.WriteLine($\"Selected Time: {value}\");\n        Console.WriteLine($\"Formatted Selected Time: {dateString}\");\n    }\n}",
        "Type": "Demos.Components.DatePicker.demo.Time",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>A disabled state of the <code>DatePicker</code>. You can also set as array to disable one of input.</p>\n",
        "Code": "<DatePicker TValue=\"DateTime?\" Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\"/>\n<br />\n<MonthPicker TValue=\"DateTime?\" Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<RangePicker TValue=\"DateTime?[]\" Disabled=\"@true\" DefaultValue=\"new DateTime[] { new DateTime(2015, 6, 6), new DateTime(2015, 6, 6) }\" />\n<br />\n<RangePicker TValue=\"DateTime?[]\" Disabled=\"@true\" \n                DefaultValue=\"new DateTime[] { new DateTime(2019, 9, 3), new DateTime(2019, 11, 12) }\"  />",
        "Type": "Demos.Components.DatePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "Three Sizes",
        "Description": "<p>The input box comes in three sizes. <code>default</code> will be used if <code>size</code> is omitted.</p>\n",
        "Code": "<RadioGroup @bind-Value=\"@datePickerSize\">\n    <Radio RadioButton Value=\"@DatePickerSize.Large\">Large</Radio>\n    <Radio RadioButton Value=\"@DatePickerSize.Default\">Default</Radio>\n    <Radio RadioButton Value=\"@DatePickerSize.Small\">Small</Radio>\n</RadioGroup>\n<br />\n<DatePicker TValue=\"DateTime?\" Size=\"@datePickerSize\"   />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Month\" Size=\"@datePickerSize\"  />\n<br />\n<RangePicker TValue=\"DateTime?[]\" Size=\"@datePickerSize\"  />\n<br />\n<DatePicker TValue=\"DateTime?\" Picker=\"@DatePickerType.Week\" Size=\"@datePickerSize\"  />\n\n@code {\n    private string datePickerSize = DatePickerSize.Default;\n}",
        "Type": "Demos.Components.DatePicker.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Mentions",
    "Type": "Data Entry",
    "Desc": "<p>Mention component.</p>\n<h2>When To Use</h2>\n<p>When need to mention someone or something.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/mentions#API\" class=\"anchor\">#</a></h2>\n<h3>Mention</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autoFocus</td>\n<td>Auto get focus when component mounted</td>\n<td>boolean</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>Default value</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>filterOption</td>\n<td>Customize filter option logic</td>\n<td>false | (input: string, option: OptionProps) =&gt; boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>notFoundContent</td>\n<td>Set mentions content when not match</td>\n<td>ReactNode</td>\n<td>'Not Found'</td>\n</tr>\n<tr>\n<td>placement</td>\n<td>Set popup placement</td>\n<td><code>top</code> | <code>bottom</code></td>\n<td><code>bottom</code></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>Set trigger prefix keyword</td>\n<td>string | string[]</td>\n<td>'@'</td>\n</tr>\n<tr>\n<td>split</td>\n<td>Set split string before and after selected mention</td>\n<td>string</td>\n<td>' '</td>\n</tr>\n<tr>\n<td>validateSearch</td>\n<td>Customize trigger search logic</td>\n<td>(text: string, props: MentionsProps) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>Set value of mentions</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Trigger when value changed</td>\n<td>(text: string) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Trigger when user select the option</td>\n<td>(option: OptionProps, prefix: string) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onSearch</td>\n<td>Trigger when prefix hit</td>\n<td>(text: string, prefix: string) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>Trigger when mentions get focus</td>\n<td>() =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>Trigger when mentions lose focus</td>\n<td>() =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>Set the mount HTML node for suggestions</td>\n<td>() =&gt; HTMLElement</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Mention methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n</tr>\n</tbody>\n</table>\n<h3>Option</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>suggestion content</td>\n<td>ReactNode</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>value of suggestion, the value will insert into input filed while selected</td>\n<td>string</td>\n<td>''</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/jPE-itMFM/Mentions.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic usage.</p>\n",
        "Code": "<div>\n    <Mentions Placeholder=\"please enter @@\">\n        <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n        <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n        <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n    </Mentions>\n</div>",
        "Type": "Demos.Components.Mentions.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "prefix",
        "Title": "Customize Trigger Token",
        "Description": "<p>Customize Trigger Token by <code>prefix</code> props. Default to <code>@</code>, <code>Array&lt;string&gt;</code> also supported.</p>\n",
        "Code": "<div>\n    To do\n</div>",
        "Type": "Demos.Components.Mentions.demo.Prefix",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "async",
        "Title": "Asynchronous loading",
        "Description": "<p>async</p>\n",
        "Code": "<div>\n    <Mentions Style=\"width:100%\" Loading=\"true\">\n        <MentionsOption Value=\"afc163\">\n            <Icon Type=\"setting\" Theme=\"fill\" />\n            <span>afc163</span>\n            <span>zombieJ</span>\n        </MentionsOption>     \n    </Mentions>\n</div>",
        "Type": "Demos.Components.Mentions.demo.Async",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>Change the suggestions placement.</p>\n",
        "Code": "<div>\n\n     To do\n    @*<Mentions Placement=\"top\" Placeholder=\"placement on bottom\">\n        <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n        <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n        <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n    </Mentions>\n\n    <br />\n\n    <Mentions Placement=\"bottom\" Placeholder=\"placement on bottom\">\n        <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n        <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n        <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n    </Mentions>\n\n    <br />*@\n</div>",
        "Type": "Demos.Components.Mentions.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "readonly",
        "Title": "disabled or readOnly",
        "Description": "<p>Configurate <code>disabled</code> and <code>readOnly</code>.</p>\n",
        "Code": "<div>\n    <div style=\"margin-bottom: 10px\">\n        <Mentions Placeholder=\"this is disabled Mentions\" Disable=\"true\">\n            <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n            <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n            <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n        </Mentions>\n    </div>\n        <div style=\"margin-bottom: 10px\">\n            <Mentions Placeholder=\"this is readOnly Mentions\" Readonly=\"true\">\n                <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n                <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n                <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n            </Mentions>\n        </div>\n    </div>\n",
        "Type": "Demos.Components.Mentions.demo.Readonly",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "form",
        "Title": "With Form",
        "Description": "<p>Controlled mode, for example, to work with <code>Form</code>.</p>\n",
        "Code": "<div>\n    <div style=\"margin-bottom: 10px\">\n            <Mentions>\n                <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n                <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n                <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n            </Mentions>\n    </div>\n\n    <div style=\"margin-bottom: 10px\">\n        <Mentions Rows=\"6\" Placeholder=\"You can use  to ref user here\">\n            <MentionsOption Value=\"afc163\">afc163</MentionsOption>\n            <MentionsOption Value=\"zombieJ\">zombieJ</MentionsOption>\n            <MentionsOption Value=\"yesmeck\">yesmeck</MentionsOption>\n        </Mentions>\n    </div>\n\n    <Button Type=\"primary\">Submit</Button>\n    <Button>Reset</Button>\n</div>\n\n\n@code{\n\n    private class FormData\n    {\n        public string data1 { get; set; }\n        public string data2 { get; set; }\n    }\n\n\n    private FormData frmData = new FormData();\n\n}\n",
        "Type": "Demos.Components.Mentions.demo.Form",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Upload",
    "Type": "Data Entry",
    "Desc": "<p>Upload file by selecting or dragging.</p>\n<h2>When To Use</h2>\n<p>Uploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool.</p>\n<ul>\n<li>When you need to upload one or more files.</li>\n<li>When you need to show the process of uploading.</li>\n<li>When you need to upload files by dragging and dropping.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/upload#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accept</td>\n<td>File types that can be accepted. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept\">input accept Attribute</a></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>action</td>\n<td>Uploading URL</td>\n<td>string|(file) =&gt; <code>Promise</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>method</td>\n<td>http method of upload request</td>\n<td>string</td>\n<td>'post'</td>\n<td></td>\n</tr>\n<tr>\n<td>directory</td>\n<td>support upload whole directory (<a href=\"https://caniuse.com/#feat=input-file-directory\">caniuse</a>)</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>beforeUpload</td>\n<td>Hook function which will be executed before uploading. Uploading will be stopped with <code>false</code> or a rejected Promise returned. <strong>Warning：this function is not supported in IE9</strong>。</td>\n<td>(file, fileList) =&gt; <code>boolean | Promise</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>customRequest</td>\n<td>override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest</td>\n<td>Function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>data</td>\n<td>Uploading extra params or function which can return uploading extra params.</td>\n<td>object|function(file)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultFileList</td>\n<td>Default list of files that have been uploaded.</td>\n<td>object[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disable upload button</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>fileList</td>\n<td>List of files that have been uploaded (controlled). Here is a common issue <a href=\"https://github.com/ant-design/ant-design/issues/2423\">#2423</a> when using it</td>\n<td>object[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>headers</td>\n<td>Set request headers, valid above IE10.</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>listType</td>\n<td>Built-in stylesheets, support for three types: <code>text</code>, <code>picture</code> or <code>picture-card</code></td>\n<td>string</td>\n<td>'text'</td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>Whether to support selected multiple file. <code>IE10+</code> supported. You can select multiple files with CTRL holding down while multiple is set to be true</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of uploading file</td>\n<td>string</td>\n<td>'file'</td>\n<td></td>\n</tr>\n<tr>\n<td>previewFile</td>\n<td>Customize preview file logic</td>\n<td>(file: File | Blob) =&gt; Promise&lt;dataURL: string&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showUploadList</td>\n<td>Whether to show default upload list, could be an object to specify <code>showPreviewIcon</code>, <code>showRemoveIcon</code>, <code>showDownloadIcon</code>, <code>removeIcon</code> and <code>downloadIcon</code> individually</td>\n<td>Boolean or { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean, removeIcon?: React.ReactNode, downloadIcon?: React.ReactNode }</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>supportServerRender</td>\n<td>Need to be turned on while the server side is rendering</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>ajax upload with cookie sent</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openFileDialogOnClick</td>\n<td>click open file dialog</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>A callback function, can be executed when uploading state is changing, see <a href=\"#onChange\">onChange</a></td>\n<td>Function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPreview</td>\n<td>A callback function, will be executed when file link or preview icon is clicked</td>\n<td>Function(file)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onRemove</td>\n<td>A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is <code>false</code> or a Promise which resolve(false) or reject</td>\n<td>Function(file): <code>boolean | Promise</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDownload</td>\n<td>Click the method to download the file, pass the method to perform the method logic, do not pass the default jump to the new TAB.</td>\n<td>Function(file): void</td>\n<td>Jump to new TAB</td>\n<td></td>\n</tr>\n<tr>\n<td>transformFile \u00A0</td>\n<td>Customize transform file before request</td>\n<td>Function(file): <code>string | Blob | File | Promise&lt;string | Blob | File&gt;</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>iconRender</td>\n<td>custom show icon</td>\n<td>(file: UploadFile, listType?: UploadListType) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>onChange</h3>\n<blockquote>\n<p>The function will be called when uploading is in progress, completed or failed.</p>\n</blockquote>\n<p>When uploading state change, it returns:</p>\n<pre><code class=\"language-js\">{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n</code></pre>\n<ol>\n<li><p><code>file</code> File object for the current operation.</p>\n<pre><code class=\"language-js\">{\n   uid: 'uid',      // unique identifier, negative is recommend, to prevent interference with internal generated id\n   name: 'xx.png',   // file name\n   status: 'done', // options：uploading, done, error, removed\n   response: '{&quot;status&quot;: &quot;success&quot;}', // response from server\n   linkProps: '{&quot;download&quot;: &quot;image&quot;}', // additional html props of file link\n   xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n}\n</code></pre>\n</li>\n<li><p><code>fileList</code> current list of files</p>\n</li>\n<li><p><code>event</code> response from server, including uploading progress, supported by advanced browsers.</p>\n</li>\n</ol>\n<h2>FAQ</h2>\n<h3>How to implement upload server side?</h3>\n<ul>\n<li>You can consult <a href=\"https://github.com/blueimp/jQuery-File-Upload/wiki#server-side\">jQuery-File-Upload</a> about how to implement server side upload interface.</li>\n<li>There is a mock example of <a href=\"https://github.com/react-component/upload/blob/master/server.js\">express</a> in rc-upload.</li>\n</ul>\n<h3>I want to display download links.</h3>\n<p>Please set property <code>url</code> of each item in <code>fileList</code> to control content of link.</p>\n<h3>How to use <code>customRequest</code>?</h3>\n<p>See <a href=\"https://github.com/react-component/upload#customrequest\">https://github.com/react-component/upload#customrequest</a>.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/QaeBt_ZMg/Upload.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "avatar",
        "Title": "Avatar",
        "Description": "<p>Click to upload user's avatar, and validate size and format of picture with beforeUpload.</p>\n",
        "Code": "@inject MessageService _message\n\n    <Upload Action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n            Name=\"avatar\"\n            Class=\"avatar-uploader\"\n            ListType=\"picture-card\"\n            ShowUploadList=\"false\"\n            BeforeUpload=\"BeforeUpload\"\n            OnChange=\"HandleChange\">\n        @if (!string.IsNullOrWhiteSpace(imageUrl))\n        {\n            <img src=\"@imageUrl\" alt=\"avatar\" style=\"width: 100%\" />\n        }\n        else\n        {\n            <div>\n                <Icon Spin=\"loading\" Type=\"@(loading?\"Loading\":\"plus\")\" ></Icon>\n                <div className=\"ant-upload-text\">Upload</div>\n            </div>\n        }\n    </Upload>\n\n@code\n{\n    bool loading = false;\n\n    string imageUrl;\n\n    bool BeforeUpload(UploadFileItem file)\n    {\n        var isJpgOrPng = file.Type == \"image/jpeg\" || file.Type == \"image/png\";\n        if (!isJpgOrPng)\n        {\n            _message.Error(\"You can only upload JPG/PNG file!\");\n        }\n        var isLt2M = file.Size / 1024 / 1024 < 2;\n        if (!isLt2M)\n        {\n            _message.Error(\"Image must smaller than 2MB!\");\n        }\n        return isJpgOrPng && isLt2M;\n    }\n\n    void HandleChange(UploadInfo fileinfo)\n    {\n        loading = fileinfo.File.State == UploadState.Uploading;\n            \n        if (fileinfo.File.State == UploadState.Success)\n        {\n            imageUrl = fileinfo.File.ObjectURL;\n        }\n        InvokeAsync(StateHasChanged);\n    }\n\n    public class ResponseModel\n    {\n        public string name { get; set; }\n\n        public string status { get; set; }\n\n        public string url { get; set; }\n\n        public string thumbUrl { get; set; }\n    }\n}\n<style>\n    .avatar-uploader > .ant-upload {\n        width: 128px;\n        height: 128px;\n    }\n</style>",
        "Type": "Demos.Components.Upload.demo.Avatar",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Upload by clicking",
        "Description": "<p>Classic mode. File selection dialog pops up when upload button is clicked.</p>\n",
        "Code": "@inject MessageService _message\n\n<Upload @attributes=\"attrs\"\n        OnSingleCompleted=\"OnSingleCompleted\">\n    <Button Icon=\"upload\">\n        <span>点击上传</span>\n    </Button>\n</Upload>\n\n@code\n{\n\n    Dictionary<string, object> attrs = new Dictionary<string, object>\n    {\n        {\"Action\", \"https://www.mocky.io/v2/5cc8019d300000980a055e76\" },\n        {\"Name\", \"files\" }\n    };\n\n    void OnSingleCompleted(UploadInfo fileinfo)\n    {\n        if (fileinfo.File.State == UploadState.Success)\n        {\n            var result = fileinfo.File.GetResponse<ResponseModel>();\n            fileinfo.File.Url = result.url;\n        }\n    }\n\n    public class ResponseModel\n    {\n        public string name { get; set; }\n\n        public string status { get; set; }\n\n        public string url { get; set; }\n\n        public string thumbUrl { get; set; }\n    }\n\n}",
        "Type": "Demos.Components.Upload.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "defaultFileList",
        "Title": "Default Files",
        "Description": "<p>Use <code>defaultFileList</code> for uploaded files when page init.</p>\n",
        "Code": "@inject MessageService _message\n\n<Upload @attributes=\"attrs\"\n        OnSingleCompleted=\"OnSingleCompleted\">\n    <Button Icon=\"upload\">\n        <span>点击上传</span>\n    </Button>\n</Upload>\n\n@code\n{\n\n    Upload upload;\n\n    Dictionary<string, object> attrs = new Dictionary<string, object>\n{\n        {\"Action\", \"https://www.mocky.io/v2/5cc8019d300000980a055e76\" },\n        {\"Name\", \"files\" },\n        {\"DefaultFileList\", new List<UploadFileItem>\n            {\n                new UploadFileItem\n                {\n                    Id = \"1\",\n                    FileName = \"1.jpg\",\n                    Url = \"https://www.baidu.com/1.jpg\",\n                    State = UploadState.Success\n                },\n                new UploadFileItem\n                {\n                    Id = \"2\",\n                    FileName = \"2.jpg\",\n                    Response = \"网络错误\",\n                    State = UploadState.Fail\n                }\n            }\n        }\n    };\n\n    void OnSingleCompleted(UploadInfo fileinfo)\n    {\n        if (fileinfo.File.State == UploadState.Success)\n        {\n            var result = fileinfo.File.GetResponse<ResponseModel>();\n            fileinfo.File.Url = result.url;\n        }\n    }\n\n    public class ResponseModel\n    {\n        public string name { get; set; }\n\n        public string status { get; set; }\n\n        public string url { get; set; }\n\n        public string thumbUrl { get; set; }\n    }\n\n}",
        "Type": "Demos.Components.Upload.demo.DefaultFileList",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "pictureCard",
        "Title": "Pictures Wall",
        "Description": "<p>After users upload picture, the thumbnail will be shown in list. The upload button will disappear when count meets limitation.</p>\n",
        "Code": "@inject MessageService _message\n\n    <Upload Action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n            Name=\"avatar\"\n            @bind-FileList=\"fileList\"\n            ShowButton=\"fileList?.Count < 8\"\n            ListType=\"picture-card\"\n            OnPreview=\"(file)=> {\n                           Console.WriteLine(file.FileName);\n                           Console.WriteLine(file.Url);\n                           previewVisible = true;\n                           previewTitle = file.FileName;\n                           imgUrl = file.Url;\n                       }\"\n            OnChange=\"HandleChange\">\n            <div>\n                <Icon Type=\"plus\"></Icon>\n                <div className=\"ant-upload-text\">Upload</div>\n            </div>\n\n    </Upload>\n    <Modal Visible=\"previewVisible\"\n           Title=\"previewTitle\"\n           OnCancel=\"()=> previewVisible=false\">\n        <img style=\"width: 100%\" src=\"@imgUrl\" />\n    </Modal>\n\n@code\n{\n    bool previewVisible = false;\n    string previewTitle = string.Empty;\n    string imgUrl = string.Empty;\n\n    List<UploadFileItem> fileList = new List<UploadFileItem>\n    {\n        new UploadFileItem\n        {\n            Id = \"1\",\n            FileName = \"image.png\",\n            State = UploadState.Success,\n            Url = \"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\"\n        },\n        new UploadFileItem\n        {\n            Id = \"2\",\n            FileName = \"image.png\",\n            State = UploadState.Success,\n            Url = \"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\"\n        },\n        new UploadFileItem\n        {\n            Id = \"3\",\n            FileName = \"image.png\",\n            State = UploadState.Success,\n            Url = \"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\"\n        },\n        new UploadFileItem\n        {\n            Id = \"4\",\n            FileName = \"image.png\",\n            State = UploadState.Success,\n            Url = \"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\"\n        },\n         new UploadFileItem\n        {\n            Id = \"5\",\n            FileName = \"image.png\",\n            State = UploadState.Fail\n        },\n    };\n\n    void HandleChange(UploadInfo fileinfo)\n    {\n        if (fileinfo.File.State == UploadState.Success)\n        {\n            fileinfo.File.Url = fileinfo.File.ObjectURL;\n        }\n    }\n\n    public class ResponseModel\n    {\n        public string name { get; set; }\n\n        public string status { get; set; }\n\n        public string url { get; set; }\n\n        public string thumbUrl { get; set; }\n    }\n}\n\n<style>\n    /* you can make up upload button and sample style by using stylesheets */\n    .ant-upload-select-picture-card i {\n        color: #999;\n        font-size: 32px;\n    }\n\n    .ant-upload-select-picture-card .ant-upload-text {\n        margin-top: 8px;\n        color: #666;\n    }\n</style>",
        "Type": "Demos.Components.Upload.demo.PictureCard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "pictureStyle",
        "Title": "Pictures with list style",
        "Description": "<p>If uploaded file is a picture, the thumbnail can be shown. <code>IE8/9</code> do not support local thumbnail show. Please use <code>thumbUrl</code> instead.</p>\n",
        "Code": "@inject MessageService _message\n\n<Upload @attributes=\"attrs\"\n         OnSingleCompleted=\"OnSingleCompleted\"\n         OnRemove=\"HandleRemove\">\n    <Button Icon=\"upload\">\n        <span>点击上传</span>\n    </Button>\n</Upload>\n<br />\n<br />\n<Upload @attributes=\"attrs1\"\n         OnSingleCompleted=\"OnSingleCompleted\"\n         OnRemove=\"HandleRemove\">\n    <Button Icon=\"upload\">\n        <span>点击上传</span>\n    </Button>\n</Upload>\n\n@code\n{\n\n    static List<UploadFileItem> fileList = new List<UploadFileItem>\n{\n        new UploadFileItem\n        {\n            Id = \"1\",\n            FileName = \"xxx.png\",\n            State = UploadState.Success,\n            Url = \"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\",\n        },\n        new UploadFileItem\n        {\n            Id = \"1\",\n            FileName = \"yyy.png\",\n            State = UploadState.Fail\n        }\n    };\n\n    Dictionary<string, object> attrs = new Dictionary<string, object>\n{\n        {\"Action\", \"https://www.mocky.io/v2/5cc8019d300000980a055e76\" },\n        {\"Name\", \"files\" },\n        {\"DefaultFileList\", fileList},\n        {\"ListType\", \"picture\" }\n    };\n\n    Dictionary<string, object> attrs1 = new Dictionary<string, object>\n{\n        {\"Action\", \"https://www.mocky.io/v2/5cc8019d300000980a055e76\" },\n        {\"Name\", \"files\" },\n        {\"DefaultFileList\", fileList},\n        {\"ListType\", \"picture\" },\n        {\"Class\", \"upload-list-inline\" }\n    };\n\n    void OnSingleCompleted(UploadInfo fileinfo)\n    {\n        if (fileinfo.File.State == UploadState.Success)\n        {\n            var result = fileinfo.File.GetResponse<ResponseModel>();\n            fileinfo.File.Url = result.url;\n        }\n    }\n\n    async Task<bool> HandleRemove(UploadFileItem file)\n    {\n        await _message.Loading($\"removing {file.FileName}\",2);\n        return await Task.FromResult(true);\n    }\n\n    public class ResponseModel\n    {\n        public string name { get; set; }\n\n        public string status { get; set; }\n\n        public string url { get; set; }\n\n        public string thumbUrl { get; set; }\n    }\n\n}\n\n<style>\n    /* tile uploaded pictures */\n    .upload-list-inline .ant-upload-list-item {\n        float: left;\n        width: 200px;\n        margin-right: 8px;\n    }\n\n    .upload-list-inline [class*='-upload-list-rtl'] .ant-upload-list-item {\n        float: right;\n    }\n\n    .upload-list-inline .ant-upload-animate-enter {\n        animation-name: uploadAnimateInlineIn;\n    }\n\n    .upload-list-inline .ant-upload-animate-leave {\n        animation-name: uploadAnimateInlineOut;\n    }\n</style>\n",
        "Type": "Demos.Components.Upload.demo.PictureStyle",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "directory",
        "Title": "Upload directory",
        "Description": "<p>You can select and upload a whole directory.\nhe thumbnail can be shown. <code>IE8/9</code> do not support local thumbnail show. Please use <code>thumbUrl</code> instead.</p>\n",
        "Code": "@inject MessageService _message\n\n<Upload Action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\" Directory>\n    <Button Icon=\"upload\">\n        <span>点击上传</span>\n    </Button>\n</Upload>\n",
        "Type": "Demos.Components.Upload.demo.Directory",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "fileList",
        "Title": "Complete control over file list",
        "Description": "<p>You can gain full control over filelist by configuring <code>fileList</code>. You can accomplish all kinds of customed functions. The following shows two circumstances:</p>\n<ol>\n<li><p>limit the number of uploaded files.</p>\n</li>\n<li><p>read from response and show file link.</p>\n</li>\n</ol>\n",
        "Code": "@inject MessageService _message\n\n<Upload @attributes=\"attrs\"\n        FileList=\"fileList\"\n        OnChange=\"HandleChange\">\n    <Button Icon=\"upload\">\n        <span>点击上传</span>\n    </Button>\n</Upload>\n\n@code\n{\n\n    Upload upload;\n\n    List<UploadFileItem> fileList = new List<UploadFileItem>\n            {\n                new UploadFileItem\n                {\n                    Id = \"1\",\n                    FileName = \"1.jpg\",\n                    Url = \"https://www.baidu.com/1.jpg\",\n                    State = UploadState.Success\n                }\n            };\n\n    Dictionary<string, object> attrs = new Dictionary<string, object>\n    {\n        {\"Action\", \"https://www.mocky.io/v2/5cc8019d300000980a055e76\" },\n        {\"Name\", \"files\" },\n        {\"Multiple\", true }\n    };\n\n    void HandleChange(UploadInfo fileinfo)\n    {\n        if(fileList.Count > 2)\n        {\n            fileList.RemoveRange(0, fileList.Count - 2);\n        }\n        fileList.Where(file => file.State == UploadState.Success && !string.IsNullOrWhiteSpace(file.Response)).ForEach(file => {\n            var result = file.GetResponse<ResponseModel>();\n            file.Url = result.url;\n        });\n    }\n\n\n\n    public class ResponseModel\n    {\n        public string name { get; set; }\n\n        public string status { get; set; }\n\n        public string url { get; set; }\n\n        public string thumbUrl { get; set; }\n    }\n\n}",
        "Type": "Demos.Components.Upload.demo.FileList",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Empty",
    "Type": "Data Display",
    "Desc": "<p>Empty state placeholder.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When there is no data provided, display for friendly tips.</li>\n<li>User tutorial to create something in fresh new situation.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/MNbKfLBVb/Empty.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Simplest Usage.</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Components.Empty.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "description",
        "Title": "No description",
        "Description": "<p>Simplest Usage with no description.</p>\n",
        "Code": "<Empty Description=\"false\" />",
        "Type": "Demos.Components.Empty.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "simple",
        "Title": "Chose image",
        "Description": "<p>You can choose another style of <code>image</code> by setting <code>Simple</code> to <code>true</code>, here is different from Ant Design.</p>\n",
        "Code": "<Empty Simple/>",
        "Type": "Demos.Components.Empty.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "config-provider",
        "Title": "ConfigProvider TODO",
        "Description": "<p>Use ConfigProvider set global Empty style.</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Components.Empty.demo.ConfigProvider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "customize",
        "Title": "Customize",
        "Description": "<p>Customize image source, image size, description and extra content.</p>\n",
        "Code": "<Empty Image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\n          ImageStyle='@(\"height: 60px\")'\n        >\n    <DescriptionTemplate>\n        <span>Customize <a>Description</a></span>\n    </DescriptionTemplate>\n    <ChildContent>\n        <Button type=\"@ButtonType.Primary\">Create Now</Button>\n    </ChildContent>\n\n</Empty>\n\n",
        "Type": "Demos.Components.Empty.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Steps",
    "Type": "Navigation",
    "Desc": "<p><code>Steps</code> is a navigation bar that guides users through the steps of a task.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a given task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/steps#API\" class=\"anchor\">#</a></h2>\n<p>Steps\nThe whole of the step bar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassName</td>\n<td>Additional class to Steps</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Type of steps, can be set to one of the following values: <code>default</code>, <code>navigation</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Current</td>\n<td>To set the current step, counting from 0. You can overwrite this state by using status of Step</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Direction</td>\n<td>To specify the direction of the step bar, <code>horizontal</code> or <code>vertical</code></td>\n<td>string</td>\n<td><code>horizontal</code></td>\n</tr>\n<tr>\n<td>LabelPlacement</td>\n<td>Place title and description with <code>horizontal</code> or <code>vertical</code> direction</td>\n<td>string</td>\n<td><code>horizontal</code></td>\n</tr>\n<tr>\n<td>ProgressDot</td>\n<td>Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be <code>vertical</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>To specify the size of the step bar, <code>default</code> and <code>small</code> are currently supported</td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>To specify the status of current step, can be set to one of the following values: <code>wait</code> <code>process</code> <code>finish</code> <code>error</code></td>\n<td>string</td>\n<td><code>process</code></td>\n</tr>\n<tr>\n<td>Initial</td>\n<td>Set the initial step, counting from 0</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when Step is changed</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Steps.Step\nA single step in the step bar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Description</td>\n<td>Description of the step, optional property</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Icon of the step, optional property</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dtatus</td>\n<td>To specify the status. It will be automatically set by current of Steps if not configured. Optional values are: wait process finish error</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Title of the step</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>Subtitle of the step</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable click</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/UZYqMizXHaj/Steps.svg",
    "DemoList": [
      {
        "Order": 4,
        "Name": "vertical",
        "Title": "Vertical",
        "Description": "<p>A simple step bar in the vertical direction.</p>\n",
        "Code": "<div>\n    <Steps Direction=\"vertical\" Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "step-next",
        "Title": "Switch Step",
        "Description": "<p>Cooperate with the content and buttons, to represent the progress of a process.</p>\n",
        "Code": "<div>\n    <Steps Current=\"current\">\n        @foreach (var item in steps)\n        {\n            <Step Title=\"@item.Title\" Subtitle=\"@item.Content\" />\n        }\n    </Steps>\n\n    <div class=\"steps-content\">\n        @steps[current].Content\n    </div>\n    <div class=\"steps-action\">\n        @if (current > 0)\n        {\n            <Button Type=\"primary\" OnClick=\"OnPreClick\">Previous</Button>\n        }\n        @if (current < steps.Length - 1)\n        {\n            <Button Type=\"primary\" OnClick=\"OnNextClick\">Next</Button>\n        }\n        @if (current == steps.Length - 1)\n        {\n            <Button Type=\"primary\" OnClick=@(() => message.Success(\"Processing complete!\"))>\n                Done\n            </Button>\n        }\n\n    </div>\n</div>\n\n<style>\n    .steps-content {\n        margin-top: 16px;\n        border: 1px dashed #e9e9e9;\n        border-radius: 6px;\n        background-color: #fafafa;\n        min-height: 200px;\n        text-align: center;\n        padding-top: 80px;\n    }\n\n    .steps-action {\n        margin-top: 24px;\n    }\n</style>\n\n@inject MessageService message\n@code {\n\n    public class StepItem\n    {\n        public string Title { get; set; }\n        public string Content { get; set; }\n    }\n\n    public int current { get; set; } = 0;\n\n    public StepItem[] steps =\n    {\n        new StepItem {Title = \"First\", Content = \"First-content\"},\n        new StepItem {Title = \"Second\", Content = \"Second-content\"},\n        new StepItem {Title = \"Third\", Content = \"Third-content\"},\n        new StepItem {Title = \"Last\", Content = \"Last-content\"}\n    };\n\n    void OnPreClick()\n    {\n        current--;\n    }\n\n    void OnNextClick()\n    {\n        current++;\n    }\n}\n",
        "Type": "Demos.Components.Steps.demo.StepNext",
        "Style": "\n[data-theme=\"dark\"] .steps-content {\n  margin-top: 16px;\n  border: 1px dashed #303030;\n  background-color: rgba(255,255,255,0.04);\n  color: rgba(255,255,255,0.65);\n  padding-top: 80px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "progress",
        "Title": "Steps with progress",
        "Description": "<p>Steps with progress.</p>\n",
        "Code": "<div>\n    <Steps Percent=\"60\" Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.Progress",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "error",
        "Title": "Error status",
        "Description": "<p>By using <code>status</code> of <code>Steps</code>, you can specify the state for current step.</p>\n",
        "Code": "<div>\n    <Steps Current=\"1\" Status=\"error\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.Error",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "progress-dot",
        "Title": "Dot Style",
        "Description": "<p>Steps with progress dot style.</p>\n",
        "Code": "<div>\n    <Steps ShowProgressDot Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n    <Divider />\n    <Steps ShowProgressDot Current=\"1\" Direction=\"vertical\">\n        <Step Title=\"Finished\" Description=\"This is a description. This is a description.\" />\n        <Step Title=\"Finished\" Description=\"This is a description. This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description. This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.ProgressDot",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "simple",
        "Title": "Basic",
        "Description": "<p>The most basic step bar.</p>\n",
        "Code": "<div>\n    <Steps Current=\"1\" Class=\"site-navigation-steps\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Subtitle=\"Left 00:00:08\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>\n",
        "Type": "Demos.Components.Steps.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "customized-progress-dot",
        "Title": "Customized Dot Style",
        "Description": "<p>(WIP) You can customize the display for Steps with progress dot style.</p>\n",
        "Code": "<Steps Current=1 ProgressDot=@customDot>\n    <Step Title=\"Finished\" Description=\"You can hover on the dot.\" />\n    <Step Title=\"In Progress\" Description=\"You can hover on the dot.\" />\n    <Step Title=\"Waiting\" Description=\"You can hover on the dot.\" />\n    <Step Title=\"Waiting\" Description=\"You can hover on the dot.\" />\n</Steps>\n\n@code\n{\n    RenderFragment customDot = @<span>\n                                   step {index} status: {status}\n                               </span>;\n}\n",
        "Type": "Demos.Components.Steps.demo.CustomizedProgressDot",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "nav",
        "Title": "Navigation Steps",
        "Description": "<p>Navigation steps.</p>\n",
        "Code": "<div>\n    <Steps Type=\"navigation\" Size=\"small\" Current=@current Class=\"site-navigation-steps\">\n        <Step Title=\"Step 1\" Subtitle=\"00:00:05\" Status=\"finish\" Description=\"This is a description.\" />\n        <Step Title=\"Step 2\" Subtitle=\"00:01:02\" Status=\"process\" Description=\"This is a description.\" />\n        <Step Title=\"Step 3\" Subtitle=\"waiting for longlong time\" Status=\"wait\" Description=\"This is a description.\" />\n    </Steps>\n    <Steps Type=\"navigation\" Current=\"@current\" Class=\"site-navigation-steps\">\n        <Step Status=\"finish\" Title=\"Step 1\" />\n        <Step Status=\"process\" Title=\"Step 2\" />\n        <Step Status=\"wait\" Title=\"Step 3\" />\n        <Step Status=\"wait\" Title=\"Step 4\" />\n    </Steps>\n    <Steps Type=\"navigation\" Size=\"small\" Current=\"@current\" Class=\"site-navigation-steps\">\n        <Step Status=\"finish\" Title=\"finish 1\" />\n        <Step Status=\"finish\" Title=\"finish 2\" />\n        <Step Status=\"process\" Title=\"current process\" />\n        <Step Status=\"wait\" Title=\"wait\" Disabled />\n    </Steps>\n</div>\n\n\n@code {\n    int current;\n}",
        "Type": "Demos.Components.Steps.demo.Nav",
        "Style": "\n[data-theme=\"dark\"] .site-navigation-steps {\n  border-bottom: 1px solid #303030;\n  margin-bottom: 60px;\n  box-shadow: none;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "clickable",
        "Title": "Clickable",
        "Description": "<p>Setting <code>onChange</code> makes Steps clickable.</p>\n",
        "Code": "<div>\n    <Steps Current=current OnChange=onChange>\n        <Step Title=\"Step 1\" Description=\"This is a description.\" />\n        <Step Title=\"Step 2\" Description=\"This is a description.\" />\n        <Step Title=\"Step 3\" Description=\"This is a description.\" />\n    </Steps>\n\n    <Divider />\n\n    <Steps Current=current OnChange=onChange Direction=\"vertical\">\n        <Step Title=\"Step 1\" Description=\"This is a description.\" />\n        <Step Title=\"Step 2\" Description=\"This is a description.\" />\n        <Step Title=\"Step 3\" Description=\"This is a description.\" />\n    </Steps>\n</div>\n\n@code{\n    int current;\n\n    void onChange(int current)\n    {\n        this.current = current;\n    }\n}",
        "Type": "Demos.Components.Steps.demo.Clickable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "small-size",
        "Title": "Mini version",
        "Description": "<p>By setting like this: <code>&lt;Steps size=&quot;small&quot;&gt;</code>, you can get a mini version.</p>\n",
        "Code": "<div>\n    <Steps Size=\"small\" Current=1>\n        <Step Title=\"Finished\" />\n        <Step Title=\"In Progress\" />\n        <Step Title=\"Waiting\" />\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.SmallSize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "vertical-small",
        "Title": "Vertical mini version",
        "Description": "<p>A simple mini version step bar in the vertical direction.</p>\n",
        "Code": "<div>\n    <Steps Direction=\"vertical\" Size=\"small\" Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.VerticalSmall",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "With icon",
        "Description": "<p>You can use your own custom icons by setting the property <code>icon</code> for <code>Steps.Step</code>.</p>\n",
        "Code": "<div>\n    <Steps>\n        <Step Status=\"finish\" Title=\"Login\" Icon=\"user\" />\n        <Step Status=\"finish\" Title=\"Verification\" Icon=\"solution\"  />\n        <Step Status=\"process\" Title=\"Pay\" Icon=\"loading\" />\n        <Step Status=\"wait\" Title=\"Done\" Icon=\"smile\"/>\n    </Steps>\n</div>",
        "Type": "Demos.Components.Steps.demo.Icon_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Transfer",
    "Type": "Data Entry",
    "Desc": "<p>Double column transfer choice box.</p>\n<h2>When To Use</h2>\n<ul>\n<li>It is a select control essentially which can be use for selecting multiple items.</li>\n<li>Transfer can display more information for items and take up more space.</li>\n</ul>\n<p>Transfer the elements between two columns in an intuitive and efficient way.</p>\n<p>One or more elements can be selected from either column, one click on the proper <code>direction</code> button, and the transfer is done. The left column is considered the <code>source</code> and the right column is considered the <code>target</code>. As you can see in the API description, these names are reflected in.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/transfer#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSource</td>\n<td>Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in <code>targetKeys</code> prop.</td>\n<td>List&lt;TransferItem&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether disabled transfer</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>A function used for rendering the footer.</td>\n<td>OneOf&lt;string, RenderFragment&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>A custom CSS style used for rendering the transfer columns.</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>operations</td>\n<td>A set of operations that are sorted from top to bottom.</td>\n<td>string[]</td>\n<td>['right', 'left']</td>\n<td></td>\n</tr>\n<tr>\n<td>Render</td>\n<td>The function to generate the item shown on a column. Based on an record (element of the DataSource array), this function should return a OneOf&lt;string, RenderFragment&gt; which is generated from that record.</td>\n<td>Func&lt;TransferItem, OneOf&lt;string, RenderFragment&gt;&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SelectedKeys</td>\n<td>A set of keys of selected items.</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>If included, a search box is shown on each column.</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSelectAll</td>\n<td>Show select all checkbox on the header</td>\n<td>bool</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>TargetKeys</td>\n<td>A set of keys of elements that are listed on the right column.</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>Titles</td>\n<td>A set of titles that are sorted from left to right.</td>\n<td>string[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>SelectAllLabels</td>\n<td>A set of customized labels for select all checkboxs on the header</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>A callback function that is executed when the transfer between columns is complete.</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnScroll</td>\n<td>A callback function which is executed when scroll options list</td>\n<td>TransferScrollArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>A callback function which is executed when search field are changed</td>\n<td>TransferSearchArgs</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelectChange</td>\n<td>A callback function which is executed when selected items are changed.</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Render Props</h3>\n<p>Transfer accept <code>children</code> to customize render list, using follow props:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>direction</td>\n<td>List render direction</td>\n<td><code>left</code> | <code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Disable list or not</td>\n<td>bool</td>\n<td></td>\n</tr>\n<tr>\n<td>filteredItems</td>\n<td>Filtered items</td>\n<td>TransferItem[]</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelect</td>\n<td>Select item</td>\n<td>(key: string, selected: bool)</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelectAll</td>\n<td>Select a group of items</td>\n<td>(keys: string[], selected: bool)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Selected items</td>\n<td>string[]</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Warning</h2>\n<p>According the <a href=\"http://facebook.github.io/react/docs/lists-and-keys.html#keys\">standard</a> of Blazor, the key should always be supplied directly to the elements in the array. In Transfer, the keys should be set on the elements included in <code>dataSource</code> array. By default, <code>key</code> property is used as an unique identifier.</p>\n<p>If there's no <code>key</code> in your data, you should use <code>rowKey</code> to specify the key that will be used for uniquely identify each element.</p>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/QAXskNI4G/Transfer.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The most basic usage of <code>Transfer</code> involves providing the source data and target keys arrays, plus the rendering and some callback functions.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"></Transfer>\n\n    <Switch Style=\"margin-top: 16px;\" OnChange=\"OnSwitchChange\"></Switch>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        for (int i = 0; i < 20; i++)\n        {\n            dataSource.Add(new TransferItem\n            {\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                Key = i.ToString(),\n                Disabled = i % 3 < 1\n            });\n\n            if (i > 10)\n                targetKeys.Add(i.ToString());\n        }\n        base.OnInitialized();\n    }\n\n    private void OnSwitchChange(bool check)\n    {\n        Disabled = check;\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Components.Transfer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "tree-transfer",
        "Title": "Tree Transfer",
        "Description": "<p>Customize render list with Tree component.</p>\n",
        "Code": "<h3>TreeTransfer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Transfer.demo.TreeTransfer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "large-data",
        "Title": "Performance Test",
        "Description": "<p>2000 items.</p>\n",
        "Code": "<h3>LargeData</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Transfer.demo.LargeData",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 3,
        "Name": "custom-item",
        "Title": "Custom datasource",
        "Description": "<p>Custom each Transfer Item, and in this way you can render a complex datasource.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"\n              Render=\"Render\"\n              Style=\"width:300px;height:300px;\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Components.Transfer.demo.CustomItem",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "advanced",
        "Title": "Advanced",
        "Description": "<p>Advanced Usage of Transfer.</p>\n<p>You can customize the labels of the transfer buttons, the width and height of the columns, and what should be displayed in the footer.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              Operations=\"operations\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"\n              Render=\"Render\"\n              Style=\"width:300px;height:300px;\">\n        <FooterTemplate>\n            <Button Type=\"@ButtonType.Default\" Size=\"@ButtonSize.Small\" Style=\"float: right; margin: 5px;\">reload</Button>\n        </FooterTemplate>\n\n    </Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private string[] operations = { \"to right\", \"to left\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Components.Transfer.demo.Advanced",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "search",
        "Title": "Search",
        "Description": "<p>Transfer with a search box.</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              ShowSearch=\"true\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnSearch=\"OnSearch\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnSearch(TransferSearchArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine(e.Value);\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Components.Transfer.demo.Search",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "table-transfer",
        "Title": "Table Transfer",
        "Description": "<p>Customize render list with Table component.</p>\n",
        "Code": "<h3>TableTransfer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Transfer.demo.TableTransfer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "custom-select-all-labels",
        "Title": "Custom Select All Labels",
        "Description": "<p>Custom the labels for select all checkboxs.</p>\n",
        "Code": "<h3>CustomSelectAllLabels</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Transfer.demo.CustomSelectAllLabels",
        "Style": "",
        "Debug": true
      }
    ]
  },
  {
    "Title": "Tag",
    "Type": "Data Display",
    "Desc": "<p>Tag for categorizing or markup.</p>\n<h2>When To Use</h2>\n<ul>\n<li>It can be used to tag by dimension or property.</li>\n<li>When categorizing.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/tag#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mode</td>\n<td>mode select <code>default</code>, <code>closable</code>, <code>checkable</code></td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether the Tag can be closed</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Checked status of Tag</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>Callback executed when Tag is checked/unchecked</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>Color of the Tag</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Callback executed when tag is closed</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the Tag is closed or not</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Set the icon of tag</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/cH1BOLfxC/Tag.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "basic Usage",
        "Description": "<p>Usage of basic Tag, and it could be closable by set <code>closable</code> property. Closable Tag supports <code>close</code> events.</p>\n",
        "Code": "<div>\n    <Tag >Tag 1</Tag>\n    <Tag>\n        <a href=\"https://github.com/ant-design-blazor/ant-design-blazor\">Link</a>\n    </Tag>\n    <Tag Mode=\"closeable\" OnClose=\"()=>onClose()\">Tag 2</Tag>\n    <Tag Mode=\"closeable\" OnClose=\"preventDefault\">Prevent Default</Tag>\n</div>\n\n@code{\n    void onClose()\n    {\n\n    }\n    void preventDefault()\n    {\n\n    }\n}",
        "Type": "Demos.Components.Tag.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Checkable",
        "Title": "Checkable",
        "Description": "<p>CheckableTag works like Checkbox, click it to toggle checked state.</p>\n",
        "Code": "<div>\n    <Tag  Mode=\"checkable\"  Checked=\"check1\">Tag1</Tag>\n    <Tag Mode=\"checkable\" Checked=\"check1\">Tag2</Tag>\n    <Tag Mode=\"checkable\" Checked=\"check1\" CheckedChange=\"_checked=>checkChange(_checked)\">Tag3</Tag>\n    \n</div>\n\n@code{\n    bool check1 { get; set; } = false;\n\n    private void checkChange(bool e)\n    {\n        check1 = !check1;\n    }\n}\n    ",
        "Type": "Demos.Components.Tag.demo.Checkable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Colorful",
        "Title": "Colorful Tag",
        "Description": "<p>We preset a series of colorful tag styles for use in different situations. You can also set it to a hex color string for custom color.</p>\n",
        "Code": "<div>\n    <div>\n        Presets:\n    </div>\n    <br />\n    <div>\n        <Tag Color=\"magenta\">magenta</Tag>\n        <Tag Color=\"pink\">pink</Tag>\n        <Tag Color=\"red\">red</Tag>\n        <Tag Color=\"volcano\">volcano</Tag>\n        <Tag Color=\"orange\">orange</Tag>\n        <Tag Color=\"green\">green</Tag>\n        <Tag Color=\"cyan\">cyan</Tag>\n        <Tag Color=\"blue\">blue</Tag>\n        <Tag Color=\"lime\">lime</Tag>\n        <Tag Color=\"geekblue\">geekblue</Tag>\n        <Tag Color=\"purple\">purple</Tag>\n    </div>\n    <br />\n    <div>\n        Inverse:\n    </div>\n    <br />\n    <div>\n        <Tag Icon=\"taobao\" Color=\"blue-inverse\">blue-inverse</Tag>\n        <Tag Color=\"orange-inverse\">orange-inverse</Tag>\n        <Tag Icon=\"skype\" Color=\"red-inverse\">red-inverse</Tag>\n        <Tag Icon=\"weibo\" Color=\"purple-inverse\">purple-inverse</Tag>\n    </div>\n    <br />\n    <div>\n        Customs:\n    </div>\n    <br />\n    <div>\n        To Do\n    </div>\n</div>",
        "Type": "Demos.Components.Tag.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Dynamic",
        "Title": "Add & Remove Dynamically",
        "Description": "<p>Generating a set of Tags by array, you can add and remove dynamically.</p>\n",
        "Code": "<div>\n    <div>\n        @foreach (var item in lstTags)\n        {\n            <Tag Mode=\"closeable\" OnClose=\"()=>onClose(item)\">@item</Tag>\n        }\n        @if (inputVisible)\n        {\n            <Input @ref=\"_inputRef\" Style=\"width: 78px\" Size=\"small\" @bind-Value=\"_inputValue\" OnBlur=\"handleInputConfirm\" OnPressEnter=\"handleInputConfirm\" />\n        }\n        else\n        {\n            <Tag Mode=\"checkable\" Class=\"editable-tag\" OnClick=\"OnChecked\">\n                <Icon Type=\"plus\" />New Tag\n            </Tag>\n        }\n    </div>\n</div>\n<style>\n    .editable-tag {\n        background: rgb(255, 255, 255);\n        border-style: dashed;\n    }\n</style>\n@code{\n    private bool inputVisible { get; set; } = false;\n    string _inputValue;\n    Input<string> _inputRef;\n    List<string> lstTags { get; set; } = new List<string>();\n\n    protected override void OnInitialized()\n    {\n        lstTags.Add(\"Apple\");\n        lstTags.Add(\"Mongo\");\n        lstTags.Add(\"Peach\");\n    }\n\n    void ValueChange(ChangeEventArgs value)\n    {\n        lstTags.Add(value.Value.ToString());\n    }\n\n    async Task OnChecked()\n    {\n        inputVisible = !inputVisible;\n        if (_inputRef != null)\n            await _inputRef.Focus();\n    }\n\n    void onClose(string item)\n    {\n        lstTags.Remove(item);\n    }\n\n    void handleInputConfirm()\n    {\n        if (string.IsNullOrEmpty(_inputValue)) return;\n\n        string res = lstTags.Find(s => s == _inputValue);\n\n        if (string.IsNullOrEmpty(res))\n        {\n            lstTags.Add(_inputValue);\n        }\n\n        this._inputValue = \"\";\n        this.inputVisible = false;\n    }\n\n\n}",
        "Type": "Demos.Components.Tag.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Hot",
        "Title": "Hot Tags",
        "Description": "<p>Select your favourite topics.</p>\n",
        "Code": "<div>\n    <span style=\"margin-right:8px\">Categories:</span>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[0]\">Movies</Tag>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[1]\">Books</Tag>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[2]\">Music</Tag>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[3]\">Sports</Tag>\n</div>\n\n@code{\n    bool[] lstCheck = new bool[] { false, true, false, true };\n}\n  ",
        "Type": "Demos.Components.Tag.demo.Hot",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Controlled",
        "Title": "Controlled",
        "Description": "<p>By using the visible prop, you can control the close state of Tag.</p>\n",
        "Code": "<div>\n    <Tag Mode=\"closeable\" Visible=\"bVisible\">Movies</Tag>\n    <br />\n    <br />\n    <Button Size=\"small\" OnClick=\"onClick\">Toggle</Button>\n</div>\n\n@code{\n    bool bVisible { get; set; } = true;\n    void onClick()\n    {\n        bVisible = !bVisible;\n    }\n}",
        "Type": "Demos.Components.Tag.demo.Controlled",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Carousel",
    "Type": "Data Display",
    "Desc": "<p>A carousel component. Scales with its container.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When there is a group of content on the same level.</li>\n<li>When there is insufficient content space, it can be used to save space in the form of a revolving door.</li>\n<li>Commonly used for a group of pictures/cards.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/carousel#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AfterChange</td>\n<td>(ToDo)Callback function called after the current index changes</td>\n<td>function(current)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>ChildContent</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Autoplay</td>\n<td>Whether to scroll automatically</td>\n<td>TimeSpan</td>\n<td></td>\n</tr>\n<tr>\n<td>BeforeChange</td>\n<td>(ToDo)Callback function called before the current index changes</td>\n<td>function(from, to)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DotPosition</td>\n<td>The position of the dots, which can be one of <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dots</td>\n<td>(ToDo)Whether to show the dots at the bottom of the gallery, <code>object</code> for <code>dotsClass</code> and any others</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Easing</td>\n<td>(ToDo)Transition interpolation function name</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Effect</td>\n<td>Transition effect <code>scrollx</code> or <code>fade</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/%24C9tmj978R/Carousel.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "Basic",
        "Description": "<p>Basic usage.</p>\n",
        "Code": "<div>\n    <Carousel>\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n\n<style>\n    .ant-carousel .slick-slide {\n        text-align: center;\n        height: 160px;\n        line-height: 160px;\n        background: #364d79;\n        overflow: hidden;\n    }\n\n        .ant-carousel .slick-slide h3 {\n            color: #fff;\n        }\n</style>",
        "Type": "Demos.Components.Carousel.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Automatic",
        "Title": "Scroll automatically",
        "Description": "<p>Timing of scrolling to the next card/picture.</p>\n",
        "Code": "<div>\n    <Carousel Autoplay=\"TimeSpan.FromSeconds(2)\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>",
        "Type": "Demos.Components.Carousel.demo.Automatic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Position",
        "Title": "Position",
        "Description": "<p>There are 4 position options available.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"_position\" Style=\"margin-bottom: 8px;\">\n        <Radio RadioButton Value=\"@CarouselDotPosition.Top\">Top</Radio>\n        <Radio RadioButton Value=\"@CarouselDotPosition.Bottom\">Bottom</Radio>\n        <Radio RadioButton Value=\"@CarouselDotPosition.Left\">Left</Radio>\n        <Radio RadioButton Value=\"@CarouselDotPosition.Right\">Right</Radio>\n    </RadioGroup>\n    <Carousel DotPosition=\"@_position\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n\n@code{\n    private string _position = CarouselDotPosition.Bottom;\n}",
        "Type": "Demos.Components.Carousel.demo.Position",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "CustomButtons",
        "Title": "Custom Buttons",
        "Description": "<p>User provides custom buttons for navigation</p>\n",
        "Code": "<div>\n    <Carousel @ref=\"_carousel\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n<div class=\"button-container\">\n    <Button OnClick=\"@( _=>_carousel.Previous())\" Size=\"small\">Prev</Button>\n    <div>\n        @foreach (int i in Enumerable.Range(0, 4))\n        {\n            <Button OnClick=\"@( _=>_carousel.GoTo(i))\" Size=\"small\">@(i+1)</Button>\n        }\n    </div>\n    <Button OnClick=\"@( _=>_carousel.Next())\" Size=\"small\">Next</Button>\n\n</div>\n\n<style>\n    .button-container {\n        display: flex;\n        justify-content: space-between;\n        padding-top:4px;\n    }\n\n    .ant-carousel .slick-slide {\n        text-align: center;\n        height: 160px;\n        line-height: 160px;\n        background: #364d79;\n        overflow: hidden;\n    }\n\n    .ant-carousel .slick-slide h3 {\n        color: #fff;\n    }\n</style>\n\n@code{\n    Carousel _carousel;\n}",
        "Type": "Demos.Components.Carousel.demo.CustomButtons",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Fadein",
        "Title": "Fade in",
        "Description": "<p>Slides use fade for transition.</p>\n",
        "Code": "<div>\n    <Carousel Effect=\"@CarouselEffect.Fade\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n",
        "Type": "Demos.Components.Carousel.demo.Fadein",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Layout",
    "Type": "Layout",
    "Desc": "<p>Handling the overall layout of a page.</p>\n<h2>Specification</h2>\n<h3>Size</h3>\n<p>The first level navigation is left aligned near a logo, and the secondary menu is right aligned.</p>\n<ul>\n<li>Top Navigation: the height of the first level navigation <code>64px</code>, the second level navigation <code>48px</code>.</li>\n<li>Top Navigation (for landing pages): the height of the first level navigation <code>80px</code>, the second level navigation <code>56px</code>.</li>\n<li>Calculation formula of a top navigation: <code>48+8n</code>.</li>\n<li>Calculation formula of an aside navigation: <code>200+8n</code>.</li>\n</ul>\n<h3>Interaction rules</h3>\n<ul>\n<li>The first level navigation and the last level navigation should be distinguishable by visualization;</li>\n<li>The current item should have the highest priority of visualization;</li>\n<li>When the current navigation item is collapsed, the style of the current navigation item is applied to its parent level;</li>\n<li>The left side navigation bar has support for both the accordion and expanding styles; you can choose the one that fits your case the best.</li>\n</ul>\n<h2>Visualization rules</h2>\n<p>Style of a navigation should conform to its level.</p>\n<ul>\n<li><p><strong>Emphasis by colorblock</strong></p>\n<p>When background color is a deep color, you can use this pattern for the parent level navigation item of the current page.</p>\n</li>\n<li><p><strong>The highlight match stick</strong></p>\n<p>When background color is a light color, you can use this pattern for the current page navigation item; we recommend using it for the last item of the navigation path.</p>\n</li>\n<li><p><strong>Highlighted font</strong></p>\n<p>From the visualization aspect, a highlighted font is stronger than colorblock; this pattern is often used for the parent level of the current item.</p>\n</li>\n<li><p><strong>Enlarge the size of the font</strong></p>\n<p><code>12px</code>, <code>14px</code> is a standard font size of navigations, <code>14px</code> is used for the first and the second level of the navigation. You can choose an appropriate font size regarding the level of your navigation.</p>\n</li>\n</ul>\n<h2>Component Overview</h2>\n<ul>\n<li><code>Layout</code>: The layout wrapper, in which <code>Header</code> <code>Sider</code> <code>Content</code> <code>Footer</code> or <code>Layout</code> itself can be nested, and can be placed in any parent container.</li>\n<li><code>Header</code>: The top layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Sider</code>: The sidebar with default style and basic functions, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Content</code>: The content layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Footer</code>: The bottom layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n</ul>\n<blockquote>\n<p>Based on <code>flex layout</code>, please pay attention to the <a href=\"http://caniuse.com/#search=flex\">compatibility</a>.</p>\n</blockquote>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/layout#API\" class=\"anchor\">#</a></h2>\n<pre><code class=\"language-jsx\">&lt;Layout&gt;\n  &lt;Header&gt;header&lt;/Header&gt;\n  &lt;Layout&gt;\n    &lt;Sider&gt;left sidebar&lt;/Sider&gt;\n    &lt;Content&gt;main content&lt;/Content&gt;\n    &lt;Sider&gt;right sidebar&lt;/Sider&gt;\n  &lt;/Layout&gt;\n  &lt;Footer&gt;footer&lt;/Footer&gt;\n&lt;/Layout&gt;\n</code></pre>\n<h3>Layout</h3>\n<p>The wrapper.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>container className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hasSider</td>\n<td>whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the styles</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>APIs of <code>Layout.Header</code> <code>Layout.Footer</code> <code>Layout.Content</code> are the same as that of <code>Layout</code>.</p>\n</blockquote>\n<h3>Layout.Sider</h3>\n<p>The sidebar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>breakpoint</td>\n<td><a href=\"/components/grid#Col\">breakpoints</a> of the responsive layout</td>\n<td><code>xs</code> | <code>sm</code> | <code>md</code> | <code>lg</code> | <code>xl</code> | <code>xxl</code> }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>container className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsed</td>\n<td>to set the current status</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsedWidth</td>\n<td>width of the collapsed sidebar, by setting to <code>0</code> a special trigger will appear</td>\n<td>number</td>\n<td>80</td>\n</tr>\n<tr>\n<td>collapsible</td>\n<td>whether can be collapsed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>defaultCollapsed</td>\n<td>to set the initial status</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>reverseArrow</td>\n<td>reverse direction of arrow, for a sider that expands from the right</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the styles</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>color theme of the sidebar</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>dark</code></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>specify the customized trigger, set to null to hide the trigger</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>width of the sidebar</td>\n<td>number|string</td>\n<td>200</td>\n</tr>\n<tr>\n<td>onCollapse</td>\n<td>the callback function, executed by clicking the trigger or activating the responsive layout</td>\n<td>(collapsed, type) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBreakpoint</td>\n<td>the callback function, executed when <a href=\"/components/grid#API\">breakpoints</a> changed</td>\n<td>(broken) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>zeroWidthTriggerStyle</td>\n<td>to customize the styles of the special trigger that appears when <code>collapsedWidth</code> is 0</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>breakpoint width</h4>\n<pre><code class=\"language-js\">{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n</code></pre>\n<style>\n  [data-theme=\"dark\"] .site-layout-background {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] .site-layout-header-background {\n    background: #1f1f1f;\n  }\n</style>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/hzEndUVEx/Layout.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic Structure",
        "Description": "<p>Classic page layouts.</p>\n",
        "Code": "<div>\n    <Layout>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Header>Header</Header>\n        <Layout>\n            <Sider>Sider</Sider>\n            <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Header>Header</Header>\n        <Layout>\n            <Content>Content</Content>\n            <Sider>Sider</Sider>\n        </Layout>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Sider>Sider</Sider>\n        <Layout>\n            <Header>Header</Header>\n            <Content>Content</Content>\n            <Footer>Footer</Footer>\n        </Layout>\n    </Layout>\n</div>",
        "Type": "Demos.Components.Layout.demo.Basic",
        "Style": "\n#components-layout-demo-basic .code-box-demo {\n  text-align: center;\n}\n#components-layout-demo-basic .ant-layout-header,\n#components-layout-demo-basic .ant-layout-footer {\n  background: #7dbcea;\n  color: #fff;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-header {\n  background: #6aa0c7;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-footer {\n  background: #6aa0c7;\n}\n#components-layout-demo-basic .ant-layout-footer {\n  line-height: 1.5;\n}\n#components-layout-demo-basic .ant-layout-sider {\n  background: #3ba0e9;\n  color: #fff;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-sider {\n  background: #3499ec;\n}\n#components-layout-demo-basic .ant-layout-content {\n  background: rgba(16, 142, 233, 1);\n  color: #fff;\n  min-height: 120px;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-content {\n  background: #107bcb;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout {\n  margin-bottom: 48px;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout:last-child {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "side",
        "Title": "Sider",
        "Description": "<p>Two-columns layout. The sider menu can be collapsed when horizontal space is limited.</p>\n<p>Generally, the mainnav is placed on the left side of the page, and the secondary menu is placed on the top of the working area. Contents will adapt the layout to the viewing area to improve the horizontal space usage, while the layout of the whole page is not stable.</p>\n<p>The level of the aside navigation is scalable. The first, second, and third level navigations could be present more fluently and relevantly, and aside navigation can be fixed, allowing the user to quickly switch and spot the current position, improving the user experience. However, this navigation occupies some horizontal space of the contents</p>\n",
        "Code": "<Layout Style=\"min-height: 100vh; \">\n    <Sider Collapsible Collapsed=@collapsed OnCollapse=@onCollapse>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" DefaultSelectedKeys=@(new[]{\"1\"}) Mode=\"MenuMode.Inline\">\n            <MenuItem Key=\"1\">\n                <Icon Type=\"pie-chart\" Theme=\"outline\" />\n                <span>Option 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"desktop\" Theme=\"outline\" />\n                <span>Option 2</span>\n            </MenuItem>\n            @{\n                RenderFragment sub1Title =\n                    @<span>\n                        <Icon Type=\"user\" Theme=\"outline\"/>\n                        <span>User</span>\n                    </span>;\n            }\n            <SubMenu Key=\"sub1\" Title=sub1Title>\n                <MenuItem Key=\"3\">Tom</MenuItem>\n                <MenuItem Key=\"4\">Bill</MenuItem>\n                <MenuItem Key=\"5\">Alex</MenuItem>\n            </SubMenu>\n            @{\n                RenderFragment sub2Title =\n                    @<span>\n                        <Icon Type=\"team\" Theme=\"outline\"/>\n                        <span>Team</span>\n                    </span>;\n            }\n            <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"6\">Team 1</MenuItem>\n            <MenuItem Key=\"8\">Team 2</MenuItem>\n            </SubMenu>\n            <MenuItem Key=\"9\">\n                <Icon Type=\"file\" Theme=\"outline\"/>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\" >\n        <Header Class=\"site-layout-background\" Style=\" padding: 0 ;\" ></Header>\n        <Content Style=\"margin:0 16px;\" >\n            <Breadcrumb Style=\"margin:16px 0;\">\n                <BreadcrumbItem>User</BreadcrumbItem>\n                <BreadcrumbItem>Bill</BreadcrumbItem>\n            </Breadcrumb>\n            <div class=\"site-layout-background\" style=\"padding: 24; min-height: 360px\">\n                Bill is a cat.\n            </div>\n        </Content>\n        <Footer Style=\"text-align:center \">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n\n@code {\n    bool collapsed;\n\n   void onCollapse(bool collapsed) {\n        Console.WriteLine(collapsed);\n        this.collapsed =collapsed;\n    }\n}\n\n\n<style>\n    #components-layout-demo-side .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.Side",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "custom-trigger",
        "Title": "Custom trigger",
        "Description": "<p>If you want to use a customized trigger, you can hide the default one by setting <code>trigger={null}</code>.</p>\n",
        "Code": "@code\n{\n    bool collapsed;\n\n    void toggle()\n    {\n        collapsed = !collapsed;\n    }\n}\n\n<Layout>\n    <Sider Collapsible Collapsed=@collapsed NoTrigger OnCollapse=\"OnCollapse\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"1\"})>\n            <MenuItem Key=\"1\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span>nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"video-camera\" Theme=\"outline\" />\n                <span>nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <Icon Type=\"upload\" Theme=\"outline\" />\n                <span>nav 3</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\">\n        <Header Class=\"site-layout-background\" Style=\"padding: 0;\">\n            @if (collapsed)\n            {\n                <Icon Type=\"menu-unfold\" Theme=\"outline\" Class=\"trigger\" OnClick=\"toggle\" />\n            }\n            else\n            {\n                <Icon Type=\"menu-fold\" Theme=\"outline\" Class=\"trigger\" OnClick=\"toggle\" />\n            }\n        </Header>\n        <Content Class=\"site-layout-background\" Style=\"margin: 24px 16px;padding: 24px;min-height: 280px;\">\n            Content\n        </Content>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-custom-trigger .trigger {\n        font-size: 18px;\n        line-height: 64px;\n        padding: 0 24px;\n        cursor: pointer;\n        transition: color 0.3s;\n    }\n\n        #components-layout-demo-custom-trigger .trigger:hover {\n            color: #1890ff;\n        }\n\n    #components-layout-demo-custom-trigger .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>\n\n\n@code{\n\n    void OnCollapse(bool isCollapsed)\n    {\n        Console.WriteLine($\"Collapsed: {isCollapsed}\");\n    }\n\n}",
        "Type": "Demos.Components.Layout.demo.CustomTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "custom-trigger-debug",
        "Title": "Custom trigger debug",
        "Description": "",
        "Code": "<h3>CustomTriggerDebug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Layout.demo.CustomTriggerDebug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 6,
        "Name": "fixed",
        "Title": "Fixed Header",
        "Description": "<p>Fixed Header is generally used to fix the top navigation to facilitate page switching.</p>\n",
        "Code": "<Layout>\n    <Header Style=\"position: fixed; z-index: 1; width: 100%; \">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new[]{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Class=\"site-layout\" Style=\"padding:0 50px; margin-top: 64px; \">\n        <Breadcrumb Style=\" margin: 16px 0;\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <div class=\"site-layout-background\" style=\"padding: 24px; min-height: 380px \">\n            Content\n        </div>\n    </Content>\n    <Footer Style=\"text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    #components-layout-demo-fixed .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 24px 16px 0;\n        float: left;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.Fixed",
        "Style": "\n[data-theme=\"dark\"] .site-layout .site-layout-background {\n  background: #141414;\n}\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "top-side-2",
        "Title": "Header Sider 2",
        "Description": "<p>Both the top navigation and the sidebar, commonly used in application site.</p>\n",
        "Code": "<Layout>\n    <Header Class=\"header\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Layout>\n        <Sider Width=\"200\" Class=\"site-layout-background\">\n            <Menu Mode=\"MenuMode.Inline\"\n                  DefaultSelectedKeys=@(new[] {\"1\"})\n                  DefaultOpenKeys=@(new[] {\"sub1\"})\n                  Style=\"height: 100%; border-right: 0;\">\n                @{\n                    RenderFragment sub1Title =\n                    @<span>\n                        <Icon Type=\"user\" Theme=\"outline\" />\n                        subnav 1\n                    </span>;\n                }\n                <SubMenu Key=\"sub1\" Title=sub1Title>\n                    <MenuItem Key=\"1\">option1</MenuItem>\n                    <MenuItem Key=\"2\">option2</MenuItem>\n                    <MenuItem Key=\"3\">option3</MenuItem>\n                    <MenuItem Key=\"4\">option4</MenuItem>\n                </SubMenu>\n                @{\n                    RenderFragment sub2Title =\n                    @<span>\n                        <Icon Type=\"laptop\" Theme=\"outline\" />\n                        subnav 2\n                    </span>;\n                }\n                <SubMenu Key=\"sub2\" Title=sub2Title>\n                    <MenuItem Key=\"5\">option5</MenuItem>\n                    <MenuItem Key=\"6\">option6</MenuItem>\n                    <MenuItem Key=\"7\">option7</MenuItem>\n                    <MenuItem Key=\"8\">option8</MenuItem>\n                </SubMenu>\n                @{\n                    RenderFragment sub3Title =\n                    @<span>\n                        <Icon Type=\"notification\" Theme=\"outline\" />\n                        subnav 3\n                    </span>;\n                }\n                <SubMenu Key=\"sub3\" Title=sub3Title>\n                    <MenuItem Key=\"9\">option9</MenuItem>\n                    <MenuItem Key=\"10\">option10</MenuItem>\n                    <MenuItem Key=\"11\">option11</MenuItem>\n                    <MenuItem Key=\"12\">option12</MenuItem>\n                </SubMenu>\n            </Menu>\n        </Sider>\n        <Layout Style=\" padding: 0 24px 24px;\">\n            <Breadcrumb Style=\"margin: 16px 0;\">\n                <BreadcrumbItem>Home</BreadcrumbItem>\n                <BreadcrumbItem>List</BreadcrumbItem>\n                <BreadcrumbItem>App</BreadcrumbItem>\n            </Breadcrumb>\n            <Content Class=\"site-layout-background\" Style=\" padding: 24px; margin: 0; min-height: 280px;\">\n                Content\n            </Content>\n        </Layout>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-top-side-2 .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 28px 16px 0;\n        float: left;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.TopSide2",
        "Style": "\n  #components-layout-demo-top-side-2 .logo {\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "responsive",
        "Title": "Responsive",
        "Description": "<p>Layout.Sider supports responsive layout.</p>\n<blockquote>\n<p>Note: You can get a responsive layout by setting <code>breakpoint</code>, the Sider will collapse to the width of <code>collapsedWidth</code> when window width is below the <code>breakpoint</code>. And a special trigger will appear if the <code>collapsedWidth</code> is set to <code>0</code>.</p>\n</blockquote>\n",
        "Code": "<Layout>\n    <Sider Breakpoint=\"@BreakpointType.Lg\"\n           CollapsedWidth=\"0\"\n           OnBreakpoint=\"broken => {\n            Console.WriteLine(broken);\n        }\"\n           OnCollapse=\"collapsed => {\n            Console.WriteLine(collapsed);\n        }\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"4\"})>\n            <MenuItem Key=\"1\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"video-camera\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <Icon Type=\"upload\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 3</span>\n            </MenuItem>\n            <MenuItem Key=\"4\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 4</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout>\n        <Header Class=\"site-layout-sub-header-background\" Style=\"padding: 0;\" ></Header>\n        <Content Style=\" margin: 24px 16px 0;\">\n            <div class=\"site-layout-background\" style=\"padding: 24px; min-height: 360px\">\n                content\n            </div>\n        </Content>\n        <Footer Style=\"text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-responsive .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout-sub-header-background {\n        background: #fff;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.Responsive",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-sub-header-background {\n    background: #141414;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "top",
        "Title": "Header-Content-Footer",
        "Description": "<p>The most basic &quot;header-content-footer&quot; layout.</p>\n<p>Generally, the mainnav is placed at the top of the page, and includes the logo, the first level navigation, and the secondary menu (users, settings, notifications) from left to right in it. We always put contents in a fixed size navigation (eg: <code>1200px</code>), the layout of the whole page is stable, it's not affected by viewing area.</p>\n<p>Top-bottom structure is conform with the top-bottom viewing habit, it's a classical navigation pattern of websites. This pattern demonstrates efficiency in the main workarea, while using some vertical space. And because the horizontal space of the navigation is limited, this pattern is not suitable for cases when the first level navigation contains many elements or links</p>\n",
        "Code": "<Layout Class=\"layout\">\n    <Header>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new[]{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Style=\"padding: 0 50px;\">\n        <Breadcrumb Style=\"margin: 16px 0;\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <div class=\"site-layout-content\">Content</div>\n    </Content>\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    .site-layout-content {\n        background: #fff;\n        padding: 24px;\n        min-height: 280px;\n    }\n    #components-layout-demo-top .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 24px 16px 0;\n        float: left;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.Top",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-content {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] #components-layout-demo-top .logo {\n    background: rgba(255,255,255,0.3);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "top-side",
        "Title": "Header-Sider",
        "Description": "<p>Both the top navigation and the sidebar, commonly used in documentation site.</p>\n",
        "Code": "<Layout>\n    <Header Class=\"header\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Style=\"padding: 0 50px\">\n        <Breadcrumb Style=\" margin: 16px 0\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <Layout Class=\"site-layout-background\" Style=\"padding: 24px 0;\">\n            <Sider Class=\"site-layout-background\" Width=\"200\">\n                <Menu Mode=\"MenuMode.Inline\"\n                      DefaultSelectedKeys=@(new[] {\"1\"})\n                      DefaultOpenKeys=@(new[] {\"sub1\"})\n                      Style=\"height: 100%;\">\n                    @{ RenderFragment sub1Title =\n                        @<span>\n                            <Icon Type=\"user\" Theme=\"outline\" />\n                            subnav 1\n                        </span>; }\n                    <SubMenu Key=\"sub1\" Title=sub1Title>\n                        <MenuItem Key=\"1\">option1</MenuItem>\n                        <MenuItem Key=\"2\">option2</MenuItem>\n                        <MenuItem Key=\"3\">option3</MenuItem>\n                        <MenuItem Key=\"4\">option4</MenuItem>\n                    </SubMenu>\n                    @{ RenderFragment sub2Title =\n                        @<span>\n                            <Icon Type=\"laptop\" Theme=\"outline\" />\n                            subnav 2\n                        </span>; }\n                    <SubMenu Key=\"sub2\" Title=sub2Title>\n                        <MenuItem Key=\"5\">option5</MenuItem>\n                        <MenuItem Key=\"6\">option6</MenuItem>\n                        <MenuItem Key=\"7\">option7</MenuItem>\n                        <MenuItem Key=\"8\">option8</MenuItem>\n                    </SubMenu>\n                    @{ RenderFragment sub3Title =\n                        @<span>\n                            <Icon Type=\"notification\" Theme=\"outline\" />\n                            subnav 3\n                        </span>; }\n                    <SubMenu Key=\"sub3\" Title=sub3Title>\n                        <MenuItem Key=\"9\">option9</MenuItem>\n                        <MenuItem Key=\"10\">option10</MenuItem>\n                        <MenuItem Key=\"11\">option11</MenuItem>\n                        <MenuItem Key=\"12\">option12</MenuItem>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Content Style=\"padding:0 24px; min-height: 280px;\">Content</Content>\n        </Layout>\n    </Content>\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    #components-layout-demo-top-side .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 28px 16px 0;\n        float: left;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.TopSide",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "fixed-sider",
        "Title": "Fixed Sider",
        "Description": "<p>When dealing with long content, a fixed sider can provide a better user experience.</p>\n",
        "Code": "<Layout>\n    <Sider Style=\"overflow: auto;height: 100vh;position: fixed;left: 0;\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"4\"})>\n            <MenuItem Key=\"1\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"video-camera\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <Icon Type=\"upload\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 3</span>\n            </MenuItem>\n            <MenuItem Key=\"4\">\n                <Icon Type=\"bar-chart\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 4</span>\n            </MenuItem>\n            <MenuItem Key=\"5\">\n                <Icon Type=\"cloud\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 5</span>\n            </MenuItem>\n            <MenuItem Key=\"6\">\n                <Icon Type=\"appstore\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 6</span>\n            </MenuItem>\n            <MenuItem Key=\"7\">\n                <Icon Type=\"team\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 7</span>\n            </MenuItem>\n            <MenuItem Key=\"8\">\n                <Icon Type=\"shop\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 8</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\" Style=\" margin-left: 200px\">\n        <Header Class=\"site-layout-background\" Style=\"padding: 0\" ></Header>\n        <Content Style=\"margin: 24px 16px 0; overflow: initial; \">\n            <div class=\"site-layout-background\" style=\"padding: 24px; text-align:center; \">\n                ...\n                <br />\n                Really\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                long\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                content\n            </div>\n        </Content>\n        <Footer Style=\" text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-fixed-sider .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Components.Layout.demo.FixedSider",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      }
    ]
  },
  {
    "Title": "Skeleton",
    "Type": "Feedback",
    "Desc": "<p>Provide a placeholder while you wait for content to load, or to visualise content that doesn't exist yet.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When resource need long time loading, like low network speed.</li>\n<li>The component contains much information, such as List or Card.</li>\n<li>Only works when loading data for the first time.</li>\n<li>Could be replaced by Spin in any situation, but can provide a better user experience.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/skeleton#API\" class=\"anchor\">#</a></h2>\n<h3>Skeleton</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Avatar</code></td>\n<td>Show avatar placeholder</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>AvatarSize</code></td>\n<td>Set the size of avatar</td>\n<td><code>int \\| 'large' \\| 'small' \\| 'default'</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>AvatarShape</code></td>\n<td>Set the shape of avatar</td>\n<td><code>'circle' \\| 'square'</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Loading</code></td>\n<td>Display the skeleton when <code>true</code></td>\n<td><code>boolean</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Paragraph</code></td>\n<td>Show paragraph placeholder</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>ParagraphRows</code></td>\n<td>Set the row count of paragraph</td>\n<td><code>int</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ParagraphWidth</code></td>\n<td>Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width</td>\n<td><code>int \\| string \\| Array&lt;int \\| string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Title</code></td>\n<td>Show title placeholder</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>TitleWidth</code></td>\n<td>Set the width of title</td>\n<td><code>int \\| string</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;button&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>Set the size</td>\n<td><code>'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n<tr>\n<td><code>Shape</code></td>\n<td>Set the shape</td>\n<td><code>'circle' \\| 'round' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;avatar&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>Set the size</td>\n<td><code>int \\| 'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n<tr>\n<td><code>Shape</code></td>\n<td>Set the shape</td>\n<td><code>'circle' \\| 'square'</code></td>\n<td><code>'square'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;input&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>Set the size</td>\n<td><code>'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/KpcciCJgv/Skeleton.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic usage.</p>\n",
        "Code": "<Skeleton></Skeleton>",
        "Type": "Demos.Components.Skeleton.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "element",
        "Title": "Skeleton button, avatar and input",
        "Description": "<p>Skeleton button, avatar and input.</p>\n",
        "Code": "<Row Align=\"middle\" Gutter=\"8\">\n    <Col Span=\"5\">\n    ButtonActive:\n    <Switch @bind-Value=\"@_buttonActive\"></Switch>\n    </Col>\n    <Col Span=\"9\">\n    ButtonSize:\n    <RadioGroup @bind-Value=\"@_buttonSize\">\n        <Radio Value=\"@SkeletonElementSize.Default\">Default</Radio>\n        <Radio Value=\"@SkeletonElementSize.Large\">Large</Radio>\n        <Radio Value=\"@SkeletonElementSize.Small\">Small</Radio>\n    </RadioGroup>\n    </Col>\n    <Col Span=\"9\">\n    ButtonShape:\n    <RadioGroup @bind-Value=\"@_buttonShape\">\n        <Radio Value=\"@SkeletonButtonShape.Default\">Default</Radio>\n        <Radio Value=\"@SkeletonButtonShape.Circle\">Circle</Radio>\n        <Radio Value=\"@SkeletonButtonShape.Round\">Round</Radio>\n    </RadioGroup>\n    </Col>\n</Row>\n<br />\n<SkeletonElement Type=\"button\" Active=\"@_buttonActive\" Size=\"@_buttonSize\" Shape=\"@_buttonShape\"></SkeletonElement>\n<br />\n<br />\n<Row Align=\"middle\" Gutter=\"8\">\n    <Col Span=\"5\">\n    AvatarActive:\n    <Switch @bind-Value=\"@_avatarActive\"></Switch>\n    </Col>\n    <Col Span=\"9\">\n    AvatarSize:\n    <RadioGroup @bind-Value=\"@_avatarSize\">\n        <Radio Value=\"@SkeletonElementSize.Default\">Default</Radio>\n        <Radio Value=\"@SkeletonElementSize.Large\">Large</Radio>\n        <Radio Value=\"@SkeletonElementSize.Small\">Small</Radio>\n    </RadioGroup>\n    </Col>\n    <Col Span=\"9\">\n    AvatarShape:\n    <RadioGroup @bind-Value=\"@_avatarShape\">\n        <Radio Value=\"@SkeletonAvatarShape.Circle\">Circle</Radio>\n        <Radio Value=\"@SkeletonAvatarShape.Square\">Square</Radio>\n    </RadioGroup>\n    </Col>\n</Row>\n<br />\n<SkeletonElement Type=\"avatar\" Active=\"@_avatarActive\" Size=\"@_avatarSize\" Shape=\"@_avatarShape\"></SkeletonElement>\n<br />\n<br />\n<Row Align=\"middle\" Gutter=\"8\">\n    <Col Span=\"5\">\n    InputActive:\n    <Switch @bind-Value=\"@_inputActive\"></Switch>\n    </Col>\n    <Col Span=\"9\">\n    InputSize:\n    <RadioGroup @bind-Value=\"@_inputSize\">\n        <Radio Value=\"@SkeletonElementSize.Default\">Default</Radio>\n        <Radio Value=\"@SkeletonElementSize.Large\">Large</Radio>\n        <Radio Value=\"@SkeletonElementSize.Small\">Small</Radio>\n    </RadioGroup>\n    </Col>\n</Row>\n<br />\n<SkeletonElement Type=\"input\" Active=\"@_inputActive\" Size=\"@_inputSize\" style=\"width:300px\"></SkeletonElement>\n\n@code{\n    bool _buttonActive = false;\n    bool _avatarActive = false;\n    bool _inputActive = false;\n    string _buttonSize = SkeletonElementSize.Default;\n    string _avatarSize = SkeletonElementSize.Default;\n    string _inputSize = SkeletonElementSize.Default;\n    string _buttonShape = SkeletonButtonShape.Default;\n    string _avatarShape = SkeletonAvatarShape.Circle;\n}",
        "Type": "Demos.Components.Skeleton.demo.Element",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "complex",
        "Title": "Complex combination",
        "Description": "<p>Complex combination with avatar and multiple paragraphs.</p>\n",
        "Code": "<Skeleton Avatar=\"true\" ParagraphRows=\"4\"></Skeleton>",
        "Type": "Demos.Components.Skeleton.demo.Complex",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "children",
        "Title": "Contains sub component",
        "Description": "<p>Skeleton contains sub component.</p>\n",
        "Code": "<div class=\"article\">\n    <Skeleton Loading=\"@_loading\">\n        <h4>Ant Design, a design language</h4>\n        <p>\n            We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people\n            create their product prototypes beautifully and efficiently.\n        </p>\n    </Skeleton>\n    <Button @onclick=\"showSkeleton\" Disabled=\"@_loading\">\n        Show Skeleton\n    </Button>\n</div>\n\n<style>\n    .article h4 {\n        margin-bottom: 16px;\n    }\n\n    .article button {\n        margin-top: 16px;\n    }\n</style>\n\n@code{\n    private bool _loading = false;\n\n    private async Task showSkeleton()\n    {\n        this._loading = true;\n        await Task.Delay(3000);\n        this._loading = false;\n    }\n}",
        "Type": "Demos.Components.Skeleton.demo.Children",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "active",
        "Title": "Active Animation",
        "Description": "<p>Display active animation.</p>\n",
        "Code": "<Skeleton Active=\"true\"></Skeleton>",
        "Type": "Demos.Components.Skeleton.demo.Active",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "list",
        "Title": "List Sample",
        "Description": "<p>Use skeleton in list component.</p>\n",
        "Code": "<Switch Checked=\"@_loading\" @bind-Value=\"@_loading\"></Switch>\n\n<AntList DataSource=\"@_listData\">\n    <ChildContent Context=\"item\">\n        <ListItem>\n            <Skeleton Loading=\"@_loading\" Active Avatar>\n                <ListItemMeta Avatar=\"@item.Avatar\" Description=\"@item.Description\">\n                    <Title>\n                        <a href=\"@item.Href\">@item.Title</a>\n                    </Title>\n                </ListItemMeta>\n                @item.Content\n            </Skeleton>\n        </ListItem>\n    </ChildContent>\n</AntList>\n\n@code{\n    bool _loading = true;\n\n    List<DataItem> _listData = new List<int>() { 1, 2, 3 }.Select(x => new DataItem()\n    {\n\n        Href = \"http://ng.ant.design\",\n        Title = $\"ant design part {x}\",\n        Avatar = \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n        Description = \"Ant Design, a design language for background applications, is refined by Ant UED Team.\",\n        Content =\n                  \"We supply a series of design principles, practical patterns and high quality design resources \" +\n                  \"(Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\"\n    }).ToList();\n\n\n    private class DataItem\n    {\n        public string Href { get; set; }\n        public string Title { get; set; }\n        public string Avatar { get; set; }\n        public string Description { get; set; }\n        public string Content { get; set; }\n\n    }\n}\n\n",
        "Type": "Demos.Components.Skeleton.demo.List",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Rate",
    "Type": "Data Entry",
    "Desc": "<p>Rate component.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Show evaluation.</li>\n<li>A quick rating operation on something.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/rate#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear</td>\n<td>whether to allow clear when click again</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>allowHalf</td>\n<td>whether to allow semi selection</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>character</td>\n<td>custom character of rate</td>\n<td>ReactNode</td>\n<td><a href=\"/components/icon/\">&lt;StarFilled /&gt;</a></td>\n</tr>\n<tr>\n<td>className</td>\n<td>custom class name of rate</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>star count</td>\n<td>number</td>\n<td>5</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>default value</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>read only, unable to interact</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>custom style object of rate</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>tooltips</td>\n<td>Customize tooltip by each character</td>\n<td>string[]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>current value</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>callback when component lose focus</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>callback when select value</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>callback when component get focus</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>onHoverChange</td>\n<td>callback when hover item</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>onKeyDown</td>\n<td>callback when keydown on component</td>\n<td>Function(event)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/R5uiIWmxe/Rate.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "<Rate />\n",
        "Type": "Demos.Components.Rate.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "text",
        "Title": "Show copywriting",
        "Description": "<p>Add copywriting in rate components.</p>\n",
        "Code": "<Rate @bind-Value=\"value\" Tooltips=\"@desc\" />\n<span class=\"ant-rate-text\">@(desc[(int)value-1])</span>\n\n@code\n{\n    string[] desc = new string[] { \"terrible\", \"bad\", \"normal\", \"good\", \"wonderful\" };\n    decimal value = 3M;\n}\n",
        "Type": "Demos.Components.Rate.demo.Text",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "clear",
        "Title": "Clear star",
        "Description": "<p>Support set allow to clear star when click again.</p>\n",
        "Code": "<Rate AllowClear=\"true\" DefaultValue=\"2\" />\n<span class=\"ant-rate-text\">AllowClear: true</span>\n<br />\n<Rate AllowClear=\"false\" DefaultValue=\"3\"></Rate>\n<span class=\"ant-rate-text\">AllowClear: false</span>",
        "Type": "Demos.Components.Rate.demo.Clear",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "half",
        "Title": "Half star",
        "Description": "<p>Support select half star.</p>\n",
        "Code": "<Rate AllowHalf=\"true\" DefaultValue=\"3.5M\" />\n",
        "Type": "Demos.Components.Rate.demo.Half",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "character",
        "Title": "Other Character",
        "Description": "<p>Replace the default star to other character like alphabet, digit, iconfont or even Chinese word.</p>\n",
        "Code": "<Rate Character=\"@Character1\" AllowHalf=\"true\" DefaultValue=\"3\" />\n<br />\n<Rate Character=\"@Character2\" AllowHalf=\"true\" DefaultValue=\"3\" />\n<br />\n<Rate Character=\"@Character3\" AllowHalf=\"true\" DefaultValue=\"3\" />\n\n@code\n{\n    RenderFragment<RateItemRenderContext> Character1 = (builder) =>\n    @<Template>\n        <Icon Type=\"heart\" Theme=\"fill\" />\n    </Template>;\n\n    RenderFragment<RateItemRenderContext> Character2 = (builder) =>\n    @<Template>\n        A\n    </Template>;\n\n    RenderFragment<RateItemRenderContext> Character3 = (builder) =>\n    @<Template>\n        好\n    </Template>;\n}\n",
        "Type": "Demos.Components.Rate.demo.Character",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "Read only",
        "Description": "<p>Read only, can't use mouse to interact.</p>\n",
        "Code": "<Rate Disabled DefaultValue=\"2\" />",
        "Type": "Demos.Components.Rate.demo.Disabled",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Cascader",
    "Type": "Data Entry",
    "Desc": "<p>Cascade selection box.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.</li>\n<li>When selecting from a large data set, with multi-stage classification separated for easy selection.</li>\n<li>Chooses cascade items in one float layer for better user experience.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/cascader#API\" class=\"anchor\">#</a></h2>\n<p>Cascader</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>whether allow clear</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ChangeOnSelect</td>\n<td>change value on each selection if set to true, see above demo for details</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>additional css class</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>initial selected value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ExpandTrigger</td>\n<td>expand current item when click or hover, one of 'click' 'hover'</td>\n<td>string</td>\n<td>'click'</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>data options of cascade</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>input placeholder</td>\n<td>string</td>\n<td>'Please Select'</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>input size, one of 'large','middle' 'small'</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>callback when finishing cascader select (List<CascaderNode>, string, string) =&gt; void</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>CascaderNode</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Label</td>\n<td>Label</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>HasChildren</td>\n<td>HasChildren</td>\n<td>bool</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Children</td>\n<td>Children</td>\n<td>AntCheckbox[]</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/UdS8y8xyZ/Cascader.svg",
    "DemoList": [
      {
        "Order": 1,
        "Name": "default",
        "Title": "Default Value",
        "Description": "<p>Specifies default value by an array.</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@defaultNodes\" @bind-Value=\"value\"></Cascader>\n    <span>selected: @value</span>\n</div>\n\n@code {\n    string value = \"112\";\n\n    List<CascaderNode> defaultNodes = GetDefaultNodes();\n\n    private static List<CascaderNode> GetDefaultNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>()\n        {\n            new CascaderNode()\n            {\n                Value = \"1\",\n                Label = \"湖北\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode\n                    {\n                        Value = \"11\", Label = \"武汉\", Children = new CascaderNode[]\n                        {\n                            new CascaderNode\n                            {\n                                Value = \"111\", Label = \"武昌区\", Children = new CascaderNode[]\n                                {\n                                    new CascaderNode {Value = \"1111\", Label = \"黄鹤楼街道\"},\n                                    new CascaderNode {Value = \"1112\", Label = \"白沙洲街道\"}\n                                }\n                            },\n                            new CascaderNode {Value = \"112\", Label = \"洪山区\"}\n                        }\n                    },\n                    new CascaderNode {Value = \"12\", Label = \"黄石\"},\n                    new CascaderNode {Value = \"13\", Label = \"宜昌\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"2\",\n                Label = \"浙江\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode {Value = \"21\", Label = \"杭州\"},\n                    new CascaderNode {Value = \"22\", Label = \"温州\"},\n                    new CascaderNode {Value = \"23\", Label = \"义乌\"},\n                    new CascaderNode {Value = \"23\", Label = \"宁波\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"3\",\n                Label = \"上海\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode {Value = \"31\", Label = \"徐汇区\"},\n                    new CascaderNode {Value = \"32\", Label = \"黄浦区\"},\n                    new CascaderNode {Value = \"32\", Label = \"浦东新区\"},\n                    new CascaderNode {Value = \"32\", Label = \"崇明区\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"4\",\n                Label = \"北京\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode {Value = \"41\", Label = \"朝阳\"},\n                    new CascaderNode {Value = \"42\", Label = \"东城\"},\n                    new CascaderNode {Value = \"43\", Label = \"西城\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"5\",\n                Label = \"江苏\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode\n                    {\n                        Value = \"51\", Label = \"南京\", Children = new CascaderNode[]\n                        {\n                            new CascaderNode {Value = \"511\", Label = \"鼓楼区\"},\n                            new CascaderNode {Value = \"512\", Label = \"玄武区\"}\n                        }\n                    },\n                    new CascaderNode {Value = \"52\", Label = \"苏州\"},\n                    new CascaderNode {Value = \"53\", Label = \"无锡\"},\n                    new CascaderNode {Value = \"53\", Label = \"扬州\"}\n                }\n            }\n        };\n        return list;\n    }\n\n}\n",
        "Type": "Demos.Components.Cascader.demo.Default",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Cascade selection box for selecting province/city/district.</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@basicNodes\"></Cascader>\n</div>\n\n@code{\n    List<CascaderNode> basicNodes = GetBasicNodes();\n\n    private static List<CascaderNode> GetBasicNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\"}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\"},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\"},\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\"},\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}",
        "Type": "Demos.Components.Cascader.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "hover",
        "Title": "Hover",
        "Description": "<p>Hover to expand sub menu, click to select option.</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@hoverNodes\" ExpandTrigger=\"hover\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> hoverNodes = GetHoverNodes();\n\n    private static List<CascaderNode> GetHoverNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\"}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\"},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\"},\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\"},\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Components.Cascader.demo.Hover",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "change",
        "Title": "Change on select",
        "Description": "<p>Allow only select parent options.</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@selectNodes\" ChangeOnSelect=\"true\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> selectNodes = GetSelectNodes();\n\n    private static List<CascaderNode> GetSelectNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\"}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\"},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\"},\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\"},\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Components.Cascader.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "Disabled option",
        "Description": "<p>Disable option by specifying the disabled property in options.</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@disabledNodes\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> disabledNodes = GetDisabledNodes();\n\n    private static List<CascaderNode> GetDisabledNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\", Disabled = true}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\", Disabled = true},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\", Disabled = true },\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Disabled = true,\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\", Disabled = true }\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\", Disabled = true },\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Disabled = true, Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Components.Cascader.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>Cascade selection box of different sizes.</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@sizeNodes\" Size=\"large\" Style=\"margin:15px 0;\"></Cascader>\n    <Cascader Options=\"@sizeNodes\" Size=\"middle\" Style=\"margin:15px 0\"></Cascader>\n    <Cascader Options=\"@sizeNodes\" Size=\"small\" Style=\"margin:15px 0\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> sizeNodes = GetSizeNodes();\n\n    private static List<CascaderNode> GetSizeNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"Size1\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"Size11\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"Size111\" },\n                        new CascaderNode{ Value = \"112\", Label=\"Size112\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"Size12\"},\n                    new CascaderNode{ Value = \"13\", Label=\"Size13\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"Size2\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"Size21\"},\n                    new CascaderNode{ Value = \"22\", Label=\"Size22\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"Size3\",\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Components.Cascader.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Notification",
    "Type": "Feedback",
    "Desc": "<p>Display a notification message globally.</p>\n<h2>When To Use</h2>\n<p>To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:</p>\n<ul>\n<li>A notification with complex content.</li>\n<li>A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.</li>\n<li>A notification that is pushed by the application.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/notification#API\" class=\"anchor\">#</a></h2>\n<blockquote>\n<p>Please confirm that the <code>&lt;AntContainer /&gt;</code> component has been added to <code>App.Razor</code>.</p>\n</blockquote>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>Customized close button</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>Customized CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>custom close icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>The content of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Notification</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>The title of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Trigger when notification closed</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>Specify a function that will be called when the notification is clicked</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>Position of Notification, can be one of <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Customized inline style</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p><code>NotificationService</code> also provides a global <code>Config()</code> method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying.</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Property</th>\n<th style=\"text-align: left;\">Description</th>\n<th style=\"text-align: left;\">Type</th>\n<th style=\"text-align: left;\">Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">Distance from the bottom of the viewport, when <code>placement</code> is <code>NotificationPlacement.BottomLeft</code> or <code>NotificationPlacement.BottomRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">Distance from the top of the viewport, when <code>placement</code> is <code>NotificationPlacement.TopLeft</code> or <code>NotificationPlacement.TopRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">custom close icon</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">Position of Notification, can be one of  <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement?</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">whether to enable RTL mode</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/Jxm5nw61w/Notification.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage that close the notification box after 4.5s.</p>\n",
        "Code": "@inject NotificationService _notice\n \n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\"\n        });\n    }\n}",
        "Type": "Demos.Components.Notification.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "duration",
        "Title": "Duration after which the notification box is closed",
        "Description": "<p><code>Duration</code> can be used to specify how long the notification stays open. After the duration time elapses, the notification closes automatically. If not specified, default value is 4.5 seconds. If you set the value to 0, the notification box will never close automatically.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Duration = 0,\n            Description = \"This notification box will not close automatically\"\n        });\n    }\n}",
        "Type": "Demos.Components.Notification.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "custom-icon",
        "Title": "Customized Icon",
        "Description": "<p>The icon can be customized to any react node.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n\n    private async Task OnClick()\n    {\n        RenderFragment customIcon = @<Icon Type=\"smile\" Theme=\"outline\" Style=\"color:#108ee9;\"></Icon>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Icon = customIcon\n        });\n    }\n}",
        "Type": "Demos.Components.Notification.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "with-icon",
        "Title": "Notification with icon",
        "Description": "<p>A notification box with a icon at the left side.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button OnClick=\"@OnSuccessClick\">\n    success\n</Button>   \n\n <Button OnClick=\"@OnInfoClick\">\n    info\n</Button>\n\n<Button OnClick=\"@OnWarningClick\">\n    warning\n</Button>\n\n<Button OnClick=\"@OnErrorClick\">\n    error\n</Button>\n\n@code{\n    private async Task NoticeWithIcon(NotificationType type)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            NotificationType = type\n        });\n    }\n\n    private async Task OnSuccessClick()\n    {\n        await NoticeWithIcon(NotificationType.Success);\n    }\n\n    private async Task OnInfoClick()\n    {\n        await NoticeWithIcon(NotificationType.Info);\n    }\n\n    private async Task OnWarningClick()\n    {\n        await NoticeWithIcon(NotificationType.Warning);\n    }\n\n    private async Task OnErrorClick()\n    {\n        await NoticeWithIcon(NotificationType.Error);\n    }\n\n}",
        "Type": "Demos.Components.Notification.demo.WithIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "update",
        "Title": "Update Message Content",
        "Description": "<p>Update content with unique key.</p>\n",
        "Code": "@inject NotificationService _notice\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n        Open the notification box\n    </Button>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        var task = _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"description.\",\n        });\n        await Task.Delay(1000);\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"New Title\",\n            Key = key,\n            Description = \"New description.\",\n        });\n    }\n}",
        "Type": "Demos.Components.Notification.demo.Update",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>A notification box can appear from the <code>topRight</code>, <code>bottomRight</code>, <code>bottomLeft</code> or <code>topLeft</code> of the viewport.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<div>\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnTopLeftClick\">\n        <Icon Type=\"Radius-Upleft\" Theme=\"Outline\"></Icon>\n        TopLeft\n    </Button>\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnTopRightClick\">\n        <Icon Type=\"Radius-Upright\" Theme=\"Outline\"></Icon>\n        TopRight\n    </Button>\n</div>\n\n<br/>\n\n<div>\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnBottomLeftClick\">\n        <Icon Type=\"Radius-Bottomleft\" Theme=\"Outline\"></Icon>\n        BottomLeft\n    </Button>\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnBottomRightClick\">\n        <Icon Type=\"Radius-Bottomright\" Theme=\"Outline\"></Icon>\n        BottomRight\n    </Button>\n</div>\n\n@code {\n    private async Task OpenWithPlacement(NotificationPlacement placement)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = $\"Notification {placement}\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Placement = placement\n        });\n    }\n\n    private async Task OnTopLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopLeft);\n    }\n\n    private async Task OnTopRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopRight);\n    }\n\n    private async Task OnBottomLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomLeft);\n    }\n\n    private async Task OnBottomRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomRight);\n    }\n}\n",
        "Type": "Demos.Components.Notification.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "with-btn",
        "Title": "Custom close button",
        "Description": "<p>To customize the style or font of the close button.</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    custom button\n</Button>\n\n@code{\n\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        RenderFragment btn = @<Button Type=\"@ButtonType.Primary\" OnClick=\"() => { _notice.Close(key); }\">\n                                confirm\n                            </Button>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"A function will be be called after the notification is closed (automatically after the \\\"duration\\\" time of manually).\",\n            Btn = btn \n        });\n    }\n}\n",
        "Type": "Demos.Components.Notification.demo.WithBtn",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Descriptions",
    "Type": "Data Display",
    "Desc": "<p>Display multiple read-only fields in groups.</p>\n<h2>When To Use</h2>\n<p>Commonly displayed on the details page.</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/MjtG9_FOI/Descriptions.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Basic usage.</p>\n",
        "Code": "<Descriptions Title=\"User Info\">\n    <DescriptionsItem Title=\"UserName\">Zhou Maomao</DescriptionsItem>\n    <DescriptionsItem Title=\"Telephone\">18100000000</DescriptionsItem>\n    <DescriptionsItem Title=\"Live\">Hangzhou, Zhejiang</DescriptionsItem>\n    <DescriptionsItem Title=\"Remark\">Empty</DescriptionsItem>\n    <DescriptionsItem Title=\"Address\">\n        No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n    </DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Components.Descriptions.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "border",
        "Title": "Border",
        "Description": "<p>Descriptions with border and background color.</p>\n",
        "Code": "<Descriptions Title=\"User Info\" Bordered>\n    <DescriptionsItem Title=\"Product\">Cloud Database</DescriptionsItem>\n    <DescriptionsItem Title=\"Billing Mode\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"Automatic Renewal\">YES</DescriptionsItem>\n    <DescriptionsItem Title=\"Order Time\">\n        2018-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Usage Time\" Span=\"2\">\n        2018-04-24 18:00:00 To 2019-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Status\" Span=\"3\">\n        <Badge Status=\"@BadgeStatus.Processing\" Text=\"Running\"></Badge>\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Negotiated Amount\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Discount\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Official Receipts\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Config Info\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1<br />\n    </DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Components.Descriptions.demo.Border",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "vertical",
        "Title": "Vertical",
        "Description": "<p>Responsive configuration enables perfect presentation on small screen devices.</p>\n",
        "Code": "<Descriptions Title=\"User Info\" Layout=\"@DescriptionsLayout.Vertical\">\n    <DescriptionsItem Title=\"UserName\">Zhou Maomao</DescriptionsItem>\n    <DescriptionsItem Title=\"Telephone\">18100000000</DescriptionsItem>\n    <DescriptionsItem Title=\"Live\">Hangzhou, Zhejiang</DescriptionsItem>\n    <DescriptionsItem Title=\"Address\" Span=\"2\">\n        No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Remark\">Empty</DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Components.Descriptions.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "vertical-border",
        "Title": "Vertical border",
        "Description": "<p>Vertical descriptions with border.</p>\n",
        "Code": "<Descriptions Title=\"User Info\" Bordered Layout=\"@DescriptionsLayout.Vertical\">\n    <DescriptionsItem Title=\"Product\">Cloud Database</DescriptionsItem>\n    <DescriptionsItem Title=\"Billing Mode\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"Automatic Renewal\">YES</DescriptionsItem>\n    <DescriptionsItem Title=\"Order Time\">\n        2018-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Usage Time\" Span=\"2\">\n        2018-04-24 18:00:00 To 2019-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Status\" Span=\"3\">\n        <Badge Status=\"processing\" Text=\"Running\"></Badge>\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Negotiated Amount\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Discount\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Official Receipts\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Config Info\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1<br />\n    </DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Components.Descriptions.demo.VerticalBorder",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "custom-size",
        "Title": "Custom size",
        "Description": "<p>Custom sizes to fit in a variety of containers.</p>\n",
        "Code": "<RadioGroup @bind-Value=\"@size\">\n    <Radio Value=\"DescriptionsSize.Default\">default</Radio>\n    <Radio Value=\"DescriptionsSize.Middle\">middle</Radio>\n    <Radio Value=\"DescriptionsSize.Small\">small</Radio>\n</RadioGroup>\n<br />\n<br />\n<Descriptions Title=\"Custom Size\" Bordered Size=\"@size\">\n    <DescriptionsItem Title=\"Product\">\n        Cloud Database\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Billing\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"time\">18:00:00</DescriptionsItem>\n    <DescriptionsItem Title=\"Amount\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Discount\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Official\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Config Info\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1\n        <br />\n    </DescriptionsItem>\n</Descriptions>\n\n@code{\n    private string size = DescriptionsSize.Default;\n}",
        "Type": "Demos.Components.Descriptions.demo.CustomSize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "responsive",
        "Title": "Responsive",
        "Description": "<p>Responsive configuration enables perfect presentation on small screen devices.</p>\n",
        "Code": "<Descriptions Title=\"Responsive Descriptions\" Bordered Column=\"@column\">\n    <DescriptionsItem Title=\"Product\">\n        Cloud Database\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"Billing\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"time\">18:00:00</DescriptionsItem>\n    <DescriptionsItem Title=\"Amount\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Discount\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Official\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"Config Info\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1\n        <br />\n    </DescriptionsItem>\n</Descriptions>\n\n@code{\n\n    private Dictionary<string, int> column = new Dictionary<string, int> {\n            { \"xxl\", 3 },\n            { \"xl\", 3},\n            { \"lg\", 2},\n            { \"md\", 2},\n            { \"sm\", 1},\n            { \"xs\", 1}\n        };\n\n}",
        "Type": "Demos.Components.Descriptions.demo.Responsive",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Calendar",
    "Type": "Data Display",
    "Desc": "<p>Container for displaying data in calendar form.</p>\n<h2>When To Use</h2>\n<p>When data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.</p>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/calendar#API\" class=\"anchor\">#</a></h2>\n<p><strong>Note:</strong> Part of the Calendar's locale is read from <code>value</code>. So, please set the locale of <code>moment</code> correctly.</p>\n<pre><code class=\"language-jsx\">// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\n// moment.locale('zh-cn');\n\n&lt;Calendar\n  dateCellRender={dateCellRender}\n  monthCellRender={monthCellRender}\n  onPanelChange={onPanelChange}\n  onSelect={onSelect}\n/&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dateCellRender</td>\n<td>Customize the display of the date cell, the returned content will be appended to the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>dateFullCellRender</td>\n<td>Customize the display of the date cell, the returned content will override the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>The date selected by default</td>\n<td>DateTime</td>\n<td>default date</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>Function that specifies the dates that cannot be selected</td>\n<td>(DateTime) =&gt; boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>fullscreen</td>\n<td>Whether to display in full-screen</td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>locale(TODO)</td>\n<td>The calendar's locale</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>The display mode of the calendar</td>\n<td><code>DatePickerType.Month</code> | <code>DatePickerType.Year</code></td>\n<td>DatePickerType.Month</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>Customize the display of the month cell, the returned content will be appended to the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>monthFullCellRender</td>\n<td>Customize the display of the month cell, the returned content will override the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>validRange</td>\n<td>to set valid range</td>\n<td>[DateTime, DateTime]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>The current selected date</td>\n<td>DateTime</td>\n<td>current date</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>Callback for when panel changes</td>\n<td>Func(DateTime date, string mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Callback for when a date is selected</td>\n<td>Func(DateTime）</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback for when date changes</td>\n<td>Func(DateTime</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>headerRender</td>\n<td>render custom header in panel</td>\n<td>Func(CalendarHeaderRenderArgs)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/dPQmLq08DI/Calendar.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>A basic calendar component with Year/Month switch.</p>\n",
        "Code": "<Calendar OnPanelChange=\"OnPanelChange\" />\n\n@code\n{\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        Console.WriteLine($\"{value.ToString(\"yyyy-MM-dd\")} {mode}\");\n    }\n}",
        "Type": "Demos.Components.Calendar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customize-header",
        "Title": "Customize Header",
        "Description": "<p>Customize Calendar header content.</p>\n",
        "Code": "<div class=\"site-calendar-customize-header-wrapper\">\n    <Calendar FullScreen=\"@false\"\n              HeaderRender=\"HeaderRender\"\n              OnPanelChange=\"OnPanelChange\" />\n</div>\n\n@code\n{\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        Console.WriteLine($\"{value} {mode}\");\n    }\n\n    private RenderFragment GetMonthOptions()\n    {\n        return@<Template>\n                  @for (int index = 1; index <= 12; index++)\n                  {\n                      <option class=\"month-item\" key=\"@index\" value=\"@index\">\n                          @(index)月\n                      </option>\n                  }\n\n              </Template>;\n    }\n\n    private RenderFragment GetYearOptions(int currentYear)\n    {\n        return @<Template>\n                   @for (int i = currentYear - 10; i < currentYear + 10; i += 1)\n                   {\n                       <option class=\"year-item\" key=\"@i\" value=\"@i\">\n                           @(i)年\n                       </option>\n                   }\n\n               </Template>;\n    }\n\n    private void OnSelectYear(ChangeEventArgs args, CalendarHeaderRenderArgs renderArgs)\n    {\n        int year = Convert.ToInt32(args.Value);\n        renderArgs.OnChange.InvokeAsync(DateHelper.CombineNewDate(renderArgs.Value, year: year));\n    }\n\n    private void OnSelectMonth(ChangeEventArgs args, CalendarHeaderRenderArgs renderArgs)\n    {\n        int month = Convert.ToInt32(args.Value);\n        renderArgs.OnChange.InvokeAsync(DateHelper.CombineNewDate(renderArgs.Value, month: month));\n    }\n\n    private void OnTypeChange()\n    {\n\n    }\n\n    private RenderFragment HeaderRender(CalendarHeaderRenderArgs args)\n    {\n        int start = 0;\n        int end = 12;\n\n        int month = args.Value.Month;\n        int year = args.Value.Year;\n\n        return\n            @<Template>\n                <div style=\"padding: 8px\">\n                    <Title Level=\"4\">\n                        Custom header\n                    </Title>\n                    <Row Gutter=\"8\">\n                        <AntDesign.Col>\n                            <RadioGroup size=\"small\" OnChange=\"value => args.OnTypeChange.InvokeAsync(value)\" Value=\"@args.Type\" TValue=\"string\">\n                                <Radio RadioButton Value=\"@DatePickerType.Month\">Month</Radio>\n                                <Radio RadioButton Value=\"@DatePickerType.Year\">Year</Radio>\n                            </RadioGroup>\n                        </AntDesign.Col>\n                        <AntDesign.Col>\n                            <select size=\"small\"\n                                    dropdownMatchSelectWidth=\"@false\"\n                                    class=\"my-year-select\"\n                                    @onchange=\"e => OnSelectYear(e, args)\"\n                                    value=\"@year\">\n                                @GetYearOptions(year)\n                            </select>\n                        </AntDesign.Col>\n                        <AntDesign.Col>\n                            <select size=\"small\"\n                                    dropdownMatchSelectWidth=\"@false\"\n                                    value=\"@month\"\n                                    @onchange=\"e => OnSelectMonth(e, args)\">\n                                @GetMonthOptions()\n                            </select>\n                        </AntDesign.Col>\n                    </Row>\n                </div>\n            </Template>;\n    }\n}\n\n<Style>\n    .site-calendar-customize-header-wrapper {\n        width: 300px;\n        border: 1px solid #f0f0f0;\n        border-radius: 2px;\n    }\n</Style>\n",
        "Type": "Demos.Components.Calendar.demo.CustomizeHeader",
        "Style": "\n  [data-theme=\"dark\"] .site-calendar-customize-header-wrapper {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "card",
        "Title": "Card",
        "Description": "<p>Nested inside a container element for rendering in limited space.</p>\n",
        "Code": "<div class=\"site-calendar-demo-card\">\n    <Calendar FullScreen=\"@false\" OnPanelChange=\"OnPanelChange\" />\n</div>\n\n@code\n{\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        Console.WriteLine($\"{value.ToString(\"YYYY-MM-DD\")} {mode}\");\n    }\n}\n\n<Style>\n    .site-calendar-demo-card {\n        width: 300px;\n        border: 1px solid #f0f0f0;\n        border-radius: 2px;\n    }\n</Style>",
        "Type": "Demos.Components.Calendar.demo.Card_",
        "Style": "\n  [data-theme=\"dark\"] .site-calendar-demo-card {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "select",
        "Title": "Selectable Calendar",
        "Description": "<p>A basic calendar component with Year/Month switch.</p>\n",
        "Code": "<div>\n    <Alert Message=@($\"You selected date: {selectedValue.ToString(\"yyyy-MM-dd\")}\") />\n    <Calendar Value=\"@value\" OnSelect=\"OnSelect\" OnPanelChange=\"OnPanelChange\" />\n</div>\n\n@code\n{\n    private DateTime selectedValue = new DateTime(2017, 1, 25);\n    private DateTime value = new DateTime(2017, 1, 25);\n\n    private void OnSelect(DateTime value)\n    {\n        this.value = value;\n        selectedValue = value;\n    }\n\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        this.value = value;\n    }\n}",
        "Type": "Demos.Components.Calendar.demo.Select_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "notice-calendar",
        "Title": "Notice Calendar",
        "Description": "<p>This component can be rendered by using <code>dateCellRender</code> and <code>monthCellRender</code> with the data you need.</p>\n",
        "Code": " <Calendar DateCellRender=\"DateCellRender\" MonthCellRender=\"MonthCellRender\" />\n\n@code\n{\n    class ListData\n    {\n        public string type;\n        public string content;\n    }\n\n    private List<ListData> GetListData(DateTime value) {\n        List<ListData> listData = null;\n        switch (value.Day) {\n            case 8:\n                listData = new List<ListData>\n                {\n                    new ListData { type = \"warning\", content = \"This is warning event.\" },\n                    new ListData { type = \"success\", content = \"This is usual event.\" },\n                };\n                break;\n            case 10:\n                listData = new List<ListData> {\n                    new ListData { type = \"warning\", content = \"This is warning event.\" },\n                    new ListData { type = \"success\", content = \"This is usual event.\" },\n                    new ListData { type = \"error\", content = \"This is error event.\" },\n                };\n                break;\n            case 15:\n                listData = new List<ListData> {\n                    new ListData { type = \"warning\", content = \"This is warning event\" },\n                    new ListData { type = \"success\", content = \"This is very long usual event。。....\" },\n                    new ListData { type = \"error\", content = \"This is error event 1.\" },\n                    new ListData { type = \"error\", content = \"This is error event 2.\" },\n                    new ListData { type = \"error\", content = \"This is error event 3.\" },\n                    new ListData { type = \"error\", content = \"This is error event 4.\" },\n                };\n                break;\n        }\n\n        return listData ?? new List<ListData>();\n    }\n\n    private RenderFragment DateCellRender(DateTime value) {\n        var listData = GetListData(value);\n        return @<Template>\n                    <ul class=\"events\">\n                        @foreach (var data in listData)\n                        {\n                            <li key=\"@data.content\">\n                                <Badge Status=\"@data.type\" Text=\"@data.content\" />\n                            </li>\n                        }\n                    </ul>\n                </Template>;\n    }\n\n    private int? GetMonthData(DateTime value) {\n        if (value.Month == 8) {\n            return 1394;\n        }\n\n        return null;\n    }\n\n    private RenderFragment MonthCellRender(DateTime value) {\n        int? num = GetMonthData(value);\n\n        if (num == null)\n        {\n            return null;\n        }\n\n        return @<Template>\n                    <div className=\"notes-month\">\n                        <section>@num</section>\n                        <span>Backlog number</span>\n                    </div>\n        </Template>;\n    }\n}\n\n<Style>\n    .events {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n        .events .ant-badge-status {\n            overflow: hidden;\n            white-space: nowrap;\n            width: 100%;\n            text-overflow: ellipsis;\n            font-size: 12px;\n        }\n\n    .notes-month {\n        text-align: center;\n        font-size: 28px;\n    }\n\n        .notes-month section {\n            font-size: 28px;\n        }\n</Style>",
        "Type": "Demos.Components.Calendar.demo.NoticeCalendar",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tooltip",
    "Type": "Data Display",
    "Desc": "<p>A simple text popup tip.</p>\n<h2>When To Use</h2>\n<ul>\n<li>The tip is shown on mouse enter, and is hidden on mouse leave. The Tooltip doesn't support complex text or operations.</li>\n<li>To provide an explanation of a <code>button/text/operation</code>. It's often used instead of the html <code>title</code> attribute.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/tooltip#API\" class=\"anchor\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>The text shown in the tooltip</td>\n<td>string|RenderFragment</td>\n<td>string.Empty</td>\n</tr>\n</tbody>\n</table>\n<h3>Common API</h3>\n<p>The following APIs are shared by Tooltip, Popconfirm, Popover.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrowPointAtCenter</td>\n<td>Whether the arrow is pointed at the center of target</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>AutoAdjustOverflow</td>\n<td>Whether to adjust popup placement automatically when popup is off screen</td>\n<td>bool</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultVisible</td>\n<td>Whether the floating tooltip card is visible by default</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>PopupContainerSelector</td>\n<td>The DOM container of the tip, the default behavior is to create a <code>div</code> element in <code>body</code></td>\n<td>string (css selector)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MouseEnterDelay</td>\n<td>Delay in seconds, before tooltip is shown on mouse enter</td>\n<td>doube</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>MouseLeaveDelay</td>\n<td>Delay in seconds, before tooltip is hidden on mouse leave</td>\n<td>doube</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>OverlayClassName</td>\n<td>Class name of the tooltip card</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverlayStyle</td>\n<td>Style of the tooltip card</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The position of the tooltip relative to the target, which can be one of <code>Top</code> <code>Left</code> <code>Right</code> <code>Bottom</code> <code>TopLeft</code> <code>TopRight</code> <code>BottomLeft</code> <code>BottomRight</code> <code>LeftTop</code> <code>LeftBottom</code> <code>RightTop</code> <code>RightBottom</code></td>\n<td>PlacementType</td>\n<td><code>PlacementType.Top</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Trigger</td>\n<td>Tooltip trigger mode. Could be multiple by passing an array</td>\n<td>TriggerType[]</td>\n<td><code>TriggerType.Hover</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the floating tooltip card is visible or not</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>OnVisibleChange</td>\n<td>Callback executed when visibility of the tooltip card is changed</td>\n<td>EventCallback<bool></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Tooltip</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/Vyyeu8jq2/Tooltp.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>The simplest usage.</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\n    <span>Tooltip will show on mouse enter.</span>\n</Tooltip>",
        "Type": "Demos.Components.Tooltip.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "auto-adjust-overflow",
        "Title": "Adjust placement automatically",
        "Description": "<p>Adjust placement automatically when tooltip is invisible.</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\n    <span>Tooltip will show on mouse enter.</span>\n</Tooltip>",
        "Type": "Demos.Components.Tooltip.demo.AutoAdjustOverflow",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "Placement",
        "Description": "<p>There are 12 placement options available.</p>\n",
        "Code": "<div class=\"demo\">\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); white-space: nowrap;\">\n        <Tooltip Placement=\"@PlacementType.TopLeft\" Title=\"Text\">\n            <Button>TL</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Top\" Title=\"Text\">\n            <Button>Top</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.TopRight\" Title=\"Text\">\n            <Button>TR</Button>\n        </Tooltip>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); float: left;\">\n        <Tooltip Placement=\"@PlacementType.LeftTop\" Title=\"Text\">\n            <Button>LT</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Left\" Title=\"Text\">\n            <Button>Left</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.LeftBottom\" Title=\"Text\">\n            <Button>LB</Button>\n        </Tooltip>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); margin-left: @($\"{ButtonWidth * 4 + 24}px\");\">\n        <Tooltip Placement=\"@PlacementType.RightTop\" Title=\"Text\">\n            <Button>RT</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Right\" Title=\"Text\">\n            <Button>Right</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.RightBottom\" Title=\"Text\">\n            <Button>RB</Button>\n        </Tooltip>\n    </div>\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); clear: both; white-space: nowrap;\">\n        <Tooltip Placement=\"@PlacementType.BottomLeft\" Title=\"Text\">\n            <Button>BL</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Bottom\" Title=\"Text\">\n            <Button>Bottom</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.BottomRight\" Title=\"Text\">\n            <Button>BR</Button>\n        </Tooltip>\n    </div>\n</div>\n\n@code\n{\n    public string Text = \"prompt text\";\n    const int ButtonWidth = 70;\n}",
        "Type": "Demos.Components.Tooltip.demo.Placement",
        "Style": "\n.code-box-demo .demo {\n  overflow: auto;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n.code-box-demo .ant-btn-rtl {\n  margin-right: 0;\n  margin-left: 8px;\n  margin-bottom: 8px;\n}\n#components-tooltip-demo-placement .ant-btn {\n  width: 70px;\n  text-align: center;\n  padding: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "arrow-point-at-center",
        "Title": "Arrow pointing at the center",
        "Description": "<p>By specifying <code>arrowPointAtCenter</code> prop, the arrow will point to the center of the target element.</p>\n",
        "Code": "<div>\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\">\n        <Button>Align edge / 边缘对齐</Button>\n    </Tooltip>\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\" ArrowPointAtCenter=\"true\">\n        <Button>Arrow points to center / 箭头指向中心</Button>\n    </Tooltip>\n</div>",
        "Type": "Demos.Components.Tooltip.demo.ArrowPointAtCenter",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tabs",
    "Type": "Data Display",
    "Desc": "<p>Tabs make it easy to switch between different views.</p>\n<h3>When To Use</h3>\n<p>Ant Design has 3 types of Tabs for different situations.</p>\n<ul>\n<li>Card Tabs: for managing too many closeable views.</li>\n<li>Normal Tabs: for functional aspects of a page.</li>\n<li><a href=\"/components/radio/#components-radio-demo-radiobutton\">RadioButton</a>: for secondary tabs.</li>\n</ul>\n",
    "ApiDoc": "<h2 id=\"API\"><span>API</span><a href=\"en-US/components/tabs#API\" class=\"anchor\">#</a></h2>\n<h3>Tabs</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activeKey</td>\n<td>Current TabPane's key</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>animated</td>\n<td>Whether to change tabs with animation. Only works while <code>tabPosition=&quot;top&quot;\\|&quot;bottom&quot;</code></td>\n<td>boolean | {inkBar:boolean, tabPane:boolean}</td>\n<td><code>true</code>, <code>false</code> when <code>type=&quot;card&quot;</code></td>\n</tr>\n<tr>\n<td>renderTabBar</td>\n<td>replace the TabBar</td>\n<td>(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) =&gt; React.ReactElement</td>\n<td>-</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>Initial active TabPane's key, if <code>activeKey</code> is not set.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hideAdd</td>\n<td>Hide plus icon or not. Only works while <code>type=&quot;editable-card&quot;</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>preset tab bar size</td>\n<td><code>large</code> | <code>default</code> | <code>small</code></td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>tabBarExtraContent</td>\n<td>Extra content in tab bar</td>\n<td>React.ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabBarGutter</td>\n<td>The gap between tabs</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabBarStyle</td>\n<td>Tab bar style object</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabPosition</td>\n<td>Position of tabs</td>\n<td><code>top</code> | <code>right</code> | <code>bottom</code> | <code>left</code></td>\n<td><code>top</code></td>\n</tr>\n<tr>\n<td>type</td>\n<td>Basic style of tabs</td>\n<td><code>line</code> | <code>card</code> | <code>editable-card</code></td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback executed when active tab is changed</td>\n<td>Function(activeKey) {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onEdit</td>\n<td>Callback executed when tab is added or removed. Only works while <code>type=&quot;editable-card&quot;</code></td>\n<td>(targetKey, action): void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onNextClick</td>\n<td>Callback executed when next button is clicked</td>\n<td>Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onPrevClick</td>\n<td>Callback executed when prev button is clicked</td>\n<td>Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onTabClick</td>\n<td>Callback executed when tab is clicked</td>\n<td>Function(key: string, event: MouseEvent)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>More option at <a href=\"https://github.com/react-component/tabs#tabs\">rc-tabs option</a></p>\n<h3>Tabs.TabPane</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>forceRender</td>\n<td>Forced render of content in tabs, not lazy render after clicking on tabs</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>key</td>\n<td>TabPane's key</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tab</td>\n<td>Show text in TabPane's head</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>More option at <a href=\"https://github.com/react-component/tabs#tabpane\">rc-tabs option</a></p>\n",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/lkI2hNEDr2V/Tabs.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "Basic",
        "Description": "<p>Default activate first tab.</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\" @bind-ActiveKey=\"@nKey\" OnChange=\"OnTabChange\">\n    @foreach (var item in lstTabs)\n    {\n        <TabPane Key=\"@item.KeyName\">\n            <Tab>@item.TabName</Tab>\n            <ChildContent>@item.Content @nKey</ChildContent>\n        </TabPane>\n    }\n</Tabs>\n\n<Button Type=\"primary\" OnClick=\"OnClickPrev\">Prev</Button>\n<Button Type=\"primary\" OnClick=\"OnClickNext\">Next</Button>\n\n\n@code{\n    string nKey { get; set; } = \"1\";\n\n    private class TabItem\n    {\n        public string KeyName;\n        public string TabName;\n        public string Content;\n    }\n\n    List<TabItem> lstTabs { get; set; } = new List<TabItem>();\n\n    protected override void OnInitialized()\n    {\n        lstTabs.Add(new TabItem { KeyName = \"1\", TabName = \"Tab 1\", Content = \"Content of Tab Pane\" });\n        lstTabs.Add(new TabItem { KeyName = \"2\", TabName = \"Tab 2\", Content = \"Content of Tab Pane\" });\n        lstTabs.Add(new TabItem { KeyName = \"3\", TabName = \"Tab 3\", Content = \"Content of Tab Pane\" });\n\n    }\n\n    void OnClickNext()\n    {\n        var n = Convert.ToInt32(nKey);\n        if (n >= lstTabs.Count) return;\n        n++;\n        nKey = n.ToString();\n    }\n\n    void OnClickPrev()\n    {\n        var n = Convert.ToInt32(nKey);\n        if (n <= 1) return;\n        n--;\n        nKey = n.ToString();\n    }\n\n    void OnTabChange(string key)\n    {\n        Console.WriteLine($\"tab change:{key}\");\n    }\n\n}\n",
        "Type": "Demos.Components.Tabs.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "card-top",
        "Title": "Container of card type Tab",
        "Description": "<p>Should be used at the top of container, needs to override styles.</p>\n",
        "Code": "<div class=\"card-container\">\n    <Tabs Type=\"@TabType.Card\">\n        <TabPane Key=\"1\">\n            <Tab>Tab Title 1</Tab>\n            <ChildContent>\n                <p>Content of Tab Pane 1</p>\n                <p>Content of Tab Pane 1</p>\n                <p>Content of Tab Pane 1</p>\n            </ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab Title 2</Tab>\n            <ChildContent>\n                <p>Content of Tab Pane 2</p>\n                <p>Content of Tab Pane 2</p>\n                <p>Content of Tab Pane 2</p>\n            </ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab Title 3</Tab>\n            <ChildContent>\n                <p>Content of Tab Pane 3</p>\n                <p>Content of Tab Pane 3</p>\n                <p>Content of Tab Pane 3</p>\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n</div>\n\n<style>\n    [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-content,\n    .card-container .ant-tabs-card .ant-tabs-content {\n        height: 120px;\n        margin-top: -16px;\n    }\n\n        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane,\n        .card-container .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane {\n            background: #fff;\n            padding: 16px;\n        }\n\n    [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar,\n    .card-container .ant-tabs-card .ant-tabs-bar {\n        border-color: #fff;\n    }\n\n        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab,\n        .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab {\n            border-color: transparent;\n            background: transparent;\n        }\n\n        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active,\n        .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active {\n            border-color: #fff;\n            background: #fff;\n        }\n</style>\n",
        "Type": "Demos.Components.Tabs.demo.CardTop",
        "Style": "\n#components-tabs-demo-card-top .code-box-demo {\n  background: #F5F5F5;\n  overflow: hidden;\n  padding: 24px;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {\n  border-color: transparent;\n  background: transparent;\n}\n[data-theme=\"dark\"] #components-tabs-demo-card-top .code-box-demo {\n  background: #000;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-content > .ant-tabs-tabpane {\n  background: #141414;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-bar {\n  border-color: #141414;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {\n  border-color: #141414;\n  background: #141414;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "card",
        "Title": "Card type tab",
        "Description": "<p>Another type of Tabs, which doesn't support vertical mode.</p>\n",
        "Code": "<Tabs Type=\"@TabType.Card\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Components.Tabs.demo.Card",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "editable-card",
        "Title": "Add & close tab",
        "Description": "<p>Only card type Tabs support adding &amp; closable. +Use <code>closable={false}</code> to disable close.</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\" Type=\"@TabType.EditableCard\" CreateTabPane=\"@Create\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\" Closable=\"false\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n    private static int addedIndex = 3;\n    private readonly Func<TabPane> Create = () =>\n        {\n            addedIndex++;\n            int temp = addedIndex;\n            return new TabPane(\n                key: temp.ToString(),\n                childContent: (b) => { b.AddContent(0, $\"Content of Tab Pane {temp}\"); },\n                tab: (b) => { b.AddContent(0, $\"Tab {temp}\"); }\n            );\n        };\n}",
        "Type": "Demos.Components.Tabs.demo.EditableCard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "position",
        "Title": "Position",
        "Description": "<p>Tab's position: left, right, top or bottom.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"position\" Style=\"margin-bottom: 16px;\">\n        <Radio RadioButton Value=\"@TabPosition.Top\">Top</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Left\">Left</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Right\">Right</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Bottom\">Bottom</Radio>\n    </RadioGroup>\n    <Tabs DefaultActiveKey=\"1\" TabPosition=\"@position\">\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </Tabs>\n</div>\n\n@code{\n    private string position = TabPosition.Top;\n}",
        "Type": "Demos.Components.Tabs.demo.Position",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "custom-tab-bar",
        "Title": "Customized bar of tab",
        "Description": "<p>Use react-sticky.</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Components.Tabs.demo.CustomTabBar",
        "Style": "\n  [data-theme=\"dark\"] .site-custom-tab-bar {\n    background: #141414;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "extra",
        "Title": "Extra content",
        "Description": "<p>You can add extra actions to the right of Tabs.</p>\n",
        "Code": "<Tabs>\n    <TabBarExtraContent>\n        <Button>Extra Action</Button>\n    </TabBarExtraContent>\n    <ChildContent>\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </ChildContent>\n</Tabs>",
        "Type": "Demos.Components.Tabs.demo.Extra",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "slide",
        "Title": "Slide",
        "Description": "<p>In order to fit in more tabs, they can slide left and right (or up and down).</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"mode\" Style=\"margin-bottom: 8px;\">\n        <Radio RadioButton Value=\"@TabPosition.Top\">Horizontal</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Left\">Vertical</Radio>\n    </RadioGroup>\n    <Tabs DefaultActiveKey=\"0\" TabPosition=\"@mode\" Style=\"height: 220px;\">\n        @for (int i = 0; i < 30; i++)\n        {\n            <TabPane Key=\"@($\"{i}\")\">\n                <Tab>Tab-@i</Tab>\n                <ChildContent>Content of tab Pane @i</ChildContent>\n            </TabPane>\n        }\n    </Tabs>\n</div>\n\n@code{\n    private string mode = TabPosition.Top;\n\n    RenderFragment<int> template = (i) =>@<TabPane Key=\"@i.ToString()\">\n        <Tab>Tab-@i</Tab>\n        <ChildContent>Content of tab Pane @i</ChildContent>\n    </TabPane>;\n\n}",
        "Type": "Demos.Components.Tabs.demo.Slide",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "custom-add-trigger",
        "Title": "Customized trigger of new tab",
        "Description": "<p>Hide default plus icon, and bind event for customized trigger.</p>\n",
        "Code": "<div>\n    <div style=\"margin-bottom: 16px;\">\n        <Button @onclick=\"(e)=>Add()\">ADD</Button>\n    </div>\n    <Tabs Type=\"@TabType.EditableCard\" HideAdd>\n        @foreach (var temp in _panes)\n        {\n            TabPane pane = temp;\n            <TabPane Key=\"@pane.Key\">\n                <Tab>@pane.Tab</Tab>\n                <ChildContent>@pane.ChildContent</ChildContent>\n            </TabPane>\n        }\n    </Tabs>\n</div>\n\n@code{\n    private List<TabPane> _panes = new List<TabPane>();\n    private static int btnIndex = 1;\n    private void Add()\n    {\n        int index = ++btnIndex;\n        _panes.Add(new TabPane(\n            key: index.ToString(),\n            tab: (b) => b.AddContent(0, $\"Tab {index}\"),\n            childContent: (b) => b.AddContent(0, $\"Content of Tab Pane {index}\")\n        ));\n\n        StateHasChanged();\n    }\n\n    protected override void OnInitialized()\n    {\n        base.OnInitialized();\n        for (int i = 0; i < btnIndex + 1; i++)\n        {\n            int index = i;\n            _panes.Add(new TabPane(\n                key: index.ToString(),\n                tab: (b) => b.AddContent(0, $\"Tab {index}\"),\n                childContent: (b) => b.AddContent(0, $\"Content of Tab Pane {index}\")\n            ));\n        }\n    }\n}",
        "Type": "Demos.Components.Tabs.demo.CustomAddTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "nest",
        "Title": "Nest",
        "Description": "<p>Default activate first tab.</p>\n",
        "Code": "<h3>Nest</h3>\n\nWaitting for implementing Select.\n\n@code {\n\n}\n",
        "Type": "Demos.Components.Tabs.demo.Nest",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 1,
        "Name": "disabled",
        "Title": "Disabled",
        "Description": "<p>Disabled a tab.</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Tab 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\" Disabled>\n        <Tab>Tab 2</Tab>\n        <ChildContent>Tab 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Tab 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Components.Tabs.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "size",
        "Title": "Size",
        "Description": "<p>Large size tabs are usually used in page header, and small size could be used in Modal.</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"size\" Style=\"margin-bottom: 16px;\">\n        <Radio RadioButton Value=\"@TabSize.Small\">Small</Radio>\n        <Radio RadioButton Value=\"@TabSize.Default\">Default</Radio>\n        <Radio RadioButton Value=\"@TabSize.Large\">Large</Radio>\n    </RadioGroup>\n\n    <Tabs DefaultActiveKey=\"1\" Size=\"@size\" Style=\"margin-bottom: 32px\">\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </Tabs>\n\n    <Tabs DefaultActiveKey=\"1\" Type=\"@TabType.Card\" Size=\"@size\">\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </Tabs>\n</div>\n\n@code{\n    private string size = TabSize.Default;\n}",
        "Type": "Demos.Components.Tabs.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "Icon",
        "Description": "<p>The Tab with Icon.</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"2\">\n    <TabPane Key=\"1\">\n        <Tab>\n            <span><Icon Type=\"android\" />Tab 1</span>\n        </Tab>\n        <ChildContent>Tab 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>\n            <span><Icon Type=\"apple\" />Tab 2</span>\n        </Tab>\n        <ChildContent>Tab 2</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Components.Tabs.demo.Icon_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "custom-tab-bar-node",
        "Title": "Draggable Tabs",
        "Description": "<p>Use <code>react-dnd</code> to make tabs draggable.</p>\n",
        "Code": "<Tabs Draggable>\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Tab 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Tab 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Tab 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Components.Tabs.demo.CustomTabBarNode",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Heatmap",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "heatmap",
        "Title": "Heatmap",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Heatmap @ref=\"chart1\" Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Heatmap  Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Heatmap  Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <Heatmap  Data=\"data4\" Config=\"config4\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    BasementProdItem[] data1;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data1 = await ChartsDemoData.BasementProdAsync(NavigationManager, HttpClient);\n        await chart1.ChangeData(data1);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    readonly HeatmapConfig config1 = new HeatmapConfig\n    {\n        ForceFit = false,\n        Width = 650,\n        Height = 500,\n        XField = \"month_of_Year\",\n        YField = \"district\",\n        ColorField = \"aqhi\",\n        ShapeType = \"rect\",\n        Color = new[] { \"#174c83\", \"#7eb6d4\", \"#efefeb\", \"#efa759\", \"#9b4d16\" },\n        Meta = new\n        {\n            Month_of_Year = new\n            {\n                Type = \"cat\"\n            }\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 = new object[]\n    {\n          new { name =  \"hot dog\", value =  70, country =  \"AD\" },\n          new { name =  \"burger\", value =  54, country =  \"AD\" },\n          new { name =  \"sandwich\", value =  49, country =  \"AD\" },\n          new { name =  \"kebab\", value =  4, country =  \"AD\" },\n          new { name =  \"fries\", value =  11, country =  \"AD\" },\n          new { name =  \"donut\", value =  68, country =  \"AD\" },\n          new { name =  \"junk\", value =  49, country =  \"AD\" },\n          new { name =  \"sushi\", value =  47, country =  \"AD\" },\n          new { name =  \"ramen\", value =  64, country =  \"AD\" },\n          new { name =  \"curry\", value =  51, country =  \"AD\" },\n          new { name =  \"udon\", value =  6, country =  \"AD\" },\n          new { name =  \"hot dog\", value =  45, country =  \"AE\" },\n          new { name =  \"burger\", value =  97, country =  \"AE\" },\n          new { name =  \"sandwich\", value =  69, country =  \"AE\" },\n          new { name =  \"kebab\", value =  68, country =  \"AE\" },\n          new { name =  \"fries\", value =  14, country =  \"AE\" },\n          new { name =  \"donut\", value =  93, country =  \"AE\" },\n          new { name =  \"junk\", value =  0, country =  \"AE\" },\n          new { name =  \"sushi\", value =  84, country =  \"AE\" },\n          new { name =  \"ramen\", value =  57, country =  \"AE\" },\n          new { name =  \"curry\", value =  73, country =  \"AE\" },\n          new { name =  \"udon\", value =  73, country =  \"AE\" },\n          new { name =  \"hot dog\", value =  43, country =  \"AF\" },\n          new { name =  \"burger\", value =  61, country =  \"AF\" },\n          new { name =  \"sandwich\", value =  28, country =  \"AF\" },\n          new { name =  \"kebab\", value =  12, country =  \"AF\" },\n          new { name =  \"fries\", value =  22, country =  \"AF\" },\n          new { name =  \"donut\", value =  54, country =  \"AF\" },\n          new { name =  \"junk\", value =  90, country =  \"AF\" },\n          new { name =  \"sushi\", value =  24, country =  \"AF\" },\n          new { name =  \"ramen\", value =  72, country =  \"AF\" },\n          new { name =  \"curry\", value =  40, country =  \"AF\" },\n          new { name =  \"udon\", value =  78, country =  \"AF\" },\n          new { name =  \"hot dog\", value =  35, country =  \"AG\" },\n          new { name =  \"burger\", value =  6, country =  \"AG\" },\n          new { name =  \"sandwich\", value =  64, country =  \"AG\" },\n          new { name =  \"kebab\", value =  92, country =  \"AG\" },\n          new { name =  \"fries\", value =  45, country =  \"AG\" },\n          new { name =  \"donut\", value =  88, country =  \"AG\" },\n          new { name =  \"junk\", value =  44, country =  \"AG\" },\n          new { name =  \"sushi\", value =  16, country =  \"AG\" },\n          new { name =  \"ramen\", value =  0, country =  \"AG\" },\n          new { name =  \"curry\", value =  75, country =  \"AG\" },\n          new { name =  \"udon\", value =  57, country =  \"AG\" },\n          new { name =  \"hot dog\", value =  3, country =  \"AI\" },\n          new { name =  \"burger\", value =  6, country =  \"AI\" },\n          new { name =  \"sandwich\", value =  34, country =  \"AI\" },\n          new { name =  \"kebab\", value =  72, country =  \"AI\" },\n          new { name =  \"fries\", value =  21, country =  \"AI\" },\n          new { name =  \"donut\", value =  30, country =  \"AI\" },\n          new { name =  \"junk\", value =  99, country =  \"AI\" },\n          new { name =  \"sushi\", value =  40, country =  \"AI\" },\n          new { name =  \"ramen\", value =  1, country =  \"AI\" },\n          new { name =  \"curry\", value =  70, country =  \"AI\" },\n          new { name =  \"udon\", value =  58, country =  \"AI\" },\n          new { name =  \"hot dog\", value =  40, country =  \"AL\" },\n          new { name =  \"burger\", value =  90, country =  \"AL\" },\n          new { name =  \"sandwich\", value =  24, country =  \"AL\" },\n          new { name =  \"kebab\", value =  69, country =  \"AL\" },\n          new { name =  \"fries\", value =  97, country =  \"AL\" },\n          new { name =  \"donut\", value =  70, country =  \"AL\" },\n          new { name =  \"junk\", value =  49, country =  \"AL\" },\n          new { name =  \"sushi\", value =  90, country =  \"AL\" },\n          new { name =  \"ramen\", value =  92, country =  \"AL\" },\n          new { name =  \"curry\", value =  90, country =  \"AL\" },\n          new { name =  \"udon\", value =  65, country =  \"AL\" },\n          new { name =  \"hot dog\", value =  72, country =  \"AM\" },\n          new { name =  \"burger\", value =  47, country =  \"AM\" },\n          new { name =  \"sandwich\", value =  30, country =  \"AM\" },\n          new { name =  \"kebab\", value =  51, country =  \"AM\" },\n          new { name =  \"fries\", value =  23, country =  \"AM\" },\n          new { name =  \"donut\", value =  63, country =  \"AM\" },\n          new { name =  \"junk\", value =  30, country =  \"AM\" },\n          new { name =  \"sushi\", value =  43, country =  \"AM\" },\n          new { name =  \"ramen\", value =  8, country =  \"AM\" },\n          new { name =  \"curry\", value =  49, country =  \"AM\" },\n          new { name =  \"udon\", value =  61, country =  \"AM\" },\n          new { name =  \"hot dog\", value =  83, country =  \"AO\" },\n          new { name =  \"burger\", value =  6, country =  \"AO\" },\n          new { name =  \"sandwich\", value =  17, country =  \"AO\" },\n          new { name =  \"kebab\", value =  40, country =  \"AO\" },\n          new { name =  \"fries\", value =  61, country =  \"AO\" },\n          new { name =  \"donut\", value =  72, country =  \"AO\" },\n          new { name =  \"junk\", value =  61, country =  \"AO\" },\n          new { name =  \"sushi\", value =  50, country =  \"AO\" },\n          new { name =  \"ramen\", value =  77, country =  \"AO\" },\n          new { name =  \"curry\", value =  97, country =  \"AO\" },\n          new { name =  \"udon\", value =  17, country =  \"AO\" },\n          new { name =  \"hot dog\", value =  15, country =  \"AQ\" },\n          new { name =  \"burger\", value =  34, country =  \"AQ\" },\n          new { name =  \"sandwich\", value =  26, country =  \"AQ\" },\n          new { name =  \"kebab\", value =  80, country =  \"AQ\" },\n          new { name =  \"fries\", value =  100, country =  \"AQ\" },\n          new { name =  \"donut\", value =  97, country =  \"AQ\" },\n          new { name =  \"junk\", value =  34, country =  \"AQ\" },\n          new { name =  \"sushi\", value =  81, country =  \"AQ\" },\n          new { name =  \"ramen\", value =  25, country =  \"AQ\" },\n          new { name =  \"curry\", value =  100, country =  \"AQ\" },\n          new { name =  \"udon\", value =  56, country =  \"AQ\" },\n    };\n\n    readonly HeatmapConfig config2 = new HeatmapConfig\n    {\n        Title = new AntDesign.Charts.Title\n        {\n            Visible = true,\n            Text = \"指定色块热力图形状\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"色块热力图支持 rect 和 circle两种形状，通过shapeType配置项指定，默认为rect。\"\n        },\n        XField = \"name\",\n        YField = \"country\",\n        ColorField = \"value\",\n        ShapeType = \"circle\",\n        Color = new[] { \"#0d5fbb\", \"#7eadfc\", \"#fd8b6f\", \"#aa3523\" },\n\n\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n    readonly object[] data3 = new object[]\n    {\n          new { name =  \"hot dog\", value =  70, country =  \"AD\" },\n          new { name =  \"burger\", value =  54, country =  \"AD\" },\n          new { name =  \"sandwich\", value =  49, country =  \"AD\" },\n          new { name =  \"kebab\", value =  4, country =  \"AD\" },\n          new { name =  \"fries\", value =  11, country =  \"AD\" },\n          new { name =  \"donut\", value =  68, country =  \"AD\" },\n          new { name =  \"junk\", value =  49, country =  \"AD\" },\n          new { name =  \"sushi\", value =  47, country =  \"AD\" },\n          new { name =  \"ramen\", value =  64, country =  \"AD\" },\n          new { name =  \"curry\", value =  51, country =  \"AD\" },\n          new { name =  \"udon\", value =  6, country =  \"AD\" },\n          new { name =  \"hot dog\", value =  45, country =  \"AE\" },\n          new { name =  \"burger\", value =  97, country =  \"AE\" },\n          new { name =  \"sandwich\", value =  69, country =  \"AE\" },\n          new { name =  \"kebab\", value =  68, country =  \"AE\" },\n          new { name =  \"fries\", value =  14, country =  \"AE\" },\n          new { name =  \"donut\", value =  93, country =  \"AE\" },\n          new { name =  \"junk\", value =  0, country =  \"AE\" },\n          new { name =  \"sushi\", value =  84, country =  \"AE\" },\n          new { name =  \"ramen\", value =  57, country =  \"AE\" },\n          new { name =  \"curry\", value =  73, country =  \"AE\" },\n          new { name =  \"udon\", value =  73, country =  \"AE\" },\n          new { name =  \"hot dog\", value =  43, country =  \"AF\" },\n          new { name =  \"burger\", value =  61, country =  \"AF\" },\n          new { name =  \"sandwich\", value =  28, country =  \"AF\" },\n          new { name =  \"kebab\", value =  12, country =  \"AF\" },\n          new { name =  \"fries\", value =  22, country =  \"AF\" },\n          new { name =  \"donut\", value =  54, country =  \"AF\" },\n          new { name =  \"junk\", value =  90, country =  \"AF\" },\n          new { name =  \"sushi\", value =  24, country =  \"AF\" },\n          new { name =  \"ramen\", value =  72, country =  \"AF\" },\n          new { name =  \"curry\", value =  40, country =  \"AF\" },\n          new { name =  \"udon\", value =  78, country =  \"AF\" },\n          new { name =  \"hot dog\", value =  35, country =  \"AG\" },\n          new { name =  \"burger\", value =  6, country =  \"AG\" },\n          new { name =  \"sandwich\", value =  64, country =  \"AG\" },\n          new { name =  \"kebab\", value =  92, country =  \"AG\" },\n          new { name =  \"fries\", value =  45, country =  \"AG\" },\n          new { name =  \"donut\", value =  88, country =  \"AG\" },\n          new { name =  \"junk\", value =  44, country =  \"AG\" },\n          new { name =  \"sushi\", value =  16, country =  \"AG\" },\n          new { name =  \"ramen\", value =  0, country =  \"AG\" },\n          new { name =  \"curry\", value =  75, country =  \"AG\" },\n          new { name =  \"udon\", value =  57, country =  \"AG\" },\n          new { name =  \"hot dog\", value =  3, country =  \"AI\" },\n          new { name =  \"burger\", value =  6, country =  \"AI\" },\n          new { name =  \"sandwich\", value =  34, country =  \"AI\" },\n          new { name =  \"kebab\", value =  72, country =  \"AI\" },\n          new { name =  \"fries\", value =  21, country =  \"AI\" },\n          new { name =  \"donut\", value =  30, country =  \"AI\" },\n          new { name =  \"junk\", value =  99, country =  \"AI\" },\n          new { name =  \"sushi\", value =  40, country =  \"AI\" },\n          new { name =  \"ramen\", value =  1, country =  \"AI\" },\n          new { name =  \"curry\", value =  70, country =  \"AI\" },\n          new { name =  \"udon\", value =  58, country =  \"AI\" },\n          new { name =  \"hot dog\", value =  40, country =  \"AL\" },\n          new { name =  \"burger\", value =  90, country =  \"AL\" },\n          new { name =  \"sandwich\", value =  24, country =  \"AL\" },\n          new { name =  \"kebab\", value =  69, country =  \"AL\" },\n          new { name =  \"fries\", value =  97, country =  \"AL\" },\n          new { name =  \"donut\", value =  70, country =  \"AL\" },\n          new { name =  \"junk\", value =  49, country =  \"AL\" },\n          new { name =  \"sushi\", value =  90, country =  \"AL\" },\n          new { name =  \"ramen\", value =  92, country =  \"AL\" },\n          new { name =  \"curry\", value =  90, country =  \"AL\" },\n          new { name =  \"udon\", value =  65, country =  \"AL\" },\n          new { name =  \"hot dog\", value =  72, country =  \"AM\" },\n          new { name =  \"burger\", value =  47, country =  \"AM\" },\n          new { name =  \"sandwich\", value =  30, country =  \"AM\" },\n          new { name =  \"kebab\", value =  51, country =  \"AM\" },\n          new { name =  \"fries\", value =  23, country =  \"AM\" },\n          new { name =  \"donut\", value =  63, country =  \"AM\" },\n          new { name =  \"junk\", value =  30, country =  \"AM\" },\n          new { name =  \"sushi\", value =  43, country =  \"AM\" },\n          new { name =  \"ramen\", value =  8, country =  \"AM\" },\n          new { name =  \"curry\", value =  49, country =  \"AM\" },\n          new { name =  \"udon\", value =  61, country =  \"AM\" },\n          new { name =  \"hot dog\", value =  83, country =  \"AO\" },\n          new { name =  \"burger\", value =  6, country =  \"AO\" },\n          new { name =  \"sandwich\", value =  17, country =  \"AO\" },\n          new { name =  \"kebab\", value =  40, country =  \"AO\" },\n          new { name =  \"fries\", value =  61, country =  \"AO\" },\n          new { name =  \"donut\", value =  72, country =  \"AO\" },\n          new { name =  \"junk\", value =  61, country =  \"AO\" },\n          new { name =  \"sushi\", value =  50, country =  \"AO\" },\n          new { name =  \"ramen\", value =  77, country =  \"AO\" },\n          new { name =  \"curry\", value =  97, country =  \"AO\" },\n          new { name =  \"udon\", value =  17, country =  \"AO\" },\n          new { name =  \"hot dog\", value =  15, country =  \"AQ\" },\n          new { name =  \"burger\", value =  34, country =  \"AQ\" },\n          new { name =  \"sandwich\", value =  26, country =  \"AQ\" },\n          new { name =  \"kebab\", value =  80, country =  \"AQ\" },\n          new { name =  \"fries\", value =  100, country =  \"AQ\" },\n          new { name =  \"donut\", value =  97, country =  \"AQ\" },\n          new { name =  \"junk\", value =  34, country =  \"AQ\" },\n          new { name =  \"sushi\", value =  81, country =  \"AQ\" },\n          new { name =  \"ramen\", value =  25, country =  \"AQ\" },\n          new { name =  \"curry\", value =  100, country =  \"AQ\" },\n          new { name =  \"udon\", value =  56, country =  \"AQ\" },\n    };\n\n    readonly HeatmapConfig config3 = new HeatmapConfig\n    {\n        Title = new AntDesign.Charts.Title\n        {\n            Visible = true,\n            Text = \"热力图形状大小映射\"\n        },\n        XField = \"name\",\n        YField = \"country\",\n        ColorField = \"value\",\n        SizeField = \"value\",\n        Color = new[] { \"#dddddd\", \"#9ec8e0\", \"#5fa4cd\", \"#2e7ab6\", \"#114d90\" },\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n    readonly object[] data4 = new object[]\n    {\n          new { name =  \"hot dog\", value =  70, country =  \"AD\" },\n          new { name =  \"burger\", value =  54, country =  \"AD\" },\n          new { name =  \"sandwich\", value =  49, country =  \"AD\" },\n          new { name =  \"kebab\", value =  4, country =  \"AD\" },\n          new { name =  \"fries\", value =  11, country =  \"AD\" },\n          new { name =  \"donut\", value =  68, country =  \"AD\" },\n          new { name =  \"junk\", value =  49, country =  \"AD\" },\n          new { name =  \"sushi\", value =  47, country =  \"AD\" },\n          new { name =  \"ramen\", value =  64, country =  \"AD\" },\n          new { name =  \"curry\", value =  51, country =  \"AD\" },\n          new { name =  \"udon\", value =  6, country =  \"AD\" },\n          new { name =  \"hot dog\", value =  45, country =  \"AE\" },\n          new { name =  \"burger\", value =  97, country =  \"AE\" },\n          new { name =  \"sandwich\", value =  69, country =  \"AE\" },\n          new { name =  \"kebab\", value =  68, country =  \"AE\" },\n          new { name =  \"fries\", value =  14, country =  \"AE\" },\n          new { name =  \"donut\", value =  93, country =  \"AE\" },\n          new { name =  \"junk\", value =  0, country =  \"AE\" },\n          new { name =  \"sushi\", value =  84, country =  \"AE\" },\n          new { name =  \"ramen\", value =  57, country =  \"AE\" },\n          new { name =  \"curry\", value =  73, country =  \"AE\" },\n          new { name =  \"udon\", value =  73, country =  \"AE\" },\n          new { name =  \"hot dog\", value =  43, country =  \"AF\" },\n          new { name =  \"burger\", value =  61, country =  \"AF\" },\n          new { name =  \"sandwich\", value =  28, country =  \"AF\" },\n          new { name =  \"kebab\", value =  12, country =  \"AF\" },\n          new { name =  \"fries\", value =  22, country =  \"AF\" },\n          new { name =  \"donut\", value =  54, country =  \"AF\" },\n          new { name =  \"junk\", value =  90, country =  \"AF\" },\n          new { name =  \"sushi\", value =  24, country =  \"AF\" },\n          new { name =  \"ramen\", value =  72, country =  \"AF\" },\n          new { name =  \"curry\", value =  40, country =  \"AF\" },\n          new { name =  \"udon\", value =  78, country =  \"AF\" },\n          new { name =  \"hot dog\", value =  35, country =  \"AG\" },\n          new { name =  \"burger\", value =  6, country =  \"AG\" },\n          new { name =  \"sandwich\", value =  64, country =  \"AG\" },\n          new { name =  \"kebab\", value =  92, country =  \"AG\" },\n          new { name =  \"fries\", value =  45, country =  \"AG\" },\n          new { name =  \"donut\", value =  88, country =  \"AG\" },\n          new { name =  \"junk\", value =  44, country =  \"AG\" },\n          new { name =  \"sushi\", value =  16, country =  \"AG\" },\n          new { name =  \"ramen\", value =  0, country =  \"AG\" },\n          new { name =  \"curry\", value =  75, country =  \"AG\" },\n          new { name =  \"udon\", value =  57, country =  \"AG\" },\n          new { name =  \"hot dog\", value =  3, country =  \"AI\" },\n          new { name =  \"burger\", value =  6, country =  \"AI\" },\n          new { name =  \"sandwich\", value =  34, country =  \"AI\" },\n          new { name =  \"kebab\", value =  72, country =  \"AI\" },\n          new { name =  \"fries\", value =  21, country =  \"AI\" },\n          new { name =  \"donut\", value =  30, country =  \"AI\" },\n          new { name =  \"junk\", value =  99, country =  \"AI\" },\n          new { name =  \"sushi\", value =  40, country =  \"AI\" },\n          new { name =  \"ramen\", value =  1, country =  \"AI\" },\n          new { name =  \"curry\", value =  70, country =  \"AI\" },\n          new { name =  \"udon\", value =  58, country =  \"AI\" },\n          new { name =  \"hot dog\", value =  40, country =  \"AL\" },\n          new { name =  \"burger\", value =  90, country =  \"AL\" },\n          new { name =  \"sandwich\", value =  24, country =  \"AL\" },\n          new { name =  \"kebab\", value =  69, country =  \"AL\" },\n          new { name =  \"fries\", value =  97, country =  \"AL\" },\n          new { name =  \"donut\", value =  70, country =  \"AL\" },\n          new { name =  \"junk\", value =  49, country =  \"AL\" },\n          new { name =  \"sushi\", value =  90, country =  \"AL\" },\n          new { name =  \"ramen\", value =  92, country =  \"AL\" },\n          new { name =  \"curry\", value =  90, country =  \"AL\" },\n          new { name =  \"udon\", value =  65, country =  \"AL\" },\n          new { name =  \"hot dog\", value =  72, country =  \"AM\" },\n          new { name =  \"burger\", value =  47, country =  \"AM\" },\n          new { name =  \"sandwich\", value =  30, country =  \"AM\" },\n          new { name =  \"kebab\", value =  51, country =  \"AM\" },\n          new { name =  \"fries\", value =  23, country =  \"AM\" },\n          new { name =  \"donut\", value =  63, country =  \"AM\" },\n          new { name =  \"junk\", value =  30, country =  \"AM\" },\n          new { name =  \"sushi\", value =  43, country =  \"AM\" },\n          new { name =  \"ramen\", value =  8, country =  \"AM\" },\n          new { name =  \"curry\", value =  49, country =  \"AM\" },\n          new { name =  \"udon\", value =  61, country =  \"AM\" },\n          new { name =  \"hot dog\", value =  83, country =  \"AO\" },\n          new { name =  \"burger\", value =  6, country =  \"AO\" },\n          new { name =  \"sandwich\", value =  17, country =  \"AO\" },\n          new { name =  \"kebab\", value =  40, country =  \"AO\" },\n          new { name =  \"fries\", value =  61, country =  \"AO\" },\n          new { name =  \"donut\", value =  72, country =  \"AO\" },\n          new { name =  \"junk\", value =  61, country =  \"AO\" },\n          new { name =  \"sushi\", value =  50, country =  \"AO\" },\n          new { name =  \"ramen\", value =  77, country =  \"AO\" },\n          new { name =  \"curry\", value =  97, country =  \"AO\" },\n          new { name =  \"udon\", value =  17, country =  \"AO\" },\n          new { name =  \"hot dog\", value =  15, country =  \"AQ\" },\n          new { name =  \"burger\", value =  34, country =  \"AQ\" },\n          new { name =  \"sandwich\", value =  26, country =  \"AQ\" },\n          new { name =  \"kebab\", value =  80, country =  \"AQ\" },\n          new { name =  \"fries\", value =  100, country =  \"AQ\" },\n          new { name =  \"donut\", value =  97, country =  \"AQ\" },\n          new { name =  \"junk\", value =  34, country =  \"AQ\" },\n          new { name =  \"sushi\", value =  81, country =  \"AQ\" },\n          new { name =  \"ramen\", value =  25, country =  \"AQ\" },\n          new { name =  \"curry\", value =  100, country =  \"AQ\" },\n          new { name =  \"udon\", value =  56, country =  \"AQ\" },\n    };\n\n    readonly HeatmapConfig config4 = new HeatmapConfig\n    {\n        Title = new AntDesign.Charts.Title\n        {\n            Visible = true,\n            Text = \"热力图模式切换\"\n        },\n        XField = \"name\",\n        YField = \"country\",\n        ColorField = \"value\",\n        //ShapeSize = \"circle\",\n        Color = new[] { \"#0d5fbb\", \"#7eadfc\", \"#fd8b6f\", \"#aa3523\" },\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Heatmap.demo.Heatmap_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "density-heatmap",
        "Title": "密度热力图",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <DensityHeatmap @ref=\"chart1\" Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    JobpayingItem[] data1;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data1 = await ChartsDemoData.JobpayingItemAsync(NavigationManager, HttpClient);\n        await chart1.ChangeData(data1);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    readonly DensityHeatmapConfig config1 = new DensityHeatmapConfig\n    {\n        XField = \"prob\",\n        YField = \"average_annual_wage\",\n        ColorField = \"numbEmployed\",\n        Color = new[] {\"#295599\", \"#3e94c0\", \"#78c6d0\", \"#b4d9e4\", \"#fffef0\", \"#f9cdac\", \"#ec7d92\", \"#bc448c\"},\n        Radius = 15,\n        Intensity = 2,\n        XAxis = new Axis\n        {\n            Visible = true,\n            Min = -0.05,\n            Max = 1.05,\n            Nice = false\n        },\n        YAxis = new Axis\n        {\n            Visible = true,\n            Min = -1000\n        }\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Heatmap.demo.DensityHeatmap_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Sparkline",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "spark-line",
        "Title": "Sparkline",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n\n<Table DataSource=\"datas\">\n    <AntDesign.Column @bind-Field=\"@context.id\"></AntDesign.Column>\n    <AntDesign.Column TData=\"string\">\n        <TinyColumn Data=\"@context.trend\" Config=\"trendConfig\"></TinyColumn>\n    </AntDesign.Column>\n    <AntDesign.Column TData=\"string\">\n        <TinyLine Data=\"@context.times\" Config=\"timesConfig\"></TinyLine>\n    </AntDesign.Column>\n    <AntDesign.Column TData=\"string\">\n        <RingProgress Data=\"@context.load\" Config=\"loadConfig\"></RingProgress>\n    </AntDesign.Column>\n</Table>\n\n@code{\n\n    readonly List<DataItem> datas = new List<DataItem>\n    {\n        new DataItem {id = \"local-001\"},\n        new DataItem {id = \"local-002\"},\n        new DataItem {id = \"local-003\"},\n        new DataItem {id = \"local-004\"},\n        new DataItem {id = \"local-005\"}\n    };\n\n    protected override Task OnInitializedAsync()\n    {\n        var r = new Random();\n        datas.ForEach(x =>\n        {\n            for (var i = 0; i < 10; i++)\n            {\n                x.trend.Add(new DataValue {index = i.ToString(), value = r.Next(10, 1000)});\n            }\n            for (var i = 0; i < 20; i++)\n            {\n                x.times.Add(new DataValue {index = i.ToString(), value = r.Next(200, 400)});\n            }\n            x.load = r.NextDouble();\n        });\n\n        return base.OnInitializedAsync();\n    }\n\n    readonly TinyColumnConfig trendConfig = new TinyColumnConfig\n    {\n        Width = 200,\n        Height = 50,\n        XField = \"index\",\n        YField = \"value\",\n        GuideLine = new object[]\n        {\n            new\n            {\n                Type = \"median\",\n                Text = new\n                {\n                    Position = \"start\",\n                    Content = \"中位数\",\n                    Style = new\n                    {\n                        Stroke = \"white\",\n                        LineWidth = 2\n                    }\n                }\n            }\n        }\n    };\n\n    readonly TinyLineConfig timesConfig = new TinyLineConfig\n    {\n        Width = 200,\n        Height = 50,\n        XField = \"index\",\n        YField = \"value\",\n        GuideLine = new object[]\n        {\n            new\n            {\n                Type = \"mean\",\n                Text = new\n                {\n                    Position = \"start\",\n                    Content = \"平均值\",\n                    Style = new\n                    {\n                        Stroke = \"white\",\n                        LineWidth = 2\n                    }\n                }\n            }\n        }\n    };\n\n    readonly RingProgressConfig loadConfig = new RingProgressConfig\n    {\n        Width = 50,\n        Height = 50\n    };\n\n    public class DataItem\n    {\n        public string id { get; set; }\n        public List<DataValue> times { get; set; } = new List<DataValue>();\n        public List<DataValue> trend { get; set; } = new List<DataValue>();\n        public double load { get; set; }\n    }\n\n    public class DataValue\n    {\n        public string index { get; set; }\n        public int value { get; set; }\n    }\n\n}",
        "Type": "Demos.Charts.Sparkline.demo.Sparkline_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Funnel",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "funnel",
        "Title": "Funnel",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Funnel Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <Funnel Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <Funnel Data=\"data3\" Config=\"config3\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <Funnel Data=\"data4\" Config=\"config4\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"5\">\n        <Tab>示例5</Tab>\n        <ChildContent>\n            <Funnel Data=\"data5\" Config=\"config5\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"6\">\n        <Tab>示例6</Tab>\n        <ChildContent>\n            <Funnel Data=\"data6\" Config=\"config6\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {action = \"浏览网站\", pv = 50000},\n        new {action = \"放入购物车\", pv = 35000},\n        new {action = \"生成订单\", pv = 25000},\n        new {action = \"支付\", pv = 15000},\n        new {action = \"成交\", pv = 8500}\n    };\n\n    readonly FunnelConfig config1 = new FunnelConfig\n    {\n        XField = \"action\",\n        YField = \"pv\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new {action = \"浏览网站\", pv = 50000},\n        new {action = \"放入购物车\", pv = 35000},\n        new {action = \"生成订单\", pv = 25000},\n        new {action = \"支付\", pv = 15000},\n        new {action = \"成交\", pv = 8500}\n    };\n\n    readonly FunnelConfig config2 = new FunnelConfig\n    {\n        XField = \"action\",\n        YField = \"pv\",\n        DynamicHeight = true,\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly object[] data3 =\n    {\n          new { action =  \"浏览网站\", pv =  50000, quarter =  \"2020Q1\" },\n          new { action =  \"浏览网站\", pv =  50000, quarter =  \"2020Q1\" },\n          new { action =  \"浏览网站\", pv =  50000, quarter =  \"2020Q1\" },\n          new { action =  \"放入购物车\", pv =  35000, quarter =  \"2020Q1\" },\n          new { action =  \"生成订单\", pv =  25000, quarter =  \"2020Q1\" },\n          new { action =  \"支付订单\", pv =  15000, quarter =  \"2020Q1\" },\n          new { action =  \"完成交易\", pv =  11500, quarter =  \"2020Q1\" },\n          new { action =  \"浏览网站\", pv =  80000, quarter =  \"2020Q2\" },\n          new { action =  \"放入购物车\", pv =  63000, quarter =  \"2020Q2\" },\n          new { action =  \"生成订单\", pv =  47000, quarter =  \"2020Q2\" },\n          new { action =  \"支付订单\", pv =  24000, quarter =  \"2020Q2\" },\n          new { action =  \"完成交易\", pv =  17500, quarter =  \"2020Q2\" },\n    };\n\n    readonly FunnelConfig config3 = new FunnelConfig\n    {\n        XField = \"action\",\n        YField = \"pv\",\n        CompareField = \"quarter\"\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly object[] data4 =\n    {\n        new {action = \"浏览网站\", pv = 50000},\n        new {action = \"放入购物车\", pv = 35000},\n        new {action = \"生成订单\", pv = 25000},\n        new {action = \"支付\", pv = 15000},\n        new {action = \"成交\", pv = 8500}\n    };\n\n    readonly FunnelConfig config4 = new FunnelConfig\n    {\n        XField = \"action\",\n        YField = \"pv\",\n        Transpose = true,\n    };\n\n    #endregion 示例4\n\n    #region 示例5\n\n    readonly object[] data5 =\n    {\n        new {action = \"浏览网站\", pv = 50000},\n        new {action = \"放入购物车\", pv = 35000},\n        new {action = \"生成订单\", pv = 25000},\n        new {action = \"支付\", pv = 15000},\n        new {action = \"成交\", pv = 8500}\n    };\n\n    readonly FunnelConfig config5 = new FunnelConfig\n    {\n        XField = \"action\",\n        YField = \"pv\",\n        DynamicHeight = true,\n        Transpose = true,\n    };\n\n    #endregion 示例5\n\n    #region 示例6\n\n    readonly object[] data6 =\n    {\n          new { action =  \"浏览网站\", pv =  50000, quarter =  \"2020Q1\" },\n          new { action =  \"浏览网站\", pv =  50000, quarter =  \"2020Q1\" },\n          new { action =  \"浏览网站\", pv =  50000, quarter =  \"2020Q1\" },\n          new { action =  \"放入购物车\", pv =  35000, quarter =  \"2020Q1\" },\n          new { action =  \"生成订单\", pv =  25000, quarter =  \"2020Q1\" },\n          new { action =  \"支付订单\", pv =  15000, quarter =  \"2020Q1\" },\n          new { action =  \"完成交易\", pv =  11500, quarter =  \"2020Q1\" },\n          new { action =  \"浏览网站\", pv =  80000, quarter =  \"2020Q2\" },\n          new { action =  \"放入购物车\", pv =  63000, quarter =  \"2020Q2\" },\n          new { action =  \"生成订单\", pv =  47000, quarter =  \"2020Q2\" },\n          new { action =  \"支付订单\", pv =  24000, quarter =  \"2020Q2\" },\n          new { action =  \"完成交易\", pv =  17500, quarter =  \"2020Q2\" },\n    };\n\n    readonly FunnelConfig config6 = new FunnelConfig\n    {\n        XField = \"action\",\n        YField = \"pv\",\n        CompareField = \"quarter\",\n        Transpose = true,\n    };\n\n    #endregion 示例6\n\n}",
        "Type": "Demos.Charts.Funnel.demo.Funnel_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "GeneralConfigration",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "set-state",
        "Title": "Set State",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Text>未完成</Text>\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data1\" Config=\"config1\" OnCreateAfter=\"onCreateAfter1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data2\" Config=\"config2\" OnCreateAfter=\"onCreateAfter2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data3\" Config=\"config3\" OnCreateAfter=\"onCreateAfter3\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data4\" Config=\"config4\" OnCreateAfter=\"onCreateAfter4\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"5\">\n        <Tab>示例5</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data5\" Config=\"config5\" OnCreateAfter=\"onCreateAfter5\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"6\">\n        <Tab>示例6</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data6\" Config=\"config6\" OnCreateAfter=\"onCreateAfter6\" />\n        </ChildContent>\n    </TabPane>\n\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    object[] data1 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置active状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设置单值active状态。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public void onCreateAfter1(IChartComponent chart)\n    {\n        chart.SetActive(new {name = \"year\", exp = \"1994\"},\n            new\n            {\n                FillStyle = \"#5AD8A6\",\n                FillOpacity = 0.8\n            });\n    }\n\n    #endregion 示例1\n\n    #region 示例2\n\n    object[] data2 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config2 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置active状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"批量（多值）设置active状态。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public void onCreateAfter2(IChartComponent chart)\n    {\n        chart.SetActive(new { name = \"year\", exp = \"1994\" },\n            new\n            {\n                FillStyle = \"#5AD8A6\",\n                FillOpacity = 0.8\n            });\n    }\n\n    #endregion 示例2\n\n    #region 示例3\n\n    object[] data3 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config3 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置disable状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"批量（多值）设置disable状态。。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public void onCreateAfter3(IChartComponent chart)\n    {\n        chart.SetActive(new { name = \"year\", exp = \"1994\" },\n            new\n            {\n                FillStyle = \"#ccc\",\n            });\n    }\n\n    #endregion 示例3\n\n    #region 示例4\n\n    object[] data4 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config4 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置disable状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设置单值disable状态。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public void onCreateAfter4(IChartComponent chart)\n    {\n        chart.SetActive(new { name = \"year\", exp = \"1994\" },\n            new\n            {\n                FillStyle = \"#ccc\",\n            });\n    }\n\n    #endregion 示例4\n\n    #region 示例5\n\n    object[] data5 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config5 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置selected状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设置单值selected状态。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public void onCreateAfter5(IChartComponent chart)\n    {\n        chart.SetActive(new { name = \"year\", exp = \"1994\" },\n            new\n            {\n                Stroke = \"black\",\n                LineWidth = 2,\n                \n            });\n    }\n\n    #endregion 示例5\n\n    #region 示例6\n\n    object[] data6 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config6 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置selected状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设置单值selected状态。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public void onCreateAfter6(IChartComponent chart)\n    {\n        chart.SetActive(new { name = \"year\", exp = \"1994\" },\n            new\n            {\n                Stroke = \"black\",\n                LineWidth = 2,\n            });\n    }\n\n    #endregion 示例6\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.SetState",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "tooltip",
        "Title": "Tooltip",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "\n<Text>未完成</Text>\n@*<Tabs>\n\n    </Tabs>*@\n\n@code{\n\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.Tooltip_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "axis",
        "Title": "Axis",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n    <Tabs ActiveKeyChanged=\"OnTabChanged\">\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Line @ref=\"chart1\" Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Line @ref=\"chart2\" Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Line @ref=\"chart3\" Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <Line @ref=\"chart4\" Data=\"data4\" Config=\"config4\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    FertilityItem[] data1;\n\n    IChartComponent chart2;\n    FertilityItem[] data2;\n\n    IChartComponent chart3;\n    FertilityItem[] data3;\n\n    IChartComponent chart4;\n    FertilityItem[] data4;\n\n\n    protected override async Task OnInitializedAsync()\n    {\n        await base.OnInitializedAsync();\n        OnTabChanged(\"1\");\n    }\n\n    private async void OnTabChanged(string activeKey)\n    {\n        if (activeKey == \"1\")\n        {\n            data1 = await ChartsDemoData.FertilityItemAsync(NavigationManager, HttpClient);\n            await chart1.ChangeData(data1);\n        }\n        else if(activeKey == \"2\")\n        {\n            data2 = await ChartsDemoData.FertilityItemAsync(NavigationManager, HttpClient);\n            await chart2.ChangeData(data2);\n        }\n        else if (activeKey == \"3\")\n        {\n            data3 = await ChartsDemoData.FertilityItemAsync(NavigationManager, HttpClient);\n            await chart3.ChangeData(data3);\n        }\n        else if (activeKey == \"4\")\n        {\n            data4 = await ChartsDemoData.FertilityItemAsync(NavigationManager, HttpClient);\n            await chart4.ChangeData(data4);\n        }\n        else\n        {\n\n        }\n    }\n\n    #region 示例1\n\n    readonly LineConfig config1 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置坐标轴tick数量\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        SeriesField = \"country\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly LineConfig config2 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置坐标轴最大值和最小值\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        SeriesField = \"country\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Visible = true,\n            Type = \"dateTime\",\n            TickCount = 5\n        },\n        YAxis = new ValueAxis\n        {\n            Visible = true,\n            Min = 3,\n            Max = 7,\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly LineConfig config3 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置坐标轴标题\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        SeriesField = \"country\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Visible = true,\n            Type = \"dateTime\",\n            Title = new BaseAxisTitle\n            {\n                Text = \"x轴标题\",\n            },\n        },\n        YAxis = new ValueAxis\n        {\n            Visible = true,\n            Title = new BaseAxisTitle\n            {\n                Text = \"y轴标题\"\n            }\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly LineConfig config4 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置坐标轴样式\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        SeriesField = \"country\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Visible = true,\n            Type = \"time\",\n            Mask = \"YYYY\",\n            Grid = new BaseAxisGrid\n            {\n                Visible = true,\n                //style ???\n            },\n            Line = new BaseAxisLine\n            {\n                Visible = true,\n                Style = new LineStyle\n                {\n                    Stroke = \"black\",\n                    LineWidth = 1,\n                },\n            },\n            TickLine = new BaseAxisTickLine\n            {\n                Visible = true,\n                Style = new LineStyle\n                {\n                    Stroke = \"black\",\n                    LineWidth = 1,\n                }\n            },\n        },\n        YAxis = new ValueAxis\n        {\n            Visible = true,\n            Grid = new BaseAxisGrid\n            {\n                Visible = true,\n                //style ???\n            },\n            Line = new BaseAxisLine\n            {\n                Visible = true,\n                Style = new LineStyle\n                {\n                    Stroke = \"black\",\n                    LineWidth = 1,\n                },\n            },\n            TickLine = new BaseAxisTickLine\n            {\n                Visible = true,\n                Style = new LineStyle\n                {\n                    Stroke = \"black\",\n                    LineWidth = 1,\n                }\n            },\n            Label = new BaseAxisLabel\n            {\n                Visible = true,\n                Style = new TextStyle\n                {\n                    Fill = \"black\"\n                }\n            }\n        },\n\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.Axis",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "label",
        "Title": "Label",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "\n<Text>未完成</Text>\n@*<Tabs>\n\n    </Tabs>*@\n\n@code{\n\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.Label",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "legend",
        "Title": "Legend",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <StackedColumn Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <StackedColumn Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    object[] data2;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data2 = await ChartsDemoData.FertilityItemAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n\n    }\n\n    #region 示例1\n\n    readonly object[] data1 =\n{\n        new\n        {\n            time = \"16 Q1\",\n            type = \"移动游戏\",\n            value = 0\n        },\n        new\n        {\n            time = \"16 Q1\",\n            type = \"移动购物\",\n            value = 17.8\n        },\n        new\n        {\n            time = \"16 Q1\",\n            type = \"移动营销\",\n            value = 69.4\n        },\n        new\n        {\n            time = \"16 Q1\",\n            type = \"共享单车\",\n            value = 12.8\n        },\n        new\n        {\n            time = \"16 Q2\",\n            type = \"移动游戏\",\n            value = 0\n        },\n        new\n        {\n            time = \"16 Q2\",\n            type = \"移动购物\",\n            value = 18.1\n        },\n        new\n        {\n            time = \"16 Q2\",\n            type = \"移动营销\",\n            value = 70.7\n        },\n        new\n        {\n            time = \"16 Q2\",\n            type = \"共享单车\",\n            value = 11.2\n        },\n        new\n        {\n            time = \"16 Q3\",\n            type = \"移动游戏\",\n            value = 0\n        },\n        new\n        {\n            time = \"16 Q3\",\n            type = \"移动购物\",\n            value = 20.8\n        },\n        new\n        {\n            time = \"16 Q3\",\n            type = \"移动营销\",\n            value = 67.4\n        },\n        new\n        {\n            time = \"16 Q3\",\n            type = \"共享单车\",\n            value = 11.8\n        },\n        new\n        {\n            time = \"16 Q4\",\n            type = \"移动游戏\",\n            value = 0.1\n        },\n        new\n        {\n            time = \"16 Q4\",\n            type = \"移动购物\",\n            value = 20.3\n        },\n        new\n        {\n            time = \"16 Q4\",\n            type = \"移动营销\",\n            value = 69.2\n        },\n        new\n        {\n            time = \"16 Q4\",\n            type = \"共享单车\",\n            value = 10.4\n        },\n        new\n        {\n            time = \"17 Q1\",\n            type = \"移动游戏\",\n            value = 0.4\n        },\n        new\n        {\n            time = \"17 Q1\",\n            type = \"移动购物\",\n            value = 17.3\n        },\n        new\n        {\n            time = \"17 Q1\",\n            type = \"移动营销\",\n            value = 68.3\n        },\n        new\n        {\n            time = \"17 Q1\",\n            type = \"共享单车\",\n            value = 14\n        },\n        new\n        {\n            time = \"17 Q2\",\n            type = \"移动游戏\",\n            value = 1.2\n        },\n        new\n        {\n            time = \"17 Q2\",\n            type = \"移动购物\",\n            value = 18.3\n        },\n        new\n        {\n            time = \"17 Q2\",\n            type = \"移动营销\",\n            value = 68.6\n        },\n        new\n        {\n            time = \"17 Q2\",\n            type = \"共享单车\",\n            value = 11.9\n        }\n    };\n\n    readonly StackedColumnConfig config1 = new StackedColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"指定图例位置\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"图例位置支持12个方位，分别为 left-top,left-center,left-bottom,right-top,right-top,right-bottom,top-left,top-center,top-bottom,bottom-left,bottom-center,bottom-right。\"\n        },\n        XField = \"time\",\n        YField = \"value\",\n        StackField = \"type\",\n        Legend = new AntDesign.Charts.Legend\n        {\n            Visible = true,\n            Position = \"right-center\"\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly StackedColumnConfig config2 = new StackedColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置legend是否翻页\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"当legend数量过多时，默认进行翻页，给图表留出更多的展示空间。此功能可以通过配置项关闭。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        //seriesField ???\n        //smooth ???\n        XAxis = new CatAxis\n        {\n            Visible = true,\n            Type = \"time\"\n        },\n        StackField = \"type\",\n        Legend = new AntDesign.Charts.Legend\n        {\n            Visible = true,\n            FlipPage = false,\n        }\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.Legend",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "set-padding",
        "Title": "Set Padding",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    object[] data1 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"手动设置图表内边距\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"G2Plot图表默认自动计算图表内边距，但用户可以通过padding配置项手动设置。\"\n        },\n        XField = \"year\",\n        YField = \"value\",\n        Padding = new[] {100, 100, 100, 100}\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.SetPadding",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "dark-mode",
        "Title": "Dark Mode",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    object[] data1 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置图表暗黑主题\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"g2plot内置了暗黑主题，可通过theme配置。\"\n        },\n        Theme = \"dark\",\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.DarkMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "guideline",
        "Title": "Guideline",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Column Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Column Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Column Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    object[] data1 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"更改图表辅助线样式\"\n        },\n        XField = \"year\",\n        YField = \"value\",\n        GuideLine = new[]\n        {\n            new GuideLineConfig\n            {\n                Type = \"mean\", // \"max\" | \"min\" | \"median\" |  \"mean\"\n                LineStyle = new LineStyle\n                {\n                    Stroke = \"red\",\n                    LineDash = new[] {4, 2}\n                },\n                Text = new GuideLineConfigText\n                {\n                    Position = \"start\",\n                    Content = \"预警线\",\n                    Style = new TextStyle\n                    {\n                        Fill = \"red\"\n                    }\n                }\n            }\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    object[] data2 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config2 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"统计值图表辅助线\"\n        },\n        XField = \"year\",\n        YField = \"value\",\n        GuideLine = new[]\n        {\n            new GuideLineConfig\n            {\n                Type = \"mean\", // \"max\" | \"min\" | \"median\" |  \"mean\"\n                Text = new GuideLineConfigText\n                {\n                    Position = \"start\",\n                    Content = \"中位数\",\n\n                }\n\n\n            }\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    object[] data3 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config3 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"自定义图表辅助线\"\n        },\n        XField = \"year\",\n        YField = \"value\",\n        GuideLine = new[]\n        {\n            new GuideLineConfig\n            {\n                Start = new[] {\"0%\", \"50%\"},\n                End = new[] {\"100%\", \"50%\"},\n                Text = new GuideLineConfigText\n                {\n                    Position = \"start\",\n                    Content = \"自定义位置辅助线\",\n                },\n                \n            }\n        }\n    };\n\n    #endregion 示例3\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.Guideline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "title-and-description",
        "Title": "Title and Description",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Column Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Column Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    object[] data1 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"图表标题及描述\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"这是一个关于配置图表标题和描述文本内容的demo\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    object[] data2 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 31\n        },\n        new\n        {\n            year = \"1992\",\n            value = 41\n        },\n        new\n        {\n            year = \"1993\",\n            value = 35\n        },\n        new\n        {\n            year = \"1994\",\n            value = 55\n        },\n        new\n        {\n            year = \"1995\",\n            value = 49\n        },\n        new\n        {\n            year = \"1996\",\n            value = 15\n        },\n        new\n        {\n            year = \"1997\",\n            value = 17\n        },\n        new\n        {\n            year = \"1998\",\n            value = 29\n        },\n        new\n        {\n            year = \"1999\",\n            value = 33\n        }\n    };\n\n    ColumnConfig config2 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"图表标题及描述\",\n            Style = new TextStyle\n            {\n                Fill = \"#1c3747\"\n            }\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"这是一个配置图表标题和描述文本样式的demo\",\n            Style = new TextStyle\n            {\n                Fill = \"#177ca6\",\n                FontSize = 14,\n            }\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.TitleAndDescription",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "interop",
        "Title": "JS Interop",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column @ref=\"chart1\" Data=\"data1\" Config=\"config1\"/>\n            <Button OnClick=\"Render\">Render</Button>\n            <Button OnClick=\"Repaint\">Repaint</Button>\n            <Button OnClick=\"UpdateConfig\">UpdateConfig</Button>\n            <Button OnClick=\"ChangeData\">ChangeData</Button>\n            <Button OnClick=\"SetActive\">SetActive</Button>\n            <Button OnClick=\"SetSelected\">SetSelected</Button>\n            <Button OnClick=\"SetDisable\">SetDisable</Button>\n            <Button OnClick=\"SetDefault\">SetDefault</Button>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    IChartComponent chart1;\n\n    public void Render()\n    {\n        chart1.Render();\n    }\n\n    public void Repaint()\n    {\n        chart1.Repaint();\n    }\n\n    public void UpdateConfig()\n    {\n        var newConfig = new ColumnConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"设置active状态\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"已经应用了新配置\"\n            },\n            XField = \"year\",\n            YField = \"value\",\n            Color = \"#CCCCCC\"\n        };\n\n        chart1.UpdateConfig(newConfig, true);\n    }\n\n    public void ChangeData()\n    {\n        var r = new Random();\n        var newData = data1.Select(x => new DataItem {year = x.year, value = r.Next(100)}).ToArray();\n        chart1.ChangeData(newData, true);\n    }\n\n    public void SetActive()\n    {\n        chart1.SetActive(new {name = \"year\", exp = \"1994\"},\n            new\n            {\n                FillStyle = \"#5AD8A6\",\n                FillOpacity = 0.8\n            });\n\n        StateHasChanged();\n    }\n\n    public void SetSelected()\n    {\n        chart1.SetSelected(new {name = \"year\", exp = \"1994\"},\n            new\n            {\n                Stroke = \"black\",\n                LineWidth = 2\n            });\n\n        StateHasChanged();\n    }\n\n    public void SetDisable()\n    {\n        chart1.SetDisable(new {name = \"year\", exp = \"1994\"},\n            new\n            {\n                FillStyle = \"#ccc\"\n            });\n\n        StateHasChanged();\n    }\n\n    public void SetDefault()\n    {\n        chart1.SetDefault(new {name = \"year\", exp = \"1994\"},\n            new\n            {\n                FillOpacity = 1,\n                stroke = \"#ffffff\",\n                LineWidth = 0,\n                FillStyle = \"#6294F9\"\n            });\n\n        StateHasChanged();\n    }\n\n    #region 示例1\n\n    readonly DataItem[] data1 =\n    {\n        new DataItem {year = \"1991\", value = 31},\n        new DataItem {year = \"1992\", value = 41},\n        new DataItem {year = \"1993\", value = 35},\n        new DataItem {year = \"1994\", value = 55},\n        new DataItem {year = \"1995\", value = 49},\n        new DataItem {year = \"1996\", value = 15},\n        new DataItem {year = \"1997\", value = 17},\n        new DataItem {year = \"1998\", value = 29},\n        new DataItem {year = \"1999\", value = 33}\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"设置active状态\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设置单值active状态。\"\n        },\n        XField = \"year\",\n        YField = \"value\"\n    };\n\n    public class DataItem\n    {\n        public string year { get; set; }\n        public int value { get; set; }\n    }\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.GeneralConfiguration.demo.Interop",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Rose",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "rose",
        "Title": "Rose",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Rose Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <Rose Data=\"data2\" Config=\"config2\"  OtherConfig=\"otherConfig2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <Rose Data=\"data3\" Config=\"config3\"   OtherConfig=\"otherConfig3\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            type = \"分类一\",\n            value = 27\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 25\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类五\",\n            value = 10\n        },\n        new\n        {\n            type = \"其它\",\n            value = 5\n        }\n    };\n\n    readonly RoseConfig config1 = new RoseConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"多色玫瑰图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"指定颜色映射字段(colorField)，饼图切片将根据该字段数据显示为不同的颜色。指定颜色需要将color配置为一个数组。\\n当把饼图label的类型设置为inner时，标签会显示在切片内部。设置offset控制标签的偏移值。\"\n        },\n        Radius = 0.8,\n        RadiusField = \"value\",\n        CategoryField = \"type\",\n        ColorField = \"type\",\n        Label = new RoseLabel\n        {\n            Visible = true,\n            Type = \"outer\"\n            @*content= (text) => text.value,*@\n        }\n    };\n\n    #endregion 示例1\n\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n          new {\n            type =  \"分类一\",\n            value =  27,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类二\",\n            value =  25,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类三\",\n            value =  18,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类四\",\n            value =  15,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类五\",\n            value =  10,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"其它\",\n            value =  5,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类一\",\n            value =  7,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类二\",\n            value =  5,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类三\",\n            value =  38,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类四\",\n            value =  5,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类五\",\n            value =  20,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"其它\",\n            value =  15,\n            user =  \"用户二\",\n          },\n    };\n\n    readonly RoseConfig config2 = new RoseConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠玫瑰图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"指定颜色映射字段(colorField)，饼图切片将根据该字段数据显示为不同的颜色。指定颜色需要将color配置为一个数组。\\n当把饼图label的类型设置为inner时，标签会显示在切片内部。设置offset控制标签的偏移值。\"\n        },\n        Radius = 0.8,\n        RadiusField = \"value\",\n        CategoryField = \"type\",     \n        Label = new RoseLabel\n        {\n            Visible = true,\n            Type = \"inner\"\n            @*content= (text) => text.value,*@\n        }\n    };\n\n    object otherConfig2 = new\n    {\n        stackField = \"user\",\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly object[] data3 =\n    {\n          new {\n            type =  \"分类一\",\n            value =  27,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类二\",\n            value =  25,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类三\",\n            value =  18,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类四\",\n            value =  25,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类五\",\n            value =  10,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"其它\",\n            value =  12,\n            user =  \"用户一\",\n          },\n          new {\n            type =  \"分类一\",\n            value =  17,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类二\",\n            value =  35,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类三\",\n            value =  28,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类四\",\n            value =  35,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"分类五\",\n            value =  20,\n            user =  \"用户二\",\n          },\n          new {\n            type =  \"其它\",\n            value =  15,\n            user =  \"用户二\",\n          },\n    };\n\n    readonly RoseConfig config3 = new RoseConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组玫瑰图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"指定颜色映射字段(colorField)，饼图切片将根据该字段数据显示为不同的颜色。指定颜色需要将color配置为一个数组。\\n当把饼图label的类型设置为inner时，标签会显示在切片内部。设置offset控制标签的偏移值。\"\n        },\n        Radius = 0.7,\n        RadiusField = \"value\",\n        CategoryField = \"type\",\n        Label = new RoseLabel\n        {\n            Visible = true,\n            Type = \"inner\"\n        },\n        Theme = new\n        {\n            legend = new\n            {\n                margin = new int[] { 0, 0, 80, 0 }\n            }\n        }\n    };\n\n    object otherConfig3 = new\n    {\n        groupField = \"user\",\n    };\n\n    #endregion 示例3\n\n}",
        "Type": "Demos.Charts.Rose.demo.Rose_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Column",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "column",
        "Title": "Column",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs ActiveKeyChanged=\"OnTabChanged\">\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data3\" Config=\"config3\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data4\" Config=\"config4\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"5\">\n        <Tab>示例5</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column @ref=\"chart5\" TItem=\"SalesItem\"  Config=\"config5\" OtherConfig=\"config5_2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"6\">\n        <Tab>示例6</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column @ref=\"chart6\" TItem=\"SalesItem\" Config=\"config6\" OtherConfig=\"config6_2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"7\">\n        <Tab>示例7</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Column Data=\"data7\" Config=\"config7\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    IChartComponent chart5;\n\n    IChartComponent chart6;\n   \n\n\n    protected override async Task OnInitializedAsync()\n    {\n        await base.OnInitializedAsync();\n    }\n\n    private async void OnTabChanged(string activeKey)\n    {\n        if (activeKey == \"5\")\n        {\n            var data5 = await ChartsDemoData.SalesAsync(NavigationManager, HttpClient);\n            chart5.ChangeData(data5);\n        }\n        else if (activeKey == \"6\")\n        {\n            var data6 = await ChartsDemoData.SalesAsync(NavigationManager, HttpClient);\n            chart6.ChangeData(data6);\n        }\n        else\n        {\n\n        }\n    }\n\n    #region 示例1\n\n    object[] data1 =\n{\n        new\n        {\n            type = \"家具家电\",\n            sales = 38\n        },\n        new\n        {\n            type = \"粮油副食\",\n            sales = 52\n        },\n        new\n        {\n            type = \"生鲜水果\",\n            sales = 61\n        },\n        new\n        {\n            type = \"美容洗护\",\n            sales = 145\n        },\n        new\n        {\n            type = \"母婴用品\",\n            sales = 48\n        },\n        new\n        {\n            type = \"进口食品\",\n            sales = 38\n        },\n        new\n        {\n            type = \"食品饮料\",\n            sales = 38\n        },\n        new\n        {\n            type = \"家庭清洁\",\n            sales = 38\n        }\n    };\n\n    ColumnConfig config1 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"type\",\n        YField = \"sales\",\n        Meta = new\n        {\n            Type = new\n            {\n                Alias = \"类别\"\n            },\n            Sales = new\n            {\n                Alias = \"销售额(万)\"\n            }\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    object[] data2 =\n    {\n        new\n        {\n            type = \"家具家电\",\n            sales = 38\n        },\n        new\n        {\n            type = \"粮油副食\",\n            sales = 52\n        },\n        new\n        {\n            type = \"生鲜水果\",\n            sales = 61\n        },\n        new\n        {\n            type = \"美容洗护\",\n            sales = 145\n        },\n        new\n        {\n            type = \"母婴用品\",\n            sales = 48\n        },\n        new\n        {\n            type = \"进口食品\",\n            sales = 38\n        },\n        new\n        {\n            type = \"食品饮料\",\n            sales = 38\n        },\n        new\n        {\n            type = \"家庭清洁\",\n            sales = 38\n        }\n    };\n\n    ColumnConfig config2 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图-图形标签\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"基础柱状图图形标签默认位置在柱形上部。\",\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"type\",\n        YField = \"sales\",\n        Meta = new\n        {\n            Type = new\n            {\n                Alias = \"类别\"\n            },\n            Sales = new\n            {\n                Alias = \"销售额(万)\"\n            }\n        },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true,\n            Style = new TextStyle\n            {\n                FontSize = 12,\n                FontWeight = 600,\n                Opacity = 0.6,\n            }\n\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    object[] data3 =\n    {\n        new\n        {\n            type = \"家具家电\",\n            sales = 38\n        },\n        new\n        {\n            type = \"粮油副食\",\n            sales = 52\n        },\n        new\n        {\n            type = \"生鲜水果\",\n            sales = 61\n        },\n        new\n        {\n            type = \"美容洗护\",\n            sales = 145\n        },\n        new\n        {\n            type = \"母婴用品\",\n            sales = 48\n        },\n        new\n        {\n            type = \"进口食品\",\n            sales = 38\n        },\n        new\n        {\n            type = \"食品饮料\",\n            sales = 38\n        },\n        new\n        {\n            type = \"家庭清洁\",\n            sales = 38\n        }\n    };\n\n    ColumnConfig config3 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图-图形标签位置\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"基础柱状图的图形标签位置可以指定为top-柱形上部，middle-柱形中心，bottom-柱形底部。\",\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"type\",\n        YField = \"sales\",\n        Meta = new\n        {\n            Type = new\n            {\n                Alias = \"类别\"\n            },\n            Sales = new\n            {\n                Alias = \"销售额(万)\"\n            }\n        },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true,\n            Position = \"middle\"  // option: middle / top / bottom\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    object[] data4 =\n    {\n        new\n        {\n            type = \"家具家电\",\n            sales = 38\n        },\n        new\n        {\n            type = \"粮油副食\",\n            sales = 52\n        },\n        new\n        {\n            type = \"生鲜水果\",\n            sales = 61\n        },\n        new\n        {\n            type = \"美容洗护\",\n            sales = 145\n        },\n        new\n        {\n            type = \"母婴用品\",\n            sales = 48\n        },\n        new\n        {\n            type = \"进口食品\",\n            sales = 38\n        },\n        new\n        {\n            type = \"食品饮料\",\n            sales = 38\n        },\n        new\n        {\n            type = \"家庭清洁\",\n            sales = 38\n        }\n    };\n\n    ColumnConfig config4 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图label颜色自动调整\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"图形标签(label)的adjustColor配置项设置为true时，位于柱形的内部的label颜色会根据柱形颜色自动调整，保证可读性。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"type\",\n        YField = \"sales\",\n        Meta = new\n        {\n            Type = new\n            {\n                Alias = \"类别\"\n            },\n            Sales = new\n            {\n                Alias = \"销售额(万)\"\n            }\n        },\n        ColorField = \"type\",\n        Color = new string[] { \"#55A6F3\", \"#55A6F3\", \"#55A6F3\", \"#CED4DE\", \"#55A6F3\", \"#55A6F3\", \"#55A6F3\", \"#55A6F3\" },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true,\n            Position = \"middle\",\n            AdjustColor = true,\n        }\n    };\n\n    #endregion 示例4\n\n    #region 示例5\n\n\n\n    ColumnConfig config5 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图-缩略轴\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"缩略轴 (slider) 交互适用于数据较多，用户希望关注数据集中某个特殊区间的场景。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"城市\",\n        YField = \"销售额\",\n        Interactions = new Interaction[]\n    {\n            new Interaction\n            {\n                Type = \"slider\",\n                Cfg = new\n                {\n                    start = 0.4,\n                    end = 0.45,\n                }\n            }\n        },\n    };\n\n    object config5_2 = new\n    {\n        xAxis = new\n        {\n            visible = true,\n            label = new\n            {\n                visible = true,\n                autoHide = true\n            }\n        },\n\n        yAxis = new\n        {\n            visible = true,\n        },\n    };\n\n    #endregion 示例5\n\n    #region 示例6\n\n\n    ColumnConfig config6 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图-滚动条\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"当数据过多时，推荐使用滚动条一次只浏览一部分数据。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"城市\",\n        YField = \"销售额\",\n        Interactions = new Interaction[]\n        {\n            new Interaction\n            {\n                Type = \"scrollbar\",\n            }\n            },\n\n    };\n\n    object config6_2 = new\n    {\n        xAxis = new\n        {\n            visible = true,\n            label = new\n            {\n                autoHide = true\n            }\n        },\n\n        yAxis = new\n        {\n            visible = true,\n            label = new\n            {\n                visible = true,\n                //formatter\n            }\n        },\n    };\n\n    #endregion 示例6\n\n    #region 示例7\n\n    object[] data7 =\n{\n        new\n        {\n            action =  \"浏览网站\",\n            pv= 50000\n        },\n        new\n        {\n            action =  \"放入购物车\",\n            pv= 35000\n        },\n        new\n        {\n            action =  \"生成订单\",\n            pv= 25000\n        },\n        new\n        {\n            action =  \"支付订单\",\n            pv= 15000\n        },\n        new\n        {\n            action =  \"完成交易\",\n            pv= 8500\n        },\n\n    };\n\n    ColumnConfig config7 = new ColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础柱状图-转化率组件\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"基础柱状图的图形之间添加转化率标签图形，用户希望关注从左到右的数据变化比例\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"action\",\n        YField = \"pv\",\n        ConversionTag = new ConversionTagOptions\n        {\n            Visible = true,\n        },\n    };\n\n    #endregion 示例7\n\n}",
        "Type": "Demos.Charts.Column.demo.Column_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "stacked-column",
        "Title": "Stacked Column",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <StackedColumn Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <StackedColumn Data=\"data2\" Config=\"config2\" OtherConfig=\"config2_2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <StackedColumn Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <StackedColumn Data=\"data4\" Config=\"config4\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"5\">\n            <Tab>示例5</Tab>\n            <ChildContent>\n                <StackedColumn Data=\"data5\" Config=\"config5\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            year = \"1991\",\n            value = 3,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1992\",\n            value = 4,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1993\",\n            value = 3.5,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1994\",\n            value = 5,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1995\",\n            value = 4.9,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1996\",\n            value = 6,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1997\",\n            value = 7,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1998\",\n            value = 9,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1999\",\n            value = 13,\n            type = \"Lon\"\n        },\n        new\n        {\n            year = \"1991\",\n            value = 3,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1992\",\n            value = 4,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1993\",\n            value = 3.5,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1994\",\n            value = 5,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1995\",\n            value = 4.9,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1996\",\n            value = 6,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1997\",\n            value = 7,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1998\",\n            value = 9,\n            type = \"Bor\"\n        },\n        new\n        {\n            year = \"1999\",\n            value = 13,\n            type = \"Bor\"\n        }\n    };\n\n    readonly StackedColumnConfig config1 = new StackedColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠柱状图\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        YAxis = new ValueAxis\n        {\n            Min = 0\n        },\n        Color = new[] {\"#ae331b\", \"#1a6179\"},\n        StackField = \"type\"\n    };\n\n    #endregion 示例1\n\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n          new  { year =  \"2006\", type =  \"redDeliciou\", value =  10 },\n          new  { year =  \"2006\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2006\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2006\", type =  \"pears\", value =  6 },\n          new  { year =  \"2007\", type =  \"redDeliciou\", value =  12 },\n          new  { year =  \"2007\", type =  \"mcintosh\", value =  18 },\n          new  { year =  \"2007\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2007\", type =  \"pears\", value =  4 },\n          new  { year =  \"2008\", type =  \"redDeliciou\", value =  5 },\n          new  { year =  \"2008\", type =  \"mcintosh\", value =  20 },\n          new  { year =  \"2008\", type =  \"oranges\", value =  8 },\n          new  { year =  \"2008\", type =  \"pears\", value =  2 },\n          new  { year =  \"2009\", type =  \"redDeliciou\", value =  1 },\n          new  { year =  \"2009\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2009\", type =  \"oranges\", value =  5 },\n          new  { year =  \"2009\", type =  \"pears\", value =  4 },\n          new  { year =  \"2010\", type =  \"redDeliciou\", value =  2 },\n          new  { year =  \"2010\", type =  \"mcintosh\", value =  10 },\n          new  { year =  \"2010\", type =  \"oranges\", value =  4 },\n          new  { year =  \"2010\", type =  \"pears\", value =  2 },\n          new  { year =  \"2011\", type =  \"redDeliciou\", value =  3 },\n          new  { year =  \"2011\", type =  \"mcintosh\", value =  12 },\n          new  { year =  \"2011\", type =  \"oranges\", value =  6 },\n          new  { year =  \"2011\", type =  \"pears\", value =  3 },\n          new  { year =  \"2012\", type =  \"redDeliciou\", value =  4 },\n          new  { year =  \"2012\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2012\", type =  \"oranges\", value =  8 },\n          new  { year =  \"2012\", type =  \"pears\", value =  1 },\n          new  { year =  \"2013\", type =  \"redDeliciou\", value =  6 },\n          new  { year =  \"2013\", type =  \"mcintosh\", value =  11 },\n          new  { year =  \"2013\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2013\", type =  \"pears\", value =  4 },\n          new  { year =  \"2014\", type =  \"redDeliciou\", value =  10 },\n          new  { year =  \"2014\", type =  \"mcintosh\", value =  13 },\n          new  { year =  \"2014\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2014\", type =  \"pears\", value =  5 },\n    };\n\n    readonly StackedColumnConfig config2 = new StackedColumnConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"区域联通组件\"\n        },\n        Description = new Description\n        {\n            Visible=true,\n            Text = \"联通区域组件通过绘制同一字段的联通区域提供视觉上的辅助识别,方便进行数据对比。\",\n        },\n\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        StackField = \"type\",\n        Color = new[] { \"#ae331b\", \"#f27957\", \"#dadada\", \"#609db7\", \"#1a6179\" },\n        YAxis = new ValueAxis\n        {\n            Min = 0\n        },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true,\n        },\n        ConnectedArea = new\n        {\n            visible= true,\n            triggerOn= false,\n        }\n\n\n    };\n\n    object config2_2 = new\n    {\n\n    };\n\n    #endregion 示例2\n\n\n    #region 示例3\n\n    readonly object[] data3 =\n    {\n          new  { year =  \"2006\", type =  \"redDeliciou\", value =  10 },\n          new  { year =  \"2006\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2006\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2006\", type =  \"pears\", value =  6 },\n          new  { year =  \"2007\", type =  \"redDeliciou\", value =  12 },\n          new  { year =  \"2007\", type =  \"mcintosh\", value =  18 },\n          new  { year =  \"2007\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2007\", type =  \"pears\", value =  4 },\n          new  { year =  \"2008\", type =  \"redDeliciou\", value =  5 },\n          new  { year =  \"2008\", type =  \"mcintosh\", value =  20 },\n          new  { year =  \"2008\", type =  \"oranges\", value =  8 },\n          new  { year =  \"2008\", type =  \"pears\", value =  2 },\n          new  { year =  \"2009\", type =  \"redDeliciou\", value =  1 },\n          new  { year =  \"2009\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2009\", type =  \"oranges\", value =  5 },\n          new  { year =  \"2009\", type =  \"pears\", value =  4 },\n          new  { year =  \"2010\", type =  \"redDeliciou\", value =  2 },\n          new  { year =  \"2010\", type =  \"mcintosh\", value =  10 },\n          new  { year =  \"2010\", type =  \"oranges\", value =  4 },\n          new  { year =  \"2010\", type =  \"pears\", value =  2 },\n          new  { year =  \"2011\", type =  \"redDeliciou\", value =  3 },\n          new  { year =  \"2011\", type =  \"mcintosh\", value =  12 },\n          new  { year =  \"2011\", type =  \"oranges\", value =  6 },\n          new  { year =  \"2011\", type =  \"pears\", value =  3 },\n          new  { year =  \"2012\", type =  \"redDeliciou\", value =  4 },\n          new  { year =  \"2012\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2012\", type =  \"oranges\", value =  8 },\n          new  { year =  \"2012\", type =  \"pears\", value =  1 },\n          new  { year =  \"2013\", type =  \"redDeliciou\", value =  6 },\n          new  { year =  \"2013\", type =  \"mcintosh\", value =  11 },\n          new  { year =  \"2013\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2013\", type =  \"pears\", value =  4 },\n          new  { year =  \"2014\", type =  \"redDeliciou\", value =  10 },\n          new  { year =  \"2014\", type =  \"mcintosh\", value =  13 },\n          new  { year =  \"2014\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2014\", type =  \"pears\", value =  5 },\n    };\n\n    readonly StackedColumnConfig config3 = new StackedColumnConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"联通区域组件交互\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"联通区域组件可以经由交互触发。通过triggerOn配置项设置联通区域组件的触发事件。一次只显示一个堆叠字段的联通区域。\",\n        },\n\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        YAxis = new ValueAxis\n        {\n            Min = 0\n        },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = false,\n        },\n        StackField = \"type\",\n        Color = new[] { \"#ae331b\", \"#f27957\", \"#dadada\", \"#609db7\", \"#1a6179\" },\n\n        ConnectedArea = new\n        {\n            visible = true,\n            triggerOn= \"mouseenter\",\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly object[] data4 =\n    {\n        new  { year =  \"2006\", type =  \"redDeliciou\", value =  10 },\n          new  { year =  \"2006\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2006\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2006\", type =  \"pears\", value =  6 },\n          new  { year =  \"2007\", type =  \"redDeliciou\", value =  12 },\n          new  { year =  \"2007\", type =  \"mcintosh\", value =  18 },\n          new  { year =  \"2007\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2007\", type =  \"pears\", value =  4 },\n          new  { year =  \"2008\", type =  \"redDeliciou\", value =  5 },\n          new  { year =  \"2008\", type =  \"mcintosh\", value =  20 },\n          new  { year =  \"2008\", type =  \"oranges\", value =  8 },\n          new  { year =  \"2008\", type =  \"pears\", value =  2 },\n          new  { year =  \"2009\", type =  \"redDeliciou\", value =  1 },\n          new  { year =  \"2009\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2009\", type =  \"oranges\", value =  5 },\n          new  { year =  \"2009\", type =  \"pears\", value =  4 },\n          new  { year =  \"2010\", type =  \"redDeliciou\", value =  2 },\n          new  { year =  \"2010\", type =  \"mcintosh\", value =  10 },\n          new  { year =  \"2010\", type =  \"oranges\", value =  4 },\n          new  { year =  \"2010\", type =  \"pears\", value =  2 },\n          new  { year =  \"2011\", type =  \"redDeliciou\", value =  3 },\n          new  { year =  \"2011\", type =  \"mcintosh\", value =  12 },\n          new  { year =  \"2011\", type =  \"oranges\", value =  6 },\n          new  { year =  \"2011\", type =  \"pears\", value =  3 },\n          new  { year =  \"2012\", type =  \"redDeliciou\", value =  4 },\n          new  { year =  \"2012\", type =  \"mcintosh\", value =  15 },\n          new  { year =  \"2012\", type =  \"oranges\", value =  8 },\n          new  { year =  \"2012\", type =  \"pears\", value =  1 },\n          new  { year =  \"2013\", type =  \"redDeliciou\", value =  6 },\n          new  { year =  \"2013\", type =  \"mcintosh\", value =  11 },\n          new  { year =  \"2013\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2013\", type =  \"pears\", value =  4 },\n          new  { year =  \"2014\", type =  \"redDeliciou\", value =  10 },\n          new  { year =  \"2014\", type =  \"mcintosh\", value =  13 },\n          new  { year =  \"2014\", type =  \"oranges\", value =  9 },\n          new  { year =  \"2014\", type =  \"pears\", value =  5 },\n    };\n\n    readonly StackedColumnConfig config4 = new StackedColumnConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置联通区域组件样式\"\n        },\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        StackField = \"type\",\n        Color = new[] { \"#ae331b\", \"#f27957\", \"#dadada\", \"#609db7\", \"#1a6179\" },\n        YAxis = new ValueAxis\n        {\n            Min = 0\n        },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true,\n        },\n        ConnectedArea = new\n        {\n            visible = true,\n            triggerOn = false,\n            lineStyle = new\n            {\n                stroke =  \"#afb1b5\",\n                opacity =  0.8,\n            },\n            areaStyle =  new\n            {\n                fill =  \"#e8e8e8\",\n                opacity =  0.5,\n            },\n        }\n    };\n\n    #endregion 示例4\n\n    #region 示例5\n\n    readonly object[] data5 =\n    {\n          new {\n            year =  \"1991\",\n            value =  3,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1992\",\n            value =  4,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1993\",\n            value =  7,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1994\",\n            value =  0.5,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1995\",\n            value =  4.9,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1996\",\n            value =  6,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1997\",\n            value =  7,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1998\",\n            value =  9,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1999\",\n            value =  0.5,\n            type =  \"Lon\",\n          },\n          new {\n            year =  \"1991\",\n            value =  0.3,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1992\",\n            value =  4,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1993\",\n            value =  0.5,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1994\",\n            value =  5,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1995\",\n            value =  4.9,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1996\",\n            value =  6,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1997\",\n            value =  0.5,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1998\",\n            value =  9,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1999\",\n            value =  13,\n            type =  \"Bor\",\n          },\n          new {\n            year =  \"1991\",\n            value =  1,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1992\",\n            value =  2,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1993\",\n            value =  5,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1994\",\n            value =  4,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1995\",\n            value =  6,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1996\",\n            value =  2,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1997\",\n            value =  10,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1998\",\n            value =  12,\n            type =  \"Wiz\",\n          },\n          new {\n            year =  \"1999\",\n            value =  3,\n            type =  \"Wiz\",\n          },\n    };\n\n    readonly StackedColumnConfig config5 = new StackedColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠柱状图：label自动隐藏\"\n        },\n        Description  = new Description\n        {\n            Visible = true,\n            Text = \"在堆叠柱状图中，如果label的位置被设定为middle，即显示在柱形中间。在对应柱形大小不够摆放label的情况下，label会被自动隐藏。\"\n        },\n        XField = \"year\",\n        YField = \"value\",\n        YAxis = new ValueAxis\n        {\n            Min = 0\n        },\n        StackField = \"type\",\n        Color = new[] { \"#ae331b\", \"#dadada\", \"#609db7\", \"#1a6179\" },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true,\n            Position = \"middle\"\n        }\n\n\n    };\n\n    #endregion 示例5\n\n}",
        "Type": "Demos.Charts.Column.demo.StackedColumn_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "histogram",
        "Title": "Histogram",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Histogram Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Histogram Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {value = 1.2},\n        new {value = 3.4},\n        new {value = 3.7},\n        new {value = 4.3},\n        new {value = 5.2},\n        new {value = 5.8},\n        new {value = 6.1},\n        new {value = 6.5},\n        new {value = 6.8},\n        new {value = 7.1},\n        new {value = 7.3},\n        new {value = 7.7},\n        new {value = 8.3},\n        new {value = 8.6},\n        new {value = 8.8},\n        new {value = 9.1},\n        new {value = 9.2},\n        new {value = 9.4},\n        new {value = 9.5},\n        new {value = 9.7},\n        new {value = 10.5},\n        new {value = 10.7},\n        new {value = 10.8},\n        new {value = 11.0},\n        new {value = 11.0},\n        new {value = 11.1},\n        new {value = 11.2},\n        new {value = 11.3},\n        new {value = 11.4},\n        new {value = 11.4},\n        new {value = 11.7},\n        new {value = 12.0},\n        new {value = 12.9},\n        new {value = 12.9},\n        new {value = 13.3},\n        new {value = 13.7},\n        new {value = 13.8},\n        new {value = 13.9},\n        new {value = 14.0},\n        new {value = 14.2},\n        new {value = 14.5},\n        new {value = 15},\n        new {value = 15.2},\n        new {value = 15.6},\n        new {value = 16.0},\n        new {value = 16.3},\n        new {value = 17.3},\n        new {value = 17.5},\n        new {value = 17.9},\n        new {value = 18.0},\n        new {value = 18.0},\n        new {value = 20.6},\n        new {value = 21},\n        new {value = 23.4}\n    };\n\n    readonly HistogramConfig config1 = new HistogramConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"直方图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"通过设置binNumber进行分箱，binNumber决定直方图分箱的区域。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        BinField = \"value\",\n        BinNumber = 10,\n        Color = new[] {\"#1079a0\"}\n    };\n\n    #endregion 示例1\n\n\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new {value = 1.2},\n        new {value = 3.4},\n        new {value = 3.7},\n        new {value = 4.3},\n        new {value = 5.2},\n        new {value = 5.8},\n        new {value = 6.1},\n        new {value = 6.5},\n        new {value = 6.8},\n        new {value = 7.1},\n        new {value = 7.3},\n        new {value = 7.7},\n        new {value = 8.3},\n        new {value = 8.6},\n        new {value = 8.8},\n        new {value = 9.1},\n        new {value = 9.2},\n        new {value = 9.4},\n        new {value = 9.5},\n        new {value = 9.7},\n        new {value = 10.5},\n        new {value = 10.7},\n        new {value = 10.8},\n        new {value = 11.0},\n        new {value = 11.0},\n        new {value = 11.1},\n        new {value = 11.2},\n        new {value = 11.3},\n        new {value = 11.4},\n        new {value = 11.4},\n        new {value = 11.7},\n        new {value = 12.0},\n        new {value = 12.9},\n        new {value = 12.9},\n        new {value = 13.3},\n        new {value = 13.7},\n        new {value = 13.8},\n        new {value = 13.9},\n        new {value = 14.0},\n        new {value = 14.2},\n        new {value = 14.5},\n        new {value = 15},\n        new {value = 15.2},\n        new {value = 15.6},\n        new {value = 16.0},\n        new {value = 16.3},\n        new {value = 17.3},\n        new {value = 17.5},\n        new {value = 17.9},\n        new {value = 18.0},\n        new {value = 18.0},\n        new {value = 20.6},\n        new {value = 21},\n        new {value = 23.4}\n    };\n\n    readonly HistogramConfig config2 = new HistogramConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"直方图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"通过设置binWidth进行分箱，binWidth决定直方图分箱的数量。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        BinField = \"value\",\n        BinWidth = 2,\n        Color = \"#1079a0\"\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Column.demo.Histogram_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "grouped-column",
        "Title": "Grouped Column",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <GroupedColumn Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            name = \"London\",\n            月份 = \"Jan.\",\n            月均降雨量 = 18.9\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"Feb.\",\n            月均降雨量 = 28.8\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"Mar.\",\n            月均降雨量 = 39.3\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"Apr.\",\n            月均降雨量 = 81.4\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"May\",\n            月均降雨量 = 47\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"Jun.\",\n            月均降雨量 = 20.3\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"Jul.\",\n            月均降雨量 = 24\n        },\n        new\n        {\n            name = \"London\",\n            月份 = \"Aug.\",\n            月均降雨量 = 35.6\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Jan.\",\n            月均降雨量 = 12.4\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Feb.\",\n            月均降雨量 = 23.2\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Mar.\",\n            月均降雨量 = 34.5\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Apr.\",\n            月均降雨量 = 99.7\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"May\",\n            月均降雨量 = 52.6\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Jun.\",\n            月均降雨量 = 35.5\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Jul.\",\n            月均降雨量 = 37.4\n        },\n        new\n        {\n            name = \"Berlin\",\n            月份 = \"Aug.\",\n            月均降雨量 = 42.4\n        }\n    };\n\n    readonly GroupedColumnConfig config1 = new GroupedColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组柱状图\"\n        },\n        ForceFit = true,\n        XField = \"月份\",\n        YField = \"月均降雨量\",\n        YAxis = new ValueAxis\n        {\n            Min = 0\n        },\n        Label = new ColumnViewConfigLabel\n        {\n            Visible = true\n        },\n        GroupField = \"name\",\n        Color = new[] {\"#1ca9e6\", \"#f88c24\"}\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Column.demo.GroupedColumn_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "ranged-column",
        "Title": "Ranged Column",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <RangeColumn Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <RangeColumn Data=\"data2\" Config=\"config2\" OtherConfig=\"config2_1\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {type = \"分类一\", values = new[] {76, 100}},\n        new {type = \"分类二\", values = new[] {56, 108}},\n        new {type = \"分类三\", values = new[] {38, 129}},\n        new {type = \"分类四\", values = new[] {58, 155}},\n        new {type = \"分类五\", values = new[] {45, 120}},\n        new {type = \"分类六\", values = new[] {23, 99}},\n        new {type = \"分类七\", values = new[] {18, 56}},\n        new {type = \"分类八\", values = new[] {18, 34}}\n    };\n\n    readonly RangeColumnConfig config1 = new RangeColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"区间柱状图\"\n        },\n        XField = \"type\",\n        YField = \"values\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n                new {type = \"分类一\", values = new[] {76, 100}},\n                new {type = \"分类二\", values = new[] {56, 108}},\n                new {type = \"分类三\", values = new[] {38, 129}},\n                new {type = \"分类四\", values = new[] {58, 155}},\n                new {type = \"分类五\", values = new[] {45, 120}},\n                new {type = \"分类六\", values = new[] {23, 99}},\n                new {type = \"分类七\", values = new[] {18, 56}},\n                new {type = \"分类八\", values = new[] {18, 34}}\n            };\n\n    readonly RangeColumnConfig config2 = new RangeColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"为区间柱状图配置label样式\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"使用style配置项配置label整体样式，同时支持通过topStyle和bottomStyle分别配置label样式。\"\n        },\n        XField = \"type\",\n        YField = \"values\",\n        Color = new[] { \"#3e5bdb\", \"#b4d9e4\" },\n        ColumnStyle = new GraphicStyle\n        {\n            FillOpacity = Convert.ToDecimal(0.8),\n        },\n\n    };\n\n    object config2_1 = new\n    {\n        label = new\n        {\n            visible = true,\n            topStyle = new\n            {\n                fill = \"#3e5bdb\",\n\n            },\n            bottomStyle = new\n            {\n                fill = \"#b4d9e4\",\n\n            },\n        }\n\n\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Column.demo.RangedColumn_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "waterfall",
        "Title": "Waterfall",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Waterfall Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {type = \"日用品\", money = 120},\n        new {type = \"伙食费\", money = 900},\n        new {type = \"交通费\", money = 200},\n        new {type = \"水电费\", money = 300},\n        new {type = \"房租\", money = 1200},\n        new {type = \"商场消费\", money = 1000},\n        new {type = \"应酬红包\", money = -2000}\n    };\n\n    readonly WaterfallConfig config1 = new WaterfallConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"每月收支情况（瀑布图）\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"type\",\n        YField = \"money\",\n        Meta = new\n        {\n            Type = new\n            {\n                Alias = \"类别\"\n            },\n            Money = new\n            {\n                Alias = \"金额\"\n            }\n        }\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Column.demo.Waterfall_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "percent-stacked-column",
        "Title": "Percent Stacked Column",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <PercentStackedColumn Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            country = \"Asia\",\n            year = \"1750\",\n            value = 502\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1800\",\n            value = 635\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1850\",\n            value = 809\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1900\",\n            value = 947\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1950\",\n            value = 1402\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1999\",\n            value = 3634\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"2050\",\n            value = 5268\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1750\",\n            value = 106\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1800\",\n            value = 107\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1850\",\n            value = 111\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1900\",\n            value = 133\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1950\",\n            value = 221\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1999\",\n            value = 767\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"2050\",\n            value = 1766\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1750\",\n            value = 163\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1800\",\n            value = 203\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1850\",\n            value = 276\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1900\",\n            value = 408\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1950\",\n            value = 547\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1999\",\n            value = 729\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"2050\",\n            value = 628\n        }\n    };\n\n    readonly PercentStackedColumnConfig config1 = new PercentStackedColumnConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"百分比堆叠柱状图\"\n        },\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"value\",\n        StackField = \"country\",\n        Color = new[] {\"#0f759c\", \"#26a2cb\", \"#65d1fc\"}\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Column.demo.PercentStackedColumn_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Pie",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "pie",
        "Title": "Pie",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Pie Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Pie Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Pie Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <Pie Data=\"data4\" Config=\"config4\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n    object[] data3 = new object[49];\n\n    protected override async Task OnInitializedAsync()\n    {\n        for (int i = 1; i < 50; i++)\n        {\n            Random rd = new Random();\n            data3[i - 1] = new { type = $\"分类 {i}\", value = rd.Next(0, 10) + 1 };\n        }\n\n        await base.OnInitializedAsync();\n\n    }\n\n    #region 示例1\n\n    readonly object[] data1 =\n{\n        new\n        {\n            type = \"分类一\",\n            value = 27\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 25\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类五\",\n            value = 10\n        },\n        new\n        {\n            type = \"其它\",\n            value = 5\n        }\n    };\n\n    readonly PieConfig config1 = new PieConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"多色饼图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"指定颜色映射字段(colorField)，饼图切片将根据该字段数据显示为不同的颜色。指定颜色需要将color配置为一个数组。\\n当把饼图label的类型设置为inner时，标签会显示在切片内部。设置offset控制标签的偏移值。\"\n        },\n        Radius = 0.8,\n        AngleField = \"value\",\n        ColorField = \"type\",\n        Label = new PieLabelConfig\n        {\n            Visible = true,\n            Type = \"inner\"\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new\n        {\n            type = \"分类一\",\n            value = 27\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 25\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类五\",\n            value = 10\n        },\n        new\n        {\n            type = \"其它\",\n            value = 5\n        }\n    };\n\n    readonly PieConfig config2 = new PieConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"饼图-外部图形标签(outer label)\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"当把饼图label的类型设置为outer时，标签在切片外部拉线显示。设置offset控制标签的偏移值。\"\n        },\n        Radius = 0.8,\n        AngleField = \"value\",\n        ColorField = \"type\",\n        Label = new PieLabelConfig\n        {\n            Visible = true,\n            Type = \"outer\",\n            Offset = 20,\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n\n    readonly PieConfig config3 = new PieConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"饼图-外部圆形图形标签(outer-center label)\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"当把饼图label的类型设置为outer-center时，标签在切片外部拉线显示。outer-center布局的label发生遮挡会直接隐藏而不偏移躲避，相对于outer label布局来说，更美观\"\n        },\n        Radius = 0.8,\n        AngleField = \"value\",\n        ColorField = \"type\",\n        Label = new PieLabelConfig\n        {\n            Visible = true,\n            Type = \"outer-center\",\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly object[] data4 =\n    {\n        new\n        {\n            type = \"分类一\",\n            value = 27\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 25\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类五\",\n            value = 10\n        },\n        new\n        {\n            type = \"其它\",\n            value = 5\n        }\n    };\n\n    readonly PieConfig config4 = new PieConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"饼图-图形标签蜘蛛布局\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text =\n                \"当把饼图label的类型设置为spider时，标签分为两组，在图表两侧拉线对齐显示。一般来说，蜘蛛布局的label更不容易相互遮挡。\"\n        },\n        Radius = 0.8,\n        AngleField = \"value\",\n        ColorField = \"type\",\n        Label = new PieLabelConfig\n        {\n            Visible = true,\n            Type = \"spider\"\n        }\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Pie.demo.Pie_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "donut",
        "Title": "Donut",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Donut Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Donut Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Donut Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            type = \"分类一\",\n            value = 27\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 25\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类五\",\n            value = 10\n        },\n        new\n        {\n            type = \"其它\",\n            value = 5\n        }\n    };\n\n    readonly DonutConfig config1 = new DonutConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"环图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"环图的外半径决定环图的大小，而内半径决定环图的厚度。\"\n        },\n        Radius = 0.8,\n        Padding = \"auto\",\n        AngleField = \"value\",\n        ColorField = \"type\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new\n        {\n            type = \"分类一\",\n            value = 27\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 25\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类五\",\n            value = 10\n        },\n        new\n        {\n            type = \"其它\",\n            value = 5\n        }\n    };\n\n    readonly DonutConfig config2 = new DonutConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"环图-指标卡\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"环图指标卡能够代替tooltip，在环图中心挖空部分显示各分类的详细信息。\"\n        },\n        Radius = 0.8,\n        Padding = \"auto\",\n        AngleField = \"value\",\n        ColorField = \"type\",\n        Statistic = new DonutViewConfigStatistic\n        {\n            Visible = true,\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly object[] data3 =\n    {\n        new\n        {\n            type = \"分类一\",\n            value = 15\n        },\n        new\n        {\n            type = \"分类二\",\n            value = 14\n        },\n        new\n        {\n            type = \"分类三\",\n            value = 18\n        },\n        new\n        {\n            type = \"分类四\",\n            value = 27\n        },\n\n    };\n\n    readonly DonutConfig config3 = new DonutConfig\n    {\n        Theme = new\n        {\n            backgroundStyle= new\n            {\n                fill = \"#2d74f7\",\n            },\n        },\n        ForceFit = true,\n\n        Radius = 0.8,\n        Padding = \"auto\",\n        Color = new string[] { \"#5a93fc\", \"#90b6fd\", \"#c8dbfe\", \"#ffffff\" },\n        AngleField = \"value\",\n        ColorField = \"type\",\n        Statistic = new DonutViewConfigStatistic\n        {\n            Visible = true,\n            Content = new DonutStatisticContent\n            {\n                Value = \"32%\",\n                Name = \"Texi & delivery\"\n            }\n        },\n        Label = new PieLabelConfig\n        {\n            Visible = true,\n        },\n        Legend = new Legend\n        {\n            Visible = true,\n            Position = \"bottom-center\"\n        },\n    };\n\n    #endregion 示例3\n\n}",
        "Type": "Demos.Charts.Pie.demo.Donut_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Gauge",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "gauge",
        "Title": "Gauge",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Gauge TItem=\"string\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Gauge TItem=\"string\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Gauge TItem=\"string\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <Gauge TItem=\"string\" Config=\"config4\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly GaugeConfig config1 = new GaugeConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"仪表盘\"\n        },\n        Width = 400,\n        Height = 400,\n        Value = 64,\n        Min = 0,\n        Max = 100,\n        Range = new double[] {0, 25, 50, 75, 100},\n        Color = new[] {\"#39B8FF\", \"#52619B\", \"#43E089\", \"#C0EDF3\"},\n        Statistic = new GaugeStatistic\n        {\n            Visible = true,\n            Text = \"优\",\n            Color = \"#30bf78\"\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly GaugeConfig config2 = new GaugeConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"仪表盘个性化配置\"\n        },\n        Width = 400,\n        Height = 400,\n        Value = 75,\n        Min = 0,\n        Max = 100,\n        Range = new double[] { 0, 75 },\n        Color = new[] { \"#5d7cef\", \"#e35767\" },\n        Axis = new GaugeAxis\n        {\n            Offset = -15,\n            TickLine = new GaugeAxisTickLine\n            {\n                Visible = true,\n                Length = 10,\n            },\n            Label = new GaugeAxisLabel\n            {\n                Visible = false,\n            },\n        },\n        Pivot = new GaugePivot\n        {\n            Visible = true,\n            Thickness = 10,\n            Pointer = new GaugePivotPointer\n            {\n                Visible = true,\n                Style = new GraphicStyle\n                {\n                    Fill = \"#e25869\"\n                }\n            },\n            Pin = new GaugePivotPin\n            {\n                Visible = true,\n                Style = new GraphicStyle\n                {\n                    Fill = \"#e8e6ea\"\n                }\n            }\n        },\n        Statistic = new GaugeStatistic\n        {\n            Visible = true,\n            Position = new string[]{ \"50%\", \"100%\" },\n            Text = \"26/48\",\n            Color = \"#2e3033\",\n            Size = 40,\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly GaugeConfig config3 = new GaugeConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"刻度仪表盘\"\n        },\n        Width = 400,\n        Height = 400,\n        Value = 40,\n        Min = 0,\n        Max = 100,\n        Range = new double[] { 0, 25, 50, 75, 100 },    \n        \n        \n        Statistic = new GaugeStatistic\n        {\n            Visible = true,\n            Text = \"良\",\n            Color = \"#faad14\",\n        },\n        Color = new[] { \"#39B8FF\", \"#52619B\", \"#43E089\", \"#C0EDF3\" },\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly GaugeConfig config4 = new GaugeConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"扇形仪表盘\"\n        },\n        Width = 400,\n        Height = 400,\n        Value = 34,\n        Min = 0,\n        Max = 100,\n        Range = new double[] { 0, 70 },\n        Format = \"\",    //???\n        Color = new[] { \"#b0d0ff\", \"#5f92f9\" },\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Gauge.demo.Gauge_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Radar",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "radar",
        "Title": "Radar",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Radar Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Radar Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            item = \"Design\",\n            score = 70\n        },\n        new\n        {\n            item = \"Development\",\n            score = 60\n        },\n        new\n        {\n            item = \"Marketing\",\n            score = 60\n        },\n        new\n        {\n            item = \"Users\",\n            score = 40\n        },\n        new\n        {\n            item = \"Test\",\n            score = 60\n        },\n        new\n        {\n            item = \"Language\",\n            score = 70\n        },\n        new\n        {\n            item = \"Technology\",\n            score = 50\n        },\n        new\n        {\n            item = \"Support\",\n            score = 30\n        },\n        new\n        {\n            item = \"Sales\",\n            score = 60\n        },\n        new\n        {\n            item = \"UX\",\n            score = 50\n        }\n    };\n\n    readonly RadarConfig config1 = new RadarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础雷达图\"\n        },\n        AngleField = \"item\",\n        RadiusField = \"score\",\n        RadiusAxis = new ValueAxis\n        {\n            Grid = new BaseAxisGrid\n            {\n                AlternateColor = new[] {\"rgba(0, 0, 0, 0.04)\", null}\n            }\n        },\n        Area = new RadarViewConfigArea\n        {\n            Visible = false\n        },\n        Point = new RadarViewConfigPoint\n        {\n            Visible = true\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n          new {\n            item =  \"Design\",\n            user =  \"a\",\n            score =  70,\n          },\n          new {\n            item =  \"Design\",\n            user =  \"b\",\n            score =  30,\n          },\n          new {\n            item =  \"Development\",\n            user =  \"a\",\n            score =  60,\n          },\n          new {\n            item =  \"Development\",\n            user =  \"b\",\n            score =  70,\n          },\n          new {\n            item =  \"Marketing\",\n            user =  \"a\",\n            score =  60,\n          },\n          new {\n            item =  \"Marketing\",\n            user =  \"b\",\n            score =  50,\n          },\n          new {\n            item =  \"Users\",\n            user =  \"a\",\n            score =  40,\n          },\n          new {\n            item =  \"Users\",\n            user =  \"b\",\n            score =  50,\n          },\n          new {\n            item =  \"Test\",\n            user =  \"a\",\n            score =  60,\n          },\n          new {\n            item =  \"Test\",\n            user =  \"b\",\n            score =  70,\n          },\n          new {\n            item =  \"Language\",\n            user =  \"a\",\n            score =  70,\n          },\n          new {\n            item =  \"Language\",\n            user =  \"b\",\n            score =  50,\n          },\n          new {\n            item =  \"Technology\",\n            user =  \"a\",\n            score =  50,\n          },\n          new {\n            item =  \"Technology\",\n            user =  \"b\",\n            score =  40,\n          },\n          new {\n            item =  \"Support\",\n            user =  \"a\",\n            score =  30,\n          },\n          new {\n            item =  \"Support\",\n            user =  \"b\",\n            score =  40,\n          },\n          new {\n            item =  \"Sales\",\n            user =  \"a\",\n            score =  60,\n          },\n          new {\n            item =  \"Sales\",\n            user =  \"b\",\n            score =  40,\n          },\n          new {\n            item =  \"UX\",\n            user =  \"a\",\n            score =  50,\n          },\n          new {\n            item =  \"UX\",\n            user =  \"b\",\n            score =  60,\n          },\n    };\n\n    readonly RadarConfig config2 = new RadarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"多组雷达图\"\n        },\n        AngleField = \"item\",\n        RadiusField = \"score\",\n        SeriesField = \"user\",\n        RadiusAxis = new ValueAxis\n        {\n            Grid = new BaseAxisGrid\n            {\n                Line = new BaseAxisGridLine\n                {\n                    Type = \"line\"\n                }\n            }\n        },\n        Line = new RadarViewConfigLine\n        {\n            Visible = true,\n        },\n        Point = new RadarViewConfigPoint\n        {\n            Visible = true,\n            Shape = \"circle\"\n        },\n        Legend = new Legend\n        {\n            Visible = true,\n            Position = \"bottom-center\"\n        },\n\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Radar.demo.Radar_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Step",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic-step-line",
        "Title": "Basic StepLine",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <StepLine @ref=\"@chart1\" Config=\"config1\" Data=\"data1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <StepLine Config=\"config2\" Data=\"data2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <StepLine Config=\"config3\" Data=\"data3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <StepLine Config=\"config4\" Data=\"data4\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n    IChartComponent chart1;\n    FireworksSalesItem[] data1;\n\n    SalesItem[] data3;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data1 = await ChartsDemoData.FireworksSalesAsync(NavigationManager, HttpClient);\n        await chart1.ChangeData(data1);\n\n        data3 = await ChartsDemoData.SalesAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    readonly StepLineConfig config1 = new StepLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"单阶梯折线的基础用法\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"最基础简单的阶梯图使用方式，显示一个指标的趋势和变化\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"Date\",\n        YField = \"scales\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 = new object[]\n    {\n          new { year =  \"1991\", value =  3 },\n          new { year =  \"1992\", value =  4 },\n          new { year =  \"1993\", value =  3.5 },\n          new { year =  \"1994\", value =  5 },\n          new { year =  \"1995\", value =  4.9 },\n          new { year =  \"1996\", value =  6 },\n          new { year =  \"1997\", value =  7 },\n          new { year =  \"1998\", value =  9 },\n          new { year =  \"1999\", value =  13 },\n    };\n\n\n    readonly StepLineConfig config2 = new StepLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置折线数据点样式\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"自定义配置趋势线上数据点的样式\"\n        },\n        Padding = \"auto\",\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"value\",\n        Label = new Label\n        {\n            Visible = true,\n            Type = \"point\"\n        },\n        Point = new LineViewConfigPoint\n        {\n            Visible = true,\n            Size = 5,\n            Shape = \"diamond\",\n            Style = new GraphicStyle\n            {\n                Fill = \"white\",\n                Stroke = \"#2593fc\",\n                LineWidth = 2,\n            }\n        },\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly StepLineConfig config3 = new StepLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"为阶梯图添加缩略轴交互\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"缩略轴 (slider) 交互适用于数据较多，用户希望关注数据集中某个特殊区间的场景。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"城市\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Visible = true,\n            Label = new BaseAxisLabel\n            {\n                Visible = true,\n                AutoHide = true,\n            },\n        },\n        YField = \"销售额\",\n        YAxis = new ValueAxis\n        {\n            Label = new BaseAxisLabel\n            {\n\n            }\n        },\n        Interactions = new Interaction[]\n        {\n            new Interaction\n            {\n                Type = \"slider\",\n                Cfg = new\n                {\n                    start= 0.1,\n                    end= 0.2,\n                }\n            }\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly object[] data4 = new object[]\n    {\n          new { year =  \"1991\", value =  3 },\n          new { year =  \"1992\", value =  4 },\n          new { year =  \"1993\", value =  3.5 },\n          new { year =  \"1994\", value =  5 },\n          new { year =  \"1995\", value =  4.9 },\n          new { year =  \"1996\", value =  6 },\n          new { year =  \"1997\", value =  7 },\n          new { year =  \"1998\", value =  9 },\n          new { year =  \"1999\", value =  13 },\n    };\n\n    readonly StepLineConfig config4 = new StepLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"带数据点的折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"将折线图上的每一个数据点显示出来，作为辅助阅读。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",        \n        XField = \"year\",\n        YField = \"value\",\n        Step = \"hvh\", // 可以选择 hv, vh, hvh, vhv\n        Point = new LineViewConfigPoint\n        {\n            Visible = true,        \n        },\n        Label = new Label\n        {\n            Visible = true,\n            Type = \"point\"\n        },\n        \n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Step.demo.BasicStepLine_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "multiple-step-line",
        "Title": "Multiple StepLine",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <StepLine Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <StepLine Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n        GDPItem[] data2;\n\nprotected override async Task OnInitializedAsync()\n    {\n        data2 = await ChartsDemoData.GDPAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n    }\n\n\n    #region 示例1\n\n    readonly object[] data1 =\n{\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"download\",\n            value = 4623\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"register\",\n            value = 2208\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"bill\",\n            value = 182\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"download\",\n            value = 6145\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"register\",\n            value = 2016\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"bill\",\n            value = 257\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"download\",\n            value = 508\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"register\",\n            value = 2916\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"bill\",\n            value = 289\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"download\",\n            value = 6268\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"register\",\n            value = 4512\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"bill\",\n            value = 428\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"download\",\n            value = 6411\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"register\",\n            value = 8281\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"bill\",\n            value = 619\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"download\",\n            value = 1890\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"register\",\n            value = 2008\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"bill\",\n            value = 87\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"download\",\n            value = 4251\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"register\",\n            value = 1963\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"bill\",\n            value = 706\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"download\",\n            value = 2978\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"register\",\n            value = 2367\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"bill\",\n            value = 387\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"download\",\n            value = 3880\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"register\",\n            value = 2956\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"bill\",\n            value = 488\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"download\",\n            value = 3606\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"register\",\n            value = 678\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"bill\",\n            value = 507\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"download\",\n            value = 4311\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"register\",\n            value = 3188\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"bill\",\n            value = 548\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"download\",\n            value = 4116\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"register\",\n            value = 3491\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"bill\",\n            value = 456\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"download\",\n            value = 6419\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"register\",\n            value = 2852\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"bill\",\n            value = 689\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"download\",\n            value = 1643\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"register\",\n            value = 4788\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"bill\",\n            value = 280\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"download\",\n            value = 445\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"register\",\n            value = 4319\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"bill\",\n            value = 176\n        }\n    };\n\n    readonly StepLineConfig config1 = new StepLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"多阶梯折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"将数据按照某一字段进行分组，用于比对不同类型数据的趋势和变化。\"\n        },\n        Padding = \"auto\",\n        ForceFit = true,\n        XField = \"date\",\n        YField = \"value\",\n        YAxis = new ValueAxis\n        {\n            Label = new BaseAxisLabel()\n        },\n        Legend = new Legend\n        {\n            Position = \"right-top\"\n        },\n        SeriesField = \"type\"\n        @*responsive = true,*@\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly StepLineConfig config2 = new StepLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"2000 ~ 2018 年各国家 GDP 趋势对比\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"图形标签 (label) 位于折线尾部，用于标注整根阶梯折线，并有带有排名的含义在其中。\"\n        },\n        Padding = new int[] { 20, 100, 30, 80 },\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"gdp\",\n        SeriesField = \"name\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            Label = new BaseAxisLabel\n            {\n                Visible = true,\n                AutoHide = true,\n            }\n        },\n        YAxis = new ValueAxis\n        {\n            // formatter\n        },\n        Legend = new Legend\n        {\n            Visible = false,\n        },\n        Label = new Label\n        {\n            Visible = true,\n            Type = \"line\",\n        }\n\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Step.demo.MultipleStepLine_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Liquid",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "liquid",
        "Title": "Liquid",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Liquid TItem=\"string\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Liquid TItem=\"string\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly LiquidConfig config1 = new LiquidConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"水波图\"\n        },\n        Min = 0,\n        Max = 10000,\n        Value = 5639\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly LiquidConfig config2 = new LiquidConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"水波图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"水波图 - 百分比显示\"\n        },\n        Min = 0,\n        Max = 10000,\n        Value = 5639,\n        Statistic = new LiquidStatisticStyle\n        {\n            //Formatter\n        }\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Liquid.demo.Liquid_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Bar",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "percent-stacked-bar",
        "Title": "Percent Stacked Bar",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <PercentStackedBar Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            country = \"Asia\",\n            year = \"1750\",\n            value = 502\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1800\",\n            value = 635\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1850\",\n            value = 809\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1900\",\n            value = 947\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1950\",\n            value = 1402\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1999\",\n            value = 3634\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"2050\",\n            value = 5268\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1750\",\n            value = 106\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1800\",\n            value = 107\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1850\",\n            value = 111\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1900\",\n            value = 133\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1950\",\n            value = 221\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1999\",\n            value = 767\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"2050\",\n            value = 1766\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1750\",\n            value = 163\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1800\",\n            value = 203\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1850\",\n            value = 276\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1900\",\n            value = 408\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1950\",\n            value = 547\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1999\",\n            value = 729\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"2050\",\n            value = 628\n        }\n    };\n\n    readonly PercentStackedBarConfig config1 = new PercentStackedBarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"百分比堆叠条形图\"\n        },\n        XField = \"value\",\n        YField = \"year\",\n        StackField = \"country\",\n        Color = new[] {\"#2582a1\", \"#f88c24\", \"#c52125\", \"#87f4d0\"},\n        Label = new BarViewConfigLabel\n        {\n            Visible = true\n        }\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Bar.demo.PercentStackedBar_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "bar",
        "Title": "Bar",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Bar Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <Bar Data=\"data2\" Config=\"config2\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <Bar Data=\"data3\" Config=\"config3\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <Bar Data=\"data4\" Config=\"config4\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {地区 = \"华东\", 销售额 = 4684506.442},\n        new {地区 = \"中南\", 销售额 = 4137415.0929999948},\n        new {地区 = \"东北\", 销售额 = 2681567.469000001},\n        new {地区 = \"华北\", 销售额 = 2447301.017000004},\n        new {地区 = \"西南\", 销售额 = 1303124.508000002},\n        new {地区 = \"西北\", 销售额 = 815039.5959999998}\n    };\n\n    readonly BarConfig config1 = new BarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础条形图\"\n        },\n        ForceFit = true,\n        XField = \"销售额\",\n        YField = \"地区\",\n        Label = new BarViewConfigLabel\n        {\n            Visible = true\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new {地区 = \"华东\", 销售额 = 4684506.442},\n        new {地区 = \"中南\", 销售额 = 4137415.0929999948},\n        new {地区 = \"东北\", 销售额 = 2681567.469000001},\n        new {地区 = \"华北\", 销售额 = 2447301.017000004},\n        new {地区 = \"西南\", 销售额 = 1303124.508000002},\n        new {地区 = \"西北\", 销售额 = 815039.5959999998}\n    };\n\n    readonly BarConfig config2 = new BarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础条形图\"\n        },\n        ForceFit = true,\n        XField = \"销售额\",\n        YField = \"地区\",\n        Label = new BarViewConfigLabel\n        {\n            Visible = true,\n            Position = \"middle\"\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly object[] data3 =\n    {\n        new {year = \"1951 年\", sales = 38, category = \"A\"},\n        new {year = \"1952 年\", sales = 52, category = \"A\"},\n        new {year = \"1956 年\", sales = 61, category = \"A\"},\n        new {year = \"1957 年\", sales = 145, category = \"A\"},\n        new {year = \"1958 年\", sales = 48, category = \"B\"}\n    };\n\n    readonly BarConfig config3 = new BarConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础条形图 - 图形标签颜色自适应\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"图形标签(label)的adjustColor配置项默认设置为true，位于柱形的内部的label颜色会根据柱形颜色自动调整，保证可读性。\"\n        },\n        XField = \"sales\",\n        YField = \"year\",\n        ColorField = \"year\",\n        Color = new[] {\"#55A6F3\", \"#CED4DE\", \"#55A6F3\", \"#55A6F3\", \"#55A6F3\"},\n        Label = new BarViewConfigLabel\n        {\n            Visible = true,\n            Position = \"middle\", // options= left / middle / right\n            AdjustColor = true\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly object[] data4 =\n    {\n        new {action = \"浏览网站\", pv = 50000},\n        new {action = \"放入购物车\", pv = 35000},\n        new {action = \"生成订单\", pv = 25000},\n        new {action = \"支付订单\", pv = 15000},\n        new {action = \"完成交易\", pv = 8500}\n    };\n\n    readonly BarConfig config4 = new BarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础条形图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"基础条形图的图形之间添加转化率标签图形，用户希望关注从上到下的数据变化比例\"\n        },\n        ForceFit = true,\n        XField = \"pv\",\n        YField = \"action\",\n        ConversionTag = new ConversionTagOptions\n        {\n            Visible = true\n        }\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Bar.demo.Bar_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "stacked-bar",
        "Title": "Percent Stacked Area",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <StackedBar Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <StackedBar Data=\"data2\" Config=\"config2\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n\n@code {\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {地区 = \"华东\", 细分 = \"公司\", 销售额 = 1454715.807999998},\n        new {地区 = \"华东\", 细分 = \"消费者\", 销售额 = 2287358.261999998},\n        new {地区 = \"中南\", 细分 = \"公司\", 销售额 = 1335665.3239999984},\n        new\n        {\n            地区 = \"中南\",\n            细分 = \"消费者\",\n            销售额 = 2057936.7620000008\n        },\n        new\n        {\n            地区 = \"东北\",\n            细分 = \"公司\",\n            销售额 = 834842.827\n        },\n        new\n        {\n            地区 = \"东北\",\n            细分 = \"消费者\",\n            销售额 = 1323985.6069999991\n        },\n        new\n        {\n            地区 = \"华北\",\n            细分 = \"公司\",\n            销售额 = 804769.4689999995\n        },\n        new\n        {\n            地区 = \"华北\",\n            细分 = \"消费者\",\n            销售额 = 1220430.5610000012\n        },\n        new\n        {\n            地区 = \"西南\",\n            细分 = \"公司\",\n            销售额 = 469341.684\n        },\n        new\n        {\n            地区 = \"西南\",\n            细分 = \"消费者\",\n            销售额 = 677302.8919999995\n        },\n        new\n        {\n            地区 = \"西北\",\n            细分 = \"公司\",\n            销售额 = 253458.1840000001\n        },\n        new\n        {\n            地区 = \"西北\",\n            细分 = \"消费者\",\n            销售额 = 458058.1039999998\n        }\n    };\n\n    readonly StackedBarConfig config1 = new StackedBarConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"百分比堆叠条形图\"\n        },\n        YField = \"地区\",\n        XField = \"销售额\",\n        Label = new BarViewConfigLabel\n        {\n            Visible = true\n        },\n        StackField = \"细分\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new\n        {\n            地区 = \"华东\",\n            细分 = \"公司\",\n            销售额 = 1454715.807999998\n        },\n        new\n        {\n            地区 = \"华东\",\n            细分 = \"消费者\",\n            销售额 = 2287358.261999998\n        },\n        new\n        {\n            地区 = \"华东\",\n            细分 = \"小型企业\",\n            销售额 = 942432.3720000006\n        },\n        new\n        {\n            地区 = \"中南\",\n            细分 = \"公司\",\n            销售额 = 1335665.3239999984\n        },\n        new\n        {\n            地区 = \"中南\",\n            细分 = \"消费者\",\n            销售额 = 2057936.7620000008\n        },\n        new\n        {\n            地区 = \"中南\",\n            细分 = \"小型企业\",\n            销售额 = 743813.0069999992\n        },\n        new\n        {\n            地区 = \"东北\",\n            细分 = \"公司\",\n            销售额 = 834842.827\n        },\n        new\n        {\n            地区 = \"东北\",\n            细分 = \"消费者\",\n            销售额 = 1323985.6069999991\n        },\n        new\n        {\n            地区 = \"东北\",\n            细分 = \"小型企业\",\n            销售额 = 522739.0349999995\n        },\n        new\n        {\n            地区 = \"华北\",\n            细分 = \"公司\",\n            销售额 = 804769.4689999995\n        },\n        new\n        {\n            地区 = \"华北\",\n            细分 = \"消费者\",\n            销售额 = 1220430.5610000012\n        },\n        new\n        {\n            地区 = \"华北\",\n            细分 = \"小型企业\",\n            销售额 = 422100.9870000001\n        },\n        new\n        {\n            地区 = \"西南\",\n            细分 = \"公司\",\n            销售额 = 469341.684\n        },\n        new\n        {\n            地区 = \"西南\",\n            细分 = \"消费者\",\n            销售额 = 677302.8919999995\n        },\n        new\n        {\n            地区 = \"西南\",\n            细分 = \"小型企业\",\n            销售额 = 156479.9319999999\n        },\n        new\n        {\n            地区 = \"西北\",\n            细分 = \"公司\",\n            销售额 = 253458.1840000001\n        },\n        new\n        {\n            地区 = \"西北\",\n            细分 = \"消费者\",\n            销售额 = 458058.1039999998\n        },\n        new\n        {\n            地区 = \"西北\",\n            细分 = \"小型企业\",\n            销售额 = 103523.308\n        }\n    };\n\n    readonly StackedBarConfig config2 = new StackedBarConfig\n    {\n        ForceFit = true,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠条形图：label自动隐藏\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"在堆叠条形图中，如果label的位置被设定为middle，即显示在条形中间。在对应形状大小不够摆放label的情况下，label会被自动隐藏。\"\n        },\n        YField = \"地区\",\n        XField = \"销售额\",\n        StackField = \"细分\",\n        Label = new BarViewConfigLabel\n        {\n            Offset = 0,\n            Visible = true,\n            Position = \"middle\"\n        }\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Bar.demo.StackedBar_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "grouped-bar",
        "Title": "Grouped Bar",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <GroupedBar Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            label = \"Mon.\",\n            type = \"series1\",\n            value = 2800\n        },\n        new\n        {\n            label = \"Mon.\",\n            type = \"series2\",\n            value = 2260\n        },\n        new\n        {\n            label = \"Tues.\",\n            type = \"series1\",\n            value = 1800\n        },\n        new\n        {\n            label = \"Tues.\",\n            type = \"series2\",\n            value = 1300\n        },\n        new\n        {\n            label = \"Wed.\",\n            type = \"series1\",\n            value = 950\n        },\n        new\n        {\n            label = \"Wed.\",\n            type = \"series2\",\n            value = 900\n        },\n        new\n        {\n            label = \"Thur.\",\n            type = \"series1\",\n            value = 500\n        },\n        new\n        {\n            label = \"Thur.\",\n            type = \"series2\",\n            value = 390\n        },\n        new\n        {\n            label = \"Fri.\",\n            type = \"series1\",\n            value = 170\n        },\n        new\n        {\n            label = \"Fri.\",\n            type = \"series2\",\n            value = 100\n        }\n    };\n\n    readonly GroupedBarConfig config1 = new GroupedBarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组条形图\"\n        },\n        XField = \"value\",\n        YField = \"label\",\n        GroupField = \"type\",\n        Color = new[] {\"#1383ab\", \"#c52125\"},\n        Label = new BarViewConfigLabel()\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Bar.demo.GroupedBar_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "range-bar",
        "Title": "Range Bar",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <RangeBar Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <RangeBar Data=\"data2\" Config=\"config2\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new {type = \"分类一\", values = new[] {76, 100}},\n        new {type = \"分类二\", values = new[] {56, 108}},\n        new {type = \"分类三\", values = new[] {38, 129}},\n        new {type = \"分类四\", values = new[] {58, 155}},\n        new {type = \"分类五\", values = new[] {45, 120}},\n        new {type = \"分类六\", values = new[] {23, 99}},\n        new {type = \"分类七\", values = new[] {18, 56}},\n        new {type = \"分类八\", values = new[] {18, 34}}\n    };\n\n    readonly RangeBarConfig config1 = new RangeBarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"区间条形图\"\n        },\n        XField = \"values\",\n        YField = \"type\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object[] data2 =\n    {\n        new {type = \"分类一\", values = new[] {76, 100}},\n        new {type = \"分类二\", values = new[] {56, 108}},\n        new {type = \"分类三\", values = new[] {38, 129}},\n        new {type = \"分类四\", values = new[] {58, 155}},\n        new {type = \"分类五\", values = new[] {45, 120}},\n        new {type = \"分类六\", values = new[] {23, 99}},\n        new {type = \"分类七\", values = new[] {18, 56}},\n        new {type = \"分类八\", values = new[] {18, 34}}\n    };\n\n    readonly RangeBarConfig config2 = new RangeBarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"为区间条形图配置label样式\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"使用style配置项配置label整体样式，同时支持通过leftStyle和rightStyle分别配置label样式。\"\n        },\n        XField = \"values\",\n        YField = \"type\",\n        Color = new[] {\"l(0) 0:#3e5bdb 1:#dd3121\"},\n        ColumnStyle = new\n        {\n            FillOpacity = 0.8\n        },\n        Label = new RangeBarLabelConfig\n        {\n            Visible = true,\n            LeftStyle = new\n            {\n                Fill = \"#3e5bdb\"\n            },\n            RightStyle = new\n            {\n                Fill = \"#dd3121\"\n            }\n        }\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Bar.demo.RangeBar_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Combo",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "column-line-combo",
        "Title": "Column-line Combo",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <ColumnLine Data=\"@(new[] {uvData, transformData})\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <ColumnLine Data=\"@(new[] {uvData2, transformData2})\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <ColumnLine Data=\"@(new[] {uvData3, transformData3})\" Config=\"config3\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <ColumnLine Data=\"@(new[] {uvData4, transformData4})\" Config=\"config4\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object uvData = new object[]\n    {\n        new {time = \"2019-03\", value = 350},\n        new {time = \"2019-04\", value = 900},\n        new {time = \"2019-05\", value = 300},\n        new {time = \"2019-06\", value = 450},\n        new {time = \"2019-07\", value = 470}\n        };\n\n    readonly object transformData = new object[]\n    {\n        new {time = \"2019-04\", count = 600},\n        new {time = \"2019-05\", count = 400},\n        new {time = \"2019-06\", count = 380},\n        new {time = \"2019-07\", count = 220}\n        };\n\n    readonly ColumnLineConfig config1 = new ColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"柱线混合图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"柱线混合图表\"\n        },\n        XField = \"time\",\n        YField = new[] { \"value\", \"count\" }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object uvData2 = new object[]\n    {\n        new {time = \"2019-03\", value = 350},\n        new {time = \"2019-04\", value = 900},\n        new {time = \"2019-05\", value = 300},\n        new {time = \"2019-06\", value = 450},\n        new {time = \"2019-07\", value = 470}\n        };\n\n    readonly object transformData2 = new object[]\n    {\n        new {time = \"2019-03\", count = 800},\n        new {time = \"2019-04\", count = 600},\n        new {time = \"2019-05\", count = 400},\n        new {time = \"2019-06\", count = 380},\n        new {time = \"2019-07\", count = 220}\n        };\n\n    readonly ColumnLineConfig config2 = new ColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"柱线混合图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"自定义图形细节\"\n        },\n        XField = \"time\",\n        YField = new[] { \"value\", \"count\" },\n        ColumnConfig = new ColumnConfig\n        {\n            Color = \"#586bce\"\n        },\n        LineConfig = new LineConfig\n        {\n            Color = \"#29cae4\",\n            Point = new LineViewConfigPoint\n            {\n                Visible = true,\n            },\n            Label = new Label\n            {\n                Visible = true,\n            }\n        }\n\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly object uvData3 = new object[]\n    {\n        new {time = \"2019-03\", value = 350},\n        new {time = \"2019-04\", value = 900},\n        new {time = \"2019-05\", value = 300},\n        new {time = \"2019-06\", value = 450},\n        new {time = \"2019-07\", value = 470}\n        };\n\n    readonly object transformData3 = new object[]\n    {\n        new {time = \"2019-03\", count = 800},\n        new {time = \"2019-04\", count = 600},\n        new {time = \"2019-05\", count = 400},\n        new {time = \"2019-06\", count = 380},\n        new {time = \"2019-07\", count = 220}\n        };\n\n    readonly ColumnLineConfig config3 = new ColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"柱线混合图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"关闭双Y轴颜色映射\"\n        },\n        XField = \"time\",\n        YField = new[] { \"value\", \"count\" },\n        YAxis = new ComboYAxis\n        {\n            LeftConfig = new ComboYAxisConfig\n            {\n                ColorMapping = false,\n            },\n            RightConfig = new ComboYAxisConfig\n            {\n                ColorMapping = false,\n            }\n        }\n\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly object uvData4 = new object[]\n{\n        new {time = \"2019-03\", value = 350},\n        new {time = \"2019-04\", value = 900},\n        new {time = \"2019-05\", value = 300},\n        new {time = \"2019-06\", value = 450},\n        new {time = \"2019-07\", value = 470}\n    };\n\n    readonly object transformData4 = new object[]\n    {\n          new { time =  \"2019-03\", count =  800, name =  \"a\" },\n          new { time =  \"2019-04\", count =  600, name =  \"a\" },\n          new { time =  \"2019-05\", count =  400, name =  \"a\" },\n          new { time =  \"2019-06\", count =  380, name =  \"a\" },\n          new { time =  \"2019-07\", count =  220, name =  \"a\" },\n          new { time =  \"2019-03\", count =  750, name =  \"b\" },\n          new { time =  \"2019-04\", count =  650, name =  \"b\" },\n          new { time =  \"2019-05\", count =  450, name =  \"b\" },\n          new { time =  \"2019-06\", count =  400, name =  \"b\" },\n          new { time =  \"2019-07\", count =  320, name =  \"b\" },\n          new { time =  \"2019-03\", count =  900, name =  \"c\" },\n          new { time =  \"2019-04\", count =  600, name =  \"c\" },\n          new { time =  \"2019-05\", count =  450, name =  \"c\" },\n          new { time =  \"2019-06\", count =  300, name =  \"c\" },\n          new { time =  \"2019-07\", count =  200, name =  \"c\" },\n        };\n\n    readonly ColumnLineConfig config4 = new ColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"柱线混合图\",\n            AlignTo = \"middle\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"配置多折线\",\n            AlignTo = \"middle\"\n        },\n        XField = \"time\",\n        YField = new[] { \"value\", \"count\" },\n        ColumnConfig = new ColumnConfig\n        {\n            Color = \"#586bce\"\n        },\n        LineSeriesField = \"name\"\n\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Combo.demo.ColumnLineCombo_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "dual-line-combo",
        "Title": "DualLine Combo",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject IJSRuntime JS;\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <DualLine Data=\"@(new[] {data1, data2})\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <DualLine Data=\"@(new[] {data1_2, data2_2})\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <DualLine Data=\"@(new[] {data1_3, data2_3})\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object data1 = new object[]\n    {\n        new {year = \"1991\", value = 3},\n        new {year = \"1992\", value = 4},\n        new {year = \"1993\", value = 3.5},\n        new {year = \"1994\", value = 5},\n        new {year = \"1995\", value = 4.9},\n        new {year = \"1996\", value = 6},\n        new {year = \"1997\", value = 7},\n        new {year = \"1998\", value = 9},\n        new {year = \"1999\", value = 13}\n    };\n\n    readonly object data2 = new object[]\n    {\n        new {year = \"1991\", count = 10},\n        new {year = \"1992\", count = 4},\n        new {year = \"1993\", count = 5},\n        new {year = \"1994\", count = 5},\n        new {year = \"1995\", count = 4.9},\n        new {year = \"1996\", count = 35},\n        new {year = \"1997\", count = 7},\n        new {year = \"1998\", count = 1},\n        new {year = \"1999\", count = 20}\n    };\n\n    readonly DualLineConfig config1 = new DualLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"双折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"双折线混合图表\"\n        },\n        XField = \"year\",\n        YField = new[] {\"value\", \"count\"}\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object data1_2 = new object[]\n    {\n        new {year = \"1991\", value = 3},\n        new {year = \"1992\", value = 4},\n        new {year = \"1993\", value = 3.5},\n        new {year = \"1994\", value = 5},\n        new {year = \"1995\", value = 4.9},\n        new {year = \"1996\", value = 6},\n        new {year = \"1997\", value = 7},\n        new {year = \"1998\", value = 9},\n        new {year = \"1999\", value = 13}\n    };\n\n    readonly object data2_2 = new object[]\n    {\n        new {year = \"1991\", count = 10},\n        new {year = \"1992\", count = 4},\n        new {year = \"1993\", count = 5},\n        new {year = \"1994\", count = 5},\n        new {year = \"1995\", count = 4.9},\n        new {year = \"1996\", count = 35},\n        new {year = \"1997\", count = 7},\n        new {year = \"1998\", count = 1},\n        new {year = \"1999\", count = 20}\n    };\n\n    readonly DualLineConfig config2 = new DualLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"双折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"自定义双折线的样式，突出主要折线\"\n        },\n        XField = \"year\",\n        YField = new[] { \"value\", \"count\" },\n        LineConfigs = new LineConfig[]\n        {\n            new LineConfig\n            {\n              Color = \"#29cae4\",\n              Smooth = false,\n            },\n\n            new LineConfig\n            {\n              Color = \"#586bce\",\n              Smooth = true,\n              Point = new LineViewConfigPoint\n              {\n                  Visible = true,\n              },\n              Label = new Label\n              {\n                  Visible = true,\n              },\n              LineStyle = new LineStyle\n              {\n                  LineOpacity = 5,\n              }\n            },\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly object data1_3 = new object[]\n    {\n        new {year = \"1991\", value = 3},\n        new {year = \"1992\", value = 4},\n        new {year = \"1993\", value = 3.5},\n        new {year = \"1994\", value = 5},\n        new {year = \"1995\", value = 4.9},\n        new {year = \"1996\", value = 6},\n        new {year = \"1997\", value = 7},\n        new {year = \"1998\", value = 9},\n        new {year = \"1999\", value = 13}\n    };\n\n    readonly object data2_3 = new object[]\n    {\n        new {year = \"1991\", count = 10},\n        new {year = \"1992\", count = 4},\n        new {year = \"1993\", count = 5},\n        new {year = \"1994\", count = 5},\n        new {year = \"1995\", count = 4.9},\n        new {year = \"1996\", count = 35},\n        new {year = \"1997\", count = 7},\n        new {year = \"1998\", count = 1},\n        new {year = \"1999\", count = 20}\n    };\n\n    readonly DualLineConfig config3 = new DualLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"统一双折线度量\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"统一双折线度量，隐藏右轴\"\n        },\n        XField = \"year\",\n        YField = new[] { \"value\", \"count\" },\n        YAxis = new ComboYAxis\n        {\n            Max = 35,\n            RightConfig = new ComboYAxisConfig\n            {\n                Visible = false,\n            }\n        }\n    };\n\n    #endregion 示例3\n\n}",
        "Type": "Demos.Charts.Combo.demo.DualLineCombo_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "stacked-column-line-combo",
        "Title": "StackedColumn-line Combo",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <StackedColumnLine Data=\"@(new[] {uvBillData, transformData})\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <StackedColumnLine Data=\"@(new[] {uvBillData_2, transformData_2})\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object uvBillData = new object[]\n    {\n        new {time = \"2019-03\", value = 350, type = \"uv\"},\n        new {time = \"2019-04\", value = 900, type = \"uv\"},\n        new {time = \"2019-05\", value = 300, type = \"uv\"},\n        new {time = \"2019-06\", value = 450, type = \"uv\"},\n        new {time = \"2019-07\", value = 470, type = \"uv\"},\n        new {time = \"2019-03\", value = 220, type = \"bill\"},\n        new {time = \"2019-04\", value = 300, type = \"bill\"},\n        new {time = \"2019-05\", value = 250, type = \"bill\"},\n        new {time = \"2019-06\", value = 220, type = \"bill\"},\n        new {time = \"2019-07\", value = 362, type = \"bill\"}\n    };\n\n    readonly object transformData = new object[]\n    {\n        new {time = \"2019-03\", count = 800},\n        new {time = \"2019-04\", count = 600},\n        new {time = \"2019-05\", count = 400},\n        new {time = \"2019-06\", count = 380},\n        new {time = \"2019-07\", count = 220}\n    };\n\n    readonly StackedColumnLineConfig config1 = new StackedColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠柱+折线混合图\",\n            AlignTo = \"middle\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"堆叠柱+折线混合图表\",\n            AlignTo = \"middle\"\n        },\n        XField = \"time\",\n        YField = new[] {\"value\", \"count\"},\n        ColumnStackField = \"type\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object uvBillData_2 = new object[]\n    {\n        new {time = \"2019-03\", value = 350, type = \"uv\"},\n        new {time = \"2019-04\", value = 900, type = \"uv\"},\n        new {time = \"2019-05\", value = 300, type = \"uv\"},\n        new {time = \"2019-06\", value = 450, type = \"uv\"},\n        new {time = \"2019-07\", value = 470, type = \"uv\"},\n        new {time = \"2019-03\", value = 220, type = \"bill\"},\n        new {time = \"2019-04\", value = 300, type = \"bill\"},\n        new {time = \"2019-05\", value = 250, type = \"bill\"},\n        new {time = \"2019-06\", value = 220, type = \"bill\"},\n        new {time = \"2019-07\", value = 362, type = \"bill\"}\n    };\n\n    readonly object transformData_2 = new object[]\n    {\n          new { time =  \"2019-03\", count =  800, name =  \"a\" },\n          new { time =  \"2019-04\", count =  600, name =  \"a\" },\n          new { time =  \"2019-05\", count =  400, name =  \"a\" },\n          new { time =  \"2019-06\", count =  380, name =  \"a\" },\n          new { time =  \"2019-07\", count =  220, name =  \"a\" },\n          new { time =  \"2019-03\", count =  750, name =  \"b\" },\n          new { time =  \"2019-04\", count =  650, name =  \"b\" },\n          new { time =  \"2019-05\", count =  450, name =  \"b\" },\n          new { time =  \"2019-06\", count =  400, name =  \"b\" },\n          new { time =  \"2019-07\", count =  320, name =  \"b\" },\n          new { time =  \"2019-03\", count =  900, name =  \"c\" },\n          new { time =  \"2019-04\", count =  600, name =  \"c\" },\n          new { time =  \"2019-05\", count =  450, name =  \"c\" },\n          new { time =  \"2019-06\", count =  300, name =  \"c\" },\n          new { time =  \"2019-07\", count =  200, name =  \"c\" },\n    };\n\n    readonly StackedColumnLineConfig config2 = new StackedColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组柱+折线混合图\",\n            AlignTo = \"middle\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"配置多折线\",\n            AlignTo = \"middle\"\n        },\n        XField = \"time\",\n        YField = new[] { \"value\", \"count\" },\n        ColumnStackField = \"type\",\n        LineSeriesField = \"name\"\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Combo.demo.StackedColumnLineCombo_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "grouped-column-line-combo",
        "Title": "GroupedColumn-line Combo",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <GroupedColumnLine Data=\"@(new[] {uvBillData, transformData})\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <GroupedColumnLine Data=\"@(new[] {uvBillData_2, transformData_2})\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object uvBillData = new object[]\n    {\n        new {time = \"2019-03\", value = 350, type = \"uv\"},\n        new {time = \"2019-04\", value = 900, type = \"uv\"},\n        new {time = \"2019-05\", value = 300, type = \"uv\"},\n        new {time = \"2019-06\", value = 450, type = \"uv\"},\n        new {time = \"2019-07\", value = 470, type = \"uv\"},\n        new {time = \"2019-03\", value = 220, type = \"bill\"},\n        new {time = \"2019-04\", value = 300, type = \"bill\"},\n        new {time = \"2019-05\", value = 250, type = \"bill\"},\n        new {time = \"2019-06\", value = 220, type = \"bill\"},\n        new {time = \"2019-07\", value = 362, type = \"bill\"}\n    };\n\n    readonly object transformData = new object[]\n    {\n        new {time = \"2019-03\", count = 800},\n        new {time = \"2019-04\", count = 600},\n        new {time = \"2019-05\", count = 400},\n        new {time = \"2019-06\", count = 380},\n        new {time = \"2019-07\", count = 220}\n    };\n\n    readonly GroupedColumnLineConfig config1 = new GroupedColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组柱+折线混合图\",\n            AlignTo = \"middle\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"分组柱+折线混合图表\",\n            AlignTo = \"middle\"\n        },\n        XField = \"time\",\n        YField = new[] {\"value\", \"count\"},\n        ColumnGroupField = \"type\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly object uvBillData_2 = new object[]\n    {\n        new {time = \"2019-03\", value = 350, type = \"uv\"},\n        new {time = \"2019-04\", value = 900, type = \"uv\"},\n        new {time = \"2019-05\", value = 300, type = \"uv\"},\n        new {time = \"2019-06\", value = 450, type = \"uv\"},\n        new {time = \"2019-07\", value = 470, type = \"uv\"},\n        new {time = \"2019-03\", value = 220, type = \"bill\"},\n        new {time = \"2019-04\", value = 300, type = \"bill\"},\n        new {time = \"2019-05\", value = 250, type = \"bill\"},\n        new {time = \"2019-06\", value = 220, type = \"bill\"},\n        new {time = \"2019-07\", value = 362, type = \"bill\"}\n    };\n\n    readonly object transformData_2 = new object[]\n    {\n          new { time =  \"2019-03\", count =  800, name =  \"a\" },\n          new { time =  \"2019-04\", count =  600, name =  \"a\" },\n          new { time =  \"2019-05\", count =  400, name =  \"a\" },\n          new { time =  \"2019-06\", count =  380, name =  \"a\" },\n          new { time =  \"2019-07\", count =  220, name =  \"a\" },\n          new { time =  \"2019-03\", count =  750, name =  \"b\" },\n          new { time =  \"2019-04\", count =  650, name =  \"b\" },\n          new { time =  \"2019-05\", count =  450, name =  \"b\" },\n          new { time =  \"2019-06\", count =  400, name =  \"b\" },\n          new { time =  \"2019-07\", count =  320, name =  \"b\" },\n          new { time =  \"2019-03\", count =  900, name =  \"c\" },\n          new { time =  \"2019-04\", count =  600, name =  \"c\" },\n          new { time =  \"2019-05\", count =  450, name =  \"c\" },\n          new { time =  \"2019-06\", count =  300, name =  \"c\" },\n          new { time =  \"2019-07\", count =  200, name =  \"c\" },\n    };\n\n    readonly GroupedColumnLineConfig config2 = new GroupedColumnLineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组柱+折线混合图\",\n            AlignTo = \"middle\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"配置多折线\",\n            AlignTo = \"middle\"\n        },\n        XField = \"time\",\n        YField = new[] { \"value\", \"count\" },\n        ColumnGroupField = \"type\",\n        LineSeriesField = \"name\"\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Combo.demo.GroupedColumnLineCombo_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Area",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "percent-stacked-area",
        "Title": "Percent Stacked Area",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <PercentStackedArea Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n\n</Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly object[] data1 =\n    {\n        new\n        {\n            country = \"Asia\",\n            year = \"1750\",\n            value = 502\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1800\",\n            value = 635\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1850\",\n            value = 809\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1900\",\n            value = 947\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1950\",\n            value = 1402\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"1999\",\n            value = 3634\n        },\n        new\n        {\n            country = \"Asia\",\n            year = \"2050\",\n            value = 5268\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1750\",\n            value = 106\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1800\",\n            value = 107\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1850\",\n            value = 111\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1900\",\n            value = 133\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1950\",\n            value = 221\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"1999\",\n            value = 767\n        },\n        new\n        {\n            country = \"Africa\",\n            year = \"2050\",\n            value = 1766\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1750\",\n            value = 163\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1800\",\n            value = 203\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1850\",\n            value = 276\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1900\",\n            value = 408\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1950\",\n            value = 547\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"1999\",\n            value = 729\n        },\n        new\n        {\n            country = \"Europe\",\n            year = \"2050\",\n            value = 628\n        }\n    };\n\n    readonly PercentStackedAreaConfig config1 = new PercentStackedAreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"百分比堆叠面积图\"\n        },\n        Meta = new\n        {\n            Year = new\n            {\n                Range = new[] {0, 1}\n            }\n        },\n        XField = \"year\",\n        YField = \"value\",\n        StackField = \"country\",\n        Color = new[] {\"#82d1de\", \"#cb302d\", \"#e3ca8c\"},\n        AreaStyle = new GraphicStyle\n        {\n            FillOpacity = 0.7M\n        }\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Area.demo.PercentStackedArea_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "area",
        "Title": "Area",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs ActiveKeyChanged=\"OnTabChanged\">\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Area @ref=\"chart1\" TItem=\"FireworksSalesItem\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <Area @ref=\"chart2\" TItem=\"SalesItem\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    IChartComponent chart2;\n\n    protected override async Task OnInitializedAsync()\n    {\n        await base.OnInitializedAsync();\n        OnTabChanged(\"1\");\n    }\n\n\n    private async void OnTabChanged(string activeKey)\n    {\n        if (activeKey == \"1\")\n        {\n            var data1 = await ChartsDemoData.FireworksSalesAsync(NavigationManager, HttpClient);\n            chart1.ChangeData(data1);\n        }\n        else\n        {\n            var data2 = await ChartsDemoData.SalesAsync(NavigationManager, HttpClient);\n            chart2.ChangeData(data2);\n        }\n    }\n\n    #region 示例1\n\n    readonly AreaConfig config1 = new AreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础面积图\"\n        },\n        XField = \"Date\",\n        YField = \"scales\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly AreaConfig config2 = new AreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础面积图 - 缩略轴\"\n        },\n\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"缩略轴 (slider) 交互适用于数据较多，用户希望关注数据集中某个特殊区间的场景。\"\n        },\n\n        XField = \"城市\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Visible = true,\n            Label = new BaseAxisLabel\n            {\n                Visible = true,\n                AutoHide = true,\n            }\n        },\n        YField = \"销售额\",\n\n        Interactions = new Interaction[]\n        {\n            new Interaction\n            {\n                Type=\"slider\",\n                Cfg = new\n                {\n                    start =0.5,\n                    end =0.55\n                }\n            }\n            }\n\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Area.demo.Area_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Stacked-area",
        "Title": "Stacked Area",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs ActiveKeyChanged=\"OnTabChanged\">\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <StackedArea @ref=\"chart1\" TItem=\"OilItem\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <StackedArea @ref=\"chart2\" TItem=\"OilItem\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <StackedArea @ref=\"chart3\" TItem=\"OilItem\" Config=\"config3\" />\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <StackedArea @ref=\"chart4\" TItem=\"EmissionsItem\" Config=\"config4\" />\n        </ChildContent>\n    </TabPane>\n\n</Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    IChartComponent chart2;\n    IChartComponent chart3;\n    IChartComponent chart4;\n\n\n    protected override async Task OnInitializedAsync()\n    {\n        await base.OnInitializedAsync();\n        OnTabChanged(\"1\");\n    }\n\n    private async void OnTabChanged(string activeKey)\n    {\n        if (activeKey == \"1\")\n        {\n            var data1 = await ChartsDemoData.OilAsync(NavigationManager, HttpClient);\n            chart1.ChangeData(data1);\n        }\n        else if (activeKey == \"2\")\n        {\n            var data1 = await ChartsDemoData.OilAsync(NavigationManager, HttpClient);\n            chart2.ChangeData(data1);\n        }\n        else if (activeKey == \"3\")\n        {\n            var data1 = await ChartsDemoData.OilAsync(NavigationManager, HttpClient);\n            chart3.ChangeData(data1);\n        }\n        else\n        {\n            var data4 = await ChartsDemoData.EmissionsAsync(NavigationManager, HttpClient);\n            chart4.ChangeData(data4);\n        }\n    }\n\n    #region 示例1\n\n    readonly StackedAreaConfig config1 = new StackedAreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠面积图\"\n        },\n        XField = \"date\",\n        YField = \"value\",\n        StackField = \"country\",\n        Color = new[] { \"#6897a7\", \"#8bc0d6\", \"#60d7a7\", \"#dedede\", \"#fedca9\", \"#fab36f\", \"#d96d6f\" },\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        },\n        Legend = new Legend\n        {\n            Visible = true,\n            Position = \"right-top\"\n        }\n        @*responsive = true,*@\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly StackedAreaConfig config2 = new StackedAreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠面积图-areaLabel\"\n        },\n\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"堆叠面积图中，将label type设置为area时，label显示在堆叠区域内，使用户能够更容易的通过视觉将label和对应图形产生联系。autoScale配置项设置为true时，label会自适应堆叠区域的大小。\"\n        },\n\n        XField = \"date\",\n        YField = \"value\",\n        StackField = \"country\",\n        Color = new[] { \"#6897a7\", \"#8bc0d6\", \"#60d7a7\", \"#dedede\", \"#fedca9\", \"#fab36f\", \"#d96d6f\" },\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        },\n        Legend = new Legend\n        {\n            Visible = true,\n            Position = \"right-top\"\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly StackedAreaConfig config3 = new StackedAreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠面积图 - lineLabel\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"当label类型设置为line时，label与面积区域尾端顶部对齐。\"\n        },\n        XField = \"date\",\n        YField = \"value\",\n        StackField = \"country\",\n        Color = new[] { \"#6897a7\", \"#8bc0d6\", \"#60d7a7\", \"#dedede\", \"#fedca9\", \"#fab36f\", \"#d96d6f\" },\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        },\n        Label = new StackedAreaLabel\n        {\n            Visible = true,\n            Type = \"line\",\n        },\n        Legend = new Legend\n        {\n            Visible = false,\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly StackedAreaConfig config4 = new StackedAreaConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"The causes of CO2 emissions\"\n        },\n        XField = \"year\",\n        YField = \"value\",\n        SeriesField = \"category\",\n        Color = new[] { \"#6897a7\", \"#8bc0d6\", \"#60d7a7\", \"#dedede\", \"#fedca9\", \"#fab36f\", \"#d96d6f\" },\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"time\",\n            Mask = \"YYYY\",\n        },\n    };\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Area.demo.StackedArea_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Bubble",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "bubble",
        "Title": "Bubble",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs ActiveKeyChanged=\"OnTabChanged\">\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Bubble @ref=\"chart1\" Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <Bubble @ref=\"chart2\" Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n\n    IChartComponent chart1;\n    SmokingRateItem[] data1;\n\n    IChartComponent chart2;\n    SmokingRateItem[] data2;\n\n    protected override async Task OnInitializedAsync()\n    {\n        await base.OnInitializedAsync();\n        OnTabChanged(\"1\");\n    }\n\n    private async void OnTabChanged(string activeKey)\n    {\n        if (activeKey == \"1\")\n        {\n            data1 = await ChartsDemoData.SmokingRateAsync(NavigationManager, HttpClient);\n            await chart1.ChangeData(data1);\n        }\n        else if (activeKey == \"2\")\n        {\n            data2 = await ChartsDemoData.SmokingRateAsync(NavigationManager, HttpClient);\n            await chart2.ChangeData(data2);\n        }\n        else\n        {\n\n        }\n    }\n\n    #region 示例1\n\n    //smoking-rate\n    readonly BubbleConfig config1 = new BubbleConfig\n    {\n        XField = \"change in female rate\",\n        YField = \"change in male rate\",\n        SizeField = \"pop\",\n        PointSize = new[] { 4, 30 },\n        ColorField = new[] { \"continent\" },\n        Color = new[] { \"#ffd500\", \"#82cab2\", \"#193442\", \"#d18768\", \"#7e827a\" },\n        XAxis = new ValueTimeAxis\n        {\n            Visible = true,\n            Max = 5,\n            Min = -25\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    //smoking-rate\n    readonly BubbleConfig config2 = new BubbleConfig\n    {\n        XField = \"change in female rate\",\n        YField = \"change in male rate\",\n        SizeField = \"pop\",\n        PointSize = new[] { 4, 30 },\n        ColorField = new[] { \"continent\" },\n        Color = new[] { \"#ffd500\", \"#82cab2\", \"#193442\", \"#d18768\", \"#7e827a\" },\n        PointStyle = new GraphicStyle\n        {\n            Stroke = \"#777777\",\n            LineWidth = 1,\n            Opacity = 0.8,\n        },\n        XAxis = new ValueTimeAxis\n        {\n            Visible = true,\n            Max = 5,\n            Min = -25\n        },\n        Quadrant = new QuadrantConfig\n        {\n            Visible = true,\n            XBaseline = 0,\n            YBaseline = 0,\n\n            RegionStyle = new object[]\n            {\n               new {fill = \"#d8d0c0\",opacity = 0.2,},\n               new {fill = \"#a3dda1\",opacity = 0.1,},\n               new {fill = \"white\",opacity = 0,},\n               new {fill = \"#d8d0c0\",opacity = 0.2,},\n                },\n            Label = new Label\n            {\n                Text = new string[]\n                {\n                    \"Female decrease,\\nmale increase\",\n                    \"Female & male decrease\",\n                    \"Female &\\n male increase\",\n                    \"Male decrease,\\nfemale increase\",\n                    }\n            }\n\n        }\n    };\n\n    #endregion 示例2\n\n}",
        "Type": "Demos.Charts.Bubble.demo.Bubble_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Line",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "line",
        "Title": "Line",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line @ref=\"@chart1\" Data=\"data1\" Config=\"config1\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data2\" Config=\"config2\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data3\" Config=\"config3\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data4\" Config=\"config4\"/>\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"5\">\n        <Tab>示例5</Tab>\n        <ChildContent>\n            <Line @ref=\"@chart5\" Data=\"data5\" Config=\"config5\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    FireworksSalesItem[] data1;\n    IChartComponent chart5;\n    SalesItem[] data5;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data1 = await ChartsDemoData.FireworksSalesAsync(NavigationManager, HttpClient);\n        await chart1.ChangeData(data1);\n\n        data5 = await ChartsDemoData.SalesAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    LineConfig config1 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"单折线图的基础用法\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"最基础简单的折线图使用方式，显示一个指标的趋势\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"Date\",\n        YField = \"scales\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            TickCount = 5\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    object[] data2 =\n    {\n        new {year = \"1991\", value = 3},\n        new {year = \"1992\", value = 4},\n        new {year = \"1993\", value = 3.5},\n        new {year = \"1994\", value = 5},\n        new {year = \"1995\", value = 4.9},\n        new {year = \"1996\", value = 6},\n        new {year = \"1997\", value = 7},\n        new {year = \"1998\", value = 9},\n        new {year = \"1999\", value = 13}\n    };\n\n    LineConfig config2 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"曲线折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"用平滑的曲线代替折线。\"\n        },\n        Padding = \"auto\",\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"value\",\n        Smooth = true\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    object[] data3 =\n    {\n        new {year = \"1991\", value = 3},\n        new {year = \"1992\", value = 4},\n        new {year = \"1993\", value = 3.5},\n        new {year = \"1994\", value = 5},\n        new {year = \"1995\", value = 4.9},\n        new {year = \"1996\", value = 6},\n        new {year = \"1997\", value = 7},\n        new {year = \"1998\", value = 9},\n        new {year = \"1999\", value = 13}\n    };\n\n    LineConfig config3 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"带数据点的折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"将折线图上的每一个数据点显示出来，作为辅助阅读。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"year\",\n        YField = \"value\",\n        Point = new LineViewConfigPoint\n        {\n            Visible = true\n        },\n        Label = new Label\n        {\n            Visible = true,\n            Type = \"point\"\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    object[] data4 =\n    {\n        new {year = \"1991\", value = 3},\n        new {year = \"1992\", value = 4},\n        new {year = \"1993\", value = 3.5},\n        new {year = \"1994\", value = 5},\n        new {year = \"1995\", value = 4.9},\n        new {year = \"1996\", value = 6},\n        new {year = \"1997\", value = 7},\n        new {year = \"1998\", value = 9},\n        new {year = \"1999\", value = 13}\n    };\n\n    LineConfig config4 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"配置折线数据点样式\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"自定义配置趋势线上数据点的样式\"\n        },\n        Padding = \"auto\",\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"value\",\n        Label = new Label\n        {\n            Visible = true,\n            Type = \"point\"\n        },\n        Point = new LineViewConfigPoint\n        {\n            Visible = true,\n            Size = 5,\n            Shape = \"diamond\",\n            Style = new GraphicStyle\n            {\n                Fill = \"white\",\n                Stroke = \"#2593fc\",\n                LineWidth = 2\n            }\n        }\n    };\n\n    #endregion 示例4\n\n    #region 示例5\n\n    readonly LineConfig config5 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"为折线添加缩略轴交互\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"缩略轴 (slider) 交互适用于折线数据较多，用户希望关注数据集中某个特殊区间的场景。\"\n        },\n        ForceFit = true,\n        Padding = \"auto\",\n        XField = \"城市\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Visible = true,\n            Label = new BaseAxisLabel\n            {\n                AutoHide = true\n            }\n        },\n        YField = \"销售额\",\n        YAxis = new ValueAxis\n        {\n            Label = new BaseAxisLabel()\n        },\n        Interactions = new[]\n        {\n            new Interaction\n            {\n                Type = \"slider\",\n                Cfg = new\n                {\n                    start = 0.1,\n                    end = 0.2\n                }\n            }\n        }\n    };\n\n    #endregion 示例5\n\n}",
        "Type": "Demos.Charts.Line.demo.Line_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "multiple-line",
        "Title": "Type",
        "Description": "<p>Multiple Line</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line @ref=\"chart2\" Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line @ref=\"chart3\" Data=\"data3\" Config=\"config3\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"4\">\n        <Tab>示例4</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data4\" Config=\"config4\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"5\">\n        <Tab>示例5</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data5\" Config=\"config5\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"6\">\n        <Tab>示例6</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line Data=\"data6\" Config=\"config6\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"7\">\n        <Tab>示例7</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Line @ref =\"chart7\" Data=\"data7\" Config=\"config7\" />\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n\n    IChartComponent chart2;\n    GDPItem[] data2;\n    IChartComponent chart3;\n    EmissionsItem[] data3;\n    IChartComponent chart7;\n    EmissionsItem[] data7;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data2 = await ChartsDemoData.GDPAsync(NavigationManager, HttpClient);\n        await chart2.ChangeData(data2);\n\n        data3 = await ChartsDemoData.EmissionsAsync(NavigationManager, HttpClient);\n\n        data7 = await ChartsDemoData.EmissionsAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    object[] data1 =\n    {\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"download\",\n            value = 4623\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"register\",\n            value = 2208\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"bill\",\n            value = 182\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"download\",\n            value = 6145\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"register\",\n            value = 2016\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"bill\",\n            value = 257\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"download\",\n            value = 508\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"register\",\n            value = 2916\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"bill\",\n            value = 289\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"download\",\n            value = 6268\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"register\",\n            value = 4512\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"bill\",\n            value = 428\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"download\",\n            value = 6411\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"register\",\n            value = 8281\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"bill\",\n            value = 619\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"download\",\n            value = 1890\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"register\",\n            value = 2008\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"bill\",\n            value = 87\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"download\",\n            value = 4251\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"register\",\n            value = 1963\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"bill\",\n            value = 706\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"download\",\n            value = 2978\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"register\",\n            value = 2367\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"bill\",\n            value = 387\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"download\",\n            value = 3880\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"register\",\n            value = 2956\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"bill\",\n            value = 488\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"download\",\n            value = 3606\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"register\",\n            value = 678\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"bill\",\n            value = 507\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"download\",\n            value = 4311\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"register\",\n            value = 3188\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"bill\",\n            value = 548\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"download\",\n            value = 4116\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"register\",\n            value = 3491\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"bill\",\n            value = 456\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"download\",\n            value = 6419\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"register\",\n            value = 2852\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"bill\",\n            value = 689\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"download\",\n            value = 1643\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"register\",\n            value = 4788\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"bill\",\n            value = 280\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"download\",\n            value = 445\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"register\",\n            value = 4319\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"bill\",\n            value = 176\n        }\n    };\n\n    LineConfig config1 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"多折线图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"将数据按照某一字段进行分组，用于比对不同类型数据的趋势。\"\n        },\n        Padding = \"auto\",\n        ForceFit = true,\n        XField = \"date\",\n        YField = \"value\",\n        YAxis = new ValueAxis\n        {\n            Label = new BaseAxisLabel()\n        },\n        Legend = new Legend\n        {\n            Position = \"right-top\"\n        },\n        SeriesField = \"type\"\n        @*responsive = true,*@\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    LineConfig config2 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"2000 ~ 2018 年各国家 GDP 趋势对比\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"图形标签 (label) 位于折线尾部，用于标注整根折线，并有带有排名的含义在其中。\"\n        },\n        Padding = \"auto\", //new[] { 20, 100, 30, 80 },\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"gdp\",\n        SeriesField = \"name\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"dateTime\",\n            Label = new BaseAxisLabel\n            {\n                Visible = true,\n                AutoHide = true\n            }\n        },\n        YAxis = new ValueAxis(),\n        Legend = new Legend\n        {\n            Visible = false\n        },\n        Label = new Label\n        {\n            Visible = true,\n            Type = \"line\"\n        },\n        Animation = new Animation\n        {\n            Appear = new AnimationCfg\n            {\n                Animation = \"clipingWithData\"\n            }\n        },\n        Smooth = true\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    LineConfig config3 = new LineConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"The causes of CO2 emissions\"\n        },\n        Padding = \"auto\",\n        ForceFit = true,\n        XField = \"year\",\n        YField = \"value\",\n        SeriesField = \"category\",\n        XAxis = new ValueCatTimeAxis\n        {\n            Type = \"time\"\n        },\n        YAxis = new ValueAxis\n        {\n            Label = new BaseAxisLabel()\n        }\n        @*responsive = true,*@\n    };\n\n        #endregion 示例3\n\n\n        #region 示例4\n\n        object[] data4 =\n        {\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"download\",\n            value = 4623\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"register\",\n            value = 2208\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"bill\",\n            value = 182\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"download\",\n            value = 6145\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"register\",\n            value = 2016\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"bill\",\n            value = 257\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"download\",\n            value = 508\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"register\",\n            value = 2916\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"bill\",\n            value = 289\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"download\",\n            value = 6268\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"register\",\n            value = 4512\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"bill\",\n            value = 428\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"download\",\n            value = 6411\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"register\",\n            value = 8281\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"bill\",\n            value = 619\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"download\",\n            value = 1890\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"register\",\n            value = 2008\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"bill\",\n            value = 87\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"download\",\n            value = 4251\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"register\",\n            value = 1963\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"bill\",\n            value = 706\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"download\",\n            value = 2978\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"register\",\n            value = 2367\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"bill\",\n            value = 387\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"download\",\n            value = 3880\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"register\",\n            value = 2956\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"bill\",\n            value = 488\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"download\",\n            value = 3606\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"register\",\n            value = 678\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"bill\",\n            value = 507\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"download\",\n            value = 4311\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"register\",\n            value = 3188\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"bill\",\n            value = 548\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"download\",\n            value = 4116\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"register\",\n            value = 3491\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"bill\",\n            value = 456\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"download\",\n            value = 6419\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"register\",\n            value = 2852\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"bill\",\n            value = 689\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"download\",\n            value = 1643\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"register\",\n            value = 4788\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"bill\",\n            value = 280\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"download\",\n            value = 445\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"register\",\n            value = 4319\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"bill\",\n            value = 176\n        }\n    };\n\n        LineConfig config4 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"多折线图\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"指定折线颜色\"\n            },\n            Padding = \"auto\",\n            ForceFit = true,\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Label = new BaseAxisLabel()\n            },\n            Legend = new Legend\n            {\n                Position = \"right-top\"\n            },\n            SeriesField = \"type\",\n            Color = new string[] { \"#1979C9\", \"#D62A0D\", \"#FAA219\" },\n            Responsive = true,\n        };\n\n        #endregion 示例4\n\n        #region 示例5\n\n        object[] data5 =\n        {\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"download\",\n            value = 4623\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"register\",\n            value = 2208\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"bill\",\n            value = 182\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"download\",\n            value = 6145\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"register\",\n            value = 2016\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"bill\",\n            value = 257\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"download\",\n            value = 508\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"register\",\n            value = 2916\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"bill\",\n            value = 289\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"download\",\n            value = 6268\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"register\",\n            value = 4512\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"bill\",\n            value = 428\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"download\",\n            value = 6411\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"register\",\n            value = 8281\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"bill\",\n            value = 619\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"download\",\n            value = 1890\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"register\",\n            value = 2008\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"bill\",\n            value = 87\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"download\",\n            value = 4251\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"register\",\n            value = 1963\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"bill\",\n            value = 706\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"download\",\n            value = 2978\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"register\",\n            value = 2367\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"bill\",\n            value = 387\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"download\",\n            value = 3880\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"register\",\n            value = 2956\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"bill\",\n            value = 488\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"download\",\n            value = 3606\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"register\",\n            value = 678\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"bill\",\n            value = 507\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"download\",\n            value = 4311\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"register\",\n            value = 3188\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"bill\",\n            value = 548\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"download\",\n            value = 4116\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"register\",\n            value = 3491\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"bill\",\n            value = 456\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"download\",\n            value = 6419\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"register\",\n            value = 2852\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"bill\",\n            value = 689\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"download\",\n            value = 1643\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"register\",\n            value = 4788\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"bill\",\n            value = 280\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"download\",\n            value = 445\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"register\",\n            value = 4319\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"bill\",\n            value = 176\n        }\n    };\n\n        LineConfig config5 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"多折线图\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"通过回调函数指定折线颜色\"\n            },\n            Padding = \"auto\",\n            ForceFit = true,\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Label = new BaseAxisLabel()\n            },\n            Legend = new Legend\n            {\n                Position = \"right-top\"\n            },\n            SeriesField = \"type\",\n            Color = \"#93D072\",\n            Responsive = true,\n        };\n\n        #endregion 示例5\n\n        #region 示例6\n\n        object[] data6 =\n        {\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"download\",\n            value = 4623\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"register\",\n            value = 2208\n        },\n        new\n        {\n            date = \"2018/8/1\",\n            type = \"bill\",\n            value = 182\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"download\",\n            value = 6145\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"register\",\n            value = 2016\n        },\n        new\n        {\n            date = \"2018/8/2\",\n            type = \"bill\",\n            value = 257\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"download\",\n            value = 508\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"register\",\n            value = 2916\n        },\n        new\n        {\n            date = \"2018/8/3\",\n            type = \"bill\",\n            value = 289\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"download\",\n            value = 6268\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"register\",\n            value = 4512\n        },\n        new\n        {\n            date = \"2018/8/4\",\n            type = \"bill\",\n            value = 428\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"download\",\n            value = 6411\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"register\",\n            value = 8281\n        },\n        new\n        {\n            date = \"2018/8/5\",\n            type = \"bill\",\n            value = 619\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"download\",\n            value = 1890\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"register\",\n            value = 2008\n        },\n        new\n        {\n            date = \"2018/8/6\",\n            type = \"bill\",\n            value = 87\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"download\",\n            value = 4251\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"register\",\n            value = 1963\n        },\n        new\n        {\n            date = \"2018/8/7\",\n            type = \"bill\",\n            value = 706\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"download\",\n            value = 2978\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"register\",\n            value = 2367\n        },\n        new\n        {\n            date = \"2018/8/8\",\n            type = \"bill\",\n            value = 387\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"download\",\n            value = 3880\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"register\",\n            value = 2956\n        },\n        new\n        {\n            date = \"2018/8/9\",\n            type = \"bill\",\n            value = 488\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"download\",\n            value = 3606\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"register\",\n            value = 678\n        },\n        new\n        {\n            date = \"2018/8/10\",\n            type = \"bill\",\n            value = 507\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"download\",\n            value = 4311\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"register\",\n            value = 3188\n        },\n        new\n        {\n            date = \"2018/8/11\",\n            type = \"bill\",\n            value = 548\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"download\",\n            value = 4116\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"register\",\n            value = 3491\n        },\n        new\n        {\n            date = \"2018/8/12\",\n            type = \"bill\",\n            value = 456\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"download\",\n            value = 6419\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"register\",\n            value = 2852\n        },\n        new\n        {\n            date = \"2018/8/13\",\n            type = \"bill\",\n            value = 689\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"download\",\n            value = 1643\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"register\",\n            value = 4788\n        },\n        new\n        {\n            date = \"2018/8/14\",\n            type = \"bill\",\n            value = 280\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"download\",\n            value = 445\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"register\",\n            value = 4319\n        },\n        new\n        {\n            date = \"2018/8/15\",\n            type = \"bill\",\n            value = 176\n        }\n    };\n\n        LineConfig config6 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"多折线图\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"指定折线颜色\"\n            },\n            Padding = \"auto\",\n            ForceFit = true,\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Label = new BaseAxisLabel()\n            },\n            Legend = new Legend\n            {\n                Position = \"right-top\"\n            },\n            SeriesField = \"type\",\n            Color= new string[] {\"#1979C9\", \"#D62A0D\", \"#FAA219\"},\n            Responsive = true,\n        };\n\n        #endregion 示例6\n\n        #region 示例7\n\n        LineConfig config7 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"自定义 marker point 激活样式\"\n            },\n            Padding = \"auto\",\n            ForceFit = true,\n            XField = \"year\",\n            YField = \"value\",\n            SeriesField = \"category\",\n            YAxis = new ValueAxis\n            {\n                Label = new BaseAxisLabel()\n            },\n            Legend = new Legend\n            {\n                Position = \"right-top\"\n            },\n            Color = new string[]\n            {\n            \"#5B8FF9\",\n            \"#5AD8A6\",\n            \"#5D7092\",\n            \"#F6BD16\",\n            \"#E8684A\",\n            \"#6DC8EC\",\n            \"#9270CA\",\n            \"#FF9D4D\",\n            \"#269A99\",\n            \"#FF99C3\",\n            },\n            Point = new LineViewConfigPoint\n            {\n                Visible = true,\n            },\n            Interactions = new Interaction[] \n            { \n                new Interaction { Type= \"marker-active\" }, \n                new Interaction { Type= \"element-active\" } \n            },\n            Responsive = true,\n            Theme = new\n            {\n                pointStyle = new\n                {\n                    normal = new { },\n                    active = new\n                    {\n                        stroke = \"rgba(0, 0, 0, 0.85)\",\n                        //r =  markerSize / 2,  //???\n                        lineWidth = 1,\n                    },\n                },\n\n                geometries = new\n                {\n                    point = new\n                    {\n                        square = new\n                        {\n                            active = new\n                            {\n                                style = new\n                                {\n                                    stroke = \"rgba(0, 0, 0, 0.85)\",\n                                    lineWidth = 1,\n                                    //r =  markerSize / 2, ???\n                                },\n                            },\n                        },\n                    },\n                },\n            }\n\n        };\n\n        #endregion 示例7\n\n    }",
        "Type": "Demos.Charts.Line.demo.MultipleLine_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "marker-point",
        "Title": "Marker Point",
        "Description": "<p>Marker point in a chart, the items always are tied to points</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Line Data=\"data1\" Config=\"config1\" OtherConfig=\"otherConfig1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Line Data=\"data2\" Config=\"config2\" OtherConfig=\"otherConfig2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Line Data=\"data3\" Config=\"config3\" OtherConfig=\"otherConfig3\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Line Data=\"data4\" Config=\"config4\" OtherConfig=\"otherConfig4\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"5\">\n            <Tab>示例5</Tab>\n            <ChildContent>\n                <AntDesign.Charts.Line Data=\"data5\" Config=\"config5\" OtherConfig=\"otherConfig5\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n        #region 示例1\n\n        object[] data1 =\n        {\n        new {date = \"2019-01-01\", value = 3},\n        new {date = \"2019-02-01\", value = 4},\n        new {date = \"2019-03-01\", value = 3.5},\n        new {date = \"2019-04-01\", value = 5},\n        new {date = \"2019-05-01\", value = 4.9, festival = \"劳动节\"},\n        new {date = \"2019-06-01\", value = 6},\n        new {date = \"2019-07-01\", value = 7},\n        new {date = \"2019-08-01\", value = 9},\n        new {date = \"2019-09-01\", value = 3},\n        new {date = \"2019-10-01\", value = 13, festival = \"国庆节\"},\n        new {date = \"2019-11-01\", value = 6},\n        new {date = \"2019-12-01\", value = 23}\n    };\n\n        LineConfig config1 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"带标注点的折线图\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"在折线图上标注重点的数据，如节假日等\"\n            },\n            ForceFit = true,\n            Padding = \"auto\",\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Nice = true\n            },\n            Label = new Label\n            {\n                Visible = false\n            }\n        };\n\n        object otherConfig1 = new\n        {\n            MarkerPoints = new object[]\n            {\n            new\n            {\n                Visible = true,\n                data = new object[] {new {date = \"2019-05-01\", value = 4.9}, new {date = \"2019-10-01\"}},\n                Label = new\n                {\n                    Visible = true,\n                    Field = \"festival\"\n                }\n            }\n            }\n        };\n\n        #endregion 示例1\n\n        #region 示例2\n\n        object[] data2 =\n        {\n        new { date =  \"2019-01-01\", value =  3 },\n          new { date =  \"2019-02-01\", value =  4 },\n          new { date =  \"2019-03-01\", value =  3.5 },\n          new { date =  \"2019-04-01\", value =  5 },\n          new { date =  \"2019-05-01\", value =  4.9, festival =  \"劳动节\" },\n          new { date =  \"2019-06-01\", value =  6 },\n          new { date =  \"2019-07-01\", value =  7 },\n          new { date =  \"2019-08-01\", value =  9 },\n          new { date =  \"2019-09-01\", value =  -7, error =  \"异常\" },\n          new { date =  \"2019-10-01\", value =  13, festival =  \"国庆节\" },\n          new { date =  \"2019-11-01\", value =  13 },\n          new { date =  \"2019-12-01\", value =  13 },\n    };\n\n        LineConfig config2 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"多种类型标注点\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"在折线图上标注重点的数据，如节假日、异常点等\"\n            },\n            ForceFit = true,\n            Padding = \"auto\",\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Nice = true\n            },\n            Label = new Label\n            {\n                Visible = false\n            }\n        };\n\n        object otherConfig2 = new\n        {\n            MarkerPoints = new object[]\n            {\n            new\n            {\n                Visible = true,\n                data = new object[] {new {date = \"2019-05-01\", value = 4.9}, new {date = \"2019-10-01\"}},\n                Label = new\n                {\n                    Visible = true,\n                    Field = \"festival\"\n                }\n            },\n            new\n            {\n                Visible = true,\n                data = new object[] { new {date = \"2019-09-01\"}},\n                symbol = \"cross\",\n                Label = new\n                {\n                    Visible = true,\n                    Field = \"festival\",\n                    position = \"bottom\",\n                    offsetY = 8,\n                },\n                Style = new\n                {\n                    normal = new{stroke= \"rgba(255, 0, 0, 0.65)\", lineWidth= 2}\n                }\n            },\n            }\n        };\n\n        #endregion 示例2\n\n        #region 示例3\n\n        object[] data3 =\n        {\n        new { date =  \"2019-01-01\", value =  3 },\n          new { date =  \"2019-02-01\", value =  4 },\n          new { date =  \"2019-03-01\", value =  3.5 },\n          new { date =  \"2019-04-01\", value =  5 },\n          new { date =  \"2019-05-01\", value =  4.9 },\n          new { date =  \"2019-06-01\", value =  6 },\n          new { date =  \"2019-07-01\", value =  7 },\n          new { date =  \"2019-08-01\", value =  9 },\n          new { date =  \"2019-09-01\", value =  3 },\n          new { date =  \"2019-10-01\", value =  16 },\n          new { date =  \"2019-11-01\", value =  6 },\n          new { date =  \"2019-12-01\", value =  8 },\n    };\n\n        LineConfig config3 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"标注最大值（带动画）\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"可通过 animation 配置标注点的动画\"\n            },\n            ForceFit = true,\n            Padding = \"auto\",\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Nice = true\n            },\n            Label = new Label\n            {\n                Visible = false\n            }\n        };\n\n        object otherConfig3 = new\n        {\n            MarkerPoints = new object[]\n            {\n            new\n            {\n                Visible = true,\n                data = new object[] {new { value = \"maxValue\"} },\n                Label = new\n                {\n                    Visible = true,\n                    formatter = \"最大值\",\n                },\n                style = new\n                {\n                    normal = new { fill =  \"rgba(255, 0, 0, 0.65)\" },\n                },\n                animation = new\n                {\n                    endState = new\n                    {\n                      size =  4,\n                      opacity =  0.3\n                    },\n                    animateCfg = new\n                    {\n                      duration =  1500,\n                      easing =  \"easeLinear\",\n                      repeat =  true,\n                      delay =  1200,\n                    },\n                },\n            }\n    }\n        };\n\n        #endregion 示例3\n\n        #region 示例4\n\n        object[] data4 =\n        {\n        new { date =  \"2019-01-01\", value =  3 },\n          new { date =  \"2019-02-01\", value =  4 },\n          new { date =  \"2019-03-01\", value =  3.5 },\n          new { date =  \"2019-04-01\", value =  5 },\n          new { date =  \"2019-05-01\", value =  4.9 },\n          new { date =  \"2019-06-01\", value =  6 },\n          new { date =  \"2019-07-01\", value =  7 },\n          new { date =  \"2019-08-01\", value =  9 },\n          new { date =  \"2019-09-01\", value =  3 },\n          new { date =  \"2019-10-01\", value =  23 },\n          new { date =  \"2019-11-01\", value =  6 },\n          new { date =  \"2019-12-01\", value =  8 },\n    };\n\n        LineConfig config4 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"自定义标注点 symbol\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"内置 symbol 类型有：cross, hexagon, bowtie, tick, plus, hyphen, line\"\n            },\n            ForceFit = true,\n            Padding = \"auto\",\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Nice = true\n            },\n            Label = new Label\n            {\n                Visible = false\n            }\n        };\n\n        object otherConfig4 = new\n        {\n            MarkerPoints = new object[]\n            {\n            new\n            {\n                visible =  true,\n                data = new object[] {new { value =  23 } },\n                label = new\n                {\n                    visible =  true,\n                    formatter =   \"最大值\",\n                },\n                size =  12,\n                style = new\n                {\n                    normal = new { fill =  \"rgba(255, 255, 0, 0.85)\", stroke =  \"rgba(0,0,0,0.65)\", lineWidth =  1 },\n                },\n                animation = new\n                {\n                    endState = new { size =  4, opacity =  0.3 },\n                    animateCfg = new\n                    {\n                        duration =  1500,\n                        easing =  \"easeLinear\",\n                        repeat =  true,\n                        delay =  1200,\n                    },\n                },\n            },\n            },\n        };\n\n\n        #endregion 示例4\n\n        #region 示例5\n\n        object[] data5 =\n        {\n        new { date =  \"2019-01-01\", value =  3 },\n          new { date =  \"2019-02-01\", value =  4 },\n          new { date =  \"2019-03-01\", value =  3.5 },\n          new { date =  \"2019-04-01\", value =  5 },\n          new { date =  \"2019-05-01\", value =  4.9 },\n          new { date =  \"2019-06-01\", value =  6 },\n          new { date =  \"2019-07-01\", value =  7 },\n          new { date =  \"2019-08-01\", value =  9 },\n          new { date =  \"2019-09-01\", value =  7 },\n          new { date =  \"2019-10-01\", value =  13 },\n          new { date =  \"2019-11-01\", value =  13 },\n          new { date =  \"2019-12-01\", value =  13 },\n    };\n\n        LineConfig config5 = new LineConfig\n        {\n            Title = new Title\n            {\n                Visible = true,\n                Text = \"使用 image 定义标注点\"\n            },\n            Description = new Description\n            {\n                Visible = true,\n                Text = \"除了内置 symbol，还可以通过 'image://url' 设置为图片，其中 url 为图片的链接\"\n            },\n            ForceFit = true,\n            Padding = \"auto\",\n            XField = \"date\",\n            YField = \"value\",\n            YAxis = new ValueAxis\n            {\n                Nice = true\n            },\n            Label = new Label\n            {\n                Visible = false\n            }\n        };\n\n        object otherConfig5 = new\n        {\n            MarkerPoints = new object[]\n            {\n            new\n            {\n                visible =  true,\n                data = new object[] {new{ date =  \"2019-09-01\" } },\n                size =  20,\n                symbol =  \"image://https://gw.alipayobjects.com/mdn/rms_a30de3/afts/img/A*66RtR4cXNWoAAAAAAAAAAABkARQnAQ\",\n                label =  new\n                {\n                    visible =  true,\n                    position =  \"bottom\",\n                    offsetY =  8,\n                },\n                style =  new\n                {\n                // 关闭动态样式\n                normal = new { lineWidth =  0, fill =  \"transparent\" },\n                active = new { lineWidth =  0, fill =  \"transparent\" },\n                selected = new { lineWidth =  0, fill =  \"transparent\" },\n                },\n            },\n        }\n    };\n\n    #endregion 示例5\n\n}",
        "Type": "Demos.Charts.Line.demo.MarkerPoint_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Treemap",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "treemap",
        "Title": "Treemap",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <Treemap Data=\"data1\" Config=\"config1\" />\n        </ChildContent>\n    </TabPane>\n\n    @*<TabPane Key=\"2\">\n        <Tab>示例2</Tab>\n        <ChildContent>\n            <Treemap Data=\"data2\" Config=\"config2\" />\n        </ChildContent>\n    </TabPane>\n\n    <TabPane Key=\"3\">\n        <Tab>示例3</Tab>\n        <ChildContent>\n            <Treemap Data=\"data3\" Config=\"config3\" />\n        </ChildContent>\n    </TabPane>*@\n</Tabs>\n\n@code{\n\n    BasementProdItem[] data2;\n    BasementProdItem[] data3;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data2 = await ChartsDemoData.BasementProdAsync(NavigationManager, HttpClient);\n        data3 = await ChartsDemoData.BasementProdAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    readonly Data data1 = new Data\n    {\n        Name = \"root\",\n        Children = new List<TreemapDataItem>\n    {\n            new TreemapDataItem {Name = \"分类 1\", Value = 560},\n            new TreemapDataItem {Name = \"分类 2\", Value = 500},\n            new TreemapDataItem {Name = \"分类 3\", Value = 150},\n            new TreemapDataItem {Name = \"分类 4\", Value = 140},\n            new TreemapDataItem {Name = \"分类 5\", Value = 115},\n            new TreemapDataItem {Name = \"分类 6\", Value = 95},\n            new TreemapDataItem {Name = \"分类 7\", Value = 90},\n            new TreemapDataItem {Name = \"分类 8\", Value = 75},\n            new TreemapDataItem {Name = \"分类 9\", Value = 98},\n            new TreemapDataItem {Name = \"分类 10\", Value = 60},\n            new TreemapDataItem {Name = \"分类 11\", Value = 45},\n            new TreemapDataItem {Name = \"分类 12\", Value = 40},\n            new TreemapDataItem {Name = \"分类 13\", Value = 40},\n            new TreemapDataItem {Name = \"分类 14\", Value = 35},\n            new TreemapDataItem {Name = \"分类 15\", Value = 40},\n            new TreemapDataItem {Name = \"分类 16\", Value = 40},\n            new TreemapDataItem {Name = \"分类 17\", Value = 40},\n            new TreemapDataItem {Name = \"分类 18\", Value = 30},\n            new TreemapDataItem {Name = \"分类 19\", Value = 28},\n            new TreemapDataItem {Name = \"分类 20\", Value = 16}\n        },\n        Value = 2237\n    };\n\n    readonly TreemapConfig config1 = new TreemapConfig\n    {\n        ColorField = \"name\"\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n\n    readonly TreemapConfig config2 = new TreemapConfig\n    {\n        ColorField = \"brand\"\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n\n    readonly TreemapConfig config3 = new TreemapConfig\n    {\n\n        ColorField = \"name\",\n        Interactions = new Interaction[]\n        {\n            new Interaction\n            {\n                  Type =  \"drilldown\",\n                  Cfg =  new\n                  {\n                        mapping =  new\n                        {\n                              //1 =  new\n                              //{\n                              //  field =  \"name\",\n                              //},\n                              //2 = new\n                              //{\n                              //      field =  \"name\",\n                              //      values =  [\"#f5bc32\", \"#e66557\", \"#71c8ea\", \"#9362b7\", \"#fd984f\", \"#279493\", \"#fd9bc3\"],\n                              // },\n                              // 3 = new\n                              // {\n                              //      field =  \"value\",\n                              //      //values =  (parent) => {\n                              //      //  return [\"#ffffff\", parent.color];\n                              //      //},\n                              // },\n                        },\n                  },\n            }\n        }\n    };\n\n    #endregion 示例3\n\n    public class Data : ITreemapData<TreemapDataItem>\n    {\n        public string Name { get; set; }\n        public IEnumerable<TreemapDataItem> Children { get; set; }\n        public int Value { get; set; }\n    }\n\n    public class TreemapDataItem\n    {\n        public string Name { get; set; }\n        public decimal Value { get; set; }\n    }\n\n}",
        "Type": "Demos.Charts.Treemap.demo.Treemap_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Scatter",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "scatter",
        "Title": "Scatter",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Scatter @ref=\"chart1\" Data=\"data1\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Scatter @ref=\"chart2\" Data=\"data2\" Config=\"config2\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Scatter  Data=\"data3\" Config=\"config3\" />\n            </ChildContent>\n        </TabPane>\n\n        @*<TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <Scatter @ref=\"chart4\" Data=\"data4\" Config=\"config4\" />\n            </ChildContent>\n        </TabPane>*@\n    </Tabs>\n\n@code{\n\n    IChartComponent chart1;\n    IMDBItem[] data1;\n\n    IChartComponent chart2;\n    BasementProdItem[] data2;\n\n    //IChartComponent chart4;\n    //IMDBItem[] data4;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data1 = await ChartsDemoData.IMDBAsync(NavigationManager, HttpClient);\n        await chart1.ChangeData(data1);\n\n        data2 = await ChartsDemoData.BasementProdAsync(NavigationManager, HttpClient);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    readonly ScatterConfig config1 = new ScatterConfig\n    {\n        XField = \"revenue\",\n        YField = \"rating\",\n        XAxis = new ValueTimeAxis\n        {\n            Visible = true,\n            Min = -5\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly ScatterConfig config2 = new ScatterConfig\n    {\n        XField = \"Revenue (Millions)\",\n        YField = \"Rating\",\n        ColorField = \"Genre\",\n        Color = new string[] { \"#d62728\", \"#2ca02c\", \"#000000\", \"#9467bd\", \"#ffd500\", \"#1f77b4\", \"#00518a\", \"#ffbc69\", \"#9bd646\" },\n        PointStyle = new GraphicStyle\n        {\n            FillOpacity = 1,\n        },\n        XAxis = new ValueTimeAxis\n        {\n            Visible = true,\n            Min = -5\n        }\n    };\n\n    #endregion 示例2\n\n    #region 示例3\n\n    object[] data3 = new object[]\n    {\n          new { x =  1, y =  4.181 },\n          new { x =  2, y =  4.665 },\n          new { x =  3, y =  5.296 },\n          new { x =  4, y =  5.365 },\n          new { x =  5, y =  5.448 },\n          new { x =  6, y =  5.744 },\n          new { x =  7, y =  5.653 },\n          new { x =  8, y =  5.844 },\n          new { x =  9, y =  6.362 },\n          new { x =  10, y =  6.38 },\n          new { x =  11, y =  6.311 },\n          new { x =  12, y =  6.457 },\n          new { x =  13, y =  6.479 },\n          new { x =  14, y =  6.59 },\n          new { x =  15, y =  6.74 },\n          new { x =  16, y =  6.58 },\n          new { x =  17, y =  6.852 },\n          new { x =  18, y =  6.531 },\n          new { x =  19, y =  6.682 },\n          new { x =  20, y =  7.013 },\n          new { x =  21, y =  6.82 },\n          new { x =  22, y =  6.647 },\n          new { x =  23, y =  6.951 },\n          new { x =  24, y =  7.121 },\n          new { x =  25, y =  7.143 },\n          new { x =  26, y =  6.914 },\n          new { x =  27, y =  6.941 },\n          new { x =  28, y =  7.226 },\n          new { x =  29, y =  6.898 },\n          new { x =  30, y =  7.392 },\n          new { x =  31, y =  6.938 },\n    };\n\n    readonly ScatterConfig config3 = new ScatterConfig\n    {\n        Padding = \"auto\",\n\n        XField = \"x\",\n        YField = \"y\",\n        PointStyle = new GraphicStyle\n        {\n            Stroke = \"#777777\",\n            LineWidth = 1,\n        },\n        Trendline = new TrendlineConfig\n        {\n            Visible = true,\n            Type = \"quad\",\n            ShowConfidence = true,\n        },\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    //readonly ScatterConfig config4 = new ScatterConfig\n    //{\n    //    XField = \"revenue\",\n    //    YField = \"rating\",\n    //    XAxis = new ValueTimeAxis\n    //    {\n    //        Visible = true,\n    //        Min = -5\n    //    }\n    //};\n\n    #endregion 示例4\n\n}",
        "Type": "Demos.Charts.Scatter.demo.Scatter_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "CalendarChart",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "calendar",
        "Title": "Calendar",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n@inject NavigationManager NavigationManager\n@inject HttpClient HttpClient\n\n<Tabs>\n    <TabPane Key=\"1\">\n        <Tab>示例1</Tab>\n        <ChildContent>\n            <AntDesign.Charts.Calendar @ref=\"chart1\" Data=\"data1\" Config=\"config1\" OtherConfig=\"otherConfig1\"/>\n        </ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n    IChartComponent chart1;\n    ContributionsItem[] data1;\n\n    protected override async Task OnInitializedAsync()\n    {\n        data1 = await ChartsDemoData.ContributionsItemAsync(NavigationManager, HttpClient);\n        await chart1.ChangeData(data1);\n\n        await base.OnInitializedAsync();\n    }\n\n    #region 示例1\n\n    CalendarConfig config1 = new CalendarConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"GitHub contribution\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"853 contributions in the last year.\"\n        },\n        Width = 650,\n        Height = 300,\n        Padding = \"auto\",\n        XAxis = new Axis\n        {\n            Title = new BaseAxisTitle\n            {\n                Text = \"月份\"\n            }\n        },\n        YAxis = new Axis\n        {\n            Title = null\n        },\n        Label = new Label\n        {\n            Visible = true\n        }\n    };\n\n    object otherConfig1 = new\n    {\n        DateField = \"date\",\n        ValueField = \"commits\",\n        DateRange = new[] {\"2017-05-01\", \"2017-10-31\"},\n        Colors = \"#BAE7FF-#1890FF-#0050B3\"\n    };\n\n    #endregion 示例1\n\n}",
        "Type": "Demos.Charts.Calendar.demo.Calendar_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Bullet",
    "Type": "Charts",
    "Desc": "<h2>When To Use</h2>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "bullet",
        "Title": "Bullet",
        "Description": "<p>Description about this component.</p>\n",
        "Code": "@using AntDesign.Charts\n@using Title = AntDesign.Charts.Title\n\n    <Tabs>\n        <TabPane Key=\"1\">\n            <Tab>示例1</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"2\">\n            <Tab>示例2</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config2\" OtherConfig=\"config2_1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"3\">\n            <Tab>示例3</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config3\" OtherConfig=\"config3_1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"4\">\n            <Tab>示例4</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config4\" OtherConfig=\"config4_1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"5\">\n            <Tab>示例5</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config5\" OtherConfig=\"config5_1\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"6\">\n            <Tab>示例6</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config6\" />\n            </ChildContent>\n        </TabPane>\n\n        <TabPane Key=\"7\">\n            <Tab>示例7</Tab>\n            <ChildContent>\n                <Bullet TItem=\"string\" Config=\"config7\" OtherConfig=\"config7_1\" />\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n\n@code{\n\n    #region 示例1\n\n    readonly BulletConfig config1 = new BulletConfig\n    {\n        Data = new[]\n        {\n            new BulletViewConfigData\n            {\n                Title = \"满意度\",\n                Measures = new[] {83},\n                Targets = new[] {90}\n            }\n        },\n        RangeMax = 100,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础子弹图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设定子弹图的目标值(goal)和当前进度(value)，即可展示子弹图进度情况；若没有设置最大值(max)，则最大值等于目标值\"\n        }\n    };\n\n    #endregion 示例1\n\n    #region 示例2\n\n    readonly BulletConfig config2 = new BulletConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础子弹图-带多颜色范围区间\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"自定义图例，表示各颜色范围区间代表的含义（如差、良、优）\"\n        },\n        Data = new[]\n        {\n            new BulletViewConfigData\n            {\n                Title = \"满意度\",\n                Measures = new int[] {83},\n                Targets = new int[] {90},\n                Ranges = new double[] {0, 0.6, 0.9, 1},\n\n            }\n        },\n        RangeMax = 100,\n        RangeColors = new string[] { \"#FFB1AC\", \"#FFDBA2\", \"#B4EBBF\" }\n    };\n\n    readonly object config2_1 = new\n    {\n        legend = new\n        {\n            custom = true,\n            item = new []\n            {\n                        new\n                        {\n                            name = \"实际进度\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色\n                               \n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"目标值\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"差\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#FFB1AC\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"良\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#FFDBA2\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"优\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#B4EBBF\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n\n                    }\n        }\n    };\n\n\n    #endregion 示例2\n\n    #region 示例3\n\n    readonly BulletConfig config3 = new BulletConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础子弹图-超出目标\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"当进度超出子弹图最大值时，会突出显示\"\n        },\n        Data = new[]\n{\n            new BulletViewConfigData\n            {\n                Title = \"满意度\",\n                Measures = new[] {140},\n                Targets = new[] {90},\n                Ranges = new double[]{ 0, 0.6, 0.9, 1 },\n            }\n        },\n        RangeMax = 100,\n        RangeColors = new string[] { \"#FFB1AC\", \"#FFDBA2\", \"#B4EBBF\" },\n    };\n\n    readonly object config3_1 = new\n    {\n        legend = new\n        {\n            custom = true,\n            item = new[]\n            {\n                    new\n                    {\n                        name = \"实际进度\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色                              \n                            }\n                        }\n                    },\n                    new\n                    {\n                        name = \"差\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#FFB1AC\", // 该图例项 marker 的填充颜色\n                            }\n                        }\n                    },\n                    new\n                    {\n                        name = \"良\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#FFDBA2\", // 该图例项 marker 的填充颜色\n                            }\n                        }\n                    },\n                    new\n                    {\n                        name = \"优\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#B4EBBF\", // 该图例项 marker 的填充颜色\n                            }\n                        }\n                    },\n            }\n        }\n    };\n\n    #endregion 示例3\n\n    #region 示例4\n\n    readonly BulletConfig config4 = new BulletConfig\n    {\n        Data = new[]\n        {\n            new BulletViewConfigData\n            {\n                Title = \"满意度\",\n                Measures = new[] {87},\n                Targets = new[] {80,95}\n            }\n        },\n        RangeMax = 100,\n        RangeColors = new string[] { \"#5B8FF9\", \"#5AD8A6\" },\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"基础子弹图-多目标值\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设定子弹图的目标值(goal)和当前进度(value)，即可展示子弹图进度情况；若没有设置最大值(max)，则最大值等于目标值\"\n        },\n    };\n\n    readonly object config4_1 = new\n    {\n        legend = new\n        {\n            custom = true,\n            item = new[]\n            {\n                    new\n                    {\n                        name = \"实际进度\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色                              \n                            }\n                        }\n                    },\n                    new\n                    {\n                        name = \"目标值 1\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"line\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色\n                            }\n                        }\n                    },\n                    new\n                    {\n                        name = \"目标值 2\",  // 图例项的文本内容\n                        marker = new\n                        {\n                            symbol = \"line\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                            style = new\n                            {\n                                fill = \"#5AD8A6\", // 该图例项 marker 的填充颜色\n                            }\n                        }\n                    },\n            }\n        }\n    };\n\n    #endregion 示例4\n\n    #region 示例5\n\n    readonly BulletConfig config5 = new BulletConfig\n    {\n        Data = new[]\n    {\n            new BulletViewConfigData\n            {\n                Title = \"满意度\",\n                Measures = new[] {30, 40, 10, 20},\n                Targets = new[] {90}\n            }\n        },\n        RangeMax = 100,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"堆叠子弹图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"设定子弹图的目标值(goal)和当前进度(value)，即可展示子弹图进度情况；若没有设置最大值(max)，则最大值等于目标值\",\n        },\n        Label = new\n        {\n            offset = -6,\n        },\n    };\n\n    readonly object config5_1 = new\n    {\n    };\n\n    #endregion 示例5\n\n    #region 示例6\n\n    readonly BulletConfig config6 = new BulletConfig\n    {\n        Data = new[]\n    {\n            new BulletViewConfigData\n            {\n                Title = \"广州\",\n                Measures = new[] {83},\n                Targets = new[] {90}\n            },\n            new BulletViewConfigData\n            {\n                Title = \"深圳\",\n                Measures = new[] {13},\n                Targets = new[] {90}\n            },\n            new BulletViewConfigData\n            {\n                Title = \"珠海\",\n                Measures = new[] {45},\n                Targets = new[] {80}\n            },\n            new BulletViewConfigData\n            {\n                Title = \"汕头\",\n                Measures = new[] {83},\n                Targets = new[] {70}\n            },\n        },\n        RangeMax = 100,\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组子弹图\"\n        },\n        Description = new Description\n        {\n            Visible = true,\n            Text = \"当data数组由多个值时，可以展示多条子弹图进行进度对比\"\n        }\n    };\n\n    #endregion 示例6\n\n    #region 示例7\n\n    readonly BulletConfig config7 = new BulletConfig\n    {\n        Title = new Title\n        {\n            Visible = true,\n            Text = \"分组子弹图-带颜色范围区间\"\n        },\n        Data = new[]\n        {\n            new BulletViewConfigData\n            {\n                Title = \"广州\",\n                Measures = new[] {83},\n                Targets = new[] {90},\n                Ranges = new double[]{ 0, 0.6, 0.9, 1 },\n\n            },\n            new BulletViewConfigData\n            {\n                Title = \"深圳\",\n                Measures = new[] {73},\n                Targets = new[] {90},\n                Ranges = new double[]{ 0, 0.6, 0.9, 1 },\n            },\n            new BulletViewConfigData\n            {\n                Title = \"珠海\",\n                Measures = new[] {65},\n                Targets = new[] {80},\n                Ranges = new double[]{ 0, 0.6, 0.75, 1 },\n            },\n            new BulletViewConfigData\n            {\n                Title = \"汕头\",\n                Measures = new[] {83},\n                Targets = new[] {70},\n                Ranges = new double[]{ 0, 0.6, 0.75, 1 },\n            },\n        },\n        RangeMax = 100,\n        RangeColors = new string[] { \"#FFB1AC\", \"#FFDBA2\", \"#B4EBBF\" },\n        Legend = new Legend\n        {\n            Custom = true,\n        }\n    };\n\n    readonly object config7_1 = new\n    {\n        legend = new\n        {\n            custom = true,\n            item = new[]\n                    {\n                        new\n                        {\n                            name = \"实际进度\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色\n                               \n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"目标值\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"line\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#5B8FF9\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"差\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#FFB1AC\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"良\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#FFDBA2\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n                        new\n                        {\n                            name = \"优\",  // 图例项的文本内容\n                            marker = new\n                            {\n                                symbol = \"square\",  // 该图例项 marker 的形状，参见 marker 参数的说明\n                                style = new\n                                {\n                                    fill = \"#B4EBBF\", // 该图例项 marker 的填充颜色\n                                }\n                            }\n                        },\n\n                    }\n        }\n    };\n\n    #endregion 示例7\n\n}",
        "Type": "Demos.Charts.Bullet.demo.Bullet_",
        "Style": "",
        "Debug": false
      }
    ]
  }
]