[
  {
    "Title": "Skeleton",
    "SubTitle": "骨架屏",
    "Type": "反馈",
    "Desc": "<p>在需要等待加载内容的位置提供一个占位图形组合。</p>\n<h2>何时使用</h2>\n<ul>\n<li>网络较慢，需要长时间等待加载处理的情况下。</li>\n<li>图文信息内容较多的列表/卡片中。</li>\n<li>只适合用在第一次加载数据的场景。</li>\n<li>可以被 Spin 完全代替，但是在可用的场景下可以比 Spin 提供更好的视觉效果和用户体验</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Skeleton</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>是否展示动画效果</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Avatar</code></td>\n<td>是否显示头像占位图</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>AvatarSize</code></td>\n<td>设置头像占位图的大小</td>\n<td><code>int \\| 'large' \\| 'small' \\| 'default'</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>AvatarShape</code></td>\n<td>指定头像的形状</td>\n<td><code>'circle' \\| 'square'</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Loading</code></td>\n<td>为 <code>true</code> 时，显示占位图。反之则直接展示子组件</td>\n<td><code>boolean</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Paragraph</code></td>\n<td>是否显示段落占位图</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>ParagraphRows</code></td>\n<td>设置段落占位图的行数</td>\n<td><code>int</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ParagraphWidth</code></td>\n<td>设置标题占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度</td>\n<td><code>int \\| string \\| Array&lt;int \\| string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Title</code></td>\n<td>是否显示标题占位图</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>TitleWidth</code></td>\n<td>设置标题占位图的宽度</td>\n<td><code>int \\| string</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;button&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>是否展示动画效果</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>大小</td>\n<td><code>'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n<tr>\n<td><code>Shape</code></td>\n<td>形状</td>\n<td><code>'circle' \\| 'round' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;avatar&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>是否展示动画效果</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>大小</td>\n<td><code>int \\| 'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n<tr>\n<td><code>Shape</code></td>\n<td>形状</td>\n<td><code>'circle' \\| 'square'</code></td>\n<td><code>'square'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;input&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>是否展示动画效果</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>大小</td>\n<td><code>'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 3,
        "Name": "children",
        "Title": "包含子组件",
        "Description": "<p>加载占位图包含子组件。</p>\n",
        "Code": "<div class=\"article\">\n    <Skeleton Loading=\"@_loading\">\n        <h4>Ant Design, a design language</h4>\n        <p>\n            We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people\n            create their product prototypes beautifully and efficiently.\n        </p>\n    </Skeleton>\n    <Button @onclick=\"showSkeleton\" Disabled=\"@_loading\">\n        Show Skeleton\n    </Button>\n</div>\n\n<style>\n    .article h4 {\n        margin-bottom: 16px;\n    }\n\n    .article button {\n        margin-top: 16px;\n    }\n</style>\n\n@code{\n    private bool _loading = false;\n\n    private async Task showSkeleton()\n    {\n        this._loading = true;\n        await Task.Delay(3000);\n        this._loading = false;\n    }\n}",
        "Type": "Demos.Skeleton.demo.Children",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<Skeleton></Skeleton>",
        "Type": "Demos.Skeleton.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "element",
        "Title": "骨架按钮、头像和输入框。",
        "Description": "<p>骨架按钮、头像和输入框。</p>\n",
        "Code": "<Row Align=\"middle\" Gutter=\"8\">\n    <Col Span=\"5\">\n    ButtonActive:\n    <Switch @bind-Value=\"@_buttonActive\"></Switch>\n    </Col>\n    <Col Span=\"9\">\n    ButtonSize:\n    <RadioGroup @bind-Value=\"@_buttonSize\">\n        <Radio Value=\"default\">Default</Radio>\n        <Radio Value=\"large\">Large</Radio>\n        <Radio Value=\"small\">Small</Radio>\n    </RadioGroup>\n    </Col>\n    <Col Span=\"9\">\n    ButtonShape:\n    <RadioGroup @bind-Value=\"@_buttonShape\">\n        <Radio Value=\"default\">Default</Radio>\n        <Radio Value=\"circle\">Circle</Radio>\n        <Radio Value=\"round\">Round</Radio>\n    </RadioGroup>\n    </Col>\n</Row>\n<br />\n<SkeletonElement Type=\"button\" Active=\"@_buttonActive\" Size=\"@_buttonSize\" Shape=\"@_buttonShape\"></SkeletonElement>\n<br />\n<br />\n<Row Align=\"middle\" Gutter=\"8\">\n    <Col Span=\"5\">\n    AvatarActive:\n    <Switch @bind-Value=\"@_avatarActive\"></Switch>\n    </Col>\n    <Col Span=\"9\">\n    AvatarSize:\n    <RadioGroup @bind-Value=\"@_avatarSize\">\n        <Radio Value=\"default\">Default</Radio>\n        <Radio Value=\"large\">Large</Radio>\n        <Radio Value=\"small\">Small</Radio>\n    </RadioGroup>\n    </Col>\n    <Col Span=\"9\">\n    AvatarShape:\n    <RadioGroup @bind-Value=\"@_avatarShape\">\n        <Radio Value=\"circle\">Circle</Radio>\n        <Radio Value=\"square\">Square</Radio>\n    </RadioGroup>\n    </Col>\n</Row>\n<br />\n<SkeletonElement Type=\"avatar\" Active=\"@_avatarActive\" Size=\"@_avatarSize\" Shape=\"@_avatarShape\"></SkeletonElement>\n<br />\n<br />\n<Row Align=\"middle\" Gutter=\"8\">\n    <Col Span=\"5\">\n    InputActive:\n    <Switch @bind-Value=\"@_inputActive\"></Switch>\n    </Col>\n    <Col Span=\"9\">\n    InputSize:\n    <RadioGroup @bind-Value=\"@_inputSize\">\n        <Radio Value=\"default\">Default</Radio>\n        <Radio Value=\"large\">Large</Radio>\n        <Radio Value=\"small\">Small</Radio>\n    </RadioGroup>\n    </Col>\n</Row>\n<br />\n<SkeletonElement Type=\"input\" Active=\"@_inputActive\" Size=\"@_inputSize\" style=\"width:300px\"></SkeletonElement>\n\n@code{\n    bool _buttonActive = false;\n    bool _avatarActive = false;\n    bool _inputActive = false;\n    string _buttonSize = SkeletonElementSize.Default;\n    string _avatarSize = SkeletonElementSize.Default;\n    string _inputSize = SkeletonElementSize.Default;\n    string _buttonShape = SkeletonButtonShape.Default;\n    string _avatarShape = SkeletonAvatarShape.Circle;\n}",
        "Type": "Demos.Skeleton.demo.Element",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "list",
        "Title": "列表样例",
        "Description": "<p>在列表组件中使用加载占位符。</p>\n",
        "Code": "<Switch Checked=\"@_loading\" @bind-Value=\"@_loading\"></Switch>\n\n<AntList DataSource=\"@_listData\">\n    <Item Context=\"item\">\n        <Skeleton Loading=\"@_loading\" Active=\"true\" Avatar=\"true\">\n            <AntListItemMeta Avatar=\"@item.Avatar\" Description=\"@item.Description\">\n                <Title>\n                    <a href=\"@item.Href\">@item.Title</a>\n                </Title>\n            </AntListItemMeta>\n            @item.Content\n        </Skeleton>\n    </Item>\n</AntList>\n\n@code{\n    bool _loading = true;\n\n    List<DataItem> _listData = new List<int>() { 1, 2, 3 }.Select(x => new DataItem()\n    {\n\n        Href = \"http://ng.ant.design\",\n        Title = $\"ant design part {x}\",\n        Avatar = \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n        Description = \"Ant Design, a design language for background applications, is refined by Ant UED Team.\",\n        Content =\n                  \"We supply a series of design principles, practical patterns and high quality design resources \" +\n                  \"(Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\"\n    }).ToList();\n\n\n    private class DataItem\n    {\n        public string Href { get; set; }\n        public string Title { get; set; }\n        public string Avatar { get; set; }\n        public string Description { get; set; }\n        public string Content { get; set; }\n\n    }\n}\n\n",
        "Type": "Demos.Skeleton.demo.List",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "complex",
        "Title": "复杂的组合",
        "Description": "<p>更复杂的组合。</p>\n",
        "Code": "<Skeleton Avatar=\"true\" ParagraphRows=\"4\"></Skeleton>",
        "Type": "Demos.Skeleton.demo.Complex",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "active",
        "Title": "动画效果",
        "Description": "<p>显示动画效果。</p>\n",
        "Code": "<Skeleton Active=\"true\"></Skeleton>",
        "Type": "Demos.Skeleton.demo.Active",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Avatar",
    "SubTitle": "头像",
    "Type": "数据展示",
    "Desc": "<p>用来代表用户或事物，支持图片、图标或字符展示。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 2,
        "Name": "dynamic",
        "Title": "自动调整字符大小",
        "Description": "<p>对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。</p>\n",
        "Code": "<div>\n    <Avatar Style=\"@($\"background-color: {color}; vertical-align: middle;\")\" Size=\"large\">\n        @user\n    </Avatar>\n    <Button\n        Size=\"small\"\n        Style=\"margin:0 16px; vertical-align: middle;\"\n        OnClick=\"_=>changeUser()\"\n    >\n        Change\n    </Button>\n</div>\n\n@code\n{\n    private static string[] userList = {\"U\", \"Lucy\", \"Tom\", \"Edward\"};\n    private static string[] colorList = {\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"};\n\n    private string user { get; set; } = userList[0];\n    private string color { get; set; } = colorList[0];\n\n    private void changeUser()\n    {\n        var index = Array.IndexOf(userList, user);\n        user = index < userList.Length - 1 ? userList[index + 1] : userList[0];\n        color = index < colorList.Length - 1 ? colorList[index + 1] : colorList[0];\n    }\n}\n",
        "Type": "Demos.Avatar.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "type",
        "Title": "类型",
        "Description": "<p>支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。</p>\n",
        "Code": "<div>\n    <Avatar Icon=\"user\" />\n    <Avatar>U</Avatar>\n    <Avatar>USER</Avatar>\n    <Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n    <Avatar Style=\"color: #f56a00; background-color: #fde3cf; \">U</Avatar>\n    <Avatar Style=\"background-color: #87d068\" Icon=\"user\" />\n</div>",
        "Type": "Demos.Avatar.demo.Type",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>头像有三种尺寸，两种形状可选。</p>\n",
        "Code": "<div>\n    <div>\n        <Avatar Size=\"64\" Icon=\"user\" />\n        <Avatar Size=\"large\" Icon=\"user\" />\n        <Avatar Icon=\"user\" />\n        <Avatar Size=\"small\" Icon=\"user\" />\n    </div>\n    <div>\n        <Avatar Shape=\"square\" Size=\"64\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Size=\"large\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Icon=\"user\" />\n        <Avatar Shape=\"square\" Size=\"small\" Icon=\"user\" />\n    </div>\n</div>",
        "Type": "Demos.Avatar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "badge",
        "Title": "带徽标的头像",
        "Description": "<p>通常用于消息提示。</p>\n",
        "Code": "<div>\n    <span class=\"avatar-item\">\n        <Badge Count=\"1\">\n            <Avatar Shape=\"square\" Icon=\"user\" />\n        </Badge>\n    </span>\n    <span>\n        <Badge Dot>\n            <Avatar Shape=\"square\" Icon=\"user\"/>\n        </Badge>\n    </span>\n</div>",
        "Type": "Demos.Avatar.demo.Badge_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Button",
    "SubTitle": "按钮",
    "Type": "通用",
    "Desc": "<p>按钮用于开始一个即时操作。</p>\n<h2>何时使用</h2>\n<p>标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。</p>\n<p>在 Ant Design 中，我们有四种按钮。</p>\n<ul>\n<li>主按钮：用于主行动点，一个操作区域只能有一个主按钮。</li>\n<li>默认按钮：用于没有主次之分的一组行动点。</li>\n<li>虚线按钮：常用于添加操作。</li>\n<li>链接按钮：用于次要或外链的行动点。</li>\n</ul>\n<p>以及四种状态属性与上面配合使用。</p>\n<ul>\n<li>危险：删除/移动/修改权限等危险操作，一般需要二次确认。</li>\n<li>幽灵：用于背景色比较复杂的地方，常用在首页/产品页等展示场景。</li>\n<li>禁用：行动点不可用的时候，一般需要文案解释。</li>\n<li>加载中：用于异步操作等待反馈的时候，也可以避免多次提交。</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 1,
        "Name": "icon",
        "Title": "图标按钮",
        "Description": "<p>当需要在 <code>Button</code> 内嵌入 <code>Icon</code> 时，可以设置 <code>icon</code> 属性，或者直接在 <code>Button</code> 内使用 <code>Icon</code> 组件。</p>\n<p>如果想控制 <code>Icon</code> 具体的位置，只能直接使用 <code>Icon</code> 组件，而非 <code>icon</code> 属性。</p>\n",
        "Code": "<div>\n    @*<Tooltip title=\"search\">\n        <Button Type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Type=\"primary\" Shape=\"circle\">\n        A\n    </Button>\n    <Button Type=\"primary\" Icon=\"search\">\n    Search\n    </Button>\n    @*<Tooltip title=\"search\">\n        <Button shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Icon=\"search\">Search</Button>\n    <br />\n    @*<Tooltip title=\"search\">\n        <Button shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Icon=\"search\">Search</Button>\n    @*<Tooltip title=\"search\">\n        <Button Type=\"dashed\" shape=\"circle\" icon={<SearchOutlined />} />\n    </Tooltip>*@\n    <Button Type=\"dashed\" Icon=\"search\">\n    Search\n    </Button>\n</div>",
        "Type": "Demos.Button.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "不可用状态",
        "Description": "<p>添加 <code>disabled</code> 属性即可让按钮处于不可用状态，同时按钮样式也会改变。</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\">Primary</Button>\n    <Button Type=\"primary\" Disabled>\n        Primary(disabled)\n    </Button>\n    <br />\n    <Button>Default</Button>\n    <Button Disabled>Default(disabled)</Button>\n    <br />\n    <Button Type=\"dashed\">Dashed</Button>\n    <Button Type=\"dashed\" Disabled>\n        Dashed(disabled)\n    </Button>\n    <br />\n    <Button Type=\"link\">Link</Button>\n    <Button Type=\"link\" Disabled>\n        Link(disabled)\n    </Button>\n    <br />\n    <Button Type=\"link\" Danger>\n        Danger Link\n    </Button>\n    <Button Type=\"link\" Danger Disabled>\n        Danger Link(disabled)\n    </Button>\n    <br />\n    <Button Danger>Danger Default</Button>\n    <Button Danger Disabled>\n        Danger Default(disabled)\n    </Button>\n    <div class=\"site-Button-Ghost-wrapper\">\n        <Button Ghost>Ghost</Button>\n        <Button Ghost Disabled>\n            Ghost(disabled)\n        </Button>\n    </div>\n</div>",
        "Type": "Demos.Button.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "block",
        "Title": "Block 按钮",
        "Description": "<p><code>block</code>属性将使按钮适合其父宽度。</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" Block>Primary</Button>\n    <Button Block>Default</Button>\n    <Button Type=\"dashed\" Block>Dashed</Button>\n    <Button Type=\"link\" Block>Link</Button>\n</div>",
        "Type": "Demos.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "legacy-group",
        "Title": "废弃的 Block 组",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<ButtonGroup Size=\"small\">\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n<ButtonGroup>\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n<ButtonGroup Size=\"large\">\n    <Button Type=\"primary\">Button 1</Button>\n    <Button Type=\"primary\">Button 2</Button>\n</ButtonGroup>\n",
        "Type": "Demos.Button.demo.LegacyGroup",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "按钮类型",
        "Description": "<p>按钮有四种类型：主按钮、次按钮、虚线按钮和链接按钮。主按钮在同一个操作区域最多出现一次。</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\">Primary</Button>\n    <Button>Default</Button>\n    <Button Type=\"dashed\">Dashed</Button>\n    <Button Type=\"link\">Link</Button>\n</div>",
        "Type": "Demos.Button.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "按钮尺寸",
        "Description": "<p>按钮有大、中、小三种尺寸。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>small</code> 分别把按钮设为大、小尺寸。若不设置 <code>size</code>，则尺寸为中。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@size\">\n        <Radio RadioButton Value=\"large\">Large</Radio>\n        <Radio RadioButton Value=\"default\">Default</Radio>\n        <Radio RadioButton Value=\"small\">Small</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <Button Type=\"primary\" Size=@size>\n        Primary\n    </Button>\n    <Button Size=\"@size\">Default</Button>\n    <Button Type=\"dashed\" Size=@size>\n        Dashed\n    </Button>\n    <br />\n    <Button Type=\"link\" Size=@size>\n        Link\n    </Button>\n    <br />\n    <Button Type=\"primary\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"circle\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size />\n    <Button Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size>\n    Download\n    </Button>\n    <Button Type=\"primary\" Icon=\"download\" Size=@size>\n    Download\n    </Button>\n</div>\n\n@code\n{\n    string size = \"large\";\n}\n",
        "Type": "Demos.Button.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "ghost",
        "Title": "幽灵按钮",
        "Description": "<p>幽灵按钮将按钮的内容反色，背景变为透明，常用在有色背景上。</p>\n",
        "Code": "<div class=\"site-Button-Ghost-wrapper\">\n    <Button Type=\"primary\" Ghost>\n        Primary\n    </Button>\n    <Button Ghost>Default</Button>\n    <Button Type=\"dashed\" Ghost>\n        link\n    </Button>\n    <Button Type=\"link\" Ghost>\n        link\n    </Button>\n</div>",
        "Type": "Demos.Button.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "danger",
        "Title": "危险按钮",
        "Description": "<p>在 4.0 之后，危险成为一种按钮属性而不是按钮类型。</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" Danger>\n        Primary\n    </Button>\n    <Button Danger>Default</Button>\n    <Button Type=\"dashed\" Danger>\n        link\n    </Button>\n    <Button Type=\"link\" Danger>\n        link\n    </Button>\n</div>",
        "Type": "Demos.Button.demo.Danger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "加载中状态",
        "Description": "<p>添加 <code>loading</code> 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。</p>\n",
        "Code": "@using System.Timers\n\n<div>\n    <Button Type=\"primary\" Loading>\n        Loading\n    </Button>\n    <Button Type=\"primary\" Size=\"small\" Loading>\n        Loading\n    </Button>\n    <br />\n    <Button Type=\"primary\" Loading=\"loading\" OnClick=enterLoading>\n        Click me!\n    </Button>\n    <Button\n        Type=\"primary\"\n        Icon=\"poweroff\"\n    Loading=\"iconLoading\"\n    OnClick=\"enterIconLoading\"\n    >\n    Click me!\n    </Button>\n</div>\n\n@code\n{\n    bool loading = false;\n    bool iconLoading = false;\n\n    private void enterLoading()\n    {\n        loading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            loading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n\n    private void enterIconLoading()\n    {\n        iconLoading = true;\n        var timer = new Timer(8000);\n        timer.Elapsed += (_, args) =>\n        {\n            iconLoading = false;\n            InvokeAsync(StateHasChanged);\n        };\n        timer.Start();\n    }\n}\n",
        "Type": "Demos.Button.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "multiple",
        "Title": "多个按钮组合",
        "Description": "<p>按钮组合使用时，推荐使用 1 个主操作 + n 个次操作，3 个以上操作时把更多操作放到 <code>Dropdown.Button</code> 中组合使用。</p>\n",
        "Code": "Not implement yet :(",
        "Type": "Demos.Button.demo.Multiple",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Table",
    "SubTitle": "表格",
    "Type": "数据展示",
    "Desc": "<p>展示行列数据。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当有大量结构化的数据需要展现时；</li>\n<li>当需要对数据进行排序、搜索、分页、自定义操作等复杂行为时。</li>\n</ul>\n<h2>如何使用</h2>\n<p>指定表格的数据源 <code>dataSource</code> 为一个数组。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": -1,
        "Name": "blazor",
        "Title": "复刻官方示例",
        "Description": "<p>复刻官方 Blazor 模板中的表格。只读属性只能在 <code>Column</code> 上指定 Title 属性，而不能用 <code>@bind-*</code>。</p>\n",
        "Code": "@using System.ComponentModel\n\n<Table @ref=\"table\"\n       DataSource=\"@forecasts\"\n       Total=\"_total\"\n       @bind-PageIndex=\"_pageIndex\"\n       @bind-PageSize=\"_pageSize\"\n       OnPageIndexChange=\"async e=>await fetchData(e)\"\n       @bind-SelectedRows=\"selectedRows\">\n    <Selection Key=\"@(context.Id.ToString())\" />\n    <Column @bind-Field=\"@context.Id\"/>\n    <Column @bind-Field=\"@context.Date\">\n        @context.Date.ToShortDateString()\n    </Column>\n    <Column @bind-Field=\"@context.TemperatureC\" />\n    <Column Title=\"Temp. (F)\" Field=\"@context.TemperatureF\" />\n    <Column @bind-Field=\"@context.Summary\" />\n</Table>\n\n<br />\n<p>pageIndex: @_pageIndex | pageSize: @_pageSize | Total: @_total</p>\n\n<br />\n<h5>selections:</h5>\n@if (selectedRows != null && selectedRows.Any())\n{\n    <Button Danger Size=\"small\" OnClick=\"@(e => { table.SetSelection(null); })\">Clear</Button>\n\n    @foreach (var selected in selectedRows)\n    {\n        <Tag @key=\"selected.Id\" Closable OnClose=\"e=>RemoveSelection(selected.Id)\">@selected.Id - @selected.Summary</Tag>\n    }\n}\n\n\n@code {\n\n    WeatherForecast[] forecasts;\n\n    IEnumerable<WeatherForecast> selectedRows;\n    ITable table;\n\n    int _pageIndex = 1;\n    int _pageSize = 10;\n    int _total = 0;\n\n    protected override async Task OnParametersSetAsync()\n    {\n        forecasts = await GetForecastAsync(1, 10);\n        _total = 50;\n    }\n\n    async Task fetchData(PaginationEventArgs args)\n    {\n        forecasts = await GetForecastAsync(args.PageIndex, args.PageSize);\n    }\n\n    public class WeatherForecast\n    {\n        public int Id { get; set; }\n\n        [DisplayName(\"Date\")]\n        public DateTime Date { get; set; }\n\n        [DisplayName(\"Temp. (C)\")]\n        public int TemperatureC { get; set; }\n\n        [DisplayName(\"Summary\")]\n        public string Summary { get; set; }\n\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n    }\n\n    private static readonly string[] Summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)\n    {\n        var rng = new Random();\n        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index => new WeatherForecast\n        {\n            Id = index,\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = rng.Next(-20, 55),\n            Summary = Summaries[rng.Next(Summaries.Length)]\n        }).ToArray());\n    }\n\n    public void RemoveSelection(int id)\n    {\n        var selected = selectedRows.Where(x => x.Id != id).ToList();\n        table.SetSelection(selected.Select(x => x.Id.ToString()).ToArray());\n    }\n}\n",
        "Type": "Demos.Table.demo.Blazor",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 19,
        "Name": "fixed-columns",
        "Title": "固定列",
        "Description": "<p>对于列数很多的数据，可以固定前后的列，横向滚动查看其它数据，需要和 <code>scroll.x</code> 配合使用。</p>\n<blockquote>\n<p>若列头与内容不对齐或出现列重复，请指定<strong>固定列</strong>的宽度 <code>width</code>。如果指定 <code>width</code> 不生效或出现白色垂直空隙，请尝试建议留一列不设宽度以适应弹性布局，或者检查是否有<a href=\"https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241\">超长连续字段破坏布局</a>。</p>\n<p>建议指定 <code>scroll.x</code> 为大于表格宽度的固定值或百分比。注意，且非固定列宽度之和不要超过 <code>scroll.x</code>。</p>\n</blockquote>\n<p><strong>注意：v4 版本固定列通过 sticky 实现，IE 11 会降级成横向滚动。</strong></p>\n",
        "Code": "@using System.ComponentModel\n<Table DataSource=\"data\" ScrollY=\"240px\" PageSize=\"50\" ScrollX=\"1300px\">\n    <Column @bind-Field=\"@context.Name\" Width=\"100\" Fixed=\"left\" />\n    <Column @bind-Field=\"@context.Age\" Width=\"100\" Fixed=\"left\" />\n    <Column Title=\"Column 1\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 2\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 3\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 4\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 5\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 6\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 7\" @bind-Field=\"@context.Address\" />\n    <Column Title=\"Column 8\" @bind-Field=\"@context.Address\" />\n    <ActionColumn Title=\"Action\" Width=\"100\" Fixed=\"right\">\n        <a>action</a>\n    </ActionColumn>\n</Table>\n\n@code {\n    class Column\n    {\n        [DisplayName(\"Full Name\")]\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n\n        public string Address { get; set; }\n    }\n\n    Column[] data = Enumerable.Range(0, 100).Select(i => new Column()\n    {\n        Name = $\"Edward King {i}\",\n        Age = 32,\n        Address = $\"Edward King {i}\"\n    }).ToArray();\n\n}",
        "Type": "Demos.Table.demo.FixedColumns",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>简单的表格，最后一列是各种操作。</p>\n",
        "Code": "@using System.ComponentModel\n\n<Table DataSource=\"@data\">\n    <Column @bind-Field=\"@context.Name\">\n        <a>@context.Name</a>\n    </Column>\n    <Column @bind-Field=\"@context.Age\"></Column>\n    <Column @bind-Field=\"@context.Address\"></Column>\n    <Column @bind-Field=\"@context.Tags\">\n        @foreach (var tag in context.Tags)\n        {\n            var color = tag.Length > 5 ? \"geekblue\" : \"green\";\n            if (tag == \"loser\")\n            {\n                color = \"volcano\";\n            }\n            <Tag Color=\"@color\">@tag</Tag>\n        }\n    </Column>\n    <ActionColumn Title=\"Acton\">\n        <Space Size=\"middle\">\n            <SpaceItem>\n                <a>Invite @context.Name</a>\n            </SpaceItem>\n            <SpaceItem>\n                <a>Delete</a>\n            </SpaceItem>\n        </Space>\n    </ActionColumn>\n</Table>\n\n@code{\n    Data[] data =\n    {\n        new Data()\n        {\n            Key = \"1\",\n            Name = \"John Brown\",\n            Age = 32,\n            Address = \"New York No. 1 Lake Park\",\n            Tags = new[] {\"nice\", \"developer\"}\n        },\n        new Data()\n        {\n            Key = \"2\",\n            Name = \"Jim Green\",\n            Age = 42,\n            Address = \"London No. 1 Lake Park\",\n            Tags = new[] { \"loser\"}\n        },\n        new Data()\n        {\n            Key = \"3\",\n            Name = \"Joe Black\",\n            Age = 32,\n            Address = \"Sidney No. 1 Lake Park\",\n            Tags = new[] { \"cool\", \"teacher\" }\n        }\n    };\n\n    public class Data\n    {\n        [DisplayName(\"Key\")]\n        public string Key { get; set; }\n\n        [DisplayName(\"Name\")]\n        public string Name { get; set; }\n\n        [DisplayName(\"Age\")]\n        public int Age { get; set; }\n\n        [DisplayName(\"Address\")]\n        public string Address { get; set; }\n\n        [DisplayName(\"Tags\")]\n        public string[] Tags { get; set; }\n    }\n}",
        "Type": "Demos.Table.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 18,
        "Name": "fixed-header",
        "Title": "固定表头",
        "Description": "<p>方便一页内展示大量数据。</p>\n<p>需要指定 column 的 <code>width</code> 属性，否则列头和内容可能不对齐。如果指定 <code>width</code> 不生效或出现白色垂直空隙，请尝试建议留一列不设宽度以适应弹性布局，或者检查是否有<a href=\"https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241\">超长连续字段破坏布局</a>。</p>\n",
        "Code": "<Table DataSource=\"data\" ScrollY=\"240px\" PageSize=\"50\">\n    <Column @bind-Field=\"@context.Name\" Width=\"150\" />\n    <Column @bind-Field=\"@context.Age\"  Width=\"150\" />\n    <Column @bind-Field=\"@context.Address\" />\n</Table>\n\n@code {\n    class Column\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n\n        public string Address { get; set; }\n    }\n\n    Column[] data = Enumerable.Range(0, 100).Select(i => new Column()\n    {\n        Name = $\"Edward King {i}\",\n        Age = 32,\n        Address = $\"Edward King {i}\"\n    }).ToArray();\n\n}\n",
        "Type": "Demos.Table.demo.FixedHeader",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "row-selection",
        "Title": "可选择",
        "Description": "<p>第一列是联动的选择框。可以通过 <code>rowSelection.type</code> 属性指定选择类型，默认为 <code>checkbox</code>。</p>\n<blockquote>\n<p>默认点击 checkbox 触发选择行为，需要点击行触发可以参考例子：<a href=\"https://codesandbox.io/s/000vqw38rl\">https://codesandbox.io/s/000vqw38rl</a></p>\n</blockquote>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"selectionType\">\n        <Radio Value=\"checkbox\">Checkbox</Radio>\n        <Radio Value=\"radio\">radio</Radio>\n    </RadioGroup>\n\n    <h5>\n        selections: \n        @if (selectedRows != null)\n        {\n            @foreach (var selected in selectedRows)\n            {\n                <Tag  Closable OnClose=\"e=>RemoveSelection(selected.Name)\">@selected.Name</Tag>\n            }\n            <Button Danger Size=\"small\" OnClick=\"@(e => { table.SetSelection(null); })\">Clear</Button>\n        }\n    </h5>\n\n    <Table @ref=\"table\" DataSource=\"@data\" SelectedRows=\"selectedRows\">\n        <Selection Key=\"@context.Name\" Type=\"@selectionType\" Disabled=\"@(context.Name==\"Disabled User\")\"/>\n        <Column @bind-Field=\"@context.Name\">\n            <a>@context.Name</a>\n        </Column>\n        <Column @bind-Field=\"@context.Age\" />\n        <Column @bind-Field=\"@context.Address\" />\n    </Table>\n</div>\n\n\n@code {\n\n    ITable table;\n\n    class Column\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n\n        public string Address { get; set; }\n    }\n\n    Column[] data =\n    {\n        new Column()\n        {\n            Name = \"John Brown\",\n            Age = 32,\n            Address = \"New York No. 1 Lake Park\",\n        },\n        new Column()\n        {\n            Name = \"Jim Green\",\n            Age = 42,\n            Address = \"London No. 1 Lake Park\",\n        },\n        new Column()\n        {\n            Name = \"Joe Black\",\n            Age = 32,\n            Address = \"Sidney No. 1 Lake Park\",\n        },\n        new Column()\n        {\n            Name = \"Disabled User\",\n            Age = 99,\n            Address = \"Sidney No. 1 Lake Park\",\n        }\n    };\n\n    IEnumerable<Column> selectedRows;\n    string selectionType = \"checkbox\";\n\n    public void RemoveSelection(string key)\n    {\n        var selected = selectedRows.Where(x => x.Name != key).ToList();\n        table.SetSelection(selected.Select(x => x.Name).ToArray());\n    }\n}\n",
        "Type": "Demos.Table.demo.RowSelection_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Form",
    "SubTitle": "表单",
    "Type": "数据录入",
    "Desc": "<p>高性能表单控件，自带数据域管理。包含数据录入、校验以及对应样式。</p>\n<h2>何时使用</h2>\n<ul>\n<li>用于创建一个实体或收集信息。</li>\n<li>需要对输入的数据类型进行校验时。</li>\n</ul>\n<h2>API(TODO)</h2>\n<style>\n.code-box-demo .ant-form:not(.ant-form-inline):not(.ant-form-vertical) {\n  max-width: 600px;\n}\n.markdown.api-container table td:nth-of-type(4) {\n  white-space: nowrap;\n  word-wrap: break-word;\n}\n</style>\n<style>\n  .site-form-item-icon {\n    color: rgba(0, 0, 0, 0.25);\n  }\n  [data-theme=\"dark\"] .site-form-item-icon {\n    color: rgba(255,255,255,.3);\n  }\n</style>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "control-hooks",
        "Title": "表单方法调用",
        "Description": "<p>通过 <code>@ref</code> 获取Form引用。</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n<Form @ref=\"form\" \n      Model=\"@model\" \n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Note\">\n        <Input @bind-Value=\"@context.Note\" />\n    </FormItem>\n\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n        <Button OnClick=\"Reset\">\n            Reset\n        </Button>\n        <Button Type=\"@ButtonType.Link\" OnClick=\"OnFill\">\n            Fill form\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Note { get; set; }\n    }\n\n    private Model model = new Model();\n    private Form<Model> form;\n\n    private void OnFill(MouseEventArgs args)\n    {\n        model.Note = \"Hello world!\";\n\n        Console.WriteLine($\"form ref:{form}\");\n    }\n\n    private void Reset(MouseEventArgs args)\n    {\n        form.Reset();\n    }\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.ControlHooks",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本使用",
        "Description": "<p>基本的表单数据域控制展示，包含布局、初始化、验证、提交。</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n    <Form Model=\"@model\"\n          LabelCol=\"new ColLayoutParam { Span = 8 }\"\n          WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n          OnFinish=\"OnFinish\"\n          OnFinishFailed=\"OnFinishFailed\">\n        <FormItem Label=\"Username\">\n            <Input @bind-Value=\"@context.Username\" />\n        </FormItem>\n        <FormItem Label=\"Password\">\n            <InputPassword @bind-Value=\"@context.Password\" />\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n            <Checkbox @bind-Value=\"context.RememberMe\">Remember me</Checkbox>\n        </FormItem>\n        <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n            <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n                Submit\n            </Button>\n        </FormItem>\n    </Form>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [Required]\n        public string Password { get; set; }\n        public bool RememberMe { get; set; } = true;\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3.1,
        "Name": "size",
        "Title": "表单尺寸",
        "Description": "<p>设置表单组件尺寸，仅对 antd 组件有效。</p>\n",
        "Code": "@using System.Text.Json;\n\n<Form Model=\"@model\"\n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\"\n      OnFinishFailed=\"OnFinishFailed\"\n      Size=\"@model.Size\">\n    <FormItem Label=\"Form Size\">\n        <RadioGroup @bind-Value=\"@context.Size\">\n            <Radio RadioButton Value=\"@AntSizeLDSType.Small\">Small</Radio>\n            <Radio RadioButton Value=\"@AntSizeLDSType.Default\">Default</Radio>\n            <Radio RadioButton Value=\"@AntSizeLDSType.Large\">Large</Radio>\n        </RadioGroup>\n    </FormItem>\n\n    <FormItem Label=\"Input\">\n        <Input @bind-Value=\"@context.Input\" />\n    </FormItem>\n    <FormItem Label=\"InputArea\">\n        <TextArea @bind-Value=\"@context.InputArea\" />\n    </FormItem>\n    <FormItem Label=\"Cascader\">\n        <Cascader @bind-Value=\"@context.Cascader\" Options=\"districts\" />\n    </FormItem>\n    <FormItem Label=\"DatePicker\">\n        <DatePicker @bind-Value=\"@context.DatePicker\" />\n    </FormItem>\n    <FormItem Label=\"InputNumber\">\n        <AntDesign.InputNumber @bind-Value=\"@context.Number\" />\n    </FormItem>\n    <FormItem Label=\"Switch\">\n        <Switch @bind-Value=\"@context.Switch\" />\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button HtmlType=\"submit\">\n            Button\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        public string Size { get; set; } = AntSizeLDSType.Small;\n        public string Input { get; set; }\n        public string InputArea { get; set; }\n        public string Cascader { get; set; }\n        public DateTime DatePicker { get; set; }\n        public double Number { get; set; }\n        public bool Switch { get; set; }\n    }\n\n    private Model model = new Model();\n\n    private List<CascaderNode> districts = new List<CascaderNode>\n    {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"zhejiang\",\n            Children = new []\n            {\n                new CascaderNode {Value = \"11\", Label = \"hangzhou\"},\n            }\n        }\n    };\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "layout",
        "Title": "表单布局",
        "Description": "<p>表单有三种布局。</p>\n",
        "Code": "@using System.Text.Json;\n\n<Form Layout=\"@model.Layout\" \n      LabelCol=\"GetFormLabelCol()\"\n      WrapperCol=\"GetFormWrapperCol()\"\n      Model=\"@model\" \n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Form Layout\" >\n        <RadioGroup @bind-Value=\"@context.Layout\">\n            <Radio RadioButton Value=\"@FormLayout.Horizontal\">Horizontal</Radio>\n            <Radio RadioButton Value=\"@FormLayout.Vertical\">Vertical</Radio>\n            <Radio RadioButton Value=\"@FormLayout.Inline\">Inline</Radio>\n        </RadioGroup>\n    </FormItem>\n\n    <FormItem Label=\"Field A\">\n        <Input @bind-Value=\"@context.FieldA\" />\n    </FormItem>\n\n    <FormItem Label=\"Field B\">\n        <Input @bind-Value=\"@context.FieldB\" />\n    </FormItem>\n\n    <FormItem WrapperCol=\"GetButtonItemLayout()\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n@code\n{\n    public class Model\n    {\n        public string Layout { get; set; } = FormLayout.Horizontal;\n        public string FieldA { get; set; }\n        public string FieldB { get; set; }\n    }\n\n    private Model model = new Model();\n\n    private ColLayoutParam GetFormLabelCol()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"4\" } : null;\n    }\n\n    private ColLayoutParam GetFormWrapperCol()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"14\" } : null;\n    }\n\n    private ColLayoutParam GetButtonItemLayout()\n    {\n        return model.Layout == FormLayout.Horizontal ? new ColLayoutParam { Span = \"14\", Offset = \"4\" } : null;\n    }\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n}",
        "Type": "Demos.Form.demo.Layout",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "loading",
        "Title": "表单加载中",
        "Description": "<p>修改 Loading 属性将现有表单变为加载状态。</p>\n",
        "Code": "@using System.ComponentModel.DataAnnotations;\n@using System.Text.Json;\n\n<Form Loading=\"loading\" Model=\"@model\" \n      LabelCol=\"new ColLayoutParam { Span = 8 }\"\n      WrapperCol=\"new ColLayoutParam { Span = 16 }\"\n      OnFinish=\"OnFinish\" \n      OnFinishFailed=\"OnFinishFailed\">\n    <FormItem Label=\"Username\" >\n        <Input @bind-Value=\"@context.Username\"/>\n    </FormItem>\n    <FormItem Label=\"Password\">\n        <InputPassword @bind-Value=\"@context.Password\" />\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Checkbox @bind-Value=\"context.RememberMe\">Remember me</Checkbox>\n    </FormItem>\n    <FormItem WrapperCol=\"new ColLayoutParam{ Offset = 8, Span = 16 }\">\n        <Button Type=\"@ButtonType.Primary\" HtmlType=\"submit\">\n            Submit\n        </Button>\n    </FormItem>\n</Form>\n<div style=\"margin-top: 16px\">\n    Loading state：\n    <Switch Checked=loading OnChange=toggle />\n</div>\n@code\n{\n    public class Model\n    {\n        [Required]\n        public string Username { get; set; }\n        [Required]\n        public string Password { get; set; }\n        public bool RememberMe { get; set; } = true;\n    }\n\n    private Model model = new Model();\n\n    private void OnFinish(EditContext editContext)\n    {\n        Console.WriteLine($\"Success:{JsonSerializer.Serialize(model)}\");\n    }\n\n    private void OnFinishFailed(EditContext editContext)\n    {\n        Console.WriteLine($\"Failed:{JsonSerializer.Serialize(model)}\");\n    }\n\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Form.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Collapse",
    "SubTitle": "折叠面板",
    "Type": "数据展示",
    "Desc": "<p>可以折叠/展开的内容区域。</p>\n<h2>何时使用</h2>\n<ul>\n<li>对复杂区域进行分组和隐藏，保持页面的整洁。</li>\n<li><code>手风琴</code> 是一种特殊的折叠面板，只允许单个内容区域展开。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Collapse</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Accordion</code></td>\n<td>是否每次只打开一个tab</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Bordered</code></td>\n<td>是否有边框</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>ExpandIconPosition</code></td>\n<td>设置图标位置</td>\n<td><code>'left' \\| 'right'</code></td>\n<td><code>left</code></td>\n</tr>\n</tbody>\n</table>\n<h3>Panel</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Disabled</code></td>\n<td>禁用后的面板展开与否将无法通过用户交互改变</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Header</code></td>\n<td>面板头内容</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ExpandedIcon</code></td>\n<td>自定义切换图标</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Extra</code></td>\n<td>自定义渲染每个面板右上角的内容</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ShowArrow</code></td>\n<td>是否展示箭头</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>Active</code></td>\n<td>面板是否展开，可双向绑定</td>\n<td><code>boolean</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ActiveChange</code></td>\n<td>面板展开回调</td>\n<td><code>EventCallback&lt;boolean&gt;</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 5,
        "Name": "extra",
        "Title": "额外节点",
        "Description": "<p>你可以通过 <code>Extra</code> 来指定面板右上角的额外内容。</p>\n",
        "Code": "<div>\n    <Collapse \n        DefaultActiveKey=\"@(new[]{\"1\"})\" \n        OnChange=\"Callback\"\n        ExpandIconPosition=\"@expandIconPosition\"\n        >\n        <Panel Header=@(\"This is panel header 1\") Key=\"1\" Extra=\"@extra\">\n            <div>@text</div>\n        </Panel>\n        <Panel Header=@(\"This is panel header 2\") Key=\"2\" Extra=\"@extra\">\n            <div>@text</div>\n        </Panel>\n        <Panel Header=@(\"This is panel header 3\") Key=\"3\" Extra=\"@extra\">\n            <div>@text</div>\n        </Panel>\n    </Collapse>\n</div>\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    RenderFragment extra =@<div @onclick:stopPropagation><Icon Type=\"setting\"></Icon></div>;\n\n    string expandIconPosition = \"left\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}\n\n",
        "Type": "Demos.Collapse.demo.Extra",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "accordion",
        "Title": "手风琴",
        "Description": "<p>手风琴，每次只打开一个 tab 。</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" Accordion>\n    <Panel Header=@(\"This is panel header 1\") Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 2\") Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 3\") Key=\"3\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n}",
        "Type": "Demos.Collapse.demo.Accordion",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "custom",
        "Title": "自定义面板",
        "Description": "<p>自定义各个面板的背景色、圆角、边距和图标。</p>\n",
        "Code": "<Collapse\n    Bordered=\"false\"\n    DefaultActiveKey=\"@(new[]{\"1\"})\" \n    ExpandIcon=\"expandIcon\"\n    Class=\"site-collapse-custom-collapse\">\n    <Panel Header=@(\"This is panel header 1\") Key=\"1\"\n           Class=\"site-collapse-custom-panel\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 2\") Key=\"2\"\n           Class=\"site-collapse-custom-panel\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 3\") Key=\"3\" \n           Class=\"site-collapse-custom-panel\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    RenderFragment<bool> expandIcon = isActive => @<Icon Type=\"caret-right\" Rotate=\"@(isActive ? 90 : 0)\"></Icon>;\n\n}\n\n<style>\n    [data-theme='compact'] .site-collapse-custom-collapse .site-collapse-custom-panel,\n    .site-collapse-custom-collapse .site-collapse-custom-panel {\n        background: #f7f7f7;\n        border-radius: 2px;\n        margin-bottom: 24px;\n        border: 0px;\n        overflow: hidden;\n    }\n</style>",
        "Type": "Demos.Collapse.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "noarrow",
        "Title": "隐藏箭头",
        "Description": "<p>你可以通过 <code>[ShowArrow]=&quot;false&quot;</code> 隐藏 <code>Panel</code> 组件的箭头图标。</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" OnChange=\"Callback\">\n    <Panel Header=@(\"This is panel header with arrow icon\") Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel ShowArrow=\"false\" Header=@(\"This is panel header with no arrow icon\") Key=\"2\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}",
        "Type": "Demos.Collapse.demo.Noarrow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "折叠面板",
        "Description": "<p>可以同时展开多个面板，这个例子默认展开了第一个。</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" OnChange=\"Callback\">\n    <Panel Header=@(\"This is panel header 1\") Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 2\") Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 3\") Key=\"3\" Disabled>\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}\n\n",
        "Type": "Demos.Collapse.demo.Basic",
        "Style": "\n[data-theme=\"compact\"] p, p {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "borderless",
        "Title": "简洁风格",
        "Description": "<p>一套没有边框的简洁样式。</p>\n",
        "Code": "<Collapse DefaultActiveKey=\"@(new[]{\"1\"})\" Bordered=\"false\">\n    <Panel Header=@(\"This is panel header 1\") Key=\"1\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 2\") Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 3\") Key=\"3\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n}",
        "Type": "Demos.Collapse.demo.Borderless",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "mix",
        "Title": "面板嵌套",
        "Description": "<p>嵌套折叠面板。</p>\n",
        "Code": "<Collapse OnChange=\"Callback\">\n    <Panel Header=@(\"This is panel header 1\") Key=\"1\">\n        <Collapse DefaultActiveKey=@(new[]{\"1\"})>\n            <Panel Header=@(\"This is panel nest panel\") Key=\"1\">\n                <p>@text</p>\n            </Panel>\n        </Collapse>\n    </Panel>\n    <Panel Header=@(\"This is panel header 2\") Key=\"2\">\n        <p>@text</p>\n    </Panel>\n    <Panel Header=@(\"This is panel header 3\") Key=\"3\">\n        <p>@text</p>\n    </Panel>\n</Collapse>\n\n@code{\n\n    string text = @\"\nA dog is a type of domesticated animal.\nKnown for its loyalty and faithfulness,\nit can be found as a welcome guest in many households across the world.\n\";\n\n    void Callback(string[] key)\n    {\n        Console.WriteLine(key);\n    }\n}",
        "Type": "Demos.Collapse.demo.Mix",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Timeline",
    "SubTitle": "时间轴",
    "Type": "数据展示",
    "Desc": "<p>垂直展示的时间流信息。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当有一系列信息需按时间排列时，可正序和倒序。</li>\n<li>需要有一条时间轴进行视觉上的串联时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>时间轴</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pending</td>\n<td>指定最后一个幽灵节点是否存在或内容</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>PendingDot</td>\n<td>当最后一个幽灵节点存在時，指定其时间图点</td>\n<td>RenderFragment</td>\n<td></td>\n</tr>\n<tr>\n<td>Reverse</td>\n<td>节点排序</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Mode</td>\n<td>通过设置 mode 可以改变时间轴和内容的相对位置，可选 <code>alternate</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Timeline.Item\n时间轴的每一个节点。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>指定圆圈颜色 blue, red, green, gray，或自定义的色值</td>\n<td>string,</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>自定义时间轴点</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Position</td>\n<td>自定义节点位置 <code>left</code>,<code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Label</td>\n<td>设置标签</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Reverse",
        "Title": "最后一个及排序",
        "Description": "<p>当任务状态正在发生，还在记录过程中，可用幽灵节点来表示当前的时间节点，当 <code>pending</code> 为真值时展示幽灵节点，如果 pending 是 <code>React 元素</code>可用于定制该节点内容，同时 pendingDot 将可以用于定制其轴点。<code>reverse</code> 属性用于控制节点排序，为 false 时按正序排列，为 true 时按倒序排列。</p>\n",
        "Code": "<div>\n    <Timeline Pending=\"pending\" Reverse=@bReverse>\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem>Technical testing 2015-09-01</TimelineItem>\n    </Timeline>\n    <Button Type=\"primary\" Style=\"margin-top: 16px \" OnClick=\"HandleClick\">\n        Toggle Reverse\n    </Button>\n</div>\n@code{\n    private bool bReverse { get; set; } = false;\n    RenderFragment pending = @<Template>\n                                                        Recording...\n                                                    </Template>;\n    void HandleClick()\n    {\n     bReverse = !bReverse;\n    }\n}",
        "Type": "Demos.Timeline.demo.Reverse",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Alternate",
        "Title": "交替展现",
        "Description": "<p>内容在时间轴两侧轮流出现。</p>\n",
        "Code": "<div>\n<Timeline Mode=\"alternate\"  >\n    <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n    <TimelineItem Color=\"green\">Solve initial network problems 2015-09-01</TimelineItem>\n    <TimelineItem Dot=\"dotTemplate\">\n        Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa\n        quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n    </TimelineItem>\n    <TimelineItem Color=\"red\">Network problems being solved 2015-09-01</TimelineItem>\n    <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n    <TimelineItem Dot=\"dotTemplate\">Technical testing 2015-09-01</TimelineItem>\n</Timeline>\n</div>\n\n@code {\n    RenderFragment dotTemplate =\n    @<Template>\n        <Icon Type=\"clock-circle\" Style=\"font-size: 16px;\" />\n    </Template>;\n }\n\n",
        "Type": "Demos.Timeline.demo.Alternate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Right",
        "Title": "右侧时间轴点",
        "Description": "<p>时间轴点可以在内容的右边。</p>\n",
        "Code": "<div>\n    <Timeline Mode=\"right\">\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem Dot=\"dotTemplate\" Color=\"red\">\n            Technical testing 2015-09-01\n        </TimelineItem>\n        <TimelineItem Color=\"red\">Network problems being solved 2015-09-01</TimelineItem>\n    </Timeline>,\n</div>\n\n@code{\n    RenderFragment dotTemplate =\n    @<Template>\n        <Icon Type=\"clock-circle\" Theme=\"outline\" Style=\"font-size: 16px;\" />\n    </Template>;\n}",
        "Type": "Demos.Timeline.demo.Right",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Custom",
        "Title": "自定义时间轴点",
        "Description": "<p>可以设置为图标或其他自定义元素。</p>\n",
        "Code": "<div>\n    <Timeline>\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem Dot=\"dotTemplate\"  Color=\"red\">\n        Technical testing 2015-09-01\n        </TimelineItem>\n       <TimelineItem>Network problems being solved 2015-09-01</TimelineItem>\n    </Timeline>\n</div>\n\n@code {\n    RenderFragment dotTemplate =\n        @<Template>\n            <Icon Type=\"clock-circle\" Style=\"font-size: 16px;\" />\n        </Template>;\n}\n",
        "Type": "Demos.Timeline.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Color",
        "Title": "圆圈颜色",
        "Description": "<p>圆圈颜色，<code>绿色</code>用于已完成、成功状态，<code>红色</code>表示告警或错误状态，<code>蓝色</code>可表示正在进行或其他默认状态，<code>灰色</code>表示未完成或失效状态。</p>\n",
        "Code": "<div>\n    <Timeline>\n        <TimelineItem Color=\"green\">Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem Color=\"green\">Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem Color=\"red\">\n            <p>Solve initial network problems 1</p>\n            <p>Solve initial network problems 2</p>\n            <p>Solve initial network problems 3 2015-09-01</p>\n        </TimelineItem>\n        <TimelineItem>\n            <p>Technical testing 1</p>\n            <p>Technical testing 2</p>\n            <p>Technical testing 3 2015-09-01</p>\n        </TimelineItem>\n        <TimelineItem Color=\"gray\">\n            <p>Technical testing 1</p>\n            <p>Technical testing 2</p>\n            <p>Technical testing 3 2015-09-01</p>\n        </TimelineItem>\n        <TimelineItem Color=\"gray\">\n            <p>Technical testing 1</p>\n            <p>Technical testing 2</p>\n            <p>Technical testing 3 2015-09-01</p>\n        </TimelineItem>\n    </Timeline>\n</div>\n",
        "Type": "Demos.Timeline.demo.Color",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\n    <Timeline>\n        <TimelineItem>Create a services site 2015-09-01</TimelineItem>\n        <TimelineItem Color=\"red\" >Solve initial network problems 2015-09-01</TimelineItem>\n        <TimelineItem>Technical testing 2015-09-01</TimelineItem>\n        <TimelineItem>Network problems being solved 2015-09-01</TimelineItem>\n    </Timeline>\n</div>\n",
        "Type": "Demos.Timeline.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Label",
        "Title": "标签",
        "Description": "<p>使用 <code>label</code> 标签单独展示时间。</p>\n",
        "Code": "<div>\n    <RadioGroup   @bind-Value =\"@mode\" Style=\"margin-bottom:20px\" >      \n        <Radio Value=\"left\">Left</Radio>\n        <Radio Value=\"right\">Right</Radio>\n        <Radio Value=\"alternate\">Alternate</Radio>\n    </RadioGroup>\n    <Timeline Mode=\"@mode\">\n        <TimelineItem >Create a services 2015-09-01</TimelineItem>\n        <TimelineItem>Solve initial network problems 2015-09-01 09:12:11</TimelineItem>\n        <TimelineItem>Technical testing</TimelineItem>\n        <TimelineItem >Network problems being solved 2015-09-01 09:12:11</TimelineItem>\n    </Timeline>\n</div\n@code{\n    private string mode = \"left\";\n    void OnChangClick()\n    {\n\n    }\n\n}\n",
        "Type": "Demos.Timeline.demo.Label",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Input",
    "SubTitle": "输入框",
    "Type": "数据录入",
    "Desc": "<p>通过鼠标或键盘输入内容，是最基础的表单域的包装。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要用户输入表单域内容时。</li>\n<li>提供组合型输入框，带搜索的输入框，还可以进行大小选择。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AddOnBefore</td>\n<td>带标签的 input，设置前置标签</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AddOnAfter</td>\n<td>带标签的 input，设置后置标签</td>\n<td>RenderFragment</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>子组件</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>抽屉元素之间的子组件  <code>default</code>, <code>large</code>, <code>small</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>提供可描述输入字段预期值的提示信息</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>输入框默认内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>MaxLength</td>\n<td>最大长度</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用状态，默认为 false</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AllowClear</td>\n<td>可以点击清除图标删除内容</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Prefix</td>\n<td>带有前缀图标的 input</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Suffix</td>\n<td>带有后缀图标的 input</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>声明 input 类型，同原生 input 标签的 type 属性，见：MDN(请直接使用 Input.TextArea 代替 type=&quot;textarea&quot;)。</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>输入框内容变化时的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnPressEnter</td>\n<td>按下回车的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnInput</td>\n<td>输入时的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "Size",
        "Title": "三种大小",
        "Description": "<p>我们为输入框定义了三种尺寸（大、默认、小），高度分别为 40px、32px 和 24px。</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"large size\"  Size=\"@InputSize.Large\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"default size\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"small size\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n\n</div>\n@code{\n    private string txtValue { get; set; }\n  \n}",
        "Type": "Demos.Input.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Search",
        "Title": "搜索框 loading",
        "Description": "<p>用于 onSearch 的时候展示 loading。</p>\n",
        "Code": "<div>\n    <Search Placeholder=\"input search text\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" />\n    <br />\n    <br />\n    <Search Placeholder=\"input search text\" OnChange=\"(e)=>Handle(e)\" EnterButton=\"true\" @bind-Value=\"@txtValue\" />\n    <br />\n    <br />\n    <Search Placeholder=\"input search text\" Size=\"@InputSize.Large\" EnterButton=\"@(\"Search\")\" @bind-Value=\"@txtValue\" />\n\n\n\n</div>\n\n    @code{\n\n        private string txtValue { get; set; }\n\n        private void Handle(string value)\n        {\n            Console.WriteLine(value);\n\n        }\n    }\n\n",
        "Type": "Demos.Input.demo.Search_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Area",
        "Title": "适应文本高度的文本域",
        "Description": "<p>属性适用于 textarea 节点，并且只有高度会自动变化。另外 autoSize 可以设定为一个对象，指定最小行数和最大行数。\n1.5.0 后 autosize 被废弃，请使用 autoSize</p>\n",
        "Code": "<div>\n    <TextArea Placeholder=\"Autosize height based on content lines\" AutoSize=\"true\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"2\" MaxRows=\"6\" @bind-Value=\"@txtValue\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"3\" MaxRows=\"5\" @bind-Value=\"@txtValue\"/>\n</div>\n\n@code{\n    string txtValue { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Area",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Group",
        "Title": "输入框组合",
        "Description": "<p>输入框的组合展现。\n注意：使用 compact 模式时，不需要通过 Col 来控制宽度。</p>\n",
        "Code": "<div>\n    <InputGroup Size=\"@InputSize.Large\">\n        <Row Gutter=\"8\">\n            <Col Span=\"5\">\n            <Input DefaultValue=\"@(\"0571\")\" @bind-Value=\"code\" />\n            </Col>\n            <Col Span=\"8\">\n            <Input DefaultValue=\"@(\"26888888\")\" @bind-Value=\"phonenumber\" />\n            </Col>\n        </Row>\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"@(\"0571\")\" Style=\"width: 20%;\" @bind-Value=\"code\" />\n        <Input DefaultValue=\"@(\"26888888\")\" Style=\"width: 30%;\" @bind-Value=\"phonenumber\" />\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"@(\"0571\")\" Style=\"width: 20%;\" @bind-Value=\"code\" />\n        <Search DefaultValue=\"26888888\" Style=\"width: 30%;\" @bind-Value=\"phonenumber\" />\n    </InputGroup>\n    <br />\n    <br />\n    <InputGroup Compact>\n        <Input DefaultValue=\"@(\"0571\")\" Style=\"width: 20%;\" />\n        <DatePicker Size=\"@DatePickerSize.Small\" Style=\"width: 100%\"></DatePicker>\n    </InputGroup>\n</div>\n\n\n@code{\n    private string code { get; set; }\n    private string phonenumber { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "Generic",
        "Title": "泛型",
        "Description": "<p>泛型使用示例。</p>\n",
        "Code": "<div>\n    <Text>string</Text>\n    <Input @bind-Value=\"@_str\" />\n    <p>value:@_str</p>\n    <br />\n\n    <Text>int</Text>\n    <Input @bind-Value=\"@_int\" />\n    <p>value:@_int</p>\n    <br />\n\n    <Text>int?</Text>\n    <Input Placeholder=\"Null\" @bind-Value=\"@_intNull\" />\n    <p>value:@_intNull</p>\n    <br />\n\n    <Text>decimal</Text>\n    <Input @bind-Value=\"@_dec\" />\n    <p>value:@_dec</p>\n    <br />\n\n    <Text>decimal?</Text>\n    <Input Placeholder=\"Null \" @bind-Value=\"@_decNull\" />\n    <p>value:@_decNull</p>\n    <br />\n\n    <Text>double</Text>\n    <Input @bind-Value=\"@_double\" />\n    <p>value:@_double</p>\n    <br />\n\n    <Text>double?</Text>\n    <Input Placeholder=\"Null \" @bind-Value=\"@_doubleNull\" />\n    <p>value:@_doubleNull</p>\n    <br />\n\n    <Text>DateTime</Text>\n    <Input @bind-Value=\"@_date\" />\n    <p>value:@_date</p>\n    <br />\n\n    <Text>DateTime?</Text>\n    <Input Placeholder=\"Null\" @bind-Value=\"@_dateNull\" />\n    <p>value:@_dateNull</p>\n</div>\n@code{\n    string _str;\n    int _int;\n    int? _intNull;\n    decimal _dec;\n    decimal? _decNull;\n    double _double;\n    double? _doubleNull;\n    DateTime _date;\n    DateTime? _dateNull;\n}\n",
        "Type": "Demos.Input.demo.Generic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本使用",
        "Description": "<p>基本使用示例。</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"Basic usage\" Value=\"@txtValue\"  />\n    <br />\n    <br />\n    <Text>@txtValue</Text>\n</div>\n@code{\n    string txtValue { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Prefix",
        "Title": "前缀和后缀",
        "Description": "<p>在输入框上添加前缀或后缀图标。</p>\n",
        "Code": "<div>\n    <Input Placeholder=\"Prefix and Suffix\" DefaultValue=\"@(\"123\")\" @bind-Value=\"@txtValue\" >\n        <Prefix>\n            <Icon Type=\"user\" />\n        </Prefix>\n    </Input>\n    <br />\n    <br />\n    <Input Placeholder=\"default size\" @bind-Value=\"@txtValue\">\n    <Prefix> ￥ </Prefix>\n    <Suffix>RMB </Suffix>\n    </Input>\n</div>\n\n@code {\n    private string txtValue { get; set; }\n}\n",
        "Type": "Demos.Input.demo.Prefix",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Password",
        "Title": "密码框",
        "Description": "<p>密码框。</p>\n",
        "Code": "<div>\n<InputPassword @bind-Value=\"@txtValue\" Placeholder=\"large Password\" Size=\"@InputSize.Large\" OnPressEnter=\"(e)=>Submit(e)\" />\n</div>\n@code{\n    private string txtValue { get; set; }\n\n    private void Submit(KeyboardEventArgs args)\n    {\n        Console.WriteLine($\"password: {txtValue}\");\n    }\n}\n",
        "Type": "Demos.Input.demo.Password",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Addon",
        "Title": "前置/后置标签",
        "Description": "<p>用于配置一些固定组合。</p>\n",
        "Code": "<div>\n    <AntDesign.Input DefaultValue=\"@(\"mysite\")\"  >\n        <AddOnBefore>https://</AddOnBefore>\n        <AddOnAfter>.com</AddOnAfter>\n    </AntDesign.Input>    \n    <br />\n    <br />\n    <AntDesign.Input DefaultValue=\"@(\"mysite\")\"  >\n        <AddOnAfter><Icon Type=\"setting\"></Icon></AddOnAfter>\n    </AntDesign.Input>\n    <br />\n    <br />\n    <AntDesign.Input DefaultValue=\"@(\"mysite\")\" >\n        <AddOnBefore>https://</AddOnBefore>\n    </AntDesign.Input>\n\n</div>\n",
        "Type": "Demos.Input.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Clear",
        "Title": "带移除图标",
        "Description": "<p>带移除图标的输入框，点击图标删除所有内容。</p>\n",
        "Code": "<div>    \n    <Input Placeholder=\"input with clear icon\" AllowClear=\"true\" OnChange=\"onChange\" TValue=\"string\"/>\n    <br />\n    <br />\n    <TextArea Placeholder=\"textarea with clear icon\"  AllowClear=\"true\" OnChange=\"onChange\" />\n</div>\n@code{\n\n    private void onChange()\n    {\n       \n    }\n}",
        "Type": "Demos.Input.demo.Clear",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Message",
    "SubTitle": "全局提示",
    "Type": "反馈",
    "Desc": "<p>全局展示操作反馈信息。</p>\n<h2>何时使用</h2>\n<ul>\n<li>可提供成功、警告和错误等反馈信息。</li>\n<li>顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<blockquote>\n<p>请确认已经在 <code>App.Razor</code> 中添加了 <code>&lt;AntContainer /&gt;</code> 组件。</p>\n</blockquote>\n<p>组件提供了一些静态方法，使用方式和参数如下：</p>\n<ul>\n<li><code>MessageService.Success(content, [duration], onClose)</code></li>\n<li><code>MessageService.Error(content, [duration], onClose)</code></li>\n<li><code>MessageService.Info(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warning(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warn(content, [duration], onClose)</code> // alias of warning</li>\n<li><code>MessageService.Loading(content, [duration], onClose)</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>提示内容</td>\n<td>string|RenderFragment|MessageConfig</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>自动关闭的延时，单位秒。设为 0 或者 null 时不自动关闭。</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>关闭时触发的回调函数</td>\n<td>Action</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>组件同时提供 ContinueWith 接口。</p>\n<ul>\n<li><code>MessageService.[level](content, [duration]).ContinueWith(afterClose)</code></li>\n<li><code>MessageService.[level](content, [duration], onClose).ContinueWith(afterClose)</code></li>\n</ul>\n<p>其中<code>MessageService.[level]</code> 是组件已经提供的静态方法。<code>ContinueWith</code> 接口返回值是 Task。</p>\n<p>也可以对象的形式传递参数：</p>\n<ul>\n<li><code>MessageService.Open(config:MessageConfig)</code></li>\n<li><code>MessageService.Success(config:MessageConfig)</code></li>\n<li><code>MessageService.Error(config:MessageConfig)</code></li>\n<li><code>MessageService.Info(config:MessageConfig)</code></li>\n<li><code>MessageService.Warning(config:MessageConfig)</code></li>\n<li><code>MessageService.Warn(config:MessageConfig)</code> // alias of warning</li>\n<li><code>MessageService.Loading(config:MessageConfig)</code></li>\n</ul>\n<p><code>config</code> 对象属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>提示内容</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>自动关闭的延时，单位秒。设为 0 或者 null 时不自动关闭。</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>关闭时触发的回调函数</td>\n<td>event Action</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>当前提示的唯一标志</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>全局方法</h3>\n<p>还提供了全局配置和全局销毁方法：</p>\n<ul>\n<li><code>MessageService.Config(options:MessageGlobalConfig)</code></li>\n<li><code>MessageService.Destroy()</code></li>\n</ul>\n<h4>MessageService.Config</h4>\n<pre><code class=\"language-c#\">MessageService.Config(new MessageGlobalConfig{\n  Top: 100,\n  Duration: 2,\n  MaxCount: 3,\n  Rtl: true,\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Duration</td>\n<td>默认自动关闭延时，单位秒</td>\n<td>double</td>\n<td>3</td>\n</tr>\n<tr>\n<td>MaxCount</td>\n<td>最大显示数, 超过限制时，最早的消息会被自动关闭</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Top</td>\n<td>消息距离顶部的位置</td>\n<td>double</td>\n<td>24</td>\n</tr>\n<tr>\n<td>Rtl</td>\n<td>是否开启 RTL 模式</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "other",
        "Title": "其他提示类型",
        "Description": "<p>包括成功、失败、警告。</p>\n",
        "Code": "@inject MessageService _message\n\n<Space>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Success\">\n            Success\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Error\">\n            Error\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"default\" OnClick=\"Warning\">\n            Warning\n        </Button>\n    </SpaceItem>\n</Space>\n\n@code{\n    private async Task Success()\n    {\n        await _message.Success(\"This is a success message\");\n    }\n\n    private async Task Error()\n    {\n        await _message.Error(\"This is an error message\");\n\n    }\n\n    private async Task Warning()\n    {\n        await _message.Warning(\"This is a warning message\");\n    }\n}\n",
        "Type": "Demos.Message.demo.Other",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "info",
        "Title": "普通提示",
        "Description": "<p>信息提醒反馈。</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private void OnClick()\n    {\n        Console.WriteLine(\"onclick\");\n        _message.Info(\"This is a normal message\");\n    }\n}",
        "Type": "Demos.Message.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "update",
        "Title": "更新消息内容",
        "Description": "<p>可以通过唯一的 <code>key</code> 来更新内容。</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"primary\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"updatable-{DateTime.Now.Ticks}\";\n        var config = new MessageConfig()\n        {\n            Content = \"Loading...\",\n            Key = key\n        };\n        _message.Loading(config);\n\n        await Task.Delay(2000);\n\n        config.Content = \"Loaded\";\n        config.Duration = 2;\n        await _message.Success(config);\n    }\n}",
        "Type": "Demos.Message.demo.Update",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "continue-with",
        "Title": "Task 接口",
        "Description": "<p>可以通过 Task 接口在关闭后运行 callback 。以上用例将在每个 message 将要结束时通过 ContinueWith 显示新的 message 。</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"default\" OnClick=\"OnClick\">\n    Display normal message\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _message.Loading(\"Action in progress..\", 2.5)\n            .ContinueWith((result) =>\n            {\n                _message.Info(\"Loading finished\", 2.5)\n                .ContinueWith((result) =>\n                {\n                    _message.Info(\"Loading finished is finished\", 2.5);\n                });\n            });\n    }\n}",
        "Type": "Demos.Message.demo.ContinueWith",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "loading",
        "Title": "加载中",
        "Description": "<p>进行全局 loading，异步自行移除。</p>\n",
        "Code": "@inject MessageService _message\n\n    <Button Type=\"default\" OnClick=\"OnClick\">\n        Display a loading indicator\n    </Button>\n\n@code{\n    private async Task OnClick()\n    {\n        var cofig = new MessageConfig()\n        {\n            Content = \"Action in progress..\",\n            Duration = 0\n        };\n        var task =  _message.Loading(cofig);\n        await Task.Delay(2000);\n        task.Start();\n    }\n}",
        "Type": "Demos.Message.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "duration",
        "Title": "修改延时",
        "Description": "<p>自定义时长 <code>10s</code>，默认时长为 <code>3s</code>。</p>\n",
        "Code": "@inject MessageService _message\n\n<Button Type=\"default\" OnClick=\"OnClick\">\n    Customized display duration\n</Button>\n\n@code{\n    private void OnClick()\n    {\n        _message.Success(\"This is a prompt message for success, and it will disappear in 10 seconds\", 10);\n    }\n}",
        "Type": "Demos.Message.demo.Duration",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Dropdown",
    "SubTitle": "下拉菜单",
    "Type": "导航",
    "Desc": "<p>向下弹出的列表。</p>\n<h2>何时使用</h2>\n<p>当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 1,
        "Name": "placement",
        "Title": "弹出位置",
        "Description": "<p>支持 6 个弹出位置。</p>\n",
        "Code": "<Dropdown Placement=\"@PlacementType.BottomLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomLeft</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomCenter</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.BottomRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>BottomRight</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopLeft\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopLeft</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopCenter\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopCenter</Button>\n    </ChildContent>\n</Dropdown>\n<Dropdown Placement=\"@PlacementType.TopRight\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>TopRight</Button>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n}",
        "Type": "Demos.Dropdown.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "dropdown-button",
        "Title": "带下拉框的按钮",
        "Description": "<p>左边是按钮，右边是额外的相关功能菜单。可设置 <code>icon</code> 属性来修改右边的图标。</p>\n",
        "Code": "<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }'>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton Icon=\"user\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }' Disabled=\"@true\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        Dropdown\n    </ChildContent>\n</DropdownButton>\n<DropdownButton ButtonsRender=\"ButtonsRender\">\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        TODO: With ToolTip\n    </ChildContent>\n</DropdownButton>\n<Dropdown>\n    <Overlay>\n        @_overlayMenu\n    </Overlay>\n    <ChildContent>\n        <Button>Button <Icon Type=\"down\" /></Button>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private RenderFragment _overlayMenu =@<Menu>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                1st menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                2nd menu item\n            </a>\n        </MenuItem>\n        <MenuItem>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                3rd menu item\n            </a>\n        </MenuItem>\n    </Menu>;\n\n    \n    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)\n    {\n        return @<Template>\n            <span>@leftButton</span>@rightButton\n        </Template>;\n    }\n}",
        "Type": "Demos.Dropdown.demo.DropdownButtonDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "event",
        "Title": "触发事件",
        "Description": "<p>点击菜单项后会触发事件，用户可以通过相应的菜单项 key 进行不同的操作。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"1\">1st menu item</MenuItem>\n            <MenuItem @key=\"2\">2nd memu item</MenuItem>\n            <MenuItem @key=\"3\">3rd menu item</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me, Click menu item <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的下拉菜单。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "item",
        "Title": "其他元素",
        "Description": "<p>分割线和不可用菜单项。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItem @key=\"0\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem @key=\"1\">\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            --- TODO: Need MenuDivider ---\n            <MenuItem @key=\"3\" disabled>\n                3rd menu item（disabled）\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Item",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "sub-menu",
        "Title": "多级菜单",
        "Description": "<p>传入的菜单里有多个层级。</p>\n",
        "Code": "<Dropdown>\n    <Overlay>\n        <Menu>\n            <MenuItemGroup Title=@(\"Group title\")>\n                <MenuItem>1st menu item</MenuItem>\n                <MenuItem>2nd menu item</MenuItem>\n            </MenuItemGroup>\n            <SubMenu Title=@(\"sub menu\")>\n                <MenuItem>3rd menu item</MenuItem>\n                <MenuItem>4th menu item</MenuItem>\n            </SubMenu>\n            <SubMenu Title=@(\"disabled sub menu\") Disabled>\n                <MenuItem>5d menu item</MenuItem>\n                <MenuItem>6th menu item</MenuItem>\n            </SubMenu>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Cascading menu <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.SubMenuDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "overlay-visible",
        "Title": "菜单隐藏方式",
        "Description": "<p>默认是点击关闭菜单，可以关闭此功能。</p>\n",
        "Code": "<Dropdown OnVisibleChange=\"OnVisibleChange\" Visible=\"_visible\">\n    <Overlay>\n        <Menu OnMenuItemClicked=\"HandleMenuClick\">\n            <MenuItem Id=\"1\">Clicking me will not close the menu.</MenuItem>\n            <MenuItem Id=\"2\">Clicking me will not close the menu also.</MenuItem>\n            <MenuItem Id=\"3\">Clicking me will close the menu.</MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Hover me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>\n\n@code\n{\n    private bool _visible = false;\n\n    private void HandleMenuClick(MenuItem item)\n    {\n        if (item.Id == \"3\")\n        {\n            _visible = false;\n        }\n    }\n\n    private void OnVisibleChange(bool visible)\n    {\n        _visible = visible;\n    }\n}",
        "Type": "Demos.Dropdown.demo.OverlayVisible",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "trigger",
        "Title": "触发方式",
        "Description": "<p>默认是移入触发菜单，可以点击触发。</p>\n",
        "Code": "<Dropdown Trigger=\"@(new TriggerType[] { TriggerType.Click })\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\n            Click me <Icon Type=\"down\" />\n        </a>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Trigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "context-menu",
        "Title": "右键菜单 TODO",
        "Description": "<p>默认是移入触发菜单，可以点击鼠标右键触发。 TODO</p>\n",
        "Code": "<Dropdown Trigger=\"new TriggerType[] { TriggerType.ContextMenu }\">\n    <Overlay>\n        <Menu>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\n                    1st menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\n                    2nd menu item\n                </a>\n            </MenuItem>\n            <MenuItem>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\n                    3rd menu item\n                </a>\n            </MenuItem>\n        </Menu>\n    </Overlay>\n    <ChildContent>\n        <div style=\"text-align: center; width: 200px; height: 200px; line-height: 200px;background: #f7f7f7;color: #777;\">\n            Right Click on here (TODO)\n        </div>\n    </ChildContent>\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.ContextMenu",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Select",
    "SubTitle": "选择器",
    "Type": "数据录入",
    "Desc": "<p>下拉选择器。</p>\n<h2>何时使用</h2>\n<ul>\n<li>弹出一个下拉菜单给用户选择操作，用于代替原生的选择器，或者需要一个更优雅的多选器时。</li>\n<li>当选项少时（少于 5 项），建议直接将选项平铺，使用 <a href=\"/components/radio/\">Radio</a> 是更好的选择。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-razor\">&lt;Select&gt;\n  &lt;SelectOption Value=&quot;lucy&quot;&gt;lucy&lt;/SelectOption&gt;\n&lt;/Select&gt;\n</code></pre>\n<h3>Select props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>支持清除</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>AutoClearSearchValue</td>\n<td>是否在选中项后清空搜索框，只在 <code>mode</code> 为 <code>multiple</code> 或 <code>tags</code> 时有效。</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>AutoFocus</td>\n<td>默认获取焦点</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultActiveFirstOption</td>\n<td>是否默认高亮第一个选项。</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>指定默认选中的条目</td>\n<td>string|IEnumerable&lt;string&gt;<br />LabeledValue|IEnumerable&lt;LabeledValue&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownClassName</td>\n<td>下拉菜单的 className 属性</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownMatchSelectWidth</td>\n<td>下拉菜单和选择器同宽。默认将设置 <code>min-width</code>。<code>false</code> 时会关闭虚拟滚动</td>\n<td>Boolean | number</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownRender</td>\n<td>自定义下拉框内容</td>\n<td>(menuNode: RenderFragment, props:Properties) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownStyle</td>\n<td>下拉菜单的 style 属性</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>FilterOption</td>\n<td>是否根据输入项进行筛选。当其为一个函数时，会接收 <code>inputValue</code> <code>option</code> 两个参数，当 <code>option</code> 符合筛选条件时，应返回 <code>true</code>，反之则返回 <code>false</code>。</td>\n<td>Boolean or function(inputValue, option)</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>GetPopupContainer</td>\n<td>菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。<a href=\"https://codesandbox.io/s/4j168r7jw0\">示例</a></td>\n<td>Function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>LabelInValue</td>\n<td>是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 <code>string</code> 变为 <code>{key: string, label: RenderFragment}</code> 的格式</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ListHeight</td>\n<td>设置弹窗滚动高度</td>\n<td>number</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagCount</td>\n<td>最多显示多少个 tag</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagTextLength</td>\n<td>最大显示的 tag 文本长度</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagPlaceholder</td>\n<td>隐藏 tag 时显示的内容</td>\n<td>RenderFragment/function(omittedValues)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>TagRender</td>\n<td>自定义 tag 内容 render</td>\n<td>(props:Properties) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Mode</td>\n<td>设置 Select 的模式为多选或标签</td>\n<td><code>multiple</code> | <code>tags</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>NotFoundContent</td>\n<td>当下拉列表为空时显示的内容</td>\n<td>RenderFragment</td>\n<td>'Not Found'</td>\n<td></td>\n</tr>\n<tr>\n<td>OptionFilterProp</td>\n<td>搜索时过滤对应的 option 属性，如设置为 children 表示对内嵌内容进行搜索。<a href=\"https://codesandbox.io/s/antd-reproduction-template-tk678\">示例</a></td>\n<td>string</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>OptionLabelProp</td>\n<td>回填到选择框的 SelectOption 的属性值，默认是 SelectOption 的子元素。比如在子元素需要高亮效果时，此值可以设为 <code>value</code>。</td>\n<td>string</td>\n<td><code>children</code> （combobox 模式下为 <code>value</code>）</td>\n<td></td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>选择框默认文字</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowArrow</td>\n<td>是否显示下拉小箭头</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>使单选模式可搜索</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>选择框大小</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>SuffixIcon</td>\n<td>自定义的选择框后缀图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>RemoveIcon</td>\n<td>自定义的多选框清除图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ClearIcon</td>\n<td>自定义的多选框清空图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MenuItemSelectedIcon</td>\n<td>自定义多选时当前选中的条目图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>TokenSeparators</td>\n<td>在 tags 和 multiple 模式下自动分词的分隔符</td>\n<td>IEnumerable&lt;string&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>指定当前选中的条目</td>\n<td>string|IEnumerable&lt;string&gt;<br />LabeledValue|IEnumerable&lt;LabeledValue&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>virtual</td>\n<td>设置 <code>false</code> 时关闭虚拟滚动</td>\n<td>Boolean</td>\n<td>true</td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>OnBlur</td>\n<td>失去焦点时回调</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数</td>\n<td>function(value, option:SelectOption/IEnumerable&lt;SelectOption&gt;)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnDeselect</td>\n<td>取消选中时调用，参数为选中项的 value (或 key) 值，仅在 multiple 或 tags 模式下生效</td>\n<td>function(string|number|LabeledValue)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnFocus</td>\n<td>获得焦点时回调</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnInputKeyDown</td>\n<td>按键按下时回调</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnMouseEnter</td>\n<td>鼠标移入时回调</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnMouseLeave</td>\n<td>鼠标移出时回调</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnPopupScroll</td>\n<td>下拉列表滚动时的回调</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>文本框值变化时回调</td>\n<td>function(value: string)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelect</td>\n<td>被选中时调用，参数为选中项的 value (或 key) 值</td>\n<td>function(string |LabeledValue, option:SelectOption)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultOpen</td>\n<td>是否默认展开下拉菜单</td>\n<td>Boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Open</td>\n<td>是否展开下拉菜单</td>\n<td>Boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnDropdownVisibleChange</td>\n<td>展开下拉菜单的回调</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>加载中状态</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Bordered</td>\n<td>是否有边框</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意，如果发现下拉菜单跟随页面滚动，或者需要在其他弹层中触发 Select，请尝试使用 <code>GetPopupContainer={triggerNode =&gt; triggerNode.parentElement}</code> 将下拉弹层渲染节点固定在触发器的父元素中。</p>\n</blockquote>\n<h3>Select Methods</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Blur()</td>\n<td>取消焦点</td>\n<td></td>\n</tr>\n<tr>\n<td>Focus()</td>\n<td>获取焦点</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>SelectOption props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Disabled</td>\n<td>是否禁用</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>选中该 SelectOption 后，Select 的 title</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>默认根据此属性值进行筛选</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>SelectOption 器类名</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>SelectOptGroup props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key</td>\n<td></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Label</td>\n<td>组名</td>\n<td>string</td>\n<td>无</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>FAQ</h2>\n<h3>点击 <code>dropdownRender</code> 里的内容浮层关闭怎么办？</h3>\n<p>看下 <a href=\"#components-select-demo-custom-dropdown-menu\">dropdownRender 例子</a> 里的说明。</p>\n<h3>自定义 SelectOption 样式导致滚动异常怎么办？</h3>\n<p>这是由于虚拟滚动默认选项高度为 <code>32px</code>，如果你的选项高度小于该值则需要通过 <code>ListItemHeight</code> 属性调整，而 <code>ListHeight</code> 用于设置滚动容器高度：</p>\n<pre><code class=\"language-razor\">&lt;Select ListItemHeight=&quot;10&quot; ListHeight=&quot;250&quot; /&gt;\n</code></pre>\n<p>注意：<code>ListItemHeight</code> 和 <code>ListHeight</code> 为内部属性，如无必要，请勿修改该值。</p>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "search",
        "Title": "带搜索框",
        "Description": "<p>展开后可对选项进行搜索。</p>\n",
        "Code": "<Select ShowSearch\n        Style=\"width: 200px\"\n        Placeholder=\"Select a person\"\n        OptionFilterProp=\"children\"\n        OnBlur=\"OnBlur\"\n        OnFocus=\"OnFocus\"\n        OnChange=\"OnChange\"\n        OnSearch=\"OnSearch\"\n        FilterOption=\"FilterOptionValue\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"tom\">Tom</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private readonly Func<string, SelectOption, bool> FilterOptionValue = FilterOption;\n\n    private void OnBlur()\n    {\n        Console.WriteLine(\"blur\");\n    }\n\n    private void OnFocus()\n    {\n        Console.WriteLine(\"focus\");\n    }\n\n    private void OnSearch(string value)\n    {\n        Console.WriteLine($\"search: {value}\");\n    }\n\n    private static bool FilterOption(string value, SelectOption option)\n    {\n        var optionContent = option.Children.ToUpperInvariant();\n        return optionContent.Contains(value, StringComparison.OrdinalIgnoreCase);\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Search",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "search-box",
        "Title": "搜索框",
        "Description": "<p>搜索和远程数据结合。</p>\n",
        "Code": "<Select ShowSearch\n        Style=\"width:200px\"\n        Placeholder=\"input search text\"\n        ShowArrow=\"false\"\n        FilterOption=\"false\"\n        DefaultActiveFirstOption=\"false\"\n        OnSearch=\"@OnSearch\"\n        OnChange=\"@OnChange\">\n    @foreach (var value in _items)\n    {\n        <SelectOption Value=\"@value\">@value</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@using System.Web;\n@using System.Text.Json;\n@inject HttpClient Http\n@code\n{\n    private Task<string> _oldTask;\n    private List<string> _items = new List<string>();\n\n    private async void OnSearch(string value)\n    {\n        if (!string.IsNullOrWhiteSpace(value))\n        {\n            if (_oldTask == null || _oldTask.IsCompleted)\n            {\n                var key = HttpUtility.UrlEncode(value);\n                var url = $\"https://suggest.taobao.com/sug?code=utf-8&q={key}\";\n\n                _oldTask = Http.GetStringAsync(url);\n                var content = await _oldTask;\n\n                var result = JsonSerializer.Deserialize<ApiResult>(content);\n                _items.Clear();\n                foreach (var item in result.result)\n                {\n                    _items.Add(item[0]);\n                }\n\n                StateHasChanged();\n            }\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n\n    public class ApiResult\n    {\n        public List<string[]> result { get; set; }\n    }\n}\n",
        "Type": "Demos.Select.demo.SearchBox",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 20,
        "Name": "suffix",
        "Title": "后缀图标",
        "Description": "<p>基本使用。</p>\n",
        "Code": "<Select SuffixIcon=\"_syncIcon\"\n        DefaultValue=\"@(\"luck\")\"\n        Style=\"width: 120px\"\n        OnChange=\"@OnChange\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"disabled\" Disabled>Disabled</SelectOption>\n    <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n</Select>\n\n<Select SuffixIcon=\"_smileIcon\"\n        DefaultValue=\"@(\"luck\")\"\n        Style=\"width: 120px\" Disabled>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private RenderFragment _syncIcon;\n    private RenderFragment _smileIcon;\n\n    protected override void OnParametersSet()\n    {\n        _syncIcon =@<Icon Type=\"sync\" Theme=\"true\"></Icon>;\n        _smileIcon =@<Icon Type=\"smile\" Theme=\"outline\" Rotate=\"180\"></Icon>;\n        base.OnParametersSet();\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Suffix",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 12,
        "Name": "select-users",
        "Title": "搜索用户",
        "Description": "<p>一个带有远程搜索，防抖控制，请求时序控制，加载状态的多选示例。</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        LabelInValue\n        Placeholder=\"Select users\"\n        FilterOption=true\n        OnSearch=\"@OnSearch\"\n        OnChange=\"@OnChange\"\n        Style=\"width:100%\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private readonly string[] _items = new string[0];\n\n    private void OnSearch(string value) { }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.SelectUsers",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本使用",
        "Description": "<p>基本使用。</p>\n",
        "Code": "<Select SuffixIcon=\"_syncIcon\" DefaultValue=@(\"lucy\") Style=\"width:100px\" OnChange=\"OnChange\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"disabled\" Disabled>Disabled</SelectOption>\n    <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n</Select>\n<Select DefaultValue=@(\"lucy\") Style=\"width:100px\" Disabled>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n<Select DefaultValue=@(\"lucy\") Style=\"width:100px\" Loading>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n<Select DefaultValue=@(\"lucy\") Style=\"width:100px\" AllowClear>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private RenderFragment _syncIcon =@<Icon Type=\"sync\" Theme=\"foll\"></Icon>;\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "label-in-value",
        "Title": "获得选项的文本",
        "Description": "<p>默认情况下 <code>onChange</code> 里只能拿到 value，如果需要拿到选中的节点文本 label，可以使用 <code>labelInValue</code> 属性。</p>\n<p>选中项的 label 会被包装到 value 中传递给 <code>onChange</code> 等函数，此时 value 是一个对象。</p>\n",
        "Code": "<Select LabelInValue\n        DefaultValue=\"_defaultValue\"\n        Style=\"width:120px\"\n        OnChange=\"OnChange\">\n    <SelectOption Value=\"jack\">Jack (100)</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy (101)</SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private LabeledValue _defaultValue = new LabeledValue(\"jack\", \"Jack (100)\");\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.LabelInValue",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "coordinate",
        "Title": "联动",
        "Description": "<p>省市联动是典型的例子。</p>\n<p>推荐使用 <a href=\"/components/cascader/\">Cascader</a> 组件。</p>\n",
        "Code": "<Select Style=\"width: 120px\" DefaultValue=\"@_provinceData[0]\" OnChange=\"OnChange\">\n    @foreach (var province in _provinceData)\n    {\n        <SelectOption Value=\"@province\">@province</SelectOption>\n    }\n</Select>\n\n<Select Style=\"width: 120px\" Value=\"@_cityValue\" OnChange=\"OnChangeCity\">\n    @foreach (var city in _cities)\n    {\n        <SelectOption Value=\"@city\">@city</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string _cityValue;\n    private string[] _cities = new string[0];\n    private readonly string[] _provinceData = new[] { \"Zhejiang\", \"Jiangsu\" };\n\n    private readonly Dictionary<string, string[]> _cityData = new Dictionary<string, string[]>\n    {\n        {\"Zhejiang\",new[]{ \"Hangzhou\", \"Ningbo\", \"Wenzhou\"}},\n        {\"Jiangsu\",new[]{\"Nanjing\",\"Suzhou\",\"Zhenjiang\"}}\n    };\n\n    protected override void OnParametersSet()\n    {\n        _cities = _cityData[_provinceData[0]];\n        _cityValue = _cities.First();\n        base.OnParametersSet();\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        _cities = _cityData[value.AsT0];\n        _cityValue = _cities.First();\n        InvokeAsync(StateHasChanged);\n        Console.WriteLine($\"selected: ${value}\");\n    }\n\n    private void OnChangeCity(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Coordinate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tags",
        "Title": "标签",
        "Description": "<p>tags select，随意输入的内容（scroll the menu）</p>\n",
        "Code": "<Select Mode=\"tags\"\n        Style=\"width: 100%\"\n        Placeholder=\"Tags Mode\"\n        OnChange=\"@OnChange\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    protected override void OnInitialized()\n    {\n        var min = 10;\n        var max = 36;\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Tags",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 24,
        "Name": "custom-tag-render",
        "Title": "自定义选择标签",
        "Description": "<p>允许自定义选择标签的样式</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        Style=\"width:100%\"\n        TagRender=\"TagRender\"\n        DefaultValue=\"@(new[]{\"gold\",\"cyan\"})\"\n        Options=\"@_options\">\n</Select>\n\n@using OneOf;\n@code\n{\n    private LabeledValue[] _options;\n    protected override void OnInitialized()\n    {\n        _options = new LabeledValue[]\n        {\n            new LabeledValue(\"gold\",\"gold\"),\n            new LabeledValue(\"lime\",\"lime\"),\n            new LabeledValue(\"green\",\"green\"),\n            new LabeledValue(\"cyan\",\"cyan\")\n        };\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: {value}\");\n    }\n\n    private RenderFragment TagRender(Properties props)\n    {\n        RenderFragment tag =@<Tag Color=@props.Value Closable=@props.Closable Style=\"margin-right:3px\" OnClose=\"@props.OnClose\">@props.Value</Tag>;\n        return tag;\n    }\n}\n",
        "Type": "Demos.Select.demo.CustomTagRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "big-data",
        "Title": "大数据",
        "Description": "<p>Select 使用了<a href=\"https://github.com/react-component/virtual-list\">虚拟滚动</a>技术，因而获得了比 <a href=\"https://codesandbox.io/s/beautiful-banzai-m72lv\">3.0 更好的性能</a>。</p>\n",
        "Code": "<Title Level=\"4\">@_options.Length Items</Title>\n\n<Select Mode=\"multiple\"\n        Style=\"width:100%\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@(new[] { \"a10\", \"c12\", })\"\n        OnChange=\"@OnChange\"\n        Options=\"@_options\">\n</Select>\n\n@using OneOf;\n@code\n{\n    private LabeledValue[] _options;\n    protected override void OnInitialized()\n    {\n        const int min = 0;\n        const int max = 36;\n        _options = new LabeledValue[max - min];\n\n        for (var i = min; max > i; i++)\n        {\n            var disabled = i == 10;\n            var value = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n            _options[i] = new LabeledValue(value, value);\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.BigData",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "无边框",
        "Description": "<p>无边框样式。</p>\n",
        "Code": "<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" Bordered=\"false\">\n    <SelectOption Value=\"jack\">Jack</SelectOption>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n</Select>\n\n<Select DefaultValue=@(\"lucy\") Style=\"width:120px\" Bordered=\"false\" Disabled>\n    <SelectOption Value=\"lucy\">Lucy</SelectOption>\n</Select>\n",
        "Type": "Demos.Select.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的选择框，当 size 分别为 <code>large</code> 和 <code>small</code> 时，输入框高度为 <code>40px</code> 和 <code>24px</code> ，默认高度为 <code>32px</code>。</p>\n",
        "Code": "<style>\n    .code-box-demo .ant-select {\n        margin: 0 8px 10px 0;\n    }\n\n    .ant-row-rtl .code-box-demo .ant-select {\n        margin: 0 0 10px 8px;\n    }\n\n    #components-select-demo-search-box .code-box-demo .ant-select {\n        margin: 0;\n    }\n</style>\n\n<RadioGroup @bind-Value=\"@_sizeValue\"  OnChange=\"OnChangeSize\">\n    <Radio RadioButton value=\"large\">Large</Radio>\n    <Radio RadioButton value=\"default\">Default</Radio>\n    <Radio RadioButton value=\"small\">Small</Radio>\n</RadioGroup>\n<br />\n<br />\n\n<Select Size=\"@_sizeValue\"\n        DefaultValue=\"@(\"0a10\")\"\n        OnChange=OnChange\n        Style=\"width: 200px\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\" Title=\"@item\">@item</SelectOption>\n    }\n</Select>\n<br />\n<br />\n\n<Select Mode=\"multiple\"\n        Size=\"@_sizeValue\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@_defaultValues\"\n        OnChange=OnChange\n        Style=\"width: 100%\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n<br />\n\n<Select Mode=\"multiple\"\n        Size=\"@_sizeValue\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@_defaultValues\"\n        OnChange=OnChange\n        Style=\"width: 100%\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n<br />\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    private string[] _defaultValues;\n    private string _sizeValue = AntSizeLDSType.Default;\n\n    protected override void OnInitialized()\n    {\n        var min = 10;\n        var max = 36;\n        _defaultValues = new[] { \"0a10\", \"0c12\" };\n\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChangeSize(string value)\n    {\n        _sizeValue = value;\n        Console.WriteLine($\"selected size: ${value}\");\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 22,
        "Name": "hide-selected",
        "Title": "隐藏已选择选项",
        "Description": "<p>隐藏下拉列表中已选择的选项。</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        Style=\"width: 100%\"\n        HideSelected=\"true\"\n        Placeholder=\"Inserted are removed\"\n        OnChange=\"@OnChange\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private readonly string[] _items = new[] { \"Apples\", \"Nails\", \"Bananas\", \"Helicopters\" };\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.HideSelected",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "automatic-tokenization",
        "Title": "自动分词",
        "Description": "<p>试下复制 <code>露西,杰克</code> 到输入框里。只在 tags 和 multiple 模式下可用。</p>\n",
        "Code": "<Select Mode=\"tags\"\n        Style=\"width:100%\"\n        OnChange=\"OnChange\"\n        TokenSeparators=\"@(new[] { \",\" })\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    protected override void OnInitialized()\n    {\n        const int min = 10;\n        const int max = 36;\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.AutomaticTokenization",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 21,
        "Name": "custom-dropdown-menu",
        "Title": "扩展菜单",
        "Description": "<p>使用 <code>dropdownRender</code> 对下拉菜单进行自由扩展。</p>\n",
        "Code": "<Select Style=\"width:240px\"\n        Placeholder=\"custom dropdown render\"\n        DropdownRender=\"@OnDropdownRender\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@code{\n    private int _index = 0;\n    private string _name = \"\";\n    private List<string> _items = new List<string> { \"jack\", \"lucy\" };\n\n    private void AddItem(MouseEventArgs args)\n    {\n        Console.WriteLine(\"Add item\");\n        _name = null;\n        var newItem = !string.IsNullOrWhiteSpace(_name) ? _name : $\"New Item {_index++}\";\n        _items.Add(newItem);\n    }\n\n    private RenderFragment OnDropdownRender(RenderFragment originNode, Properties props)\n    {\n        RenderFragment customDropdownRender =\n        @<Template>\n            <div>\n                @originNode\n                <Divider Style=\"margin:4px 0\"></Divider>\n                <div style=\"display:flex;flex-wrap:nowrap;padding:8px\">\n                    <Input Style=\"flex:auto\" @bind-Value=\"@_name\"/>\n                    <a style=\"flex:none;padding:8px;display:block;cursor:pointer\" @onclick=\"AddItem\">\n                        <Icon Type=\"plus\" Theme=\"outline\"></Icon>\n                        Add Item\n                    </a>\n                </div>\n            </div>\n        </Template>;\n        return customDropdownRender;\n    }\n}\n",
        "Type": "Demos.Select.demo.CustomDropdownMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "option-label-prop",
        "Title": "定制回填内容",
        "Description": "<p>使用 <code>optionLabelProp</code> 指定回填到选择框的 <code>Option</code> 属性。</p>\n",
        "Code": "<style>\n    .demo-option-label-item > span {\n        margin-right: 6px;\n    }\n</style>\n\n<Select Mode=\"multiple\"\n        Style=\"width: 100%\"\n        Placeholder=\"select one country\"\n        DefaultValue=\"@(new[]{\"china\"})\"\n        OptionLabelProp=\"label\"\n        OnChange=OnChange>\n    <SelectOption Value=\"china\" Label=\"China\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"China\">\uD83C\uDDE8\uD83C\uDDF3</span>China (中国)\n        </div>\n    </SelectOption>\n    <SelectOption Value=\"usa\" Label=\"USA\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"USA\">\uD83C\uDDFA\uD83C\uDDF8</span>USA (美国)\n        </div>\n    </SelectOption>\n    <SelectOption Value=\"japan\" Label=\"Japan\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"Japan\">\uD83C\uDDEF\uD83C\uDDF5</span>Japan (日本)\n        </div>\n    </SelectOption>\n    <SelectOption Value=\"korea\" Label=\"Korea\">\n        <div className=\"demo-option-label-item\">\n            <span role=\"img\" aria-label=\"Korea\">\uD83C\uDDF0\uD83C\uDDF7</span>Korea (韩国)\n        </div>\n    </SelectOption>\n</Select>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.OptionLabelProp",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "optgroup",
        "Title": "分组",
        "Description": "<p>用 <code>OptGroup</code> 进行选项分组。</p>\n",
        "Code": "<Select DefaultValue=\"@(\"lucy\")\"\n        Style=\"width:200px\"\n        OnChange=OnChange>\n    <SelectOptGroup Label=\"Manager\">\n        <SelectOption Value=\"jack\">Jack</SelectOption>\n        <SelectOption Value=\"lucy\">Lucy</SelectOption>\n    </SelectOptGroup>\n    <SelectOptGroup Label=\"Engineer\">\n        <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n    </SelectOptGroup>\n</Select>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Optgroup",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 999,
        "Name": "debug",
        "Title": "4.0 Debug",
        "Description": "<p>基本使用。</p>\n",
        "Code": "<style>\n    #components-select-demo-debug .debug-align {\n        position: relative;\n        display: inline-block;\n        line-height: 32px;\n        height: 32px;\n        background: rgba(255, 0, 0, 0.1);\n        box-sizing: border-box;\n    }\n\n        #components-select-demo-debug .debug-align:after {\n            position: absolute;\n            content: '';\n            border: 1px solid green;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            pointer-events: none;\n        }\n\n    #SelectDemoDebugContainer {\n        z-index: 1;\n        width: 500px;\n        background: #FFF;\n        position: relative;\n        border: 1px solid red;\n    }\n</style>\n\n<div id=\"SelectDemoDebugContainer\">\n    <Input Style=\"width: 100px\" Value=\"222\" />\n    <Select ShowSearch\n            Placeholder=\"233\"\n            OnChange=\"@OnChange\"\n            Style=\"width: 120px\">\n        <SelectOption Value=\"jack\">Jack</SelectOption>\n        <SelectOption Value=\"lucy\">Lucy</SelectOption>\n        <SelectOption Value=\"disabled\" disabled>Disabled</SelectOption>\n        <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n        <SelectOption Value=\"long\">I am super super long!</SelectOption>\n    </Select>\n    <Select ShowSearch\n            Mode=\"multiple\"\n            Style=\"width: 120px\"\n            DefaultValue=\"@(new[]{\"lucy\"})\"\n            OnChange=\"@OnChange\"\n            Placeholder=\"233\">\n        <SelectOption Value=\"jack\">Jack</SelectOption>\n        <SelectOption Value=\"lucy\">Lucy</SelectOption>\n        <SelectOption Value=\"disabled\" disabled>Disabled</SelectOption>\n        <SelectOption Value=\"yaoming\">YaoMing</SelectOption>\n        <SelectOption Value=\"long\">I am super super long!</SelectOption>\n    </Select>\n    <span className=\"debug-align\">AntDesign</span>\n    <Button>222</Button>\n</div>\n\n@using OneOf;\n@code\n{\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Debug",
        "Style": "\n#components-select-demo-debug .debug-align {\n  position: relative;\n  display: inline-block;\n  line-height: 32px;\n  height: 32px;\n  background: rgba(255, 0, 0, 0.1);\n  box-sizing: border-box;\n}\n#components-select-demo-debug .debug-align:after {\n  position: absolute;\n  content: '';\n  border: 1px solid green;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n}\n\n",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "multiple",
        "Title": "多选",
        "Description": "<p>多选，从已有条目中选择。</p>\n",
        "Code": "<Select Mode=\"multiple\"\n        Style=\"width: 100%\"\n        Placeholder=\"Please select\"\n        DefaultValue=\"@_defaultValues\"\n        OnChange=\"OnChange\">\n    @foreach (var item in _items)\n    {\n        <SelectOption Value=\"@item\">@item</SelectOption>\n    }\n</Select>\n\n@using OneOf;\n@code\n{\n    private string[] _items;\n    private string[] _defaultValues;\n\n    protected override void OnInitialized()\n    {\n        const int min = 10;\n        const int max = 36;\n        _defaultValues = new[] { \"0a10\", \"0c12\" };\n\n        _items = new string[max - min];\n        for (var i = min; max > i; i++)\n        {\n            _items[i - min] = Convert.ToString(i, 16).PadLeft(2, '0') + i.ToString();\n        }\n    }\n\n    private void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)\n    {\n        Console.WriteLine($\"selected: ${value}\");\n    }\n}\n",
        "Type": "Demos.Select.demo.Multiple",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Badge",
    "SubTitle": "徽标数",
    "Type": "数据展示",
    "Desc": "<p>图标右上角的圆形徽标数字。</p>\n<h2>何时使用</h2>\n<p>一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Badge count={5}&gt;\n  &lt;a href=&quot;#&quot; className=&quot;head-example&quot; /&gt;\n&lt;/Badge&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">&lt;Badge count={5} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>自定义小圆点的颜色</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>展示的数字，大于 overflowCount 时显示为 <code>${overflowCount}+</code>，为 0 时隐藏</td>\n<td>ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>不展示数字，只有一个小红点</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>设置状态点的位置偏移，格式为 <code>[x, y]</code></td>\n<td><code>[number, number]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverflowCount</td>\n<td>展示封顶的数字值</td>\n<td>number</td>\n<td>99</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowZero</td>\n<td>当数值为 0 时，是否展示 Badge</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>设置 Badge 为状态点</td>\n<td><code>success</code> | <code>processing</code> | <code>default</code> | <code>error</code> | <code>warning</code></td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>Text</td>\n<td>在设置了 <code>status</code> 的前提下有效，设置状态点的文本</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>设置鼠标放在状态点上时显示的文字</td>\n<td>string</td>\n<td><code>count</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "change",
        "Title": "动态",
        "Description": "<p>展示动态变化的效果。</p>\n",
        "Code": "<div>\n    <div>\n        <Badge Count=\"@count\">\n            <a href=\"#\" class=\"head-example\" />\n        </Badge>\n        <ButtonGroup>\n            <Button @onclick=\"_=>decline()\">\n                <Icon Type=\"minus\"></Icon>\n            </Button>\n            <Button @onclick=\"_=>increase()\">\n                <Icon Type=\"plus\"></Icon>\n            </Button>\n        </ButtonGroup>\n    </div>\n    <div style=\"margin-top: 10px\">\n        <Badge Dot=\"@show\">\n            <a href=\"#\" class=\"head-example\" />\n        </Badge>\n        <Switch OnChange=\"onChange\" Checked=\"@show\" />\n    </div>\n</div>\n\n@code {\n    int count = 5;\n    bool show = true;\n\n    void increase()\n    {\n        count++;\n    }\n\n    void decline()\n    {\n        count--;\n        if (count < 0)\n        {\n            count = 0;\n        }\n    }\n\n    void onChange(bool show)\n    {\n        this.show = show;\n    }\n}\n",
        "Type": "Demos.Badge.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的徽章展示，当 <code>count</code> 为 <code>0</code> 时，默认不显示，但是可以使用 <code>showZero</code> 修改为显示。</p>\n",
        "Code": "<div>\n    <Badge Count=\"5\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"0\" ShowZero>\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    @{\n        RenderFragment count = @<Icon Type=\"clock-circle\" Fill=\"#f5222d\"/>;\n    }\n    <Badge Count=\"@(count)\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>\n\n",
        "Type": "Demos.Badge.demo.Basic",
        "Style": "\n    .ant-badge:not(.ant-badge-not-a-wrapper) {\n        margin-right: 20px;\n    }\n    .ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n        margin-right: 0;\n        margin-left: 20px;\n    }\n    .head-example {\n        width: 42px;\n        height: 42px;\n        border-radius: 2px;\n        background: #eee;\n        display: inline-block;\n        vertical-align: middle;\n    }\n    [data-theme=\"dark\"] .head-example {\n        background: rgba(255,255,255,.12);\n    }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "no-wrapper",
        "Title": "独立使用",
        "Description": "<p>不包裹任何元素即是独立使用，可自定样式展现。</p>\n<blockquote>\n<p>在右上角的 badge 则限定为红色。</p>\n</blockquote>\n",
        "Code": "<div>\n    <Badge Count=\"25\" />\n    <Badge Count=\"4\" Class=\"site-badge-count-4\" />\n    <Badge Class=\"site-badge-count-109\" Count=\"109\" Style=\"background-color: #52c41a\" />\n</div>\n\n<style>\n    .site-badge-count-4 .ant-badge-count {\n        background-color: #fff;\n        color: #999;\n        box-shadow: 0 0 0 1px #d9d9d9 inset;\n    }\n</style>",
        "Type": "Demos.Badge.demo.NoWrapper",
        "Style": "\n.ant-badge-not-a-wrapper:not(.ant-badge-status) {\n  margin-right: 8px;\n}\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n[data-theme=\"dark\"] .site-badge-count-4 .ant-badge-count {\n  background-color: #141414;\n  box-shadow: 0 0 0 1px #434343 inset;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "dot",
        "Title": "讨嫌的小红点",
        "Description": "<p>没有具体的数字。</p>\n",
        "Code": "<div>\n    <Badge Dot>\n        <Icon Type=\"notification\"/>\n    </Badge>\n    <Badge Count=\"0\" Dot>\n        <Icon Type=\"notification\" />\n    </Badge>\n    <Badge Dot>\n        <a href=\"#\">Link something</a>\n    </Badge>\n</div>",
        "Type": "Demos.Badge.demo.Dot",
        "Style": "\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "colorful",
        "Title": "多彩徽标",
        "Description": "<p>我们添加了多种预设色彩的徽标样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。</p>\n",
        "Code": "<div>\n    <h4 style=\"margin-bottom: 16px\">Presets:</h4>\n    <div>\n        @foreach (var color in colors)\n        {\n            <div key=\"@color\">\n                <Badge Color=\"@color\" Text=\"@color\" />\n            </div>\n        }\n    </div>\n    <h4 style=\"margin:16px 0;\">Custom:</h4>\n    <div>\n        <Badge Color=\"#f50\" Text=\"#f50\" />\n        <br />\n        <Badge Color=\"#2db7f5\" Text=\"#2db7f5\" />\n        <br />\n        <Badge Color=\"#87d068\" Text=\"#87d068\" />\n        <br />\n        <Badge Color=\"#108ee9\" Text=\"#108ee9\" />\n    </div>\n</div>\n\n<style>\n    .ant-tag {\n        margin-bottom: 8px;\n    }\n</style>\n\n@code\n{\n    string[] colors =\n    {\n        \"pink\",\n        \"red\",\n        \"yellow\",\n        \"orange\",\n        \"cyan\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"geekblue\",\n        \"magenta\",\n        \"volcano\",\n        \"gold\",\n        \"lime\",\n    };\n}\n",
        "Type": "Demos.Badge.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "link",
        "Title": "可点击",
        "Description": "<p>用 a 标签进行包裹即可。</p>\n",
        "Code": "<a href=\"#\">\n    <Badge Count=\"5\">\n        <span class=\"head-example\" />\n    </Badge>\n</a>",
        "Type": "Demos.Badge.demo.Link",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 100,
        "Name": "title",
        "Title": "自定义标题",
        "Description": "<p>设置鼠标放在状态点上时显示的文字。</p>\n",
        "Code": "<div>\n    <Badge Count=\"5\" Title=\"Custom hover text\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>",
        "Type": "Demos.Badge.demo.Title",
        "Style": "\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-right: 20px;\n}\n\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 2px;\n  background: #eee;\n  display: inline-block;\n}\n[data-theme=\"dark\"] .head-example {\n  background: rgba(255,255,255,.12);\n}\n\n",
        "Debug": true
      },
      {
        "Order": 6,
        "Name": "status",
        "Title": "状态点",
        "Description": "<p>用于表示状态的小圆点。</p>\n",
        "Code": "<div>\n    <Badge Status=\"success\" />\n    <Badge Status=\"error\" />\n    <Badge Status=\"default\" />\n    <Badge Status=\"processing\" />\n    <Badge Status=\"warning\" />\n    <br />\n    <Badge Status=\"success\" Text=\"Success\" />\n    <br />\n    <Badge Status=\"error\" Text=\"Error\" />\n    <br />\n    <Badge Status=\"default\" Text=\"Default\" />\n    <br />\n    <Badge Status=\"processing\" Text=\"Processing\" />\n    <br />\n    <Badge Status=\"warning\" Text=\"Warning\" />\n</div>",
        "Type": "Demos.Badge.demo.Status",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "overflow",
        "Title": "封顶数字",
        "Description": "<p>超过 <code>overflowCount</code> 的会显示为 <code>${overflowCount}+</code>，默认的 <code>overflowCount</code> 为 <code>99</code>。</p>\n",
        "Code": "<div>\n    <Badge Count=\"99\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"100\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"99\" OverflowCount=\"10\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n    <Badge Count=\"1000\" OverflowCount=\"999\">\n        <a href=\"#\" class=\"head-example\" />\n    </Badge>\n</div>\n",
        "Type": "Demos.Badge.demo.Overflow",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Card",
    "SubTitle": "卡片",
    "Type": "数据展示",
    "Desc": "<p>通用卡片容器.</p>\n<h2>何时使用</h2>\n<ul>\n<li>最基础的卡片容器，可承载文字、列表、图片、段落，常用于后台概览页面。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Card</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Actions</td>\n<td>卡片操作组，位置在卡片底部</td>\n<td>Array(RenderFragment)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Body</td>\n<td>卡片主要区域</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>卡片右上角的操作区域</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Bordered</td>\n<td>是否有边框</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>内容区域自定义样式</td>\n<td>Css Properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Cover</td>\n<td>卡片封面</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>当卡片内容还在加载中时，可以用 loading 展示一个占位</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>size</td>\n<td>card 的尺寸</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>卡片标题</td>\n<td>String or RenderFragement</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>卡片类型，可设置为 inner 或 不设置</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Card.Grid</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ChildContent</td>\n<td>子容器</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Hoverable</td>\n<td>鼠标移过时可浮起</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>定义网格容器类名的样式</td>\n<td>CSS Properties</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Card.Meta</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Avatar</td>\n<td>头像和图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>子容器</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>描述内容</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>定义容器类名的样式</td>\n<td>CSS Properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>标题内容</td>\n<td>String or RenderFragement</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Customized",
        "Title": "更灵活的内容展示",
        "Description": "<p>可以利用 Card.Meta 支持更灵活的内容。</p>\n",
        "Code": "<div>\n    <Card Hoverable Style=\"width: 240px\" Cover=\"coverTemplate\">\n        <CardMeta>\n            <Title>\n                Europe Street beat\n            </Title>\n            <Description> www.instagram.com</Description>\n        </CardMeta>\n    </Card>\n</div>\n\n\n@code\n{\n\n    private RenderFragment coverTemplate =@<img alt=\"example\"  src=\"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\" />;\n\n}\n\n\n",
        "Type": "Demos.Card.demo.Customized",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Simple",
        "Title": "简洁卡片",
        "Description": "<p>只包含内容区域。</p>\n",
        "Code": "<div>\n    <Card Bordered=\"true\" Style=\"width: 300px\">\n        <p>Card content</p>\n        <p>Card content</p>\n        <p>Card content</p>\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Card.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "Tabs1",
        "Title": "带页签的卡片",
        "Description": "<p>可承载更多内容。</p>\n",
        "Code": "<div>\n    <Card Style=\"width:100%\" Title=@(\"Card title\")>\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <Tabs DefaultActiveKey=\"1\">\n                <TabPane Key=\"1\">\n                    <Tab>Tab 1</Tab>\n                    <ChildContent>Content of Tab Pane 1</ChildContent>\n                </TabPane>\n                <TabPane Key=\"2\">\n                    <Tab>Tab 2</Tab>\n                    <ChildContent>Content of Tab Pane 2</ChildContent>\n                </TabPane>\n                <TabPane Key=\"3\">\n                    <Tab>Tab 3</Tab>\n                    <ChildContent>Content of Tab Pane 3</ChildContent>\n                </TabPane>\n            </Tabs>\n        </Body>\n    </Card>\n\n    <Card Style=\"width:100%\" >\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <Tabs DefaultActiveKey=\"1\">\n                <TabPane Key=\"1\">\n                    <Tab>Article</Tab>\n                    <ChildContent>Content of Tab Pane 1</ChildContent>\n                </TabPane>\n                <TabPane Key=\"2\">\n                    <Tab>App</Tab>\n                    <ChildContent>Content of Tab Pane 2</ChildContent>\n                </TabPane>\n                <TabPane Key=\"3\">\n                    <Tab>Project</Tab>\n                    <ChildContent>Content of Tab Pane 3</ChildContent>\n                </TabPane>\n            </Tabs>\n        </Body>\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Card.demo.Tabs1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Noborder",
        "Title": "无边框",
        "Description": "<p>在灰色背景上使用无边框的卡片。</p>\n",
        "Code": "<div style=\"background:#ECECEC; padding:30px\">\n    <Card  Title=@(\"Card title\") Style=\"width: 300px\"> \n        <Body>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </Body>\n    </Card>\n</div>\n\n\n",
        "Type": "Demos.Card.demo.Noborder",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Inner",
        "Title": "内部卡片",
        "Description": "<p>可以放在普通卡片内部，展示多层级结构的信息。</p>\n",
        "Code": "<div>\n    <Card Title=@(\"Card title\")>  \n        <Body>\n\n\n            <Card Title=@(\"Inner card title\")>\n                <Extra>   <a slot=\"extra\" href=\"#\">More</a>  </Extra>\n                <Body>                   \n                    Inner Card content\n                </Body>\n              \n            </Card>\n            <Card Title=@(\"Inner card title\") Style=\"margin-top: 16px\">\n                <Extra> <a slot=\"extra\" href=\"#\">More</a> </Extra>\n                <Body>\n               \n                    Inner Card content\n                </Body>             \n            </Card>\n\n        </Body>\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Card.demo.Inner",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Support",
        "Title": "支持更多内容配置",
        "Description": "<p>一种支持封面、头像、标题和描述信息的卡片。</p>\n",
        "Code": "<div>\n    <Card Style=\"width:300px;\" Bordered Cover=\"coverTemplate\" Actions=\"new[] { actionSetting, actionEdit, actionEllipsis }\">\n        <CardMeta Avatar=\"avatarTemplate\">\n            <Title>Meta Card</Title>\n            <Description>This is the description</Description>\n        </CardMeta>\n    </Card>\n</div>\n\n@code\n{\n    private RenderFragment actionSetting =@<Template><Icon Type=\"setting\" /></Template>;\n\n    private RenderFragment actionEdit =@<Template><Icon Type=\"edit\" /></Template>;\n\n    private RenderFragment actionEllipsis =@<Template><Icon Type=\"ellipsis\" /></Template>;\n\n    private RenderFragment avatarTemplate = @<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    private RenderFragment coverTemplate = @<img alt=\"example\" src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\" />;\n\n}\n\n\n",
        "Type": "Demos.Card.demo.Support",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "典型卡片",
        "Description": "<p>包含标题、内容、操作区域。\n可通过设置size为<code>default</code>或者<code>small</code>，控制尺寸</p>\n",
        "Code": "<div>\n    <Card Bordered Title=@(\"Default size card\")>\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </Body>\n    </Card>\n\n    <Card Bordered Size=\"small\" Title=@(\"Small size card\")>\n        <Extra>\n            <a>More</a>\n        </Extra>\n        <Body>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </Body>\n    </Card>\n\n\n</div>\n@code\n{\n    private RenderFragment actionSetting =@<Template>  <Icon Type=\"setting\" /></Template>;\n\n    private RenderFragment actionEdit =@<Template><Icon Type=\"edit\" /></Template>;\n\n    private RenderFragment actionEllipsis =@<Template> <Icon Type=\"ellipsis\" /></Template>;\n\n}\n",
        "Type": "Demos.Card.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Grid",
        "Title": "网格型内嵌卡片",
        "Description": "<p>一种常见的卡片内容区隔模式。</p>\n",
        "Code": "<div>\n    <Card Title=@(\"Card Title\")>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"false\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\"Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n        <CardGrid Style=\"width:25%;text-align:center\" Hoverable=\"true\">\n            Content\n        </CardGrid>\n\n    </Card>\n</div>\n\n\n  ",
        "Type": "Demos.Card.demo.Grid",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Loading",
        "Title": "预加载的卡片",
        "Description": "<p>数据读入前会有文本块样式。</p>\n",
        "Code": "<div>\n    <Card Loading=\"loading\" Title=@(\"Card title\")>\n        <p>Card content</p>\n        <p>Card content</p>\n        <p>Card content</p>\n    </Card>\n    <Button Style=\"margin-top: 16px\"  OnClick=\"handleClick\">\n        Toggle loading\n    </Button>\n</div>\n\n@code\n{\n    bool loading { get; set; } = true;\n    void handleClick()\n    {\n        loading = !loading;\n    }\n}\n\n\n  ",
        "Type": "Demos.Card.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Column",
        "Title": "栅格卡片",
        "Description": "<p>在系统概览页面常常和栅格进行配合。</p>\n",
        "Code": "<div style=\"background-color: #ececec; padding: 20px;\">\n    <Row Gutter=\"16\">\n        <Col Span=\"8\">\n            <Card Bordered=\"false\" Title=@(\"Card title\")>\n                <Body>\n                    <p>Card content</p>\n                </Body>\n            </Card>\n        </Col>\n        <Col Span=\"8\">\n            <Card Bordered=\"false\" Title=@(\"Card title\")>\n                <Body>\n                    <p>Card content</p>\n                </Body>\n            </Card>\n        </Col>\n        <Col Span=\"8\">\n            <Card Bordered=\"false\" Title=@(\"Card title\")>\n                <Body>\n                    <p>Card content</p>\n                </Body>\n            </Card>\n        </Col>\n    </Row>\n\n</div>\n\n\n",
        "Type": "Demos.Card.demo.Column",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Radio",
    "SubTitle": "单选框",
    "Type": "数据录入",
    "Desc": "<p>单选框。</p>\n<h2>何时使用</h2>\n<p>-用于在多个备选项中选中单个状态。\n-和 <code>Select</code> 的区别是，<code>Radio</code> 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Radio/Radio.Button</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>指定当前是否选中</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>初始是否选中</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用 Radio</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>根据 value 进行比较，判断是否选中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>RadioGroup</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButtonStyle</td>\n<td>RadioButton 的风格样式，目前有描边和填色两种风格</td>\n<td><code>outline</code>,<code>solid</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁选所有子单选器</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>用于设置当前选中的值</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>RadioGroup 下所有 input[type=&quot;radio&quot;] 的 name 属性</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>大小，只对按钮样式生效</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选项变化时的回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 8,
        "Name": "Optional",
        "Title": "Radio.Group 组合 - 配置方式",
        "Description": "<p>通过配置 options 参数来渲染单选框。</p>\n",
        "Code": "<div>\n To do \n</div>\n",
        "Type": "Demos.Radio.demo.Optional",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Size",
        "Title": "大小",
        "Description": "<p>大中小三种组合，可以和表单输入框进行对应配合。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"large\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue5\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"small\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n\n</div>\n@code\n{\n    string radioValue5 = \"A\";\n}",
        "Type": "Demos.Radio.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Name",
        "Title": "单选组合 - 配合 name 使用",
        "Description": "<p>可以为 Radio.Group 配置 name 参数，为组合内的 input 元素赋予相同的 name 属性，使浏览器把 Radio.Group 下的 Radio 真正看作是一组（例如可以通过方向键始终在同一组内更改选项）。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue2\" Name=\"radiogroup\">\n        <Radio Value=\"A\">A</Radio>\n        <Radio Value=\"B\">B</Radio>\n        <Radio Value=\"C\">C</Radio>\n        <Radio Value=\"D\">D</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue2 = \"A\";\n}",
        "Type": "Demos.Radio.demo.Name",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Disable",
        "Title": "不可用",
        "Description": "<p>Radio 不可用.</p>\n",
        "Code": "<div>\n    <Radio Checked Disabled=\"@Disabled\">\n        Disabled\n    </Radio>\n    <br />\n    <Radio Disabled=\"@Disabled\">\n        Disabled\n    </Radio>\n    <div style=\"margin-top: 20px\">\n        <Button Type=\"primary\" OnClick=\"_=>Disabled=!Disabled\">Toggle Disabled</Button>\n    </div>\n</div>\n\n@code\n{\n    bool Disabled = true;\n}\n",
        "Type": "Demos.Radio.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Group",
        "Title": "单选组合",
        "Description": "<p>一组互斥的 Radio 配合使用。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@_value\" >\n        <Radio Value=\"1\">A</Radio>\n        <Radio Value=\"2\">B</Radio>\n        <Radio Value=\"3\">C</Radio>\n        <Radio Value=\"4\">D</Radio>\n    </RadioGroup>\n</div>\n@code\n {\n    void onChange(string value)\n    {\n\n    }\n\n    string _value = \"1\";\n}",
        "Type": "Demos.Radio.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Style",
        "Title": "按钮样式",
        "Description": "<p>按钮样式的单选组合。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\" Disabled>Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n    <br />\n    <br />\n    <RadioGroup @bind-Value=\"radioValue3\">\n        <Radio RadioButton Value=\"A\" Disabled>Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\" Disabled>Shanghai</Radio>\n        <Radio RadioButton Value=\"C\" Disabled>Beijing</Radio>\n        <Radio RadioButton Value=\"D\" Disabled>Chengdu</Radio>\n    </RadioGroup>\n</div>\n\n@code\n{\n    string radioValue3 = \"A\";\n}\n",
        "Type": "Demos.Radio.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\n    <Radio >Radio</Radio>\n</div>\n",
        "Type": "Demos.Radio.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Vgroup",
        "Title": "Radio.Group 垂直",
        "Description": "<p>垂直的 Radio.Group，配合更多输入框选项。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"@radioValue\">\n        <Radio Style=\"@style\" Value=\"A\">Option A</Radio>\n        <Radio Style=\"@style\" Value=\"B\">Option B</Radio>\n        <Radio Style=\"@style\" Value=\"C\">Option C</Radio>\n        <Radio Style=\"@style\" Value=\"M\">\n            More...\n            @if (radioValue == \"M\")\n            {\n                <AntDesign.Input type=\"text\" TValue=\"string\" />\n            }\n        </Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue = \"A\";\n    string style = \"display: block;height:30px;line-height:30px\";\n}",
        "Type": "Demos.Radio.demo.Vgroup",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Button",
        "Title": "填底的按钮样式",
        "Description": "<p>实色填底的单选按钮样式。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"radioValue4\" ButtonStyle=\"solid\">\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\n    </RadioGroup>\n</div>\n@code\n{\n    string radioValue4 = \"A\";\n}",
        "Type": "Demos.Radio.demo.Button_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Descriptions",
    "SubTitle": "描述列表",
    "Type": "数据展示",
    "Desc": "<p>成组显示多个只读字段。</p>\n<h2>何时使用</h2>\n<p>常见于详情页的信息展示。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "vertical",
        "Title": "垂直",
        "Description": "<p>Vertical usage.</p>\n",
        "Code": "<Descriptions Title=\"@(\"User Info\")\" Layout=\"@DescriptionsLayout.Vertical\">\n    <DescriptionsItem Title=\"@(\"UserName\")\">Zhou Maomao</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Telephone\")\">18100000000</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Live\")\">Hangzhou, Zhejiang</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Address\")\" Span=\"2\">\n        No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Remark\")\">Empty</DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Descriptions.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的展示。</p>\n",
        "Code": "<Descriptions Title=\"@(\"User Info\")\">\n    <DescriptionsItem Title=\"@(\"UserName\")\">Zhou Maomao</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Telephone\")\">18100000000</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Live\")\">Hangzhou, Zhejiang</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Remark\")\">Empty</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Address\")\">\n        No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n    </DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Descriptions.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "custom-size",
        "Title": "自定义尺寸",
        "Description": "<p>自定义尺寸，适应在各种容器中展示。</p>\n",
        "Code": "<RadioGroup @bind-Value=\"@size\">\n    <Radio Value=\"default\">default</Radio>\n    <Radio Value=\"middle\">middle</Radio>\n    <Radio Value=\"small\">small</Radio>\n</RadioGroup>\n<br />\n<br />\n<Descriptions Title=\"@(\"Custom Size\")\" Bordered Size=\"@size\">\n    <DescriptionsItem Title=\"@(\"Product\")\">\n        Cloud Database\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Billing\")\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"time\")\">18:00:00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Amount\")\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Discount\")\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Official\")\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Config Info\")\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1\n        <br />\n    </DescriptionsItem>\n</Descriptions>\n\n@code{\n    private string size = DescriptionsSize.Default;\n}",
        "Type": "Demos.Descriptions.demo.CustomSize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "border",
        "Title": "带边框的",
        "Description": "<p>带边框和背景颜色列表。</p>\n",
        "Code": "<Descriptions Title=\"@(\"User Info\")\" Bordered>\n    <DescriptionsItem Title=\"@(\"Product\")\">Cloud Database</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Billing Mode\")\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Automatic Renewal\")\">YES</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Order Time\")\">\n        2018-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Usage Time\")\" Span=\"2\">\n        2018-04-24 18:00:00 To 2019-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Status\")\" Span=\"3\">\n        <Badge Status=\"@BadgeStatus.Processing\" Text=\"Running\"></Badge>\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Negotiated Amount\")\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Discount\")\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Official Receipts\")\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Config Info\")\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1<br />\n    </DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Descriptions.demo.Border",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "responsive",
        "Title": "响应式",
        "Description": "<p>通过响应式的配置可以实现在小屏幕设备上的完美呈现。</p>\n",
        "Code": "<Descriptions Title=\"@(\"Responsive Descriptions\")\" Bordered Column=\"@column\">\n    <DescriptionsItem Title=\"@(\"Product\")\">\n        Cloud Database\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Billing\")\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"time\")\">18:00:00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Amount\")\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Discount\")\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Official\")\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Config Info\")\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1\n        <br />\n    </DescriptionsItem>\n</Descriptions>\n\n@code{\n\n    private Dictionary<string, int> column = new Dictionary<string, int> {\n            { \"xxl\", 3 },\n            { \"xl\", 2},\n            { \"lg\", 1},\n            { \"md\", 1},\n            { \"sm\", 1},\n            { \"xs\", 1}\n        };\n\n}",
        "Type": "Demos.Descriptions.demo.Responsive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "vertical-border",
        "Title": "垂直边框",
        "Description": "<p>垂直且带边框。</p>\n",
        "Code": "<Descriptions Title=\"@(\"User Info\")\" Bordered Layout=\"@DescriptionsLayout.Vertical\">\n    <DescriptionsItem Title=\"@(\"Product\")\">Cloud Database</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Billing Mode\")\">Prepaid</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Automatic Renewal\")\">YES</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Order Time\")\">\n        2018-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Usage Time\")\" Span=\"2\">\n        2018-04-24 18:00:00 To 2019-04-24 18:00:00\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Status\")\" Span=\"3\">\n        <Badge Status=\"processing\" Text=\"Running\"></Badge>\n    </DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Negotiated Amount\")\">$80.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Discount\")\">$20.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Official Receipts\")\">$60.00</DescriptionsItem>\n    <DescriptionsItem Title=\"@(\"Config Info\")\">\n        Data disk type: MongoDB\n        <br />\n        Database version: 3.4\n        <br />\n        Package: dds.mongo.mid\n        <br />\n        Storage space: 10 GB\n        <br />\n        Replication_factor:3\n        <br />\n        Region: East China 1<br />\n    </DescriptionsItem>\n</Descriptions>",
        "Type": "Demos.Descriptions.demo.VerticalBorder",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Modal",
    "SubTitle": "对话框",
    "Type": "反馈",
    "Desc": "<p>模态对话框。</p>\n<h2>何时使用</h2>\n<p>需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 <code>Modal</code> 在当前页面正中打开一个浮层，承载相应的操作。</p>\n<p>另外当需要一个简洁的确认框询问用户时，可以使用 <code>ModalService.Confirm()</code> 等语法糖方法。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AfterClose</td>\n<td>Modal 完全关闭后的回调</td>\n<td>EventCallback</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Modal body 样式</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelText</td>\n<td>取消按钮文字</td>\n<td>string|RenderFragment</td>\n<td>Cancel</td>\n</tr>\n<tr>\n<td>Centered</td>\n<td>垂直居中展示 Modal</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>是否显示右上角的关闭按钮</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>自定义关闭图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ConfirmLoading</td>\n<td>确定按钮 loading</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>DestroyOnClose</td>\n<td>关闭时销毁 Modal 里的子元素</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>底部内容，当不需要默认底部按钮时，可以设为 <code>null</code></td>\n<td>string|RenderFragment</td>\n<td>确定取消按钮</td>\n</tr>\n<tr>\n<td>ForceRender</td>\n<td>强制渲染 Modal</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>GetContainer</td>\n<td>指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom</td>\n<td>ElementReference?</td>\n<td>document.body</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>是否支持键盘 esc 关闭</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>是否展示遮罩</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>点击蒙层是否允许关闭</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>遮罩样式</td>\n<td>string</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>OkText</td>\n<td>确认按钮文字</td>\n<td>string|RenderFragment</td>\n<td>OK</td>\n</tr>\n<tr>\n<td>OkType</td>\n<td>确认按钮类型</td>\n<td>string</td>\n<td>primary</td>\n</tr>\n<tr>\n<td>OkButtonProps</td>\n<td>ok 按钮 props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelButtonProps</td>\n<td>cancel 按钮 props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>可用于设置浮层的样式，调整浮层位置等</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>标题</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>对话框是否可见</td>\n<td>bool</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>宽度</td>\n<td>string|number</td>\n<td>520</td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>对话框外层容器的类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>设置 Modal 的 <code>z-index</code></td>\n<td>int</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>点击遮罩层或右上角叉或取消按钮的回调</td>\n<td>EventCallback<MouseEventArgs></td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnOk</td>\n<td>点击确定回调</td>\n<td>EventCallback<MouseEventArgs></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>注意</h4>\n<blockquote>\n<p><code>&lt;Modal /&gt;</code> 默认关闭后状态不会自动清空, 如果希望每次打开都是新内容，请设置 <code>DestroyOnClose</code>。</p>\n</blockquote>\n<h3>ModalService</h3>\n<p>包括：</p>\n<ul>\n<li><code>ModalService.Info</code></li>\n<li><code>ModalService.Success</code></li>\n<li><code>ModalService.Error</code></li>\n<li><code>ModalService.Warning</code></li>\n<li><code>ModalService.Confirm</code></li>\n</ul>\n<blockquote>\n<p>请确认已经在 <code>App.Razor</code> 中添加了 <code>&lt;AntContainer /&gt;</code> 组件。</p>\n</blockquote>\n<p>以上均为一个函数，参数为 ConfirmOptions，具体属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocusButton</td>\n<td>指定自动获得焦点的按钮</td>\n<td>ConfirmAutoFocusButton</td>\n<td><code>ConfirmAutoFocusButton.Ok</code></td>\n</tr>\n<tr>\n<td>CancelText</td>\n<td>设置 Modal.confirm 取消按钮文字</td>\n<td>string</td>\n<td>Cancel</td>\n</tr>\n<tr>\n<td>Centered</td>\n<td>垂直居中展示 Modal</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>容器类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Content</td>\n<td>内容</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>点击蒙层是否允许关闭</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>OkText</td>\n<td>确认按钮文字</td>\n<td>string</td>\n<td>确定</td>\n</tr>\n<tr>\n<td>OkType</td>\n<td>确认按钮类型</td>\n<td>string</td>\n<td>primary</td>\n</tr>\n<tr>\n<td>OkButtonProps</td>\n<td>ok 按钮 props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelButtonProps</td>\n<td>cancel 按钮 props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>标题</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>宽度</td>\n<td>string|double</td>\n<td>416</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>设置 Modal 的 <code>z-index</code></td>\n<td>int</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭</td>\n<td>EventCallback<MouseEventArgs>?</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnOk</td>\n<td>点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭</td>\n<td>EventCallback<MouseEventArgs>?</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>以上函数调用后，会返回一个引用，可以通过该引用更新和关闭弹窗。</p>\n<pre><code class=\"language-c#\">ConfirmOptions config = new ConfirmOptions();\nModalService.Info(config);\n\nModalService.Update(config);\n\nModalService.Destroy(config);\n</code></pre>\n<ul>\n<li><code>ModalService.DestroyAll</code></li>\n</ul>\n<p>使用 <code>ModalService.DestroyAll()</code> 可以销毁弹出的确认窗（即上述的 ModalService.Info、ModalService.Success、ModalService.Error、ModalService.Warning、ModalService.Confirm）。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题，而不用各处去使用实例的返回值进行关闭（ModalService.Destroy(config) 适用于主动关闭，而不是路由这样被动关闭）</p>\n",
    "DemoList": [
      {
        "Order": 7,
        "Name": "manual",
        "Title": "手动更新和移除",
        "Description": "<p>手动更新和关闭 <code>Modal.method</code> 方式创建的对话框。</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Button OnClick=\"@CountDown\">Open modal to close in 5s</Button>\n\n\n@code {\n\n    private async Task CountDown()\n    {\n        var secondsToGo = 5;\n        var props = new ConfirmOptions()\n        {\n            Title = \"This is a notification message\",\n            Content = $\"This modal will be destroyed after {secondsToGo} second.\"\n        };\n        _modalService.Success(props);\n        while (secondsToGo > 0)\n        {\n            secondsToGo -= 1;\n            await Task.Delay(1000);\n            props.Content = $\"This modal will be destroyed after {secondsToGo} second.\";\n            await _modalService.Update(props);\n        }\n\n        _modalService.Destroy(props);\n    }\n}\n",
        "Type": "Demos.Modal.demo.Manual",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "async",
        "Title": "异步关闭",
        "Description": "<p>点击确定后异步关闭对话框，例如提交表单。</p>\n",
        "Code": "\n<Button Type=\"primary\" OnClick=\"@ShowModal\">\n    Open Modal with async logic\n</Button>\n<Modal Title=\"@(\"Title\")\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\"\n       ConfirmLoading=\"@_confirmLoading\">\n    <p>@_modalText</p>\n</Modal>\n\n\n@code{\n    bool _visible = false;\n    bool _confirmLoading = false;\n    string _modalText = \"Content of the modal\";\n\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n\n    private async Task HandleOk(MouseEventArgs e)\n    {\n        _modalText = \"The modal will be closed after two seconds\";\n        _confirmLoading = true;\n\n        await Task.Delay(2000);\n        _visible = false;\n        _confirmLoading = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        Console.WriteLine(\"Clicked cancel button\");\n        _visible = false;\n    }\n}",
        "Type": "Demos.Modal.demo.Async",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "info",
        "Title": "信息提示",
        "Description": "<p>各种类型的信息提示，只提供一个按钮用于关闭。</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"HandleInfo\">Info</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"HandleSuccess\">Success</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"HandleError\">Error</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"HandleWarning\">Warning</Button>\n    </SpaceItem>\n</Space>\n@code {\n    private async Task HandleInfo()\n    {\n        RenderFragment content =@<div>\n                <p>some messages...some messages...</p>\n                <p>some messages...some messages...</p>\n            </div>;\n        await _modalService.Info(new ConfirmOptions()\n        {\n            Title = \"This is a notification message\",\n            Content = content\n        });\n    }\n\n    private async Task HandleSuccess()\n    {\n        await _modalService.Success(new ConfirmOptions()\n        {\n            Content = \"some messages...some messages...\"\n        });\n    }\n\n    private async Task HandleError()\n    {\n        await _modalService.Error(new ConfirmOptions()\n        {\n            Title = \"This is an error message\",\n            Content = \"some messages...some messages...\"\n        });\n    }\n\n    private void HandleWarning()\n    {\n        _modalService.Warning(new ConfirmOptions()\n        {\n            Title = \"This is a warning message\",\n            Content = \"some messages...some messages...\"\n        });\n    }\n}\n",
        "Type": "Demos.Modal.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "locale",
        "Title": "国际化",
        "Description": "<p>设置 <code>okText</code> 与 <code>cancelText</code> 以自定义按钮文字。</p>\n",
        "Code": "@inject ModalService _modalService\n\n<div>\n    <Button Type=\"primary\" OnClick=\"@ShowModal\">\n        Modal\n    </Button>\n    <Modal Title=\"@(\"Modal\")\"\n           Visible=\"@_visible\"\n           OnOk=\"@HideModal\"\n           OnCancel=\"@HideModal\"\n           OkText=\"@(\"确认\")\"\n           CancelText=\"@(\"取消\")\">\n        <p>Bla bla ...</p>\n        <p>Bla bla ...</p>\n        <p>Bla bla ...</p>\n    </Modal>\n\n    <Button OnClick=\"@HandleConfirm\">Confirm</Button>\n\n</div>\n\n\n@code {\n    private bool _visible = false;\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n    private void HideModal()\n    {\n        _visible = false;\n    }\n\n    private async Task HandleConfirm()\n    {\n        await _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Confirm\",\n            Icon =@<Icon Type=\"exclamation-circle\" Theme=\"Outline\"></Icon>,\n            Content = \"Bla bla ...\",\n            OkText = \"确认\",\n            CancelText = \"取消\"\n        });\n    }\n}\n",
        "Type": "Demos.Modal.demo.Locale",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>第一个对话框。</p>\n",
        "Code": "<Button Type=\"primary\" OnClick=\"@(()=>{ _visible = true; })\">\n    Open Modal\n</Button>\n<Modal Title=\"@title\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n@code{\n    string title = \"BasicModal\";\n    bool _visible = false;\n\n    private void HandleOk(MouseEventArgs e)\n    {\n        Console.WriteLine(e);\n        _visible = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        Console.WriteLine(e);\n        _visible = false;\n    }\n}",
        "Type": "Demos.Modal.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "confirm",
        "Title": "确认对话框",
        "Description": "<p>使用 <code>confirm()</code> 可以快捷地弹出确认框。</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Space>\n    <SpaceItem>\n        <Button OnClick=\"@ShowConfirm\">Confirm</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button OnClick=\"@ShowDeleteConfirm\" Type=\"dashed\">Delete</Button>\n    </SpaceItem>\n\n    <SpaceItem>\n        <Button OnClick=\"@ShowPropsConfirm\" Type=\"dashed\"> With extra props</Button>\n    </SpaceItem>\n</Space>\n@code{\n    Func<MouseEventArgs, Task> onOk = (e) =>\n    {\n        Console.WriteLine(\"Ok\");\n        return Task.CompletedTask;\n    };\n    Func<MouseEventArgs, Task> onCancel = (e) =>\n    {\n        Console.WriteLine(\"Cancel\");\n        return Task.CompletedTask;\n    };\n    RenderFragment icon = @<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n\n    private void ShowConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Do you Want to delete these items?\",\n            Icon = icon,\n            Content = \"Some descriptions\",\n            OnOk = onOk,\n            OnCancel = onCancel\n        });\n    }\n\n    private void ShowDeleteConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Are you sure delete this task?\",\n            Icon = icon,\n            Content = \"Some descriptions\",\n            OnOk = onOk,\n            OnCancel = onCancel,\n            OkText = \"Yes\",\n            OkType = \"danger\",\n            CancelText = \"No\",\n\n        });\n    }\n\n    private void ShowPropsConfirm()\n    {\n        _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Are you sure delete this task?\",\n            Icon = icon,\n            Content = \"Some descriptions\",\n            OnOk = onOk,\n            OnCancel = onCancel,\n            OkText = \"Yes\",\n            OkType = \"danger\",\n            CancelText = \"No\",\n            OkButtonProps = new AntDesign.ButtonProps()\n            {\n                Disabled = true,\n            }\n        });\n    }\n}\n",
        "Type": "Demos.Modal.demo.Confirm",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "confirm-promise",
        "Title": "确认对话框",
        "Description": "<p>使用 <code>Confirm()</code> 可以快捷地弹出确认框。OnCancel/OnOk 异步事件 可以延迟关闭。</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Button OnClick=\"@ShowConfirm\">Confirm</Button>\n\n@code {\n\n    private Func<MouseEventArgs, Task> OnOkClick = async (e) =>\n    {\n        await Task.Delay(1000);\n    };\n\n    private async Task ShowConfirm()\n    {\n        RenderFragment icon =@<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n\n        await _modalService.Confirm(new ConfirmOptions()\n        {\n            Title = \"Do you want to delete these items?\",\n            Icon = icon,\n            Content = \"When clicked the OK button, this dialog will be closed after 1 second\",\n            OnOk = OnOkClick\n        });\n    }\n}\n",
        "Type": "Demos.Modal.demo.ConfirmPromise",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "position",
        "Title": "自定义位置",
        "Description": "<p>使用 <code>centered</code> 或类似 <code>style.top</code> 的样式来设置对话框位置。</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" OnClick=\"@SetModal1Visible\">\n        Display a modal dialog at 20px to Top\n    </Button>\n    <Modal Title=\"@(\"20px to Top\")\"\n           Style=\"top: 20px\"\n           Visible=\"_visible1\"\n           OnOk=\"@HideModal1\"\n           OnCancel=\"@HideModal1\"\n           >\n        <p>some contents...</p>\n        <p>some contents...</p>\n        <p>some contents...</p>\n    </Modal>\n    <br />\n    <br />\n    <Button Type=\"primary\" OnClick=\"@SetModal2Visible\">\n        Vertically centered modal dialog\n    </Button>\n    <Modal Title=\"@(\"Vertically centered modal dialog\")\"\n           Centered=\"true\"\n           Visible=\"_visible2\"\n           OnOk=\"@HideModal2\"\n           OnCancel=\"@HideModal2\"\n           >\n        <p>some contents...</p>\n        <p>some contents...</p>\n        <p>some contents...</p>\n    </Modal>\n</div>\n@code {\n    string title = \"BasicModal\";\n    bool _visible1 = false;\n    bool _visible2 = false;\n\n    private void HideModal1()\n    {\n        if (_visible1)\n        {\n            _visible1 = false;\n        }\n    }\n\n    private void HideModal2()\n    {\n        if (_visible2)\n        {\n            _visible2 = false;\n        }\n    }\n\n    private void SetModal1Visible()\n    {\n        _visible1 = true;\n    }\n    private void SetModal2Visible()\n    {\n        _visible2 = true;\n    }\n}\n",
        "Type": "Demos.Modal.demo.Position",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "footer",
        "Title": "自定义页脚",
        "Description": "<p>更复杂的例子，自定义了页脚的按钮，点击提交后进入 loading 状态，完成后关闭。</p>\n<p>不需要默认确定取消按钮时，你可以把 <code>footer</code> 设为 <code>null</code>。</p>\n",
        "Code": "\n<Button Type=\"primary\" OnClick=\"@ShowModal\">\n    Open Modal with customized footer\n</Button>\n@{\n    RenderFragment footer = @<Template>\n        <Button OnClick=\"@HandleCancel\" @key=\"@( \"back\" )\">Return</Button>\n        <Button OnClick=\"@HandleOk\" @key=\"@( \"submit\" )\"\n                   Type=\"primary\"\n                   Loading=\"@_loading\">Submit</Button>\n    </Template>;\n}\n\n<Modal Title=\"@(\"Title\")\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\"\n       Footer=\"@footer\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n\n@code{\n    bool _visible = false;\n    bool _loading = false;\n\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n\n    private async Task HandleOk(MouseEventArgs e)\n    {\n        _loading = true;\n        await Task.Delay(3000);\n        _visible = false;\n        _loading = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        _visible = false;\n    }\n}",
        "Type": "Demos.Modal.demo.Footer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "button-props",
        "Title": "自定义页脚按钮属性",
        "Description": "<p>传入 <code>okButtonProps</code> 和 <code>cancelButtonProps</code> 可分别自定义确定按钮和取消按钮的 props。</p>\n",
        "Code": "<Button Type=\"primary\" OnClick=\"@ShowModal\">\n    Open Modal with customized button props\n</Button>\n<Modal Title=\"@(\"BasicModal\")\"\n       Visible=\"@_visible\"\n       OnOk=\"@HandleOk\"\n       OnCancel=\"@HandleCancel\"\n       OkButtonProps=\"new AntDesign.ButtonProps(){ Disabled = true }\"\n       CancelButtonProps=\"new AntDesign.ButtonProps(){ Disabled = true }\">\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n@code{\n    bool _visible = false;\n\n    private void ShowModal()\n    {\n        _visible = true;\n    }\n\n    private void HandleOk(MouseEventArgs e)\n    {\n        Console.WriteLine(\"e\");\n        _visible = false;\n    }\n\n    private void HandleCancel(MouseEventArgs e)\n    {\n        Console.WriteLine(\"e\");\n        _visible = false;\n    }\n}",
        "Type": "Demos.Modal.demo.ButtonProps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "confirm-router",
        "Title": "销毁确认对话框",
        "Description": "<p>使用 <code>Modal.destroyAll()</code> 可以销毁弹出的确认窗。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题。</p>\n",
        "Code": "@inject ModalService _modalService\n\n<Button OnClick=\"@ShowConfirm\">Confirm</Button>\n\n\n@code {\n\n    private async Task DestroyAll()\n    {\n        await _modalService.DestroyAll();\n    }\n\n    private async Task ShowConfirm()\n    {\n        RenderFragment icon =@<Icon Type=\"exclamation-circle\" Theme=\"outline\"></Icon>;\n        RenderFragment content = @<Button OnClick=\"DestroyAll\"> Click to destroy all </Button>;\n\n        for (int i = 0; i < 3; i++)\n        {\n\n            await _modalService.Confirm(new ConfirmOptions()\n            {\n                Icon = icon,\n                Content = content,\n            });\n            await Task.Delay(500);\n        }\n    }\n}\n",
        "Type": "Demos.Modal.demo.ConfirmRouter",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Layout",
    "SubTitle": "布局",
    "Type": "布局",
    "Desc": "<p>协助进行页面级整体布局。</p>\n<h2>设计规则</h2>\n<h3>尺寸</h3>\n<p>一级导航项偏左靠近 logo 放置，辅助菜单偏右放置。</p>\n<ul>\n<li>顶部导航（大部分系统）：一级导航高度 <code>64px</code>，二级导航 <code>48px</code>。</li>\n<li>顶部导航（展示类页面）：一级导航高度 <code>80px</code>，二级导航 <code>56px</code>。</li>\n<li>顶部导航高度的范围计算公式为：<code>48+8n</code>。</li>\n<li>侧边导航宽度的范围计算公式：<code>200+8n</code>。</li>\n</ul>\n<h3>交互</h3>\n<ul>\n<li>一级导航和末级的导航需要在可视化的层面被强调出来；</li>\n<li>当前项应该在呈现上优先级最高；</li>\n<li>当导航收起的时候，当前项的样式自动赋予给它的上一个层级；</li>\n<li>左侧导航栏的收放交互同时支持手风琴和全展开的样式，根据业务的要求进行适当的选择。</li>\n</ul>\n<h3>视觉</h3>\n<p>导航样式上需要根据信息层级合理的选择样式：</p>\n<ul>\n<li><p><strong>大色块强调</strong></p>\n<p>建议用于底色为深色系时，当前页面父级的导航项。</p>\n</li>\n<li><p><strong>高亮火柴棍</strong></p>\n<p>当导航栏底色为浅色系时使用，可用于当前页面对应导航项，建议尽量在导航路径的最终项使用。</p>\n</li>\n<li><p><strong>字体高亮变色</strong></p>\n<p>从可视化层面，字体高亮的视觉强化力度低于大色块，通常在当前项的上一级使用。</p>\n</li>\n<li><p><strong>字体放大</strong></p>\n<p><code>12px</code>、<code>14px</code> 是导航的标准字号，14 号字体用在一、二级导航中。字号可以考虑导航项的等级做相应选择。</p>\n</li>\n</ul>\n<h2>组件概述</h2>\n<ul>\n<li><code>Layout</code>：布局容器，其下可嵌套 <code>Header</code> <code>Sider</code> <code>Content</code> <code>Footer</code> 或 <code>Layout</code> 本身，可以放在任何父容器中。</li>\n<li><code>Header</code>：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n<li><code>Sider</code>：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n<li><code>Content</code>：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n<li><code>Footer</code>：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n</ul>\n<blockquote>\n<p>注意：采用 flex 布局实现，请注意<a href=\"http://caniuse.com/#search=flex\">浏览器兼容性</a>问题。</p>\n</blockquote>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Layout&gt;\n  &lt;Header&gt;header&lt;/Header&gt;\n  &lt;Layout&gt;\n    &lt;Sider&gt;left sidebar&lt;/Sider&gt;\n    &lt;Content&gt;main content&lt;/Content&gt;\n    &lt;Sider&gt;right sidebar&lt;/Sider&gt;\n  &lt;/Layout&gt;\n  &lt;Footer&gt;footer&lt;/Footer&gt;\n&lt;/Layout&gt;\n</code></pre>\n<h3>Layout</h3>\n<p>布局容器。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>容器 className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hasSider</td>\n<td>表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>指定样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>Layout.Header</code> <code>Layout.Footer</code> <code>Layout.Content</code> API 与 <code>Layout</code> 相同</p>\n</blockquote>\n<h3>Layout.Sider</h3>\n<p>侧边栏。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>breakpoint</td>\n<td>触发响应式布局的<a href=\"/components/grid-cn/#Col\">断点</a></td>\n<td><code>xs</code> | <code>sm</code> | <code>md</code> | <code>lg</code> | <code>xl</code> | <code>xxl</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>容器 className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsed</td>\n<td>当前收起状态</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsedWidth</td>\n<td>收缩宽度，设置为 0 会出现特殊 trigger</td>\n<td>number</td>\n<td>80</td>\n</tr>\n<tr>\n<td>collapsible</td>\n<td>是否可收起</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>defaultCollapsed</td>\n<td>是否默认收起</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>reverseArrow</td>\n<td>翻转折叠提示箭头的方向，当 Sider 在右边时可以使用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>指定样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>dark</code></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>自定义 trigger，设置为 null 时隐藏 trigger</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>宽度</td>\n<td>number|string</td>\n<td>200</td>\n</tr>\n<tr>\n<td>onCollapse</td>\n<td>展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发</td>\n<td>(collapsed, type) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBreakpoint</td>\n<td>触发响应式布局<a href=\"/components/grid#API\">断点</a>时的回调</td>\n<td>(broken) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>zeroWidthTriggerStyle</td>\n<td>指定当 <code>collapsedWidth</code> 为 0 时出现的特殊 trigger 的样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>breakpoint width</h4>\n<pre><code class=\"language-js\">{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n</code></pre>\n<style>\n  [data-theme=\"dark\"] .site-layout-background {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] .site-layout-header-background {\n    background: #1f1f1f;\n  }\n</style>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 6,
        "Name": "fixed",
        "Title": "固定头部",
        "Description": "<p>一般用于固定顶部导航，方便页面切换。</p>\n",
        "Code": "<Layout>\n    <Header Style=\"position: fixed; z-index: 1; width: 100%; \">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new[]{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Class=\"site-layout\" Style=\"padding:0 50px; margin-top: 64px; \">\n        <Breadcrumb Style=\" margin: 16px 0;\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <div class=\"site-layout-background\" style=\"padding: 24px; min-height: 380px \">\n            Content\n        </div>\n    </Content>\n    <Footer Style=\"text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    #components-layout-demo-fixed .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 24px 16px 0;\n        float: left;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Fixed",
        "Style": "\n[data-theme=\"dark\"] .site-layout .site-layout-background {\n  background: #141414;\n}\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "top-side",
        "Title": "顶部-侧边布局",
        "Description": "<p>拥有顶部导航及侧边栏的页面，多用于展示类网站。</p>\n",
        "Code": "<Layout>\n    <Header Class=\"header\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Style=\"padding: 0 50px\">\n        <Breadcrumb Style=\" margin: 16px 0\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <Layout Class=\"site-layout-background\" Style=\"padding: 24px 0;\">\n            <Sider Class=\"site-layout-background\" Width=\"200\">\n                <Menu Mode=\"MenuMode.Inline\"\n                      DefaultSelectedKeys=@(new[] {\"1\"})\n                      DefaultOpenKeys=@(new[] {\"sub1\"})\n                      Style=\"height: 100%;\">\n                    @{ RenderFragment sub1Title =\n                        @<span>\n                            <Icon Type=\"user\" Theme=\"outline\" />\n                            subnav 1\n                        </span>; }\n                    <SubMenu Key=\"sub1\" Title=sub1Title>\n                        <MenuItem Key=\"1\">option1</MenuItem>\n                        <MenuItem Key=\"2\">option2</MenuItem>\n                        <MenuItem Key=\"3\">option3</MenuItem>\n                        <MenuItem Key=\"4\">option4</MenuItem>\n                    </SubMenu>\n                    @{ RenderFragment sub2Title =\n                        @<span>\n                            <Icon Type=\"laptop\" Theme=\"outline\" />\n                            subnav 2\n                        </span>; }\n                    <SubMenu Key=\"sub2\" Title=sub2Title>\n                        <MenuItem Key=\"5\">option5</MenuItem>\n                        <MenuItem Key=\"6\">option6</MenuItem>\n                        <MenuItem Key=\"7\">option7</MenuItem>\n                        <MenuItem Key=\"8\">option8</MenuItem>\n                    </SubMenu>\n                    @{ RenderFragment sub3Title =\n                        @<span>\n                            <Icon Type=\"notification\" Theme=\"outline\" />\n                            subnav 3\n                        </span>; }\n                    <SubMenu Key=\"sub3\" Title=sub3Title>\n                        <MenuItem Key=\"9\">option9</MenuItem>\n                        <MenuItem Key=\"10\">option10</MenuItem>\n                        <MenuItem Key=\"11\">option11</MenuItem>\n                        <MenuItem Key=\"12\">option12</MenuItem>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Content Style=\"padding:0 24px; min-height: 280px;\">Content</Content>\n        </Layout>\n    </Content>\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    #components-layout-demo-top-side .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 28px 16px 0;\n        float: left;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.TopSide",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "custom-trigger-debug",
        "Title": "自定义触发器 Debug",
        "Description": "<p>修改内容前，请尝试此 Demo 查看样式是否抖动。</p>\n<pre><code class=\"language-jsx\">import { Layout, Menu } from 'antd';\nimport {\n  TeamOutlined,\n  UserOutlined,\n  FileOutlined,\n  DesktopOutlined,\n  PieChartOutlined,\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Sider, Content } = Layout;\nconst { SubMenu } = Menu;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: true,\n  };\n\n  toggle = () =&gt; {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      &lt;Layout&gt;\n        &lt;Sider trigger={null} collapsible collapsed={this.state.collapsed}&gt;\n          &lt;div className=&quot;logo&quot; /&gt;\n          &lt;Menu theme=&quot;dark&quot; mode=&quot;inline&quot; defaultSelectedKeys={['3']} defaultOpenKeys={['sub1']}&gt;\n            &lt;Menu.Item key=&quot;1&quot;&gt;\n              &lt;PieChartOutlined /&gt;\n              &lt;span&gt;Option 1&lt;/span&gt;\n            &lt;/Menu.Item&gt;\n            &lt;Menu.Item key=&quot;2&quot;&gt;\n              &lt;DesktopOutlined /&gt;\n              &lt;span&gt;Option 2&lt;/span&gt;\n            &lt;/Menu.Item&gt;\n            &lt;SubMenu\n              key=&quot;sub1&quot;\n              title={\n                &lt;span&gt;\n                  &lt;UserOutlined /&gt;\n                  &lt;span&gt;User&lt;/span&gt;\n                &lt;/span&gt;\n              }\n            &gt;\n              &lt;Menu.Item key=&quot;3&quot;&gt;Tom&lt;/Menu.Item&gt;\n              &lt;Menu.Item key=&quot;4&quot;&gt;Bill&lt;/Menu.Item&gt;\n              &lt;Menu.Item key=&quot;5&quot;&gt;Alex&lt;/Menu.Item&gt;\n            &lt;/SubMenu&gt;\n            &lt;SubMenu\n              key=&quot;sub2&quot;\n              title={\n                &lt;span&gt;\n                  &lt;TeamOutlined /&gt;\n                  &lt;span&gt;Team&lt;/span&gt;\n                &lt;/span&gt;\n              }\n            &gt;\n              &lt;Menu.Item key=&quot;6&quot;&gt;Team 1&lt;/Menu.Item&gt;\n              &lt;Menu.Item key=&quot;8&quot;&gt;Team 2&lt;/Menu.Item&gt;\n            &lt;/SubMenu&gt;\n            &lt;Menu.Item key=&quot;9&quot;&gt;\n              &lt;FileOutlined /&gt;\n            &lt;/Menu.Item&gt;\n          &lt;/Menu&gt;\n        &lt;/Sider&gt;\n        &lt;Layout&gt;\n          &lt;Header className=&quot;site-layout-background&quot; style={{ padding: 0 }}&gt;\n            {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n              className: 'trigger',\n              onClick: this.toggle,\n            })}\n          &lt;/Header&gt;\n          &lt;Content\n            className=&quot;site-layout-background&quot;\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          &gt;\n            Content\n          &lt;/Content&gt;\n        &lt;/Layout&gt;\n      &lt;/Layout&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;SiderDemo /&gt;, mountNode);\n</code></pre>\n<pre><code class=\"language-css\">#components-layout-demo-custom-trigger .trigger {\n  font-size: 18px;\n  line-height: 64px;\n  padding: 0 24px;\n  cursor: pointer;\n  transition: color 0.3s;\n}\n\n#components-layout-demo-custom-trigger .trigger:hover {\n  color: #1890ff;\n}\n\n#components-layout-demo-custom-trigger .logo {\n  height: 32px;\n  background: rgba(255, 255, 255, 0.2);\n  margin: 16px;\n}\n\n.site-layout-background {\n  background: #fff;\n}\n</code></pre>\n",
        "Code": "<h3>CustomTriggerDebug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Layout.demo.CustomTriggerDebug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本结构",
        "Description": "<p>典型的页面布局。</p>\n",
        "Code": "<div>\n    <Layout>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Header>Header</Header>\n        <Layout>\n            <Sider>Sider</Sider>\n            <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Header>Header</Header>\n        <Layout>\n            <Content>Content</Content>\n            <Sider>Sider</Sider>\n        </Layout>\n        <Footer>Footer</Footer>\n    </Layout>\n\n    <Layout>\n        <Sider>Sider</Sider>\n        <Layout>\n            <Header>Header</Header>\n            <Content>Content</Content>\n            <Footer>Footer</Footer>\n        </Layout>\n    </Layout>\n</div>",
        "Type": "Demos.Layout.demo.Basic",
        "Style": "\n#components-layout-demo-basic .code-box-demo {\n  text-align: center;\n}\n#components-layout-demo-basic .ant-layout-header,\n#components-layout-demo-basic .ant-layout-footer {\n  background: #7dbcea;\n  color: #fff;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-header {\n  background: #6aa0c7;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-footer {\n  background: #6aa0c7;\n}\n#components-layout-demo-basic .ant-layout-footer {\n  line-height: 1.5;\n}\n#components-layout-demo-basic .ant-layout-sider {\n  background: #3ba0e9;\n  color: #fff;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-sider {\n  background: #3499ec;\n}\n#components-layout-demo-basic .ant-layout-content {\n  background: rgba(16, 142, 233, 1);\n  color: #fff;\n  min-height: 120px;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-content {\n  background: #107bcb;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout {\n  margin-bottom: 48px;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout:last-child {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "custom-trigger",
        "Title": "自定义触发器",
        "Description": "<p>要使用自定义触发器，可以设置 <code>trigger={null}</code> 来隐藏默认设定。</p>\n",
        "Code": "@code\n{\n    bool collapsed;\n\n    void toggle()\n    {\n        collapsed = !collapsed;\n    }\n}\n\n<Layout>\n    <Sider Collapsible Collapsed=@collapsed NoTrigger>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"1\"})>\n            <MenuItem Key=\"1\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span>nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"video-camera\" Theme=\"outline\" />\n                <span>nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <Icon Type=\"upload\" Theme=\"outline\" />\n                <span>nav 3</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\">\n        <Header Class=\"site-layout-background\" Style=\"padding: 0;\">\n            @if (collapsed)\n            {\n                <Icon Type=\"menu-unfold\" Theme=\"outline\" Class=\"trigger\" OnClick=\"toggle\" />\n            }\n            else\n            {\n                <Icon Type=\"menu-fold\" Theme=\"outline\" Class=\"trigger\" OnClick=\"toggle\" />\n            }\n        </Header>\n        <Content Class=\"site-layout-background\" Style=\"margin: 24px 16px;padding: 24px;min-height: 280px;\">\n            Content\n        </Content>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-custom-trigger .trigger {\n        font-size: 18px;\n        line-height: 64px;\n        padding: 0 24px;\n        cursor: pointer;\n        transition: color 0.3s;\n    }\n\n        #components-layout-demo-custom-trigger .trigger:hover {\n            color: #1890ff;\n        }\n\n    #components-layout-demo-custom-trigger .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>\n",
        "Type": "Demos.Layout.demo.CustomTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "top-side-2",
        "Title": "顶部-侧边布局-通栏",
        "Description": "<p>同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。</p>\n",
        "Code": "<Layout>\n    <Header Class=\"header\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Layout>\n        <Sider Width=\"200\" Class=\"site-layout-background\">\n            <Menu Mode=\"MenuMode.Inline\"\n                  DefaultSelectedKeys=@(new[] {\"1\"})\n                  DefaultOpenKeys=@(new[] {\"sub1\"})\n                  Style=\"height: 100%; border-right: 0;\">\n                @{\n                    RenderFragment sub1Title =\n                    @<span>\n                        <Icon Type=\"user\" Theme=\"outline\" />\n                        subnav 1\n                    </span>;\n                }\n                <SubMenu Key=\"sub1\" Title=sub1Title>\n                    <MenuItem Key=\"1\">option1</MenuItem>\n                    <MenuItem Key=\"2\">option2</MenuItem>\n                    <MenuItem Key=\"3\">option3</MenuItem>\n                    <MenuItem Key=\"4\">option4</MenuItem>\n                </SubMenu>\n                @{\n                    RenderFragment sub2Title =\n                    @<span>\n                        <Icon Type=\"laptop\" Theme=\"outline\" />\n                        subnav 2\n                    </span>;\n                }\n                <SubMenu Key=\"sub2\" Title=sub2Title>\n                    <MenuItem Key=\"5\">option5</MenuItem>\n                    <MenuItem Key=\"6\">option6</MenuItem>\n                    <MenuItem Key=\"7\">option7</MenuItem>\n                    <MenuItem Key=\"8\">option8</MenuItem>\n                </SubMenu>\n                @{\n                    RenderFragment sub3Title =\n                    @<span>\n                        <Icon Type=\"notification\" Theme=\"outline\" />\n                        subnav 3\n                    </span>;\n                }\n                <SubMenu Key=\"sub3\" Title=sub3Title>\n                    <MenuItem Key=\"9\">option9</MenuItem>\n                    <MenuItem Key=\"10\">option10</MenuItem>\n                    <MenuItem Key=\"11\">option11</MenuItem>\n                    <MenuItem Key=\"12\">option12</MenuItem>\n                </SubMenu>\n            </Menu>\n        </Sider>\n        <Layout Style=\" padding: 0 24px 24px;\">\n            <Breadcrumb Style=\"margin: 16px 0;\">\n                <BreadcrumbItem>Home</BreadcrumbItem>\n                <BreadcrumbItem>List</BreadcrumbItem>\n                <BreadcrumbItem>App</BreadcrumbItem>\n            </Breadcrumb>\n            <Content Class=\"site-layout-background\" Style=\" padding: 24px; margin: 0; min-height: 280px;\">\n                Content\n            </Content>\n        </Layout>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-top-side-2 .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 28px 16px 0;\n        float: left;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.TopSide2",
        "Style": "\n  #components-layout-demo-top-side-2 .logo {\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "fixed-sider",
        "Title": "固定侧边栏",
        "Description": "<p>当内容较长时，使用固定侧边栏可以提供更好的体验。</p>\n",
        "Code": "<Layout>\n    <Sider Style=\"overflow: auto;height: 100vh;position: fixed;left: 0;\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"4\"})>\n            <MenuItem Key=\"1\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"video-camera\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <Icon Type=\"upload\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 3</span>\n            </MenuItem>\n            <MenuItem Key=\"4\">\n                <Icon Type=\"bar-chart\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 4</span>\n            </MenuItem>\n            <MenuItem Key=\"5\">\n                <Icon Type=\"cloud\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 5</span>\n            </MenuItem>\n            <MenuItem Key=\"6\">\n                <Icon Type=\"appstore\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 6</span>\n            </MenuItem>\n            <MenuItem Key=\"7\">\n                <Icon Type=\"team\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 7</span>\n            </MenuItem>\n            <MenuItem Key=\"8\">\n                <Icon Type=\"shop\" Theme=\"outline\"/>\n                <span class=\"nav-text\">nav 8</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\" Style=\" margin-left: 200px\">\n        <Header Class=\"site-layout-background\" Style=\"padding: 0\" ></Header>\n        <Content Style=\"margin: 24px 16px 0; overflow: initial; \">\n            <div class=\"site-layout-background\" style=\"padding: 24px; text-align:center; \">\n                ...\n                <br />\n                Really\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                long\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                ...\n                <br />\n                content\n            </div>\n        </Content>\n        <Footer Style=\" text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-fixed-sider .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.FixedSider",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "top",
        "Title": "上中下布局",
        "Description": "<p>最基本的『上-中-下』布局。</p>\n<p>一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。</p>\n",
        "Code": "<Layout Class=\"layout\">\n    <Header>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new[]{\"2\"})>\n            <MenuItem Key=\"1\">nav 1</MenuItem>\n            <MenuItem Key=\"2\">nav 2</MenuItem>\n            <MenuItem Key=\"3\">nav 3</MenuItem>\n        </Menu>\n    </Header>\n    <Content Style=\"padding: 0 50px;\">\n        <Breadcrumb Style=\"margin: 16px 0;\">\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            <BreadcrumbItem>List</BreadcrumbItem>\n            <BreadcrumbItem>App</BreadcrumbItem>\n        </Breadcrumb>\n        <div class=\"site-layout-content\">Content</div>\n    </Content>\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\n</Layout>\n\n<style>\n    .site-layout-content {\n        background: #fff;\n        padding: 24px;\n        min-height: 280px;\n    }\n    #components-layout-demo-top .logo {\n        width: 120px;\n        height: 31px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px 24px 16px 0;\n        float: left;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Top",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-content {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] #components-layout-demo-top .logo {\n    background: rgba(255,255,255,0.3);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "side",
        "Title": "侧边布局",
        "Description": "<p>侧边两列式布局。页面横向空间有限时，侧边导航可收起。</p>\n<p>侧边导航在页面布局上采用的是左右的结构，一般主导航放置于页面的左侧固定位置，辅助菜单放置于工作区顶部。内容根据浏览器终端进行自适应，能提高横向空间的使用率，但是整个页面排版不稳定。侧边导航的模式层级扩展性强，一、二、三级导航项目可以更为顺畅且具关联性的被展示，同时侧边导航可以固定，使得用户在操作和浏览中可以快速的定位和切换当前位置，有很高的操作效率。但这类导航横向页面内容的空间会被牺牲一部分。</p>\n",
        "Code": "<Layout Style=\"min-height: 100vh; \">\n    <Sider Collapsible Collapsed=@collapsed OnCollapse=@onCollapse>\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" DefaultSelectedKeys=@(new[]{\"1\"}) Mode=\"MenuMode.Inline\">\n            <MenuItem Key=\"1\">\n                <Icon Type=\"pie-chart\" Theme=\"outline\" />\n                <span>Option 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"desktop\" Theme=\"outline\" />\n                <span>Option 2</span>\n            </MenuItem>\n            @{\n                RenderFragment sub1Title =\n                    @<span>\n                        <Icon Type=\"user\" Theme=\"outline\"/>\n                        <span>User</span>\n                    </span>;\n            }\n            <SubMenu Key=\"sub1\" Title=sub1Title>\n                <MenuItem Key=\"3\">Tom</MenuItem>\n                <MenuItem Key=\"4\">Bill</MenuItem>\n                <MenuItem Key=\"5\">Alex</MenuItem>\n            </SubMenu>\n            @{\n                RenderFragment sub2Title =\n                    @<span>\n                        <Icon Type=\"team\" Theme=\"outline\"/>\n                        <span>Team</span>\n                    </span>;\n            }\n            <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"6\">Team 1</MenuItem>\n            <MenuItem Key=\"8\">Team 2</MenuItem>\n            </SubMenu>\n            <MenuItem Key=\"9\">\n                <Icon Type=\"file\" Theme=\"outline\"/>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout Class=\"site-layout\" >\n        <Header Class=\"site-layout-background\" Style=\" padding: 0 ;\" ></Header>\n        <Content Style=\"margin:0 16px;\" >\n            <Breadcrumb Style=\"margin:16px 0;\">\n                <BreadcrumbItem>User</BreadcrumbItem>\n                <BreadcrumbItem>Bill</BreadcrumbItem>\n            </Breadcrumb>\n            <div class=\"site-layout-background\" style=\"padding: 24; min-height: 360px\">\n                Bill is a cat.\n            </div>\n        </Content>\n        <Footer Style=\"text-align:center \">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n\n@code {\n    bool collapsed;\n\n   void onCollapse(bool collapsed) {\n        Console.WriteLine(collapsed);\n        this.collapsed =collapsed;\n    }\n}\n\n\n<style>\n    #components-layout-demo-side .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Side",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "responsive",
        "Title": "响应式布局",
        "Description": "<p>Layout.Sider 支持响应式布局。</p>\n<blockquote>\n<p>说明：配置 <code>breakpoint</code> 属性即生效，视窗宽度小于 <code>breakpoint</code> 时 Sider 缩小为 <code>collapsedWidth</code> 宽度，若将 <code>collapsedWidth</code> 设置为零，会出现特殊 trigger。</p>\n</blockquote>\n",
        "Code": "<Layout>\n    <Sider Breakpoint=\"@BreakpointType.Lg\"\n           CollapsedWidth=\"0\"\n           OnBreakpoint=\"broken => {\n            Console.WriteLine(broken);\n        }\"\n           OnCollapse=\"collapsed => {\n            Console.WriteLine(collapsed);\n        }\">\n        <div class=\"logo\" />\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"4\"})>\n            <MenuItem Key=\"1\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 1</span>\n            </MenuItem>\n            <MenuItem Key=\"2\">\n                <Icon Type=\"video-camera\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 2</span>\n            </MenuItem>\n            <MenuItem Key=\"3\">\n                <Icon Type=\"upload\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 3</span>\n            </MenuItem>\n            <MenuItem Key=\"4\">\n                <Icon Type=\"user\" Theme=\"outline\" />\n                <span class=\"nav-text\">nav 4</span>\n            </MenuItem>\n        </Menu>\n    </Sider>\n    <Layout>\n        <Header Class=\"site-layout-sub-header-background\" Style=\"padding: 0;\" ></Header>\n        <Content Style=\" margin: 24px 16px 0;\">\n            <div class=\"site-layout-background\" style=\"padding: 24px; min-height: 360px\">\n                content\n            </div>\n        </Content>\n        <Footer Style=\"text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n</Layout>\n\n<style>\n    #components-layout-demo-responsive .logo {\n        height: 32px;\n        background: rgba(255, 255, 255, 0.2);\n        margin: 16px;\n    }\n\n    .site-layout-sub-header-background {\n        background: #fff;\n    }\n\n    .site-layout-background {\n        background: #fff;\n    }\n</style>",
        "Type": "Demos.Layout.demo.Responsive",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-sub-header-background {\n    background: #141414;\n  }\n\n",
        "Debug": false
      }
    ]
  },
  {
    "Title": "BackTop",
    "SubTitle": "回到顶部",
    "Type": "导航",
    "Desc": "<p>返回页面顶部的操作按钮。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当页面内容区域比较长时；</li>\n<li>当用户需要频繁返回顶部查看相关内容时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>BackTop</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Target</td>\n<td>设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>VisibilityHeight</td>\n<td>滚动高度达到此参数值才出现 <code>BackTop</code></td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>点击按钮的回调函数</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "Scroll",
        "Title": "自定义样式",
        "Description": "<p>可以自定义回到顶部按钮的样式，限制宽高：<code>40px * 40px</code>。</p>\n",
        "Code": "<div>\n    <style>\n        .myStyle {\n            height: 40px;\n            width: 40px;\n            line-height: 40;\n            border-radius: 4px;\n            background-color: #1088e9;\n            color: #fff;\n            text-align: center;\n            font-size: 14px;\n        }\n    </style>\n\n    <div style=\"height:300px; padding: 8px;  overflow:scroll;\">\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <div>Scroll to bottom</div>\n        <BackTop Title=\"Scroll down to see the bottom-right gray button.\" />\n\n    </div>\n</div>\n",
        "Type": "Demos.BackTop.demo.Scroll",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\n    <div>\n        Scroll down to see the bottom <strong> gray</strong> button\n    </div>\n    <BackTop Title=\"Scroll down to see the bottom-right gray button.\" ></BackTop>\n\n</div>\n",
        "Type": "Demos.BackTop.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Space",
    "SubTitle": "间距",
    "Type": "布局",
    "Desc": "<p>设置组件之间的间距。</p>\n<h2>何时使用</h2>\n<p>避免组件紧贴在一起，拉开统一的空间。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>间距大小</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>间距方向</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "vertical",
        "Title": "垂直间距",
        "Description": "<p>相邻组件垂直间距。</p>\n<p>可以设置 <code>width: 100%</code> 独占一行。</p>\n",
        "Code": "<Space Direction=\"vertical\">\n    <SpaceItem>\n        <Card Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </Card>\n    </SpaceItem>\n    <SpaceItem>\n        <Card Title=@(\"Card\") Style=\"width: 300px;\">\n            <p>Card content</p>\n            <p>Card content</p>\n        </Card>\n    </SpaceItem>\n</Space>",
        "Type": "Demos.Space.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "base",
        "Title": "基本用法",
        "Description": "<p>相邻组件水平间距。</p>\n",
        "Code": "<Space>\n    <SpaceItem>\n        Space\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"primary\">Button</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>\n            <Icon Type=\"upload\" Theme=\"outline\" /> Click to Upload\n        </Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Confirm</Button>\n    </SpaceItem>\n</Space>\n",
        "Type": "Demos.Space.demo.Base",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "间距大小",
        "Description": "<p>间距预设大、中、小三种大小。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>middle</code> 分别把间距设为大、中间距。若不设置 <code>size</code>，则间距为小。</p>\n",
        "Code": "<RadioGroup @bind-Value=@size OnChange=\"e=> setSize(e)\">\n    <Radio Value=\"small\">Small</Radio>\n    <Radio Value=\"middle\">Middle</Radio>\n    <Radio Value=\"large\">Large</Radio>\n</RadioGroup>\n<br />\n<br />\n<Space Size=@size>\n    <SpaceItem>\n        <Button Type=\"primary\">Primary</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Default</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"dashed\">Dashed</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"link\">Link</Button>\n    </SpaceItem>\n</Space>\n\n@code {\n    string size = \"small\";\n    void setSize(string value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}\n",
        "Type": "Demos.Space.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customize",
        "Title": "自定义尺寸",
        "Description": "<p>自定义间距大小。</p>\n",
        "Code": "\n<Slider Value=size OnChange=\"v=>setSize(v.AsT0)\" />\n<br />\n<br />\n<Space Size=\"@($\"{size}\")\">\n    <SpaceItem>\n        <Button Type=\"primary\">Primary</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button>Default</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"dashed\">Dashed</Button>\n    </SpaceItem>\n    <SpaceItem>\n        <Button Type=\"link\">Link</Button>\n    </SpaceItem>\n</Space>\n\n@code{\n    double size = 8;\n\n    void setSize(double value)\n    {\n        size = value;\n        StateHasChanged();\n    }\n}",
        "Type": "Demos.Space.demo.Customize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "debug",
        "Title": "多样的 Child",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<h3>Debug</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Space.demo.Debug",
        "Style": "",
        "Debug": true
      }
    ]
  },
  {
    "Title": "Icon",
    "SubTitle": "图标",
    "Type": "通用",
    "Desc": "<p>语义化的矢量图形。</p>\n<h2>设计师专属</h2>\n<p>安装 Kitchen Sketch 插件 \uD83D\uDC8E，就可以一键拖拽使用 Ant Design 和 Iconfont 的海量图标，还可以关联自有项目。</p>\n<h2>图标列表</h2>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Common Icon</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassName</td>\n<td>设置图标的样式名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>设置图标的样式，例如 fontSize 和 color</td>\n<td>Css propertities</td>\n<td></td>\n</tr>\n<tr>\n<td>Spin</td>\n<td>是否有旋转动画</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Rotate</td>\n<td>图标旋转角度（IE9 无效）</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>TwoToneColor</td>\n<td>仅适用双色图标。设置双色图标的主要颜色</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>We still have three different themes for icons, icon component name is the icon name suffixed by the theme name.</p>\n<p>Custom Icon</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Style</td>\n<td>设置图标的样式，例如 fontSize 和 color</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>Spin</td>\n<td>是否有旋转动画</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Rotate</td>\n<td>图标旋转角度（IE9 无效）</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Component</td>\n<td>控制如何渲染图标，通常是一个渲染根标签为 <svg> 的 React 组件</td>\n<td></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>通过 <code>@ant-design/icons</code> 引用 Icon 组件，不同主题的 Icon 组件名为图标名加主题做为后缀，也可以通过设置 <code>spin</code> 属性来实现动画旋转效果。</p>\n",
        "Code": "<div  class=\"icons-list\">\n    <Icon Type=\"home\" />\n    <Icon Type=\"setting\" Theme=\"fill\" />\n    <Icon Type=\"smile\" Theme=\"outline\" />\n    <Icon Type=\"sync\" Theme=\"outline\" Spin />\n    <Icon Type=\"smile\" Theme=\"outline\" Rotate=\"180\" />\n    <Icon Type=\"loading\" Theme=\"outline\" />\n</div>\n",
        "Type": "Demos.Icon.demo.Basic",
        "Style": "\n.icons-list .anticon {\n  margin-right: 6px;\n  font-size: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "custom",
        "Title": "自定义图标",
        "Description": "<p>利用 <code>Icon</code> 组件封装一个可复用的自定义图标。可以通过 <code>component</code> 属性传入一个组件来渲染最终的图标，以满足特定的需求。</p>\n",
        "Code": "@{\n    RenderFragment HeartSvg =\n        @<svg width=\"1em\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 1024 1024\">\n            <path d=\"M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9z\"/>\n        </svg>;\n\n    RenderFragment PandaSvg =\n        @<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\" fill=\"currentColor\">\n            <path d=\"M99.096 315.634s-82.58-64.032-82.58-132.13c0-66.064 33.032-165.162 148.646-148.646 83.37 11.91 99.096 165.162 99.096 165.162l-165.162 115.614zM924.906 315.634s82.58-64.032 82.58-132.13c0-66.064-33.032-165.162-148.646-148.646-83.37 11.91-99.096 165.162-99.096 165.162l165.162 115.614z\"\n                  fill=\"#6B676E\"\n                  p-id=\"1143\"/>\n            <path d=\"M1024 561.548c0 264.526-229.23 429.42-512.002 429.42S0 826.076 0 561.548 283.96 66.064 512.002 66.064 1024 297.022 1024 561.548z\"\n                  fill=\"#FFEBD2\"\n                  p-id=\"1144\"/>\n            <path d=\"M330.324 842.126c0 82.096 81.34 148.646 181.678 148.646s181.678-66.55 181.678-148.646H330.324z\"\n                  fill=\"#E9D7C3\"\n                  p-id=\"1145\"/>\n            <path d=\"M644.13 611.098C594.582 528.516 561.55 512 512.002 512c-49.548 0-82.58 16.516-132.13 99.096-42.488 70.814-78.73 211.264-49.548 247.742 66.064 82.58 165.162 33.032 181.678 33.032 16.516 0 115.614 49.548 181.678-33.032 29.18-36.476-7.064-176.93-49.55-247.74z\"\n                  fill=\"#FFFFFF\"\n                  p-id=\"1146\"/>\n            <path d=\"M611.098 495.484c0-45.608 36.974-82.58 82.58-82.58 49.548 0 198.194 99.098 198.194 165.162s-79.934 144.904-148.646 99.096c-49.548-33.032-132.128-148.646-132.128-181.678zM412.904 495.484c0-45.608-36.974-82.58-82.58-82.58-49.548 0-198.194 99.098-198.194 165.162s79.934 144.904 148.646 99.096c49.548-33.032 132.128-148.646 132.128-181.678z\"\n                  fill=\"#6B676E\"\n                  p-id=\"1147\"/>\n            <path d=\"M512.002 726.622c-30.06 0-115.614 5.668-115.614 33.032 0 49.638 105.484 85.24 115.614 82.58 10.128 2.66 115.614-32.944 115.614-82.58-0.002-27.366-85.556-33.032-115.614-33.032z\"\n                  fill=\"#464655\"\n                  p-id=\"1148\"/>\n            <path d=\"M330.324 495.484m-33.032 0a33.032 33.032 0 1 0 66.064 0 33.032 33.032 0 1 0-66.064 0Z\"\n                  fill=\"#464655\"\n                  p-id=\"1149\"/>\n            <path d=\"M693.678 495.484m-33.032 0a33.032 33.032 0 1 0 66.064 0 33.032 33.032 0 1 0-66.064 0Z\"\n                  fill=\"#464655\"\n                  p-id=\"1150\"/>\n        </svg>;\n}\n\n<div className=\"custom-icons-list\">\n    <Icon Component=\"HeartSvg\" Style=\"color: hotpink;\" />\n    <Icon Component=\"PandaSvg\" Style=\"font-size: 32px;\" />\n</div>\n\n<style>\n    .custom-icons-list .anticon {\n        margin-right: 6px;\n    }\n</style>",
        "Type": "Demos.Icon.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "two-tone",
        "Title": "多色图标",
        "Description": "<p>双色图标可以通过 <code>twoToneColor</code> 属性设置主题色。</p>\n",
        "Code": "<div>\n    <Icon Type=\"smile\" Theme=\"twotone\" Height=\"2em\" Width=\"2em\" />\n    <Icon Type=\"heart\" Theme=\"twotone\" TwotoneColor=\"#eb2f96\" Height=\"2em\" Width=\"2em\" />\n    <Icon Type=\"check-circle\" Theme=\"twotone\" TwotoneColor=\"#52c41a\" Height=\"2em\" Width=\"2em\" />\n</div>\n\n\n",
        "Type": "Demos.Icon.demo.Twotone",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "scriptUrl",
        "Title": "使用 iconfont.cn 的多个资源",
        "Description": "<p><code>@ant-design/icons@4.1.0</code> 以后，<code>scriptUrl</code> 可引用多个资源，用户可灵活的管理 <a href=\"http://iconfont.cn/\">iconfont.cn</a> 图标。如果资源的图标出现重名，会按照数组顺序进行覆盖。</p>\n",
        "Code": "@inject IconService iconService;\n\n<div class=\"icons-list\">\n    <IconFont Type=\"icon-javascript\" />\n    <IconFont Type=\"icon-java\" />\n    <IconFont Type=\"icon-shoppingcart\" />\n    <IconFont Type=\"icon-python\" />\n</div>\n\n@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        await iconService.CreateFromIconfontCN(\"//at.alicdn.com/t/font_1788044_0dwu4guekcwr.js\");\n        await iconService.CreateFromIconfontCN(\"//at.alicdn.com/t/font_1788592_a5xf2bdic3u.js\");\n    }\n}",
        "Type": "Demos.Icon.demo.ScriptUrl",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "iconfont",
        "Title": "使用 iconfont.cn",
        "Description": "<p>对于使用 <a href=\"http://iconfont.cn/\">iconfont.cn</a> 的用户，通过设置 <code>createFromIconfontCN</code> 方法参数对象中的 <code>scriptUrl</code> 字段， 即可轻松地使用已有项目中的图标。</p>\n",
        "Code": "@inject IconService iconService;\n\n<div class=\"icons-list\">\n    <IconFont Type=\"icon-tuichu\" />\n    <IconFont Type=\"icon-facebook\" />\n    <IconFont Type=\"icon-twitter\" />\n</div>\n\n@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        await iconService.CreateFromIconfontCN(\"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\");\n    }\n}\n",
        "Type": "Demos.Icon.demo.Iconfont",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Rate",
    "SubTitle": "评分",
    "Type": "数据录入",
    "Desc": "<p>评分组件。</p>\n<h2>何时使用</h2>\n<ul>\n<li>对评价进行展示。</li>\n<li>对事物进行快速的评级操作。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>是否允许再次点击后清除</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>AllowHalf</td>\n<td>是否允许半选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>自定义字符</td>\n<td>ReactNode</td>\n<td><a href=\"/components/icon-cn/\">&lt;StarFilled /&gt;</a></td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>自定义样式类名</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>star 总数</td>\n<td>int</td>\n<td>5</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>默认值</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>只读，无法进行交互</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>自定义样式对象</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>Tooltips</td>\n<td>自定义每项的提示信息</td>\n<td>string[]</td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>当前数，受控值</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>OnBlur</td>\n<td>失去焦点时的回调</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>选择时的回调</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>OnFocus</td>\n<td>获取焦点时的回调</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>OnHoverChange</td>\n<td>鼠标经过时数值变化的回调</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>OnKeyDown</td>\n<td>按键回调</td>\n<td>Function(event)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>方法</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>移除焦点</td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>获取焦点</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "只读",
        "Description": "<p>只读，无法进行鼠标交互。</p>\n",
        "Code": "<Rate Disabled DefaultValue=\"2\" />",
        "Type": "Demos.Rate.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<Rate />\n",
        "Type": "Demos.Rate.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "half",
        "Title": "半星",
        "Description": "<p>支持选中半星。</p>\n",
        "Code": "<Rate AllowHalf=\"true\" DefaultValue=\"3.5M\" />\n",
        "Type": "Demos.Rate.demo.Half",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "text",
        "Title": "文案展现",
        "Description": "<p>给评分组件加上文案展示。</p>\n",
        "Code": "<Rate @bind-Value=\"value\" Tooltips=\"@desc\" />\n<span class=\"ant-rate-text\">@(desc[(int)value-1])</span>\n\n@code\n{\n    string[] desc = new string[] { \"terrible\", \"bad\", \"normal\", \"good\", \"wonderful\" };\n    decimal value = 3M;\n}\n",
        "Type": "Demos.Rate.demo.Text",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "character",
        "Title": "其他字符",
        "Description": "<p>可以将星星替换为其他字符，比如字母，数字，字体图标甚至中文。</p>\n",
        "Code": "<Rate Character=\"@Character1\" AllowHalf=\"true\" DefaultValue=\"3\" />\n<br />\n<Rate Character=\"@Character2\" AllowHalf=\"true\" DefaultValue=\"3\" />\n<br />\n<Rate Character=\"@Character3\" AllowHalf=\"true\" DefaultValue=\"3\" />\n\n@code\n{\n    RenderFragment<RateItemRenderContext> Character1 = (builder) =>\n    @<Template>\n        <Icon Type=\"heart\" Theme=\"fill\" />\n    </Template>;\n\n    RenderFragment<RateItemRenderContext> Character2 = (builder) =>\n    @<Template>\n        A\n    </Template>;\n\n    RenderFragment<RateItemRenderContext> Character3 = (builder) =>\n    @<Template>\n        好\n    </Template>;\n}\n",
        "Type": "Demos.Rate.demo.Character",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "clear",
        "Title": "清除",
        "Description": "<p>支持允许或者禁用清除。</p>\n",
        "Code": "<Rate AllowClear=\"true\" DefaultValue=\"2\" />\n<span class=\"ant-rate-text\">AllowClear: true</span>\n<br />\n<Rate AllowClear=\"false\" DefaultValue=\"3\"></Rate>\n<span class=\"ant-rate-text\">AllowClear: false</span>",
        "Type": "Demos.Rate.demo.Clear",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "PageHeader",
    "SubTitle": "页头",
    "Type": "导航",
    "Desc": "<p>页头位于页容器中，页容器顶部，起到了内容概览和引导页级操作的作用。包括由面包屑、标题、页面内容简介、页面级操作等、页面级导航组成。</p>\n<h2>何时使用</h2>\n<p>当需要使用户快速理解当前页是什么以及方便用户使用页面功能时使用，通常也可被用作页面间导航。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "basic",
        "Title": "标准样式",
        "Description": "<p>标准页头，适合使用在需要简单描述的场景。</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\" Title=\"@_title\" Subtitle=\"@_subtitle\"/>\n\n\n@code{\n\n    private string _title = \"Title\";\n\n    private string _subtitle = \"This is a subtitle\";\n\n    void OnBack()\n    {\n        Console.WriteLine(\"onBack\");\n        // OnBack=\"OnBack\"\n    }\n\n}",
        "Type": "Demos.PageHeader.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "page-header-breadcrumb",
        "Title": "带面包屑页头",
        "Description": "<p>带面包屑页头，适合层级比较深的页面，让用户可以快速导航。</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\" Title=\"@_title\" Subtitle=\"@_subtitle\">\n    <PageHeaderBreadcrumb>\n        <Breadcrumb>\n            <BreadcrumbItem>First-level Menu</BreadcrumbItem>\n            <BreadcrumbItem>\n                <a>Second-level Menu</a>\n            </BreadcrumbItem>\n            <BreadcrumbItem>Third-level Menu</BreadcrumbItem>\n        </Breadcrumb>\n    </PageHeaderBreadcrumb>\n</PageHeader>\n\n@code{\n\n    private string _title = \"Title\";\n\n    private string _subtitle = \"This is a subtitle\";\n\n}",
        "Type": "Demos.PageHeader.demo.PageHeaderBreadcrumb",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "ghost",
        "Title": "白底模式",
        "Description": "<p>默认 PageHeader 是透明底色的。在某些情况下，PageHeader 需要自己的背景颜色。</p>\n",
        "Code": "<div class=\"site-page-header-ghost-wrapper\">\n    <PageHeader Ghost>\n        <PageHeaderTitle>Title</PageHeaderTitle>\n        <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n        <PageHeaderExtra>\n            <Button>Operation</Button>\n            <Button>Operation</Button>\n            <Button Type=\"@ButtonType.Primary\">Primary</Button>\n        </PageHeaderExtra>\n        <PageHeaderContent>\n            <Descriptions Size=\"small\" Column=\"3\">\n                <DescriptionsItem Title=\"@(\"Created\")\" Span=\"1\">Lili Qu</DescriptionsItem>\n                <DescriptionsItem Title=\"@(\"Association\")\" Span=\"1\"><a>421421</a></DescriptionsItem>\n                <DescriptionsItem Title=\"@(\"Creation Time\")\" Span=\"1\">2017-01-10</DescriptionsItem>\n                <DescriptionsItem Title=\"@(\"Effective Time\")\" Span=\"1\">2017-10-10</DescriptionsItem>\n                <DescriptionsItem Title=\"@(\"Remarks\")\" Span=\"2\">\n                    Gonghu Road, Xihu District, Hangzhou, Zhejiang, China\n                </DescriptionsItem>\n            </Descriptions>\n        </PageHeaderContent>\n    </PageHeader>\n</div>",
        "Type": "Demos.PageHeader.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "content",
        "Title": "组合示例",
        "Description": "<p>使用了 PageHeader 提供的所有能力。</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\">\n    <!--breadcrumb-->\n    <PageHeaderBreadcrumb>\n        <Breadcrumb>\n            <BreadcrumbItem>First-level Menu</BreadcrumbItem>\n            <BreadcrumbItem>\n                <a>Second-level Menu</a>\n            </BreadcrumbItem>\n            <BreadcrumbItem>Third-level Menu</BreadcrumbItem>\n        </Breadcrumb>\n    </PageHeaderBreadcrumb>\n\n    <!--avatar-->\n    <PageHeaderAvatar>\n        <Avatar Src=\"https://avatars0.githubusercontent.com/u/22736418?s=88&v=4\" />\n    </PageHeaderAvatar>\n    <!--title-->\n    <PageHeaderTitle>Title</PageHeaderTitle>\n\n    <!--subtitle-->\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n\n    <!--tags-->\n    <PageHeaderTags>\n        <Tag Color=\"blue\">Running</Tag>\n    </PageHeaderTags>\n\n    <!--extra-->\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n        <Dropdown Placement=\"@PlacementType.BottomRight\">\n            <Overlay>\n                <Menu>\n                    <MenuItem>\n                        1st menu item\n                    </MenuItem>\n                    <MenuItem>\n                        2nd menu item\n                    </MenuItem>\n                    <MenuItem>\n                        3rd menu item\n                    </MenuItem>\n                </Menu>\n            </Overlay>\n            <ChildContent>\n                <Button><Icon Type=\"ellipsis\" /></Button>\n            </ChildContent>\n        </Dropdown>\n    </PageHeaderExtra>\n\n    <!--content-->\n    <PageHeaderContent>\n        <Row>\n            <div class=\"content\">\n                <Paragraph>\n                    Ant Design interprets the color system into two levels: a system-level color system and a product-level color system.\n                </Paragraph>\n                <Paragraph>\n                    Ant Design's design team preferred to design with the HSB color model, which makes it easier for designers to have a clear\n                    psychological expectation of color when adjusting colors, as well as facilitate communication in teams.\n                </Paragraph>\n                <div class=\"content-link\">\n                    <a> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/MjEImQtenlyueSmVEfUD.svg\" alt=\"start\" />Quick Start </a>\n                    <a> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/NbuDUAuBlIApFuDvWiND.svg\" alt=\"info\" />Product Info </a>\n                    <a> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/ohOEPSYdDTNnyMbGuyLb.svg\" alt=\"doc\" />Product Doc </a>\n                </div>\n            </div>\n            <div class=\"content-image\">\n                <img src=\"https://gw.alipayobjects.com/zos/antfincdn/K%24NnlsB%26hz/pageHeader.svg\" alt=\"content\" />\n            </div>\n        </Row>\n    </PageHeaderContent>\n</PageHeader>\n\n<style>\n    .content {\n        flex: 1;\n    }\n\n        .content p {\n            margin-bottom: 1em;\n        }\n\n    .content-link a {\n        margin-right: 16px;\n    }\n\n        .content-link a img {\n            margin-right: 8px;\n        }\n\n    .content-image {\n        margin: 0 0 0 60px;\n        display: flex;\n        align-items: center;\n    }\n\n        .content-image img {\n            width: 100%;\n        }\n</style>",
        "Type": "Demos.PageHeader.demo.Content",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "actions",
        "Title": "多种形态的 PageHeader",
        "Description": "<p>使用操作区，并自定义子节点，适合使用在需要展示一些复杂的信息，帮助用户快速了解这个页面的信息和操作。</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\">\n    <PageHeaderTitle>Title</PageHeaderTitle>\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n    </PageHeaderExtra>\n    <PageHeaderContent>\n        <Descriptions Size=\"small\" Column=\"3\">\n            <DescriptionsItem Title=\"@(\"Created\")\" Span=\"1\">Lili Qu</DescriptionsItem>\n            <DescriptionsItem Title=\"@(\"Association\")\" Span=\"1\"><a>421421</a></DescriptionsItem>\n            <DescriptionsItem Title=\"@(\"Creation Time\")\" Span=\"1\">2017-01-10</DescriptionsItem>\n            <DescriptionsItem Title=\"@(\"Effective Time\")\" Span=\"1\">2017-10-10</DescriptionsItem>\n            <DescriptionsItem Title=\"@(\"Remarks\")\" Span=\"2\">\n                Gonghu Road, Xihu District, Hangzhou, Zhejiang, China\n            </DescriptionsItem>\n        </Descriptions>\n    </PageHeaderContent>\n</PageHeader>\n<br />\n<PageHeader>\n    <PageHeaderTitle>Title</PageHeaderTitle>\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n    <PageHeaderTags>\n        <Tag Color=\"blue\">Running</Tag>\n    </PageHeaderTags>\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n    </PageHeaderExtra>\n    <PageHeaderContent>\n        <Row Type=\"flex\">\n            <Statistic Title=\"@(\"Status\")\" Value=@(\"Pending\")></Statistic>\n            <Statistic Title=\"@(\"Price\")\" Value=\"568.08\" Prefix=\"@(\"$\")\" Style=\"margin: 0 32px\"></Statistic>\n            <Statistic Title=\"@(\"Balance\")\" Value=\"3345.08\" Prefix=\"@(\"$\")\"></Statistic>\n        </Row>\n    </PageHeaderContent>\n</PageHeader>",
        "Type": "Demos.PageHeader.demo.Actions",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "responsive",
        "Title": "响应式",
        "Description": "<p>在不同大小的屏幕下，应该有不同的表现</p>\n",
        "Code": "<PageHeader Class=\"site-page-header\">\n    <PageHeaderTitle>Title</PageHeaderTitle>\n    <PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>\n    <PageHeaderExtra>\n        <Button>Operation</Button>\n        <Button>Operation</Button>\n        <Button Type=\"@ButtonType.Primary\">Primary</Button>\n    </PageHeaderExtra>\n    <PageHeaderContent>\n        <div class=\"content\">\n            <div class=\"main\">\n                <Descriptions Size=\"small\" Column=\"2\">\n                    <DescriptionsItem Title=\"@(\"Created\")\" Span=\"1\">Lili Qu</DescriptionsItem>\n                    <DescriptionsItem Title=\"@(\"Association\")\" Span=\"1\"><a>421421</a></DescriptionsItem>\n                    <DescriptionsItem Title=\"@(\"Creation Time\")\" Span=\"1\">2017-01-10</DescriptionsItem>\n                    <DescriptionsItem Title=\"@(\"Effective Time\")\" Span=\"1\">2017-10-10</DescriptionsItem>\n                    <DescriptionsItem Title=\"@(\"Remarks\")\" Span=\"2\">\n                        Gonghu Road, Xihu District, Hangzhou, Zhejiang, China\n                    </DescriptionsItem>\n                </Descriptions>\n            </div>\n            <div class=\"extra\">\n                <div>\n                    <Statistic Title=\"@(\"Status\")\" Value=\"@(\"Pending\")\"></Statistic>\n                    <Statistic Title=\"@(\"Price\")\" Value=\"568.08\" Prefix=\"@(\"$\")\" Style=\"margin: 0 32px\"></Statistic>\n                </div>\n            </div>\n        </div>\n    </PageHeaderContent>\n    <PageHeaderFooter>\n        <Tabs DefaultActiveKey=\"1\">\n            <TabPane Key=\"1\">\n                <Tab>Details</Tab>\n            </TabPane>\n            <TabPane Key=\"2\">\n                <Tab>Rule</Tab>\n            </TabPane>\n        </Tabs>\n    </PageHeaderFooter>\n</PageHeader>\n\n<style>\n    .content {\n        display: flex;\n    }\n\n    .extra div {\n        display: flex;\n        width: max-content;\n        justify-content: flex-end;\n    }\n\n    @@media (max-width: 576px) {\n        .content {\n            display: block;\n        }\n\n        .main {\n            width: 100%;\n            margin-bottom: 12px;\n        }\n\n        .extra {\n            width: 100%;\n            margin-left: 0;\n            text-align: left;\n        }\n    }\n</style>",
        "Type": "Demos.PageHeader.demo.Responsive",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Divider",
    "SubTitle": "分割线",
    "Type": "Layout",
    "Desc": "<p>区隔内容的分割线。</p>\n<h2>何时使用</h2>\n<ul>\n<li>对不同章节的文本段落进行分割。</li>\n<li>对行内文字/链接进行分割，例如表格的操作列。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>时间轴</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dashed</td>\n<td>是否虚线</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Orientation</td>\n<td>分割线标题的位置 <code>left</code>, <code>right</code>, <code>center</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>分割线样式对象</td>\n<td>CSS properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>水平还是垂直类型 <code>horizontal</code> or <code>vertical</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Plain</td>\n<td>文字是否显示为普通正文样式</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "Title",
        "Title": "带文字的分割线",
        "Description": "<p>分割线中带有文字，可以用 orientation 指定文字位置。</p>\n",
        "Code": "<div>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider>Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"left\" Style=\"font-weight:bold\">Left Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"right\" Style=\"font-weight:bold\">Right Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n</div>\n\n\n\n",
        "Type": "Demos.Divider.demo.Title",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Vertical",
        "Title": "垂直分割线",
        "Description": "<p>使用 type=&quot;vertical&quot; 设置为行内的垂直分割线。</p>\n",
        "Code": "<div>\n     Text\n    <Divider Type=\"vertical\" />\n    <a href=\"#\">Link</a>\n    <Divider Type=\"vertical\" />\n    <a href=\"#\">Link</a>\n</div>\n\n\n\n",
        "Type": "Demos.Divider.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Horizontal",
        "Title": "水平分割线",
        "Description": "<p>默认为水平分割线，可在中间加入文字。</p>\n",
        "Code": "<div>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider />\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Dashed />\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n</div>\n\n\n\n",
        "Type": "Demos.Divider.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Without",
        "Title": "分割文字使用正文样式",
        "Description": "<p>使用 plain 可以设置为更轻量的分割文字样式。</p>\n",
        "Code": "<div>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider>Text</Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"left\" >\n        Left Text\n    </Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n    <Divider Orientation=\"right\"  Plain=\"true\" >\n        Right Text\n    </Divider>\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista\n        probare, quae sunt a te dicta? Refert tamen, quo modo.\n    </p>\n</div>\n\n\n\n",
        "Type": "Demos.Divider.demo.Without",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Calendar",
    "SubTitle": "日历",
    "Type": "数据展示",
    "Desc": "<p>按照日历形式展示数据的容器。</p>\n<h2>何时使用</h2>\n<p>当数据是日期或按照日期划分时，例如日程、课表、价格日历等，农历等。目前支持年/月切换。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>**注意：**Calendar 部分 locale 是从 value 中读取，所以请先正确设置 moment 的 locale。</p>\n<pre><code class=\"language-jsx\">// 默认语言为 en-US，所以如果需要使用其他语言，推荐在入口文件全局设置 locale\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\n// moment.locale('zh-cn');\n\n&lt;Calendar\n  dateCellRender={dateCellRender}\n  monthCellRender={monthCellRender}\n  onPanelChange={onPanelChange}\n  onSelect={onSelect}\n/&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dateCellRender</td>\n<td>自定义渲染日期单元格，返回内容会被追加到单元格</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>dateFullCellRender</td>\n<td>自定义渲染日期单元格，返回内容覆盖单元格</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认展示的日期</td>\n<td>DateTime</td>\n<td>默认日期</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>不可选择的日期</td>\n<td>(DateTime) =&gt; boolean</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>fullscreen</td>\n<td>是否全屏显示</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>locale(TODO)</td>\n<td>国际化配置</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">默认配置</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>初始模式，<code>DatePickerType.Month/DatePickerType.Year</code></td>\n<td>DatePickerType</td>\n<td>DatePickerType.Month</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>自定义渲染月单元格，返回内容会被追加到单元格</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>monthFullCellRender</td>\n<td>自定义渲染月单元格，返回内容覆盖单元格</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>validRange</td>\n<td>设置可以显示的日期</td>\n<td>[DateTime, DateTime]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>展示日期</td>\n<td>DateTime</td>\n<td>当前日期</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>日期面板变化回调</td>\n<td>Func(DateTime date, string mode)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>点击选择日期回调</td>\n<td>Func(DateTime）</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>日期变化回调</td>\n<td>Func(DateTime）</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>headerRender</td>\n<td>自定义头部内容</td>\n<td>Func(CalendarHeaderRenderArgs)</td>\n<td>无</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 2,
        "Name": "card",
        "Title": "卡片模式",
        "Description": "<p>用于嵌套在空间有限的容器中。</p>\n",
        "Code": "<div class=\"site-calendar-demo-card\">\n    <Calendar FullScreen=\"@false\" OnPanelChange=\"OnPanelChange\" />\n</div>\n\n@code\n{\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        Console.WriteLine($\"{value.ToString(\"YYYY-MM-DD\")} {mode}\");\n    }\n}\n\n<Style>\n    .site-calendar-demo-card {\n        width: 300px;\n        border: 1px solid #f0f0f0;\n        border-radius: 2px;\n    }\n</Style>",
        "Type": "Demos.Calendar.demo.Card_",
        "Style": "\n  [data-theme=\"dark\"] .site-calendar-demo-card {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "notice-calendar",
        "Title": "通知事项日历",
        "Description": "<p>一个复杂的应用示例，用 <code>dateCellRender</code> 和 <code>monthCellRender</code> 函数来自定义需要渲染的数据。</p>\n",
        "Code": " <Calendar DateCellRender=\"DateCellRender\" MonthCellRender=\"MonthCellRender\" />\n\n@code\n{\n    class ListData\n    {\n        public string type;\n        public string content;\n    }\n\n    private List<ListData> GetListData(DateTime value) {\n        List<ListData> listData = null;\n        switch (value.Day) {\n            case 8:\n                listData = new List<ListData>\n                {\n                    new ListData { type = \"warning\", content = \"This is warning event.\" },\n                    new ListData { type = \"success\", content = \"This is usual event.\" },\n                };\n                break;\n            case 10:\n                listData = new List<ListData> {\n                    new ListData { type = \"warning\", content = \"This is warning event.\" },\n                    new ListData { type = \"success\", content = \"This is usual event.\" },\n                    new ListData { type = \"error\", content = \"This is error event.\" },\n                };\n                break;\n            case 15:\n                listData = new List<ListData> {\n                    new ListData { type = \"warning\", content = \"This is warning event\" },\n                    new ListData { type = \"success\", content = \"This is very long usual event。。....\" },\n                    new ListData { type = \"error\", content = \"This is error event 1.\" },\n                    new ListData { type = \"error\", content = \"This is error event 2.\" },\n                    new ListData { type = \"error\", content = \"This is error event 3.\" },\n                    new ListData { type = \"error\", content = \"This is error event 4.\" },\n                };\n                break;\n        }\n\n        return listData ?? new List<ListData>();\n    }\n\n    private RenderFragment DateCellRender(DateTime value) {\n        var listData = GetListData(value);\n        return @<Template>\n                    <ul class=\"events\">\n                        @foreach (var data in listData)\n                        {\n                            <li key=\"@data.content\">\n                                <Badge Status=\"@data.type\" Text=\"@data.content\" />\n                            </li>\n                        }\n                    </ul>\n                </Template>;\n    }\n\n    private int? GetMonthData(DateTime value) {\n        if (value.Month == 8) {\n            return 1394;\n        }\n\n        return null;\n    }\n\n    private RenderFragment MonthCellRender(DateTime value) {\n        int? num = GetMonthData(value);\n\n        if (num == null)\n        {\n            return null;\n        }\n\n        return @<Template>\n                    <div className=\"notes-month\">\n                        <section>@num</section>\n                        <span>Backlog number</span>\n                    </div>\n        </Template>;\n    }\n}\n\n<Style>\n    .events {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n        .events .ant-badge-status {\n            overflow: hidden;\n            white-space: nowrap;\n            width: 100%;\n            text-overflow: ellipsis;\n            font-size: 12px;\n        }\n\n    .notes-month {\n        text-align: center;\n        font-size: 28px;\n    }\n\n        .notes-month section {\n            font-size: 28px;\n        }\n</Style>",
        "Type": "Demos.Calendar.demo.NoticeCalendar",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>一个通用的日历面板，支持年/月切换。</p>\n",
        "Code": "<Calendar OnPanelChange=\"OnPanelChange\" />\n\n@code\n{\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        Console.WriteLine($\"{value.ToString(\"yyyy-MM-dd\")} {mode}\");\n    }\n}",
        "Type": "Demos.Calendar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customize-header",
        "Title": "自定义头部",
        "Description": "<p>自定义日历头部内容。</p>\n",
        "Code": "<div class=\"site-calendar-customize-header-wrapper\">\n    <Calendar FullScreen=\"@false\"\n              HeaderRender=\"HeaderRender\"\n              OnPanelChange=\"OnPanelChange\" />\n</div>\n\n@code\n{\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        Console.WriteLine($\"{value} {mode}\");\n    }\n\n    private RenderFragment GetMonthOptions()\n    {\n        return@<Template>\n                  @for (int index = 1; index <= 12; index++)\n                  {\n                      <option class=\"month-item\" key=\"@index\" value=\"@index\">\n                          @(index)月\n                      </option>\n                  }\n\n              </Template>;\n    }\n\n    private RenderFragment GetYearOptions(int currentYear)\n    {\n        return @<Template>\n                   @for (int i = currentYear - 10; i < currentYear + 10; i += 1)\n                   {\n                       <option class=\"year-item\" key=\"@i\" value=\"@i\">\n                           @(i)年\n                       </option>\n                   }\n\n               </Template>;\n    }\n\n    private void OnSelectYear(ChangeEventArgs args, CalendarHeaderRenderArgs renderArgs)\n    {\n        int year = Convert.ToInt32(args.Value);\n        renderArgs.OnChange.InvokeAsync(DateHelper.CombineNewDate(renderArgs.Value, year: year));\n    }\n\n    private void OnSelectMonth(ChangeEventArgs args, CalendarHeaderRenderArgs renderArgs)\n    {\n        int month = Convert.ToInt32(args.Value);\n        renderArgs.OnChange.InvokeAsync(DateHelper.CombineNewDate(renderArgs.Value, month: month));\n    }\n\n    private void OnTypeChange()\n    {\n\n    }\n\n    private RenderFragment HeaderRender(CalendarHeaderRenderArgs args)\n    {\n        int start = 0;\n        int end = 12;\n\n        int month = args.Value.Month;\n        int year = args.Value.Year;\n\n        return\n            @<Template>\n                <div style=\"padding: 8px\">\n                    <Title Level=\"4\">\n                        Custom header\n                    </Title>\n                    <Row Gutter=\"8\">\n                        <AntDesign.Col>\n                            <RadioGroup size=\"small\" OnChange=\"value => args.OnTypeChange.InvokeAsync(value)\" Value=\"@args.Type\">\n                                <Radio RadioButton Value=\"@DatePickerType.Month\">Month</Radio>\n                                <Radio RadioButton Value=\"@DatePickerType.Year\">Year</Radio>\n                            </RadioGroup>\n                        </AntDesign.Col>\n                        <AntDesign.Col>\n                            <select size=\"small\"\n                                    dropdownMatchSelectWidth=\"@false\"\n                                    class=\"my-year-select\"\n                                    @onchange=\"e => OnSelectYear(e, args)\"\n                                    value=\"@year\">\n                                @GetYearOptions(year)\n                            </select>\n                        </AntDesign.Col>\n                        <AntDesign.Col>\n                            <select size=\"small\"\n                                    dropdownMatchSelectWidth=\"@false\"\n                                    value=\"@month\"\n                                    @onchange=\"e => OnSelectMonth(e, args)\">\n                                @GetMonthOptions()\n                            </select>\n                        </AntDesign.Col>\n                    </Row>\n                </div>\n            </Template>;\n    }\n}\n\n<Style>\n    .site-calendar-customize-header-wrapper {\n        width: 300px;\n        border: 1px solid #f0f0f0;\n        border-radius: 2px;\n    }\n</Style>\n",
        "Type": "Demos.Calendar.demo.CustomizeHeader",
        "Style": "\n  [data-theme=\"dark\"] .site-calendar-customize-header-wrapper {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "select",
        "Title": "选择功能",
        "Description": "<p>一个通用的日历面板，支持年/月切换。</p>\n",
        "Code": "<div>\n    <Alert Message=@($\"You selected date: {selectedValue.ToString(\"yyyy-MM-dd\")}\") />\n    <Calendar Value=\"@value\" OnSelect=\"OnSelect\" OnPanelChange=\"OnPanelChange\" />\n</div>\n\n@code\n{\n    private DateTime selectedValue = new DateTime(2017, 1, 25);\n    private DateTime value = new DateTime(2017, 1, 25);\n\n    private void OnSelect(DateTime value)\n    {\n        this.value = value;\n        selectedValue = value;\n    }\n\n    private void OnPanelChange(DateTime value, string mode)\n    {\n        this.value = value;\n    }\n}",
        "Type": "Demos.Calendar.demo.Select_",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Menu",
    "SubTitle": "导航菜单",
    "Type": "导航",
    "Desc": "<p>为页面和功能提供导航的菜单列表。</p>\n<h2>何时使用</h2>\n<p>导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。</p>\n<p>更多布局和导航的使用可以参考：<a href=\"/components/layout\">通用布局</a>。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;菜单项&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;子菜单&quot;&gt;\n    &lt;Menu.Item&gt;子菜单项&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>初始展开的 SubMenu 菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>初始选中的菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>在子菜单展示之前就渲染进 DOM</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>inline 时菜单是否收起状态</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>inline 模式的菜单缩进宽度</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>菜单类型，现在支持垂直、水平、和内嵌模式三种</td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否允许多选</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>当前展开的 SubMenu 菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>是否允许选中</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>当前选中的菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>根节点样式</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>用户鼠标离开子菜单后关闭延时，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>用户鼠标进入子菜单后开启延时，单位：秒</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击 MenuItem 调用此函数</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选中时调用，仅在 multiple 生效</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>SubMenu 展开/关闭的回调</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>被选中时调用</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>无 \u00A0</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>自定义 Menu 折叠时的图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>item 的唯一标志</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>设置收缩时展示的悬浮标题</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>子菜单样式</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>子菜单的菜单项</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>唯一标志</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>子菜单项值</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>点击子菜单标题</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>分组的菜单项</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>分组标题</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>菜单项分割线，只用在弹出菜单内。</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "垂直菜单",
        "Description": "<p>子菜单是弹出的形式。</p>\n",
        "Code": "<Menu OnMenuItemClicked=handleClick Style=\" width: 256px\" Mode=MenuMode.Vertical>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n    <MenuItemGroup Title=@(\"Item 1\")>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n    </MenuItemGroup>\n    <MenuItemGroup Title=@(\"Item 2\")>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\"  Title=sub2Title >\n    <MenuItem Key=\"5\">Option 5</MenuItem>\n    <MenuItem Key=\"6\">Option 6</MenuItem>\n    <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n    </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title >\n    <MenuItem Key=\"9\">Option 9</MenuItem>\n    <MenuItem Key=\"10\">Option 10</MenuItem>\n    <MenuItem Key=\"11\">Option 11</MenuItem>\n    <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n\n    void handleClick()\n    {\n\n    }\n}\n",
        "Type": "Demos.Menu.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "horizontal",
        "Title": "顶部导航",
        "Description": "<p>水平的顶部导航菜单。</p>\n",
        "Code": "<Menu Mode=MenuMode.Horizontal>\n    <MenuItem Key=\"mail\">\n        <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n        Navigation One\n    </MenuItem>\n    <MenuItem Key=\"app\" Disabled>\n        <Icon Type=\"appstore\" Theme=\"outline\" ></Icon>\n        Navigation Two\n    </MenuItem>\n    <SubMenu Title=sub1Title>\n        <MenuItemGroup Title=@(\"Item 1\")>\n            <MenuItem Key=\"setting:1\">Option 1</MenuItem>\n                <MenuItem Key=\"setting:2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Title=@(\"Item 2\")>\n                <MenuItem Key=\"setting:3\">Option 3</MenuItem>\n                <MenuItem Key=\"setting:4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <MenuItem Key=\"alipay\">\n        <MenuLink href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Navigation Four - Link\n        </MenuLink>\n    </MenuItem>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n        @<Template>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            Navigation Three - Submenu\n        </Template>;\n}\n",
        "Type": "Demos.Menu.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inline-collapsed",
        "Title": "缩起内嵌菜单",
        "Description": "<p>内嵌菜单可以被缩起/展开。</p>\n<p>你可以在 <a href=\"/components/layout/#components-layout-demo-side\">Layout</a> 里查看侧边布局结合的完整示例。</p>\n",
        "Code": "<div style=\"width: 256px;\">\n    <Button Type=\"primary\" OnClick=\"ToggleCollapsed\" Style=\"margin-bottom: 16px\">\n        @if (collapsed)\n        {\n            <Icon  Type=\"menu-unfold\" Theme=\"outline\"></Icon>\n        }\n        else\n        {\n            <Icon  Type=\"menu-fold\" Theme=\"outline\"></Icon>\n        }\n    </Button>\n    <Menu\n        DefaultSelectedKeys=@(new[]{\"1\"})\n        DefaultOpenKeys=@(new[]{\"sub1\"})\n        Mode=MenuMode.Inline\n        Theme=MenuTheme.Dark\n        InlineCollapsed=collapsed\n    >\n        <MenuItem Key=\"1\">\n            <Icon Type=\"pie-chart\" Theme=\"outline\"></Icon>\n            <span>Option 1</span>\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <Icon Type=\"desktop\" Theme=\"outline\"></Icon>\n            <span>Option 2</span>\n        </MenuItem>\n        <MenuItem Key=\"3\">\n            <Icon Type=\"container\" Theme=\"outline\"></Icon>\n            <span>Option 3</span>\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title >\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <MenuItem Key=\"7\">Option 7</MenuItem>\n        <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n    bool collapsed = false;\n\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Two</span>\n        </span>;\n\n    void ToggleCollapsed()\n    {\n        collapsed = !collapsed;\n    }\n}\n",
        "Type": "Demos.Menu.demo.InlineCollapsed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "inline",
        "Title": "内嵌菜单",
        "Description": "<p>垂直菜单，子菜单内嵌在菜单区域。</p>\n",
        "Code": "<Menu Style=\"width: 256px;\"\n      DefaultSelectedKeys=@(new[]{\"1\"})\n      DefaultOpenKeys=@(new[]{\"sub1\"})\n      Mode=@MenuMode.Inline>\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItemGroup Key=\"g1\" Title=@(\"Item 1\")>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n        </MenuItemGroup>\n        <MenuItemGroup Key=\"g2\" Title=@(\"Iem 2\")>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </MenuItemGroup>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code\n{\n    RenderFragment sub1Title =\n    @<span>\n        <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n        <span>Navigation One</span>\n    </span>;\n\nRenderFragment sub2Title =\n@<span>\n    <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n    <span>Navigation Two</span>\n</span>;\n\nRenderFragment sub4Title =\n@<span>\n    <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n    <span>Navigation Three</span>\n</span>;\n}\n",
        "Type": "Demos.Menu.demo.Inline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "router",
        "Title": "配合路由使用",
        "Description": "<p>自动根据路由激活菜单项，需要结合 <a href=\"https://www.angular.cn/api/router/RouterLink\">MenuLink</a> 一起使用。</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Horizontal\">\n    <MenuItem>\n        <MenuLink href=\"/en-US/components/menu\" Match=\"NavLinkMatch.All\">English Menu Document</MenuLink>\n    </MenuItem>\n    <MenuItem>\n        <MenuLink href=\"/zh-CN/components/menu\" Match=\"NavLinkMatch.All\">Chinese Menu Document</MenuLink>\n    </MenuItem>\n</Menu>",
        "Type": "Demos.Menu.demo.Router",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "switch-mode",
        "Title": "切换菜单类型",
        "Description": "<p>展示动态切换模式。</p>\n",
        "Code": "<div>\n    <Switch OnChange=changeMode /> Change Mode\n    <div class=\"ant-divider ant-divider-vertical\" role=\"separator\"></div>\n    <Switch OnChange=changeTheme/> Change Style\n    <br />\n    <br />\n    <Menu Style=\" width: 256px ;\"\n          DefaultSelectedKeys=@(new[]{\"1\"})\n          DefaultOpenKeys=@(new[]{\"sub1\"})\n          Mode=this.mode\n          Theme=this.theme>\n        <MenuItem Key=\"1\">\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            Navigation One\n        </MenuItem>\n        <MenuItem Key=\"2\">\n            <Icon Type=\"calendar\" Theme=\"outline\"></Icon>\n            Navigation Two\n        </MenuItem>\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n            <SubMenu Key=\"sub1-2\" Title=@(\"Submenu\")>\n                <MenuItem Key=\"5\">Option 5</MenuItem>\n                <MenuItem Key=\"6\">Option 6</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Four</span>\n        </span>;\n\n    MenuMode mode = MenuMode.Inline;\n    MenuTheme theme = MenuTheme.Light;\n\n    void changeMode(bool value)\n    {\n        this.mode = value ? MenuMode.Vertical : MenuMode.Inline;\n    }\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.SwitchMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "theme",
        "Title": "主题",
        "Description": "<p>内建了两套主题 <code>light|dark</code>，默认 <code>light</code>。</p>\n",
        "Code": "<div>\n    <Switch Checked=\"theme == MenuTheme.Dark\" OnChange=changeTheme CheckedChildren=@(\"Dark\") UnCheckedChildren=@(\"Light\") />\n    <br />\n    <br />\n    <Menu Theme=theme\n          OnMenuItemClicked=handleClick\n          Style=\" width: 256px \"\n          DefaultOpenKeys=@(new []{\"sub1\"})\n          SelectedKeys=@(new []{current})\n          Mode=\"MenuMode.Inline\">\n        <SubMenu Key=\"sub1\" Title=sub1Title>\n            <MenuItem Key=\"1\">Option 1</MenuItem>\n            <MenuItem Key=\"2\">Option 2</MenuItem>\n            <MenuItem Key=\"3\">Option 3</MenuItem>\n            <MenuItem Key=\"4\">Option 4</MenuItem>\n        </SubMenu>\n        <SubMenu Key=\"sub2\" Title=sub2Title>\n            <MenuItem Key=\"5\">Option 5</MenuItem>\n            <MenuItem Key=\"6\">Option 6</MenuItem>\n            <SubMenu Key=\"sub3\" Title=\"@(\"Submenu\")\">\n                <MenuItem Key=\"7\">Option 7</MenuItem>\n                <MenuItem Key=\"8\">Option 8</MenuItem>\n            </SubMenu>\n        </SubMenu>\n        <SubMenu Key=\"sub4\" Title=sub4Title>\n            <MenuItem Key=\"9\">Option 9</MenuItem>\n            <MenuItem Key=\"10\">Option 10</MenuItem>\n            <MenuItem Key=\"11\">Option 11</MenuItem>\n            <MenuItem Key=\"12\">Option 12</MenuItem>\n        </SubMenu>\n    </Menu>\n</div>\n\n@code {\n\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n    MenuTheme theme = MenuTheme.Dark;\n    string current = \"1\";\n\n    void changeTheme(bool value)\n    {\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\n    }\n\n    void handleClick(MenuItem e)\n    {\n        current = e.Key;\n    }\n\n}\n",
        "Type": "Demos.Menu.demo.Theme",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "sider-current",
        "Title": "只展开当前父级菜单",
        "Description": "<p>点击菜单，收起其他展开的所有菜单，保持菜单聚焦简洁。</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Inline\"\n      OpenKeys=this.openKeys\n      OnOpenChange=this.onOpenChange\n      Style=\"width:256px ;\">\n    <SubMenu Key=\"sub1\" Title=sub1Title>\n        <MenuItem Key=\"1\">Option 1</MenuItem>\n        <MenuItem Key=\"2\">Option 2</MenuItem>\n        <MenuItem Key=\"3\">Option 3</MenuItem>\n        <MenuItem Key=\"4\">Option 4</MenuItem>\n    </SubMenu>\n    <SubMenu Key=\"sub2\" Title=sub2Title>\n        <MenuItem Key=\"5\">Option 5</MenuItem>\n        <MenuItem Key=\"6\">Option 6</MenuItem>\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\n            <MenuItem Key=\"7\">Option 7</MenuItem>\n            <MenuItem Key=\"8\">Option 8</MenuItem>\n        </SubMenu>\n    </SubMenu>\n    <SubMenu Key=\"sub4\" Title=sub4Title>\n        <MenuItem Key=\"9\">Option 9</MenuItem>\n        <MenuItem Key=\"10\">Option 10</MenuItem>\n        <MenuItem Key=\"11\">Option 11</MenuItem>\n        <MenuItem Key=\"12\">Option 12</MenuItem>\n    </SubMenu>\n</Menu>\n\n@code {\n    RenderFragment sub1Title =\n        @<span>\n            <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n            <span>Navigation One</span>\n        </span>;\n\n    RenderFragment sub2Title =\n        @<span>\n            <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n            <span>Navigation Two</span>\n        </span>;\n\n    RenderFragment sub4Title =\n        @<span>\n            <Icon Type=\"setting\" Theme=\"outline\"></Icon>\n            <span>Navigation Three</span>\n        </span>;\n\n    // submenu keys of first level\n    string[] rootSubmenuKeys = {\"sub1\", \"sub2\", \"sub4\"};\n\n    string[] openKeys = {\"sub1\"};\n\n    void onOpenChange(string[] openKeys)\n    {\n        var latestOpenKey = openKeys.FirstOrDefault(key => !this.openKeys.Contains(key));\n        if (!rootSubmenuKeys.Contains(latestOpenKey))\n        {\n            this.openKeys = openKeys;\n        }\n        else\n        {\n            this.openKeys = !string.IsNullOrEmpty(latestOpenKey) ? new[] {latestOpenKey} : Array.Empty<string>();\n        }\n    }\n}\n",
        "Type": "Demos.Menu.demo.SiderCurrent",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Spin",
    "SubTitle": "加载中",
    "Type": "反馈",
    "Desc": "<p>用于页面和区块的加载中状态。</p>\n<h2>何时使用</h2>\n<p>页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>延迟显示加载效果的时间（防止闪烁）</td>\n<td>number (毫秒)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>加载指示符</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>组件大小，可选值为 <code>small</code> <code>default</code> <code>large</code></td>\n<td>string</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>是否为加载中状态</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>当作为包裹元素时，可以自定义描述文案</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>包装器的类属性</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>静态方法</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>你可以自定义全局默认 Spin 的元素。</p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "tip",
        "Title": "自定义描述文案",
        "Description": "<p>自定义描述文案。</p>\n",
        "Code": "<Spin Tip=\"Loading...\">\n    <Alert\n        Message=\"Alert message title\"\n        Description=\"Further details about the context of this alert.\"\n        Type=\"info\"\n    />\n</Spin>",
        "Type": "Demos.Spin.demo.Tip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>一个简单的 loading 状态。</p>\n",
        "Code": "<Spin />",
        "Type": "Demos.Spin.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inside",
        "Title": "容器",
        "Description": "<p>放入一个容器中。</p>\n",
        "Code": "<div class=\"example\">\n    <Spin />\n</div>\n\n<style>\n    .example {\n        text-align: center;\n        background: rgba(0, 0, 0, 0.05);\n        border-radius: 4px;\n        margin-bottom: 20px;\n        padding: 30px 50px;\n        margin: 20px 0;\n    }\n</style>",
        "Type": "Demos.Spin.demo.Inside",
        "Style": "\n  .example {\n    background: rgba(255,255,255,0.08);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "各种大小",
        "Description": "<p>小的用于文本加载，默认用于卡片容器级加载，大的用于<strong>页面级</strong>加载。</p>\n",
        "Code": "<div>\n    <Spin size=\"small\" />\n    <Spin />\n    <Spin size=\"large\" />\n</div>\n",
        "Type": "Demos.Spin.demo.Size",
        "Style": "\n.ant-spin.ant-spin-spinning {\n  display: inline-block;\n  margin-right: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "delayAndDebounce",
        "Title": "延迟",
        "Description": "<p>延迟显示 loading 效果。当 spinning 状态在 <code>delay</code> 时间内结束，则不显示 loading 状态。</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading Delay=500>\n        <Alert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <Switch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}\n",
        "Type": "Demos.Spin.demo.DelayAndDebounce",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "nested",
        "Title": "卡片加载中",
        "Description": "<p>可以直接把内容内嵌到 <code>Spin</code> 中，将现有容器变为加载状态。</p>\n",
        "Code": "<div>\n    <Spin Spinning=loading>\n        <Alert\n            Message=\"Alert message title\"\n            Description=\"Further details about the context of this alert.\"\n            Type=\"info\"\n        />\n    </Spin>\n    <div style=\"margin-top: 16px\">\n        Loading state：\n        <Switch Checked=loading OnChange=toggle />\n    </div>\n</div>\n\n@code {\n    bool loading = false;\n\n    void toggle(bool value) => loading = value;\n}",
        "Type": "Demos.Spin.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "custom-indicator",
        "Title": "自定义指示符",
        "Description": "<p>使用自定义指示符。</p>\n",
        "Code": "<Spin Indicator=antIcon />\n@code{\n    RenderFragment antIcon = @<Icon Type=\"loading\" Theme=\"outline\" Style=\"font-size: 24px\" Spin />;\n}",
        "Type": "Demos.Spin.demo.CustomIndicator",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Statistic",
    "SubTitle": "统计数值",
    "Type": "数据展示",
    "Desc": "<p>展示统计数值。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当需要突出某个或某组数字时。</li>\n<li>当需要展示带描述的统计类数据时使用。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h4>Statistic</h4>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>decimalSeparator</td>\n<td>设置小数点</td>\n<td>string</td>\n<td>.</td>\n<td></td>\n</tr>\n<tr>\n<td>groupSeparator</td>\n<td>设置千分位标识符</td>\n<td>string</td>\n<td>,</td>\n<td></td>\n</tr>\n<tr>\n<td>precision</td>\n<td>数值精度</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>设置数值的前缀</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>设置数值的后缀</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>数值的标题</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>数值内容</td>\n<td>decimal|Datetime|TimeSpan</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>valueStyle</td>\n<td>设置数值的样式</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Statistic.Countdown</h4>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>format</td>\n<td>格式化倒计时展示，参考 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/custom-timespan-format-strings\">TimeSpan</a></td>\n<td>string</td>\n<td>@&quot;hh:mm:ss&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>onFinish</td>\n<td>倒计时完成时触发</td>\n<td>() =&gt; void</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>设置数值的前缀</td>\n<td>string | RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>设置数值的后缀</td>\n<td>string | RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>数值的标题</td>\n<td>string | RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>数值内容</td>\n<td>Datetime | TimeSpan</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>valueStyle</td>\n<td>设置数值的样式</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "card",
        "Title": "在卡片中使用",
        "Description": "<p>在卡片中展示统计数值。</p>\n",
        "Code": "<div class=\"site-statistic-demo-card\">\n    <Row Gutter=\"16\">\n        <Col Span=\"12\">\n            <Card>\n                <Statistic Title=\"@(\"Active\")\" Value=\"11.28\" Precision=\"2\" ValueStyle=\"color: #3f8600;\" Prefix=\"@prefix1\" Suffix=\"@(\"%\")\" />\n            </Card>\n        </Col>\n        <Col Span=\"12\">\n            <Card>\n                <Statistic Title=\"@(\"Idle\")\" Value=\"9.3\" Precision=\"2\" ValueStyle=\"color: #cf1322;\" Prefix=\"@prefix2\" Suffix=\"@(\"%\")\" />\n            </Card>\n        </Col>\n    </Row>\n</div>\n\n<style>\n    .site-statistic-demo-card {\n        background: #ececec;\n        padding: 30px;\n    }\n</style>\n\n@code\n{\n    RenderFragment prefix1 = @<span><Icon Type=\"arrow-up\"/></span>;\n    RenderFragment prefix2 = @<span><Icon Type=\"arrow-down\"/></span>;\n}\n\n",
        "Type": "Demos.Statistic.demo.Card_",
        "Style": "\n  [data-theme=\"dark\"] .site-statistic-demo-card {\n    background: #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "unit",
        "Title": "单位",
        "Description": "<p>通过前缀和后缀添加单位。</p>\n",
        "Code": "<Row Gutter=16>\n    <Col Span=12>\n    <Statistic Title=\"@(\"Feedback\")\" Value=\"1128\" Prefix=\"prefix1\" />\n    </Col>\n    <Col Span=12>\n    <Statistic Title=\"@(\"Unmerged\")\" Value=\"93\" Suffix=\"@(\"/ 100\")\" />\n    </Col>\n</Row>\n\n\n@code\n{\n    string title1 = \"Feedback\";\n\n    RenderFragment prefix1 =@<Icon Type=\"like\" />;\n}\n",
        "Type": "Demos.Statistic.demo.Unit",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的展示。</p>\n",
        "Code": "\n<Row Gutter=\"16\">\n    <Col Span=\"12\">\n        <Statistic Title=\"@(\"Active Users\")\" Value=\"112893\" />\n    </Col>\n    <Col Span=\"12\">\n        <Statistic Title=\"@(\"Account Balance (CNY)\")\" Value=\"112893\" Precision=\"2\"/>\n        <Button Style=\"margin-top: 16px;\" Type=\"primary\">\n            Recharge\n        </Button>\n    </Col>\n</Row>\n",
        "Type": "Demos.Statistic.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "countdown",
        "Title": "倒计时",
        "Description": "<p>倒计时组件。</p>\n",
        "Code": "\n<Row Gutter=\"16\">\n    <Col Span=\"12\">\n        <CountDown Title=\"@(\"Countdown\")\" Value=\"@deadline\" OnFinish=\"OnFinish\" />\n    </Col>\n    <Col Span=\"12\">\n        <CountDown Title=\"@(\"Million\")\" Value=\"@deadline\" Format=\"hh\\:mm\\:ss\\:fff\" />\n    </Col>\n    <Col Span=\"24\">\n        <CountDown Title=\"@(\"Day Level\")\" Value=\"@deadline\" Format=\"dd\\ \\天\\ h\\ \\小\\时\\ m\\ \\分\\钟\\ s\\ \\秒\" />\n    </Col>\n</Row>\n\n@code\n{\n    DateTime deadline = DateTime.Now.AddMilliseconds(1000 * 60 * 60 * 24 * 2 + 1000 * 30);\n\n    void OnFinish()\n    {\n        Console.WriteLine(\"finished!\");\n    }\n}\n\n",
        "Type": "Demos.Statistic.demo.Countdown",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Grid",
    "SubTitle": "栅格",
    "Type": "布局",
    "Desc": "<p>24 栅格系统。</p>\n<h2>设计理念</h2>\n<p>在多数业务情况下，Ant Design 需要在设计区域内解决大量信息收纳的问题，因此在 12 栅格系统的基础上，我们将整个设计建议区域按照 24 等分的原则进行划分。</p>\n<p>划分之后的信息区块我们称之为『盒子』。建议横向排列的盒子数量最多四个，最少一个。『盒子』在整个屏幕上占比见上图。设计部分基于盒子的单位定制盒子内部的排版规则，以保证视觉层面的舒适感。</p>\n<h2>概述</h2>\n<p>布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：</p>\n<ul>\n<li>通过 row 在水平方向建立一组 column（简写 col）</li>\n<li>你的内容应当放置于 col 内，并且，只有 col 可以作为 row 的直接元素</li>\n<li>栅格系统中的列是指 1 到 24 的值来表示其跨越的范围。例如，三个等宽的列可以使用 <Col span={8} /> 来创建</li>\n<li>如果一个 row 中的 col 总和超过 24，那么多余的 col 会作为一个整体另起一行排列\n我们的栅格化系统基于 Flex 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 order 来定义元素的排列顺序。</li>\n</ul>\n<p>布局是基于 24 栅格来定义每一个『盒子』的宽度，但不拘泥于栅格。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Row</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>align</td>\n<td>flex 布局下的垂直对齐方式：<code>top</code> <code>middle</code> <code>bottom</code></td>\n<td>string</td>\n<td>top</td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 [水平间距, 垂直间距]（1.5.0 后支持）。</td>\n<td>number, object, array</td>\n<td>0</td>\n</tr>\n<tr>\n<td>justify</td>\n<td>flex 布局下的水平排列方式：<code>start</code> <code>end</code> <code>center</code> <code>space-around</code> <code>space-between</code></td>\n<td>string</td>\n<td>start</td>\n</tr>\n<tr>\n<td>type</td>\n<td>布局模式，可选 <code>flex</code>，现代浏览器 下有效</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Col</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>offset</td>\n<td>栅格左侧的间隔格数，间隔内不可以有栅格</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>order</td>\n<td>栅格顺序，<code>flex</code> 布局模式下有效</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pull</td>\n<td>栅格向左移动格数</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>push</td>\n<td>栅格向右移动格数效</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>span</td>\n<td>栅格占位格数，为 0 时相当于 <code>display: none</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象效</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象效</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td>\n<td>int</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>响应式栅格的断点扩展自 BootStrap 4 的规则（不包含链接里 <code>occasionally</code> 的部分)。</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 9,
        "Name": "More",
        "Title": "其他属性的响应式",
        "Description": "<p>span pull push offset order 属性可以通过内嵌到 xs sm md lg xl xxl 属性中来使用。\n其中 xs={6} 相当于 xs={{ span: 6 }}。</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Xs=\"@xs1\" Lg=\"lg1\">\n            Col\n        </Col>\n        <Col Xs=\"@xs2\" Lg=\"lg1\">\n            Col\n        </Col>\n        <Col Xs=\"@xs3\" Lg=\"lg1\">\n                Col\n        </Col>\n    </Row>\n</div>\n\n@code\n{\n    EmbeddedProperty xs1 = new EmbeddedProperty()\n    {\n        Span=\"5\",\n        Offset=\"1\"\n    };\n\n    EmbeddedProperty lg1 = new EmbeddedProperty()\n    {\n        Span = \"6\",\n        Offset = \"2\"\n    };\n\n    EmbeddedProperty xs2 = new EmbeddedProperty()\n    {\n        Span = \"11\",\n        Offset = \"1\"\n    };\n\n    EmbeddedProperty xs3= new EmbeddedProperty()\n    {\n        Span = \"5\",\n        Offset = \"1\"\n    };\n}",
        "Type": "Demos.Grid.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Stretch",
        "Title": "Flex 填充",
        "Description": "<p>Col 提供 flex 属性以支持填充。</p>\n",
        "Code": "<div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Percentage columns\n    </Divider>\n    <p>To do</p>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Fill rest\n    </Divider>\n    <p>To do</p>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Raw flex style\n    </Divider>\n    <p>To do</p>\n</div>\n\n\n@code{\n\n}",
        "Type": "Demos.Grid.demo.Stretch",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Offset",
        "Title": "栅格排序",
        "Description": "<p>列排序。\n通过使用 <code>push</code> 和 <code>pull</code> 类就可以很容易的改变列（column）的顺序。</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"8\">\n            col-8\n        </Col>\n        <Col Span=\"8\" Offset=\"8\">\n            col-8\n        </Col>\n    </Row>\n    <Row>\n        <Col Span=\"6\" Offset=\"6\">\n            col-6 col-offset-6\n        </Col>\n        <Col Span=\"6\" Offset=\"6\">\n            col-6 col-offset-6\n        </Col>\n    </Row>\n    <Row>\n        <Col Span=\"12\" Offset=\"6\">\n            col-12 col-offset-6\n        </Col>\n    </Row>\n</div>\n@code{\n\n}",
        "Type": "Demos.Grid.demo.Offset",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Alignment",
        "Title": "对齐",
        "Description": "<p>子元素垂直对齐。</p>\n",
        "Code": "<div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Align Top\n    </Divider>\n\n    <div class=\"flex-demo\">\n        <Row Justify=\"center\" Align=\"top\">\n            <Col Span=\"4\"><p class=\"height-100\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-50\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-120\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-80\">col-4</p></Col>\n        </Row>\n    </div>\n\n\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Align Center\n    </Divider>\n    <div class=\"flex-demo\">\n        <Row Justify=\"space-around\" Align=\"middle\">\n            <Col  Span=\"4\"><p class=\"height-100\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-50\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-120\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-80\">col-4</p></Col>\n        </Row>\n    </div>\n\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Align Bottom\n    </Divider>\n    <div class=\"flex-demo\">\n        <Row Justify=\"space-between\" Align=\"bottom\">\n            <Col Span=\"4\"><p class=\"height-100\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-50\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-120\">col-4</p></Col>\n            <Col Span=\"4\"><p class=\"height-80\">col-4</p></Col>\n        </Row>\n    </div>\n    </div>\n    <style>\n        .flex-demo {\n            background-color: rgba(128, 128, 128, 0.08);\n        }\n    </style>\n\n    @code{\n\n    }\n",
        "Type": "Demos.Grid.demo.Alignment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Sort",
        "Title": "栅格排序",
        "Description": "<p>列排序。\n通过使用 push 和 pull 类就可以很容易的改变列（column）的顺序。</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"18\" Push=\"6\">\n            col-18 col-Push-6\n        </Col>\n        <Col Span=\"6\" Pull=\"18\">\n            col-6 col-Pull-18\n        </Col>\n    </Row>\n</div>\n@code{\n\n}",
        "Type": "Demos.Grid.demo.Sort",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Order",
        "Title": "排序",
        "Description": "<p>通过 Order 来改变元素的排序。</p>\n",
        "Code": "\n<div id=\"grid-demo-flex-Order\">\n    <Row>\n        <Col Span=\"6\" Order=\"4\">\n            1 col-Order-4\n        </Col>\n        <Col Span=\"6\" Order=\"3\">\n            2 col-Order-3\n        </Col>\n        <Col Span=\"6\" Order=\"2\">\n            3 col-Order-2\n        </Col>\n        <Col Span=\"6\" Order=\"1\">\n            4 col-Order-1\n        </Col>\n    </Row>\n\n    <style>\n        #grid-demo-flex-Order .ant-row {\n            background-color: rgba(128, 128, 128, 0.08);\n        }\n    </style>\n</div>\n\n\n\n@code{\n\n}",
        "Type": "Demos.Grid.demo.Order",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Setting",
        "Title": "排版",
        "Description": "<p>布局基础。\n子元素根据不同的值 start,center,end,space-between,space-around，分别定义其在父节点里面的排版方式。</p>\n",
        "Code": "<div>\n    <div id=\"flex-demo\">\n        <p>sub-element Align left</p>\n        <Row Justify=\"start\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element Align center</p>\n        <Row Justify=\"center\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element Align right</p>\n        <Row Justify=\"end\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element monospaced arrangement</p>\n        <Row Justify=\"space-between\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n        <p>sub-element Align full</p>\n        <Row Justify=\"space-around\">\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n            <Col Span=\"4\">col-4</Col>\n        </Row>\n    </div>\n\n        <style>\n            #flex-demo .ant-row {\n                background-color: rgba(128, 128, 128, 0.08);\n            }\n        </style>\n\n</div>\n@code{\n\n}",
        "Type": "Demos.Grid.demo.Setting",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基础栅格",
        "Description": "<p>从堆叠到水平排列。\n使用单一的一组 <code>Row</code> 和 <code>Col</code> 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 <code>Row</code> 内。。</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"24\">col-24</Col>   \n    </Row>\n    <Row>\n        <Col Span=\"12\">col-12</Col>\n        <Col Span=\"12\">col-12</Col>\n    </Row>\n    <Row>\n        <Col Span=\"8\">col-8</Col>\n        <Col Span=\"8\">col-8</Col>\n        <Col Span=\"8\">col-8</Col>\n    </Row>\n    <Row>\n        <Col Span=\"6\">col-6</Col>\n        <Col Span=\"6\">col-6</Col>\n        <Col Span=\"6\">col-6</Col>\n        <Col Span=\"6\">col-6</Col>\n    </Row>\n</div>\n",
        "Type": "Demos.Grid.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "Breakpoint",
        "Title": "useBreakpoint Hook",
        "Description": "<p>使用 useBreakpoint Hook 个性化布局。</p>\n",
        "Code": "<div>\n    <Text> Current break point:</Text>\n    <Tag Color=\"blue\">\n        sm\n    </Tag>\n    <Tag Color=\"blue\">\n        md\n    </Tag>\n    <Tag Color=\"blue\">\n        lg\n    </Tag>\n    <Tag Color=\"blue\">\n        xl\n    </Tag>\n    <Tag Color=\"blue\">\n        xxl\n    </Tag>\n</div>\n@code{\n\n}",
        "Type": "Demos.Grid.demo.Breakpoint",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "Playround",
        "Title": "栅格配置器",
        "Description": "<p>可以简单配置几种等分栅格和间距。</p>\n",
        "Code": "<div>\nTo do   \n</div>\n",
        "Type": "Demos.Grid.demo.Playround",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Responsive",
        "Title": "响应式布局",
        "Description": "<p>参照 Bootstrap 的 响应式设计，预设六个响应尺寸：xs sm md lg xl  xxl。</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Xs=\"2\" Sm=\"4\" Md=\"6\" Lg=\"8\" Xl=\"10\">\n            Col\n        </Col>\n        <Col Xs=\"20\" Sm=\"16\" Md=\"12\" Lg=\"8\" Xl=\"4\">\n            Col\n        </Col>\n        <Col Xs=\"2\" Sm=\"4\" Md=\"6\" Lg=\"8\" Xl=\"10\">\n            Col\n        </Col>\n    </Row>\n</div>\n",
        "Type": "Demos.Grid.demo.Responsive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Gutterx",
        "Title": "区块间隔",
        "Description": "<p>栅格常常需要和间隔进行配合，你可以使用 <code>Row</code> 的 <code>gutter</code> 属性，我们推荐使用 <code>(16+8n)px</code> 作为栅格间隔。(n 是自然数)\n如果要支持响应式，可以写成 { xs: 8, sm: 16, md: 24, lg: 32 }。\n如果需要垂直间距，可以写成数组形式 [水平间距, 垂直间距] [16, { xs: 8, sm: 16, md: 24, lg: 32 }]。\n数组形式垂直间距在 <code>3.24.0</code> 之后支持。</p>\n",
        "Code": "<div>\n    <style>\n        .Gutter-box {\n            background: #00a0e9;\n            padding: 5px 0;\n        }\n    </style>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Horizontal\n    </Divider>\n\n    <div class=\"Gutter-example\">\n        <Row Gutter=\"16\">\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n        </Row>\n    </div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Responsive\n    </Divider>\n    <div class=\"Gutter-example\">\n        <Row Gutter=\"@Gutter1\">\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div>col-6</div>\n            </Col>\n        </Row>\n    </div>\n    <Divider Orientation=\"left\" Style=\"color: #333; font-weight:normal\">\n        Vertical\n    </Divider>\n    <div class=\"Gutter-example\">\n        <Row Gutter=\"(8,24)\">\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n            <Col class=\"Gutter-row\" Span=\"6\">\n                <div >col-6</div>\n            </Col>\n        </Row>\n    </div>\n</div>\n@code{\n    Dictionary<string, int> Gutter1 = new Dictionary<string, int>()\n    {\n        [\"xs\"] = 8,\n        [\"sm\"] = 16,\n        [\"md\"] = 24,\n        [\"lg\"] = 32,\n        [\"xl\"] = 48,\n        [\"xxl\"] = 64\n    };\n   \n\n}",
        "Type": "Demos.Grid.demo.Gutterx",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Affix",
    "SubTitle": "固钉",
    "Type": "导航",
    "Desc": "<p>将页面元素钉在可视范围。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当内容区域比较长，需要滚动页面时，这部分内容对应的操作或者导航需要在滚动范围内始终展现。常用于侧边菜单和按钮组合。</li>\n<li>页面可视范围过小时，慎用此功能以免遮挡页面内容。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>时间轴</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OffsetBottom</td>\n<td>距离窗口底部达到指定偏移量后触发</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OffsetTop</td>\n<td>距离窗口顶部达到指定偏移量后触发</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Target</td>\n<td>设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>固定状态改变时触发的回调函数</td>\n<td>Function()</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>注意：<code>Affix</code> 内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接设置 <code>Affix</code> 为绝对定位：</p>\n<h2>FAQ</h2>\n<p><code>Affix</code> 使用 <code>target</code> 绑定容器时，元素会跑到容器外。</p>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Scroll",
        "Title": "滚动容器",
        "Description": "<p>用 <code>target</code> 设置 <code>Affix</code> 需要监听其滚动事件的元素，默认为 <code>window</code>。</p>\n",
        "Code": "\n<style>\n\t.scrollable-container{\n\t\theight: 100px;\n\t\toverflow-y: scroll;\n\t}\n\t.background {\n\t\tpadding-top: 60px;\n\t\theight: 300px;\n\t\tbackground-image: url(\"https://zos.alipayobjects.com/rmsportal/RmjwQiJorKyobvI.jpg\")\n\t}\n</style>\n<div class=\"scrollable-container\" @ref=\"_container\">\n\t<div class=\"background\">\n\t\t<Affix Target=\"@_container\">\n\t\t\t<Button Type=\"@ButtonType.Primary\">\n\t\t\t\tFixed at the top of container\n\t\t\t</Button>\n\t\t</Affix>\n\t</div>\n</div>\n\n@code{\n\n        private ElementReference _container;\n\t}",
        "Type": "Demos.Affix.demo.Scroll",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "\n<div>\n\t<Affix OffsetTop=\"@_offsetTop\">\n\t\t<Button Type=\"@ButtonType.Primary\" OnClick=\"AddTop\">\n\t\t\tAffix top\n\t\t</Button>\n\t</Affix>\n\t<br />\n\t<Affix OffsetBottom=\"@_offsetBottom\">\n\t\t<Button Type=\"@ButtonType.Primary\" OnClick=\"AddBottom\">\n\t\t\tAffix bottom\n\t\t</Button>\n\t</Affix>\n</div>\n\n\n@code\n{\n        private uint _offsetTop = 10;\n        private uint _offsetBottom = 10;\n\n        private void AddTop()\n        {\n            _offsetTop += 10;\n        }\n\n        private void AddBottom()\n        {\n            _offsetBottom += 10;\n        }\n}",
        "Type": "Demos.Affix.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "CallBack",
        "Title": "固定状态改变的回调",
        "Description": "<p>可以获得是否固定的状态。</p>\n",
        "Code": "<div>\n<Affix OffsetTop=\"120\" OnChange=\"OnAffixChange\">\n\t<Button>\n\t\t120px to affix top\n\t</Button>\n</Affix>\n</div>\n\n@code{\n        private void OnAffixChange(bool affixed)\n        {\n            Console.WriteLine(affixed);\n        }\n\t\t\n}\n",
        "Type": "Demos.Affix.demo.Callback",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Breadcrumb",
    "SubTitle": "面包屑",
    "Type": "导航",
    "Desc": "<p>显示当前页面在系统层级结构中的位置，并能向上返回。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当系统拥有超过两级以上的层级结构时；</li>\n<li>当需要告知用户『你在哪里』时；</li>\n<li>当需要向上导航的功能时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Breakcrumb</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ItemRender</td>\n<td>自定义链接函数，和 react-router 配置使用</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Params</td>\n<td>路由的参数</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Routes</td>\n<td>router 的路由栈信息</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Separator</td>\n<td>分隔符自定义</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>BreadcrumbItem</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Href</td>\n<td>链接的目的地</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Overlay</td>\n<td>下拉菜单的内容</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>单击事件</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DropdownProps</td>\n<td>弹出下拉菜单的自定义配置</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "With",
        "Title": "带有图标的",
        "Description": "<p>图标放在文字前面。</p>\n",
        "Code": "<div>\n\t<Breadcrumb>\n    <BreadcrumbItem>\n        <Icon Type=\"home\"></Icon>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        <a><Icon Type=\"user\"></Icon><span>Application List</span></a>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        Application\n    </BreadcrumbItem>\n</Breadcrumb>\n</div>",
        "Type": "Demos.Breadcrumb.demo.With",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Dropdownmenu",
        "Title": "带下拉菜单的面包屑",
        "Description": "<p>面包屑支持下拉菜单。</p>\n",
        "Code": "<div>\n\t<Breadcrumb Separator=\"/\">\n    <BreadcrumbItem>\n        Ant Design Blazor\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        <a>Component</a>\n    </BreadcrumbItem>\n    <BreadcrumbItem >\n        <Menu Mode=MenuMode.Horizontal>\n            <MenuItem Key=\"mail\">\n                <Icon Type=\"mail\" Theme=\"outline\"></Icon>\n                Navigation One\n            </MenuItem>\n            <MenuItem Key=\"app\" Disabled>\n                <Icon Type=\"appstore\" Theme=\"outline\"></Icon>\n                Navigation Two\n            </MenuItem>\n        </Menu>\n    </BreadcrumbItem>\n</Breadcrumb>\n</div>\n\n@code{\n    object abc { get; set; } = new object();\n }\n",
        "Type": "Demos.Breadcrumb.demo.Dropdownmenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Integration",
        "Title": "其它路由",
        "Description": "<p>和 react-router@4+，或其他路由进行结合使用。</p>\n",
        "Code": "<div>\n\t<Breadcrumb RouteLabel=\"\">\n    <BreadcrumbItem>\n        Home\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        <a>Application List</a>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n        An Application\n    </BreadcrumbItem>\n</Breadcrumb>\n</div>",
        "Type": "Demos.Breadcrumb.demo.Integration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\n\t<Breadcrumb>\n        <BreadcrumbItem>\n                Home\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            <a>Application List</a>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            An Application\n        </BreadcrumbItem>\n</Breadcrumb>\n</div>",
        "Type": "Demos.Breadcrumb.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Separator",
        "Title": "分隔符",
        "Description": "<p>使用 separator=&quot;&gt;&quot; 可以自定义分隔符。</p>\n",
        "Code": "<div>\n    <Breadcrumb Separator=\">\" Style=\"color:red\">  \n        <BreadcrumbItem>\n            Home\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            <a>Application List</a>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n            An Application\n        </BreadcrumbItem>\n    </Breadcrumb>\n</div>",
        "Type": "Demos.Breadcrumb.demo.Separator",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Result",
    "SubTitle": "结果",
    "Type": "反馈",
    "Desc": "<p>用于反馈一系列操作任务的处理结果。</p>\n<h2>何时使用</h2>\n<p>当有重要操作需告知用户处理结果，且反馈内容较为复杂时使用。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title 文字</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle 文字</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>结果的状态,决定图标和颜色</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义 icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>操作区</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 7,
        "Name": "error",
        "Title": "Error",
        "Description": "<p>复杂的错误反馈。</p>\n",
        "Code": "<Result\n    Status=\"error\"\n    Title=@(\"Submission Failed\")\n    SubTitle=@(\"Please check and modify the following information before resubmitting.\")\n    Extra=extra\n>\n<div class=\"desc\">\n    <Paragraph>\n        <Text Strong Style=\"font-size: 16px;\">\n            The content you submitted has the following error:\n        </Text>\n    </Paragraph>\n    <Paragraph>\n        <Icon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account has been frozen\n        <a>Thaw immediately &gt;</a>\n    </Paragraph>\n    <Paragraph>\n        <Icon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account is not yet\n        eligible to apply <a>Apply Unlock &gt;</a>\n    </Paragraph>\n</div>\n</Result>\n\n@code {\n    RenderFragment extra =\n        @<Template>\n            <Button Type=\"primary\">Go Console</Button>\n            <Button>Buy Again</Button>\n        </Template>\n        ;\n}\n",
        "Type": "Demos.Result.demo.Error",
        "Style": "\n[data-theme=\"dark\"] .site-result-demo-error-icon {\n  color: #a61d24;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "403",
        "Title": "403",
        "Description": "<p>你没有此页面的访问权限。</p>\n",
        "Code": "<Result Status=\"403\"\n        Title=@(\"403\")\n        SubTitle=@(\"Sorry, you are not authorized to access this page.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Back Home</Button>;\n}\n",
        "Type": "Demos.Result.demo._403",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "info",
        "Title": "Info",
        "Description": "<p>展示处理结果。</p>\n",
        "Code": "<Result\n    Title=@(\"Your operation has been executed\")\n    Extra=extra\n/>\n@code {\n\n    RenderFragment extra =\n        @<Button Type=\"primary\">\n            Go Console\n        </Button>;\n\n}\n",
        "Type": "Demos.Result.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "customIcon",
        "Title": "自定义 icon",
        "Description": "<p>自定义 icon。</p>\n",
        "Code": "<Result\n    Icon=\"smile-outline\"\n    Title=@(\"Great, we have done all the operations!\")\n    Extra=\"extra\">\n</Result>\n\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Next</Button>;\n}\n",
        "Type": "Demos.Result.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "404",
        "Title": "404",
        "Description": "<p>此页面未找到。</p>\n",
        "Code": "<Result Status=\"404\"\n        Title=@(\"404\")\n        SubTitle=@(\"Sorry, the page you visited does not exist.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Back Home</Button>;\n}",
        "Type": "Demos.Result.demo._404",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "500",
        "Title": "500",
        "Description": "<p>服务器发生了错误。</p>\n",
        "Code": "<Result Status=\"500\"\n        Title=@(\"500\")\n        SubTitle=@(\"Sorry, something went wrong.\")\n        Extra=\"extra\" />\n\n@code\n{\n    RenderFragment extra =@<Button Type=\"primary\">Back Home</Button>;\n}",
        "Type": "Demos.Result.demo._500",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "success",
        "Title": "Success",
        "Description": "<p>成功的结果。</p>\n",
        "Code": "<Result Status=\"success\"\n        Title=@(\"Successfully Purchased Cloud Server ECS!\")\n        SubTitle=@(\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\")\n        Extra=extra />\n\n@code\n{\n    RenderFragment extra =\n    @<Template>\n        <Button Type=\"primary\">Go Console</Button>\n        <Button>Buy Again</Button>\n    </Template>\n    ;\n}",
        "Type": "Demos.Result.demo.Success",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "warning",
        "Title": "Warning",
        "Description": "<p>警告类型的结果。</p>\n",
        "Code": "<Result Status=\"warning\"\n        Title=@(\"There are some problems with your operation.\")\n        Extra=extra />\n@code\n{\n    RenderFragment extra = @<Button Type=\"primary\">Go Console</Button>;\n}",
        "Type": "Demos.Result.demo.Warning",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Notification",
    "SubTitle": "通知提醒框",
    "Type": "反馈",
    "Desc": "<p>全局展示通知提醒信息。</p>\n<h2>何时使用</h2>\n<p>在系统四个角显示通知提醒信息。经常用于以下情况：</p>\n<ul>\n<li>较为复杂的通知内容。</li>\n<li>带有交互的通知，给出用户下一步的行动点。</li>\n<li>系统主动推送。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<blockquote>\n<p>请确认已经在 <code>App.Razor</code> 中添加了 <code>&lt;AntContainer /&gt;</code> 组件。</p>\n</blockquote>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>config 参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>自定义关闭按钮</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>自定义 CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>自定义关闭图标</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>通知提醒内容，必选</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>默认 4.5 秒后自动关闭，配置为 null 或者 0 则不自动关闭</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义图标</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>当前通知唯一标志</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>通知提醒标题，必选</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>当通知关闭时触发的事件</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>点击通知时触发的事件</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>弹出位置，可选 <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>自定义内联样式</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>还提供了一个全局配置方法，在调用前提前配置，全局一次生效。</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">参数</th>\n<th style=\"text-align: left;\">说明</th>\n<th style=\"text-align: left;\">类型</th>\n<th style=\"text-align: left;\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">消息从底部弹出时，距离底部的位置，单位像素。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">消息从顶部弹出时，距离顶部的位置，单位像素。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">自定义关闭图标</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">默认自动关闭延时，单位秒。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">弹出位置，可选 <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement?</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">是否开启 RTL 模式</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 3,
        "Name": "with-btn",
        "Title": "自定义按钮",
        "Description": "<p>自定义关闭按钮的样式和文字。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    custom button\n</Button>\n\n@code{\n\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        RenderFragment btn = @<Button Type=\"@ButtonType.Primary\" OnClick=\"() => { _notice.Close(key); }\">\n                                confirm\n                            </Button>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"A function will be be called after the notification is closed (automatically after the \\\"duration\\\" time of manually).\",\n            Btn = btn \n        });\n    }\n}\n",
        "Type": "Demos.Notification.demo.WithBtn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "位置",
        "Description": "<p>通知从右上角、右下角、左下角、左上角弹出。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<div>\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnTopLeftClick\">\n        <Icon Type=\"Radius-Upleft\" Theme=\"Outline\"></Icon>\n        TopLeft\n    </Button>\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnTopRightClick\">\n        <Icon Type=\"Radius-Upright\" Theme=\"Outline\"></Icon>\n        TopRight\n    </Button>\n</div>\n\n<br/>\n\n<div>\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnBottomLeftClick\">\n        <Icon Type=\"Radius-Bottomleft\" Theme=\"Outline\"></Icon>\n        BottomLeft\n    </Button>\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnBottomRightClick\">\n        <Icon Type=\"Radius-Bottomright\" Theme=\"Outline\"></Icon>\n        BottomRight\n    </Button>\n</div>\n\n@code {\n    private async Task OpenWithPlacement(NotificationPlacement placement)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = $\"Notification {placement}\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Placement = placement\n        });\n    }\n\n    private async Task OnTopLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopLeft);\n    }\n\n    private async Task OnTopRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.TopRight);\n    }\n\n    private async Task OnBottomLeftClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomLeft);\n    }\n\n    private async Task OnBottomRightClick()\n    {\n        await OpenWithPlacement(NotificationPlacement.BottomRight);\n    }\n}\n",
        "Type": "Demos.Notification.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，4.5 秒后自动关闭。</p>\n",
        "Code": "@inject NotificationService _notice\n \n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "update",
        "Title": "更新消息内容",
        "Description": "<p>可以通过唯一的 key 来更新内容。</p>\n",
        "Code": "@inject NotificationService _notice\n\n    <Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n        Open the notification box\n    </Button>\n\n@code{\n    private async Task OnClick()\n    {\n        string key = $\"open{DateTime.Now}\";\n        var task = _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Key = key,\n            Description = \"description.\",\n        });\n        await Task.Delay(1000);\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"New Title\",\n            Key = key,\n            Description = \"New description.\",\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Update",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "custom-icon",
        "Title": "自定义图标",
        "Description": "<p>图标可以被自定义。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n\n    private async Task OnClick()\n    {\n        RenderFragment customIcon = @<Icon Type=\"smile\" Theme=\"outline\" Style=\"color:#108ee9;\"></Icon>;\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            Icon = customIcon\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "with-icon",
        "Title": "带有图标的通知提醒框",
        "Description": "<p>通知提醒框左侧有图标。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button OnClick=\"@OnSuccessClick\">\n    success\n</Button>   \n\n <Button OnClick=\"@OnInfoClick\">\n    info\n</Button>\n\n<Button OnClick=\"@OnWarningClick\">\n    warning\n</Button>\n\n<Button OnClick=\"@OnErrorClick\">\n    error\n</Button>\n\n@code{\n    private async Task NoticeWithIcon(NotificationType type)\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"Notification Title\",\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\n            NotificationType = type\n        });\n    }\n\n    private async Task OnSuccessClick()\n    {\n        await NoticeWithIcon(NotificationType.Success);\n    }\n\n    private async Task OnInfoClick()\n    {\n        await NoticeWithIcon(NotificationType.Info);\n    }\n\n    private async Task OnWarningClick()\n    {\n        await NoticeWithIcon(NotificationType.Warning);\n    }\n\n    private async Task OnErrorClick()\n    {\n        await NoticeWithIcon(NotificationType.Error);\n    }\n\n}",
        "Type": "Demos.Notification.demo.WithIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "duration",
        "Title": "自动关闭的延时",
        "Description": "<p>自定义通知框自动关闭的延时，默认<code>4.5s</code>，取消自动关闭只要将该值设为 <code>0</code> 即可。</p>\n",
        "Code": "@inject NotificationService _notice\n\n<Button Type=\"@ButtonType.Primary\" OnClick=\"@OnClick\">\n    Open the notification box\n</Button>\n\n@code{\n    private async Task OnClick()\n    {\n        await _notice.Open(new NotificationConfig()\n        {\n            Message = \"title\",\n            Duration = 0,\n            Description = \"This notification box will not close automatically\"\n        });\n    }\n}",
        "Type": "Demos.Notification.demo.Duration",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Progress",
    "SubTitle": "进度条",
    "Type": "反馈",
    "Desc": "<p>展示操作的当前进度。</p>\n<h2>何时使用</h2>\n<p>在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。</p>\n<ul>\n<li>当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过 2 秒时；</li>\n<li>当需要显示一个操作完成的百分比时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>各类型共用的属性。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>类型，可选 <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>内容的模板函数</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>百分比</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>是否显示进度数值或状态图标</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>状态，可选：<code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(仅限 line)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>-</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>进度条的色彩</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>已完成的分段百分比</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>未完成的分段的颜色</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>进度条线的宽度，单位 px</td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>进度条的色彩，传入 object 时为渐变</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>进度条总共步数</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>圆形进度条画布宽度，单位 px</td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>圆形进度条线的宽度，单位是进度条画布宽度的百分比</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>圆形进度条线的色彩，传入 object 时为渐变</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>仪表盘进度条画布宽度，单位 px</td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>仪表盘进度条线的宽度，单位是进度条画布宽度的百分比</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>仪表盘进度条缺口角度，可取值 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>仪表盘进度条缺口位置</td>\n<td><code>top</code> | <code>bottom</code> | <code>left</code> | <code>right</code></td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 4,
        "Name": "dynamic",
        "Title": "动态展示",
        "Description": "<p>会动的进度条才是好进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent/>\n    <ButtonGroup>\n        <Button OnClick=Decline Icon=Minus />\n        <Button OnClick=Increase Icon=Plus />\n    </ButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "linemini",
        "Title": "小型进度条",
        "Description": "<p>适合放在较狭窄的区域内。</p>\n",
        "Code": "<div style=\"width: 170px;\">\n    <Progress Percent=\"30\" Size=\"@ProgressSize.Small\" />\n    <Progress Percent=\"50\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Active\" />\n    <Progress Percent=\"70\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Exception\" />\n    <Progress Percent=\"100\" Size=\"@ProgressSize.Small\" />\n</div>",
        "Type": "Demos.Progress.demo.LineMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "segment",
        "Title": "分段进度条",
        "Description": "<p>标准的进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=60 SuccessPercent=30 />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Circle />\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Dashboard />\n</div>",
        "Type": "Demos.Progress.demo.Segment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "circlemini",
        "Title": "小型进度圈",
        "Description": "<p>小一号的圈形进度。</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Size=ProgressSize.Small />\n    <Progress Type=ProgressType.Circle Percent=70 Size=ProgressSize.Small Status=\"ProgressStatus.Exception\" />\n    <Progress Type=ProgressType.Circle Percent=100 Size=ProgressSize.Small />\n</div>",
        "Type": "Demos.Progress.demo.CircleMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "gradientline",
        "Title": "自定义进度条渐变色",
        "Description": "<p><code>linear-gradient</code> 的封装。推荐只传两种颜色。</p>\n",
        "Code": "<div>\n    <Progress StrokeColor=_gradients Percent=99.9 />\n    <Progress StrokeColor=_gradients Percent=99.9 Status=ProgressStatus.Active />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=90 />\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=100 />\n</div>\n\n@code{\n    private Dictionary<int, string> _gradients = new Dictionary<int, string>()\n{\n        { 0,\"#108ee9\"},\n        { 100,\"#87d068\"}\n    };\n}",
        "Type": "Demos.Progress.demo.GradientLine",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "steps",
        "Title": "步骤进度条",
        "Description": "<p>带步骤的进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=50 Steps=3 StrokeColor=_color />\n    <br />\n    <Progress Percent=30 Steps=5 StrokeColor=_color />\n    <br />\n    <Progress Percent=100 Steps=5 Size=ProgressSize.Small StrokeColor=_color />\n</div>\n\n@code{\n    private string _color = \"#1890ff\";\n}",
        "Type": "Demos.Progress.demo.Steps",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "circledynamic",
        "Title": "进度圈动态展示",
        "Description": "<p>会动的进度条才是好进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=_percent Type=ProgressType.Circle />\n    <ButtonGroup>\n        <Button OnClick=Decline Icon=Minus />\n        <Button OnClick=Increase Icon=Plus />\n    </ButtonGroup>\n</div>\n\n@code{\n    private int _percent = 0;\n\n    private void Decline()\n    {\n        _percent -= 10;\n        if (_percent < 0)\n        {\n            _percent = 0;\n        }\n    }\n\n    private void Increase()\n    {\n        _percent += 10;\n        if (_percent > 100)\n        {\n            _percent = 100;\n        }\n    }\n}",
        "Type": "Demos.Progress.demo.CircleDynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "line",
        "Title": "进度条",
        "Description": "<p>标准的进度条。</p>\n",
        "Code": "<div>\n    <Progress Percent=30 />\n    <Progress Percent=50 Status=\"@ProgressStatus.Active\" />\n    <Progress Percent=70 Status=\"@ProgressStatus.Exception\" />\n    <Progress Percent=100 />\n    <Progress Percent=50 ShowInfo=\"false\" />\n</div>",
        "Type": "Demos.Progress.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "circle",
        "Title": "进度圈",
        "Description": "<p>圈形的进度。</p>\n",
        "Code": "<style>\n    .ant-progress-circle-wrap,\n    .ant-progress-line-wrap {\n        margin-right: 8px;\n        margin-bottom: 5px;\n    }\n</style>\n\n<div>\n    <Progress Type=\"ProgressType.Circle\" Percent=75 />\n    <Progress Type=\"ProgressType.Circle\" Percent=70 Status=\"ProgressStatus.Exception\" />\n    <Progress Type=\"ProgressType.Circle\" Percent=100 />\n</div>",
        "Type": "Demos.Progress.demo.Circle",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "linecap",
        "Title": "圆角/方角边缘",
        "Description": "<p>通过设定 <code>strokeLinecap=&quot;square|round&quot;</code> 可以调整进度条边缘的形状。</p>\n",
        "Code": "<div>\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Circle Percent=75 />\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Dashboard Percent=75 />\n</div>",
        "Type": "Demos.Progress.demo.Linecap",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "format",
        "Title": "自定义文字格式",
        "Description": "<p><code>format</code> 属性指定格式。</p>\n",
        "Code": "<div>\n    <Progress Type=ProgressType.Circle Percent=75 Format=_fortmat1 />\n    <Progress Type=ProgressType.Circle Percent=100 Format=_fortmat2 />\n\n</div>\n\n@code{\n    private Func<double, string> _fortmat1 = (p) => $\"{p} Days\";\n    private Func<double, string> _fortmat2 = (p) => \"Done\";\n}",
        "Type": "Demos.Progress.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "dashboard",
        "Title": "仪表盘",
        "Description": "<p>通过设置 <code>type=dashboard</code>，可以很方便地实现仪表盘样式的进度条。</p>\n",
        "Code": "<Progress Type=ProgressType.Dashboard Percent=75 />\n<Progress Type=\"ProgressType.Dashboard\" Percent=75 GapDegree=30 />",
        "Type": "Demos.Progress.demo.Dashboard",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Pagination",
    "SubTitle": "分页",
    "Type": "导航",
    "Desc": "<p>采用分页的形式分隔长列表，每次只加载一个页面。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当加载/渲染所有数据将花费很多时间时；</li>\n<li>可切换页码浏览数据。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Pagination onChange={onChange} total={50} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Current</td>\n<td>当前页数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultCurrent</td>\n<td>默认的当前页数</td>\n<td>number</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultPageSize</td>\n<td>默认的每页条数</td>\n<td>number</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用分页</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>HideOnSinglePage</td>\n<td>只有一页时是否隐藏分页器</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ItemRender</td>\n<td>用于自定义页码的结构，可用于优化 SEO</td>\n<td>(page, type: 'page' | 'prev' | 'next', originalElement) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSize</td>\n<td>每页条数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSizeOptions</td>\n<td>指定每页可以显示多少条</td>\n<td>string[]</td>\n<td>['10', '20', '50', '100']</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowLessItems</td>\n<td>是否显示较少页面内容</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowQuickJumper</td>\n<td>是否可以快速跳转至某页</td>\n<td>boolean | <code>{ goButton: ReactNode }</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSizeChanger</td>\n<td>是否展示 <code>pageSize</code> 切换器，当 <code>total</code> 大于 <code>50</code> 时默认为 <code>true</code></td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTitle</td>\n<td>是否显示原生 tooltip 页码提示</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTotal</td>\n<td>用于显示数据总量和当前数据顺序</td>\n<td>Function(total, range)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Simple</td>\n<td>当添加该属性时，显示为简单分页</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>当为「small」时，是小尺寸分页</td>\n<td>'default' | 'small'</td>\n<td>&quot;&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>Responsive</td>\n<td>当 size 未指定时，根据屏幕宽度自动调整尺寸</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Total</td>\n<td>数据总数</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>页码改变的回调，参数是改变后的页码及每页条数</td>\n<td>Function(page, pageSize)</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>OnShowSizeChange</td>\n<td>pageSize 变化的回调</td>\n<td>Function(current, size)</td>\n<td>noop</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 11,
        "Name": "itemRender",
        "Title": "上一步和下一步",
        "Description": "<p>修改上一步和下一步为文字链接。</p>\n",
        "Code": "<Pagination Total=\"500\" ItemRender=itemRender />\n\n@code {\n\n    RenderFragment<PaginationItemRenderContext> itemRender = ctx =>\n        @<Template>\n            @if (ctx.Type == \"prev\") {\n                <a>Previous</a>\n            }\n            else if (ctx.Type == \"next\") {\n                <a>Next</a>\n            }\n            else\n            {\n                @ctx.DefaultRender(ctx)\n            }\n        </Template>;\n\n}\n",
        "Type": "Demos.Pagination.demo.ItemRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "more",
        "Title": "更多",
        "Description": "<p>更多分页。</p>\n",
        "Code": "<Pagination DefaultCurrent=\"6\" Total=\"500\" />",
        "Type": "Demos.Pagination.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "jump",
        "Title": "跳转",
        "Description": "<p>快速跳转到某一页。</p>\n",
        "Code": "<div>\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" CurrentChanged=onChange />\n    <br />\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" CurrentChanged=onChange Disabled />\n</div>\n@code{\n\n    void onChange(int pageNumber) {\n        Console.WriteLine($\"Page: {pageNumber}\");\n    }\n\n}\n",
        "Type": "Demos.Pagination.demo.Jump",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "controlled",
        "Title": "受控",
        "Description": "<p>受控制的页码。</p>\n",
        "Code": "<div>\n    <Pagination Current=\"@current\" CurrentChanged=onChange Total=\"50\" />\n</div>\n\n\n@code {\n\n    int current = 3;\n\n    void onChange(int page)\n    {\n        Console.WriteLine(page);\n        current = page;\n    }\n}\n",
        "Type": "Demos.Pagination.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>基础分页。</p>\n",
        "Code": "<Pagination PageIndex=\"1\" Total=\"50\"></Pagination>",
        "Type": "Demos.Pagination.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "mini",
        "Title": "迷你",
        "Description": "<p>迷你版本。</p>\n",
        "Code": "<div>\n    <Pagination Size=\"small\" Total=\"50\" />\n    <Pagination Size=\"small\" Total=\"50\" ShowSizeChanger ShowQuickJumper />\n    <Pagination Size=\"small\" Total=\"50\" ShowTotal=showTotal />\n</div>\n\n@code\n{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Pagination.demo.Mini",
        "Style": "\n#components-pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "simple",
        "Title": "简洁",
        "Description": "<p>简单的翻页。</p>\n",
        "Code": "<Pagination Simple DefaultCurrent=\"2\" Total=\"50\" />",
        "Type": "Demos.Pagination.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "all",
        "Title": "全部展示",
        "Description": "<p>展示所有配置选项。</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowSizeChanger\n        ShowQuickJumper\n        ShowTotal=@showTotal\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n}\n",
        "Type": "Demos.Pagination.demo.All",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "changer",
        "Title": "改变",
        "Description": "<p>改变每页显示条目数。</p>\n",
        "Code": "<div>\n    To do\n</div>",
        "Type": "Demos.Pagination.demo.Changer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "total",
        "Title": "总数",
        "Description": "<p>通过设置 <code>showTotal</code> 展示总共有多少数据。</p>\n",
        "Code": "<div>\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n    <br />\n    <Pagination\n        Total=\"85\"\n        ShowTotal=showTotal2\n        PageSize=\"20\"\n        DefaultCurrent=\"1\"\n    />\n</div>\n\n@code{\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\n    Func<PaginationTotalContext, string> showTotal2 =  ctx => $\"{ctx.Range.Item1}-{ctx.Range.Item2} of {ctx.Total} items\";\n}",
        "Type": "Demos.Pagination.demo.Total",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "DatePicker",
    "SubTitle": "日期选择框",
    "Type": "数据录入",
    "Desc": "<p>输入或选择日期的控件。</p>\n<h2>何时使用</h2>\n<p>当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>日期类组件包括以下六种形式。</p>\n<ul>\n<li>DatePicker</li>\n<li>MonthPicker</li>\n<li>RangePicker</li>\n<li>WeekPicker</li>\n<li>YearPicker</li>\n<li>QuarterPicker (4.1.0 新增)</li>\n</ul>\n<h3>国际化配置</h3>\n<p>使用 System.Globalization.CultureInfo 属性为 DatePicker 配置国际化选项。暂时只提供 en-US 和 zh-CN 两种内置方案。</p>\n<h3>共同的 API</h3>\n<p>以下 API 为 DatePicker、YearPicker、MonthPicker、RangePicker, WeekPicker 共享的 API。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear（TODO）</td>\n<td>是否显示清除按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>className</td>\n<td>选择器 className</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>dateRender</td>\n<td>自定义日期单元格的内容</td>\n<td>function(currentDate: moment, today: moment) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>不可选择的日期</td>\n<td>(currentDate: moment) =&gt; boolean</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>dropdownClassName</td>\n<td>额外的弹出日历 className</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>定义浮层的容器，默认为 body 上新建 div</td>\n<td>function(trigger)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>locale（TODO）</td>\n<td>国际化配置</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">默认配置</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode（TODO）</td>\n<td>日期面板的状态（<a href=\"/docs/react/faq#%E5%BD%93%E6%88%91%E6%8C%87%E5%AE%9A%E4%BA%86-DatePicker/RangePicker-%E7%9A%84-mode-%E5%B1%9E%E6%80%A7%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E5%90%8E%E6%97%A0%E6%B3%95%E9%80%89%E6%8B%A9%E5%B9%B4%E4%BB%BD/%E6%9C%88%E4%BB%BD%EF%BC%9F\">设置后无法选择年份/月份？</a>）</td>\n<td><code>time</code> | <code>date</code> | <code>month</code> | <code>year</code> | <code>decade</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>控制弹层是否展开</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>picker</td>\n<td>设置选择器类型</td>\n<td><code>date</code> | <code>week</code> | <code>month</code> | <code>quarter</code> (4.1.0) | <code>year</code></td>\n<td><code>date</code></td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>输入框提示文字</td>\n<td>string|RangePicker[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>popupStyle</td>\n<td>额外的弹出日历样式</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>输入框大小，<code>large</code> 高度为 40px，<code>small</code> 为 24px，默认是 32px</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>bordered</td>\n<td>是否有边框</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>suffixIcon</td>\n<td>自定义的选择框后缀图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义输入框样式</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>弹出日历和关闭日历的回调</td>\n<td>function(open)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>日历面板切换的回调</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inputReadOnly</td>\n<td>设置输入框为只读（避免在移动设备上打开虚拟键盘）</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>共同的方法</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>移除焦点</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>获取焦点</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期，如果开始时间或结束时间为 <code>null</code> 或者 <code>undefined</code>，日期范围将是一个开区间</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>不可选择的时间</td>\n<td>function(date)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>增加时间选择功能</td>\n<td>Object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue（TODO）</td>\n<td>设置用户选择日期时默认的时分秒，<a href=\"#components-date-picker-demo-disabled-date\">例子</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>moment()</td>\n<td></td>\n</tr>\n<tr>\n<td>showToday</td>\n<td>是否展示“今天”按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调</td>\n<td>function(date: moment, dateString: string)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onOk（TODO）</td>\n<td>点击确定按钮的回调</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>日期面板变化时的回调</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>YearPicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>QuarterPicker</h3>\n<p><code>4.1.0</code> 新增。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-\\QQ&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>MonthPicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-MM&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>自定义的月份内容渲染方法</td>\n<td>function(date, locale): ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>WeekPicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-wo&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>RangePicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowEmpty（TODO）</td>\n<td>允许起始项部分为空</td>\n<td>[boolean, boolean]</td>\n<td>[false, false]</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>禁用起始项</td>\n<td><code>[boolean, boolean]</code></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>不可选择的时间</td>\n<td>function(dates: [moment, moment], partial: <code>'start'|'end'</code>)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式</td>\n<td>string</td>\n<td>&quot;YYYY-MM-DD HH:mm:ss&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>ranges（TODO）</td>\n<td>预设时间范围快捷选择</td>\n<td>{ [range: string]: <a href=\"http://momentjs.com/\">moment</a>[] } | { [range: string]: () =&gt; <a href=\"http://momentjs.com/\">moment</a>[] }</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>separator（TODO）</td>\n<td>设置分隔符</td>\n<td>string</td>\n<td>'~'</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>增加时间选择功能</td>\n<td>Object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue</td>\n<td>设置用户选择日期时默认的时分秒，<a href=\"#components-date-picker-demo-disabled-date\">例子</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>[moment(), moment()]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onCalendarChange（TODO）</td>\n<td>待选日期发生变化的回调</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>日期范围发生变化的回调</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>无</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<style>\n.code-box-demo .ant-picker {\n  margin: 0 8px 12px 0;\n}\n</style>\n<h2>FAQ</h2>\n<ul>\n<li><p><a href=\"/docs/react/faq#%E5%BD%93%E6%88%91%E6%8C%87%E5%AE%9A%E4%BA%86-DatePicker/RangePicker-%E7%9A%84-mode-%E5%B1%9E%E6%80%A7%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E5%90%8E%E6%97%A0%E6%B3%95%E9%80%89%E6%8B%A9%E5%B9%B4%E4%BB%BD/%E6%9C%88%E4%BB%BD%EF%BC%9F\">当我指定了 DatePicker/RangePicker 的 mode 属性后，点击后无法选择年份/月份？</a></p>\n</li>\n<li><p><a href=\"/docs/react/replace-moment#DatePicker\">如何在 DatePicker 中使用自定义日期库（如 dayjs ）</a></p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 12,
        "Name": "date-render",
        "Title": "定制日期单元格",
        "Description": "<p>使用 <code>dateRender</code> 可以自定义日期单元格的内容和样式。</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\"/><br />\n<RangePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" />\n\n@code\n{\n    private Func<DateTime, DateTime, RenderFragment> CustomRender = (currentViewDate, today) =>\n    {\n        string style = \"\";\n        if (currentViewDate.Day == 1)\n        {\n            style = \"border: 1px solid #1890ff; borderRadius: 50%\";\n        }\n\n        return @<div class=\"ant-picker-cell-inner\" style=\"@style\">\n            @currentViewDate.Day\n        </div>;\n    };\n}",
        "Type": "Demos.DatePicker.demo.DateRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>选择框的不可用状态。你也可以通过数组单独禁用 RangePicker 的其中一项（TODO）。</p>\n",
        "Code": "<DatePicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\"/>\n<br />\n<MonthPicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\n<br />\n<RangePicker Disabled=\"@true\" DefaultValue=\"new DateTime[] { new DateTime(2015, 6, 6), new DateTime(2015, 6, 6) }\" />\n<br />\n<RangePicker Disabled=\"@true\" \n                DefaultValue=\"new DateTime[] { new DateTime(2019, 9, 3), new DateTime(2019, 11, 12) }\"  />",
        "Type": "Demos.DatePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "globalization",
        "Title": "国际化",
        "Description": "<p>使用 <code>CultureInfo</code> 属性，可以自定义日历的区域特性。默认是 <code>CultureInfo.CuurrentCulture</code>。</p>\n",
        "Code": "@using System.Globalization\n<Row>\n    <Col Span=\"12\">\n        <Text>en-US</Text>\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Date\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Week\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Month\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Quarter\" CultureInfo=\"@EN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Year\" CultureInfo=\"@EN\" />\n        <br />\n    </Col>\n    <Col Span=\"12\">\n        <Text>zh-CN</Text>\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Date\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Week\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Month\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Quarter\" CultureInfo=\"@CN\" />\n        <br />\n        <DatePicker Picker=\"@DatePickerType.Year\" CultureInfo=\"@CN\" />\n        <br />\n    </Col>\n</Row>\n\n@code{\n    CultureInfo EN = CultureInfo.GetCultureInfo(\"en-US\");\n    CultureInfo CN = CultureInfo.GetCultureInfo(\"zh-CN\");\n}",
        "Type": "Demos.DatePicker.demo.Globalization",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，在浮层中可以选择或者输入日期。</p>\n",
        "Code": "@inject ILanguageService LS;\n\n<DatePicker Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Quarter\" />\n<br />\n<DatePicker Picker=\"@DatePickerType.Year\"/>\n<br />",
        "Type": "Demos.DatePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "presetted-ranges",
        "Title": "预设范围 TODO",
        "Description": "<p>可以预设常用的日期范围以提高用户体验。 TODO</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.PresettedRanges",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "range-picker",
        "Title": "范围选择器",
        "Description": "<p>通过设置 <code>picker</code> 属性，指定范围选择器类型。</p>\n",
        "Code": "<RangePicker/>\n<br />\n<RangePicker ShowTime=\"@true\"/>\n<br />\n<RangePicker Picker=\"@DatePickerType.Week\"/>\n<br />\n<RangePicker Picker=\"@DatePickerType.Month\"/>\n<br />\n<RangePicker Picker=\"@DatePickerType.Quarter\"/>\n<br />\n<RangePicker Picker=\"@DatePickerType.Year\"/>",
        "Type": "Demos.DatePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "无边框",
        "Description": "<p>无边框样式。</p>\n",
        "Code": "<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Date\" />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Week\"  />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Month\"  />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Quarter\"  />\n<br />\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Year\"  />\n<br />",
        "Type": "Demos.DatePicker.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的输入框，若不设置，则为 <code>default</code>。</p>\n",
        "Code": "<RadioGroup @bind-Value=\"@datePickerSize\">\n    <Radio RadioButton Value=\"@DatePickerSize.Large\">Large</Radio>\n    <Radio RadioButton Value=\"@DatePickerSize.Default\">Default</Radio>\n    <Radio RadioButton Value=\"@DatePickerSize.Small\">Small</Radio>\n</RadioGroup>\n<br />\n<DatePicker Size=\"@datePickerSize\"   />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" Size=\"@datePickerSize\"  />\n<br />\n<RangePicker Size=\"@datePickerSize\"  />\n<br />\n<DatePicker Picker=\"@DatePickerType.Week\" Size=\"@datePickerSize\"  />\n\n@code {\n    private string datePickerSize = DatePickerSize.Default;\n}",
        "Type": "Demos.DatePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "select-in-range",
        "Title": "选择不超过七天的范围 TODO",
        "Description": "<p>这里举例如何用 <code>onCalendarChange</code> 和 <code>disabledDate</code> 来限制动态的日期区间选择。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.DatePicker.demo.SelectInRange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "format",
        "Title": "日期格式",
        "Description": "<p>使用 <code>format</code> 属性，可以自定义日期显示格式。</p>\n",
        "Code": "<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM/dd\"/>\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"dd/MM/yyyy\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM\" />\n<br />\n<DatePicker DefaultValue=\"new DateTime[] { new DateTime(2015, 1, 1), new DateTime(2015, 1, 1) }\" Format=\"yyyy/MM/dd\" />",
        "Type": "Demos.DatePicker.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "extra-footer",
        "Title": "额外的页脚",
        "Description": "<p>在浮层中加入额外的页脚，以满足某些定制信息的需求。</p>\n",
        "Code": "<DatePicker RenderExtraFooter=\"extraFooter\"/>\n<br />\n<DatePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\"/>\n<br />\n<RangePicker RenderExtraFooter=\"extraFooter\" />\n<br />\n<RangePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\"/>\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\" RenderExtraFooter=\"extraFooter\"/>\n\n@code {\n    private RenderFragment extraFooter =@<span>extra footer</span>;\n}\n",
        "Type": "Demos.DatePicker.demo.ExtraFooter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "disabled-date",
        "Title": "不可选择日期和时间",
        "Description": "<p>可用 <code>disabledDate</code> 和 <code>disabledTime</code> 分别禁止选择部分日期和时间，其中 <code>disabledTime</code> 需要和 <code>showTime</code> 一起使用。</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 0, 0, 0)\"\n               Format=\"yyyy-MM-dd HH:mm:ss\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n               DisabledTime=\"date => GetDisabledTime(date)\" \n               />\n<br />\n<DatePicker Picker=\"@DatePickerType.Month\"\n               DisabledDate=\"date => date <= DateTime.Now\"\n                />\n<br />\n<RangePicker DisabledDate=\"date => date <= DateTime.Now\"/>\n<br />\n<RangePicker ShowTime='@true'\n                DisabledDate=\"date => date <= DateTime.Now\" \n                />\n\n@code {\n    private DatePickerDisabledTime GetDisabledTime(DateTime date)\n    {\n        int[] timeRange = new int[60];\n        for (int i = 0; i < timeRange.Length; i++)\n        {\n            timeRange[i] = i;\n        }\n\n        return new DatePickerDisabledTime(timeRange[4..15], timeRange[20..55], timeRange[3..19]);\n    }\n}",
        "Type": "Demos.DatePicker.demo.DisabledDate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "time",
        "Title": "日期时间选择",
        "Description": "<p>增加选择时间功能，当 <code>showTime</code> 为一个对象时，其属性会传递给内建的 <code>TimePicker</code>。</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\" OnChange=\"OnChange\"/>\n<br />\n<RangePicker ShowTime='@(\"HH:mm\")' OnChange=\"OnChange\"/>\n\n@code\n{\n    private void OnChange(DateTime value, string dateString)\n    {\n        Console.WriteLine($\"Selected Time: {value}\");\n        Console.WriteLine($\"Formatted Selected Time: {dateString}\");\n    }\n}",
        "Type": "Demos.DatePicker.demo.Time",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tag",
    "SubTitle": "标签",
    "Type": "数据展示",
    "Desc": "<p>进行标记和分类的小标签。</p>\n<h2>何时使用</h2>\n<ul>\n<li>用于标记事物的属性和维度。</li>\n<li>进行分类。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mode</td>\n<td>方式选择 <code>default</code>, <code>closable</code>, <code>checkable</code></td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>值标签是否可以关闭</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>标签是否关闭所对应的值</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>点击标签时触发的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>预设标签色</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>关闭时的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>是否显示标签</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>设置图标</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 3,
        "Name": "Dynamic",
        "Title": "动态添加和删除",
        "Description": "<p>用数组生成一组标签，可以动态添加和删除。</p>\n",
        "Code": "<div>\n    <div>\n        @foreach (var item in lstTags)\n        {\n            <Tag Mode=\"closeable\" OnClose=\"()=>onClose(item)\">@item</Tag>\n        }\n        @if (inputVisible)\n        {\n            <Input @ref=\"_inputRef\" Style=\"width: 78px\" Size=\"small\" @bind-Value=\"_inputValue\" OnBlur=\"handleInputConfirm\" OnPressEnter=\"handleInputConfirm\" />\n        }\n        else\n        {\n            <Tag Mode=\"checkable\" Class=\"editable-tag\" OnClick=\"OnChecked\">\n                <Icon Type=\"plus\" />New Tag\n            </Tag>\n        }\n    </div>\n</div>\n<style>\n    .editable-tag {\n        background: rgb(255, 255, 255);\n        border-style: dashed;\n    }\n</style>\n@code{\n    private bool inputVisible { get; set; } = false;\n    string _inputValue;\n    Input<string> _inputRef;\n    List<string> lstTags { get; set; } = new List<string>();\n\n    protected override void OnInitialized()\n    {\n        lstTags.Add(\"Apple\");\n        lstTags.Add(\"Mongo\");\n        lstTags.Add(\"Peach\");\n    }\n\n    void ValueChange(ChangeEventArgs value)\n    {\n        lstTags.Add(value.Value.ToString());\n    }\n\n    async Task OnChecked()\n    {\n        inputVisible = !inputVisible;\n        if (_inputRef != null)\n            await _inputRef.Focus();\n    }\n\n    void onClose(string item)\n    {\n        lstTags.Remove(item);\n    }\n\n    void handleInputConfirm()\n    {\n        if (string.IsNullOrEmpty(_inputValue)) return;\n\n        string res = lstTags.Find(s => s == _inputValue);\n\n        if (string.IsNullOrEmpty(res))\n        {\n            lstTags.Add(_inputValue);\n        }\n\n        this._inputValue = \"\";\n        this.inputVisible = false;\n    }\n\n\n}",
        "Type": "Demos.Tag.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Controlled",
        "Title": "控制关闭状态",
        "Description": "<p>通过 <code>visible</code> 属性控制关闭状态。</p>\n",
        "Code": "<div>\n    <Tag Mode=\"closeable\" Visible=\"bVisible\">Movies</Tag>\n    <br />\n    <br />\n    <Button Size=\"small\" OnClick=\"onClick\">Toggle</Button>\n</div>\n\n@code{\n    bool bVisible { get; set; } = true;\n    void onClick()\n    {\n        bVisible = !bVisible;\n    }\n}",
        "Type": "Demos.Tag.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Hot",
        "Title": "热门标签",
        "Description": "<p>选择你感兴趣的话题。</p>\n",
        "Code": "<div>\n    <span style=\"margin-right:8px\">Categories:</span>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[0]\">Movies</Tag>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[1]\">Books</Tag>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[2]\">Music</Tag>\n    <Tag Mode=\"checkable\" Checked=\"lstCheck[3]\">Sports</Tag>\n</div>\n\n@code{\n    bool[] lstCheck = new bool[] { false, true, false, true };\n}\n  ",
        "Type": "Demos.Tag.demo.Hot",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Checkable",
        "Title": "可选择",
        "Description": "<p>可通过 CheckableTag 实现类似 Checkbox 的效果，点击切换选中效果。</p>\n",
        "Code": "<div>\n    <Tag  Mode=\"checkable\"  Checked=\"check1\">Tag1</Tag>\n    <Tag Mode=\"checkable\" Checked=\"check1\">Tag2</Tag>\n    <Tag Mode=\"checkable\" Checked=\"check1\" CheckedChange=\"_checked=>checkChange(_checked)\">Tag3</Tag>\n    \n</div>\n\n@code{\n    bool check1 { get; set; } = false;\n\n    private void checkChange(bool e)\n    {\n        check1 = !check1;\n    }\n}\n    ",
        "Type": "Demos.Tag.demo.Checkable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本用法",
        "Description": "<p>基本标签的用法，可以通过添加 closable 变为可关闭标签。可关闭标签具有 close 两个事件。</p>\n",
        "Code": "<div>\n    <Tag >Tag 1</Tag>\n    <Tag>\n        <a href=\"https://github.com/ant-design-blazor/ant-design-blazor\">Link</a>\n    </Tag>\n    <Tag Mode=\"closeable\" OnClose=\"()=>onClose()\">Tag 2</Tag>\n    <Tag Mode=\"closeable\" OnClose=\"preventDefault\">Prevent Default</Tag>\n</div>\n\n@code{\n    void onClose()\n    {\n\n    }\n    void preventDefault()\n    {\n\n    }\n}",
        "Type": "Demos.Tag.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Colorful",
        "Title": "多彩标签",
        "Description": "<p>我们添加了多种预设色彩的标签样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。</p>\n",
        "Code": "<div>\n    <div>\n        Presets:\n    </div>\n    <br />\n    <div>\n        <Tag Color=\"magenta\">magenta</Tag>\n        <Tag Color=\"pink\">pink</Tag>\n        <Tag Color=\"red\">red</Tag>\n        <Tag Color=\"volcano\">volcano</Tag>\n        <Tag Color=\"orange\">orange</Tag>\n        <Tag Color=\"green\">green</Tag>\n        <Tag Color=\"cyan\">cyan</Tag>\n        <Tag Color=\"blue\">blue</Tag>\n        <Tag Color=\"lime\">lime</Tag>\n        <Tag Color=\"geekblue\">geekblue</Tag>\n        <Tag Color=\"purple\">purple</Tag>\n    </div>\n    <br />\n    <div>\n        Inverse:\n    </div>\n    <br />\n    <div>\n        <Tag Icon=\"taobao\" Color=\"blue-inverse\">blue-inverse</Tag>\n        <Tag Color=\"orange-inverse\">orange-inverse</Tag>\n        <Tag Icon=\"skype\" Color=\"red-inverse\">red-inverse</Tag>\n        <Tag Icon=\"weibo\" Color=\"purple-inverse\">purple-inverse</Tag>\n    </div>\n    <br />\n    <div>\n        Customs:\n    </div>\n    <br />\n    <div>\n        To Do\n    </div>\n</div>",
        "Type": "Demos.Tag.demo.Colorful",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Transfer",
    "SubTitle": "穿梭框",
    "Type": "数据录入",
    "Desc": "<p>双栏穿梭选择框。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要在多个可选项中进行多选时。</li>\n<li>比起 Select 和 TreeSelect，穿梭框占据更大的空间，可以展示可选项的更多信息。</li>\n</ul>\n<p>穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。</p>\n<p>选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。其中，左边一栏为 <code>source</code>，右边一栏为 <code>target</code>，API 的设计也反映了这两个概念。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Transfer</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSource</td>\n<td>数据源，其中的数据将会被渲染到左边一栏中，<code>targetKeys</code> 中指定的除外。</td>\n<td>List&lt;TransferItem&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>底部渲染函数</td>\n<td>OneOf&lt;string, RenderFragment&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>两个穿梭框的自定义样式</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Operations</td>\n<td>操作文案集合，顺序从上至下</td>\n<td>string[]</td>\n<td>['right', 'left']</td>\n<td></td>\n</tr>\n<tr>\n<td>Render</td>\n<td>每行数据渲染函数，该函数的入参为 <code>DataSource</code> 中的项，返回值为 OneOf&lt;string, RenderFragment&gt;。</td>\n<td>Func&lt;TransferItem, OneOf&lt;string, RenderFragment&gt;&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SelectedKeys</td>\n<td>设置哪些项应该被选中</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>是否显示搜索框</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSelectAll</td>\n<td>是否展示全选勾选框</td>\n<td>bool</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>TargetKeys</td>\n<td>显示在右侧框数据的 key 集合</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>Titles</td>\n<td>标题集合，顺序从左至右</td>\n<td>string[]</td>\n<td>['', '']</td>\n<td></td>\n</tr>\n<tr>\n<td>SelectAllLabels</td>\n<td>自定义顶部多选框标题的集合</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>选项在两栏之间转移时的回调函数</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnScroll</td>\n<td>选项列表滚动时的回调函数</td>\n<td>TransferScrollArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>搜索框内容时改变时的回调函数</td>\n<td>TransferSearchArgs</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelectChange</td>\n<td>选中项发生改变时的回调函数</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Render Props</h3>\n<p>Transfer 支持接收 <code>ChildContent</code> 自定义渲染列表，并返回以下参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>direction</td>\n<td>渲染列表的方向</td>\n<td><code>left</code> | <code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用列表</td>\n<td>bool</td>\n<td></td>\n</tr>\n<tr>\n<td>filteredItems</td>\n<td>过滤后的数据</td>\n<td>List&lt;TransferItem&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelect</td>\n<td>勾选条目</td>\n<td>(key: string, selected: boolean)</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelectAll</td>\n<td>勾选一组条目</td>\n<td>(keys: string[], selected: boolean)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>选中的条目</td>\n<td>string[]</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>注意</h2>\n<p>按照 Blazor 的<a href=\"http://facebook.github.io/react/docs/lists-and-keys.html#keys\">规范</a>，所有的组件数组必须绑定 key。在 Transfer 中，<code>DataSource</code>里的数据值需要指定 <code>Key</code> 值。对于 <code>DataSource</code> 默认将每列数据的 <code>Key</code> 属性作为唯一的标识。</p>\n<p>如果你的数据没有这个属性，务必使用 <code>rowKey</code> 来指定数据列的主键。</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "search",
        "Title": "带搜索框",
        "Description": "<p>带搜索框的穿梭框，可以自定义搜索函数。</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              ShowSearch=\"true\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnSearch=\"OnSearch\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnSearch(TransferSearchArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine(e.Value);\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.Search",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>最基本的用法，展示了 <code>dataSource</code>、<code>targetKeys</code>、每行的渲染函数 <code>render</code> 以及回调函数 <code>onChange</code> <code>onSelectChange</code> <code>onScroll</code> 的用法。</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"></Transfer>\n\n    <Switch Style=\"margin-top: 16px;\" OnChange=\"OnSwitchChange\"></Switch>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        for (int i = 0; i < 20; i++)\n        {\n            dataSource.Add(new TransferItem\n            {\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                Key = i.ToString(),\n                Disabled = i % 3 < 1\n            });\n\n            if (i > 10)\n                targetKeys.Add(i.ToString());\n        }\n        base.OnInitialized();\n    }\n\n    private void OnSwitchChange(bool check)\n    {\n        Disabled = check;\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "custom-select-all-labels",
        "Title": "自定义全选文字",
        "Description": "<p>自定义穿梭框全选按钮的文字。</p>\n",
        "Code": "<h3>CustomSelectAllLabels</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.CustomSelectAllLabels",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "advanced",
        "Title": "高级用法",
        "Description": "<p>穿梭框高级用法，可配置操作文案，可定制宽高，可对底部进行自定义渲染。</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              Operations=\"operations\"\n              Footer=\"footer\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"\n              Render=\"Render\"\n              Style=\"width:300px;height:300px;\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private string[] operations = { \"to right\", \"to left\" };\n    private bool Disabled = false;\n    private RenderFragment footer =@<Button Type=\"@ButtonType.Default\" Size=\"@ButtonSize.Small\" Style=\"float: right; margin: 5px;\">reload</Button>;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n          \n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.Advanced",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "tree-transfer",
        "Title": "树穿梭框",
        "Description": "<p>使用 Tree 组件作为自定义渲染列表。</p>\n",
        "Code": "<h3>TreeTransfer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.TreeTransfer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "custom-item",
        "Title": "自定义渲染行数据",
        "Description": "<p>自定义渲染每一个 Transfer Item，可用于渲染复杂数据。</p>\n",
        "Code": "<div>\n    <Transfer DataSource=\"dataSource\"\n              Disabled=\"Disabled\"\n              TargetKeys=\"targetKeys.ToArray()\"\n              SelectedKeys=\"selectedKeys\"\n              Titles=\"titles\"\n              OnChange=\"OnChange\"\n              OnScroll=\"OnScroll\"\n              OnSelectChange=\"OnSelectChange\"\n              Render=\"Render\"\n              Style=\"width:300px;height:300px;\"></Transfer>\n</div>\n\n@code {\n    private List<TransferItem> dataSource = new List<TransferItem>();\n    private List<string> targetKeys = new List<string>();\n    private string[] selectedKeys = Array.Empty<string>();\n    private string[] titles = { \"Source\", \"Target\" };\n    private bool Disabled = false;\n\n    protected override void OnInitialized()\n    {\n        var random = new Random();\n        for (int i = 0; i < 20; i++)\n        {\n            var data = new TransferItem\n            {\n                Key = i.ToString(),\n                Title = $\"Content{i + 1}\",\n                Description = $\"description of content{i + 1}\",\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\n            };\n\n            if (data[\"Chosen\"] is bool _bool && _bool)\n            {\n                targetKeys.Add(data.Key);\n            }\n\n            dataSource.Add(data);\n        }\n        base.OnInitialized();\n    }\n\n\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\n    {\n        //return new RenderFragment(buildTree);\n        return $\"{item.Title} - {item.Description}\";\n    }\n\n    private void OnChange(TransferChangeArgs e)\n    {\n        Console.WriteLine(e.Direction);\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\n    }\n\n    private void OnScroll(TransferScrollArgs e)\n    {\n        Console.WriteLine(e.Direction);\n    }\n\n    private void OnSelectChange(TransferSelectChangeArgs e)\n    {\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\n    }\n}\n",
        "Type": "Demos.Transfer.demo.CustomItem",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "table-transfer",
        "Title": "表格穿梭框",
        "Description": "<p>使用 Table 组件作为自定义渲染列表。</p>\n",
        "Code": "<h3>TableTransfer</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.TableTransfer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "large-data",
        "Title": "大数据性能测试",
        "Description": "<p>2000 条数据。</p>\n",
        "Code": "<h3>LargeData</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.Transfer.demo.LargeData",
        "Style": "",
        "Debug": true
      }
    ]
  },
  {
    "Title": "Drawer",
    "SubTitle": "抽屉",
    "Type": "反馈",
    "Desc": "<p>屏幕边缘滑出的浮层面板。</p>\n<h2>何时使用</h2>\n<p>抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到到原任务。</p>\n<ul>\n<li>当需要一个附加的面板来控制父窗体内容，这个面板在需要时呼出。比如，控制界面展示样式，往界面中添加内容。</li>\n<li>当需要在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>标题</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>可用于设置 Drawer 内容部分的样式</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>是否显示右上角的关闭按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>抽屉元素之间的子组件</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>点击蒙层是否允许关闭</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>遮罩样式</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>抽屉的方向,可选值为 <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>对话框外层容器的类名</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>宽度</td>\n<td>string|int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>Height</td>\n<td>高度, 在 placement 为 top 或 bottom 时使用</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>设置 Drawer 的 z-index</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>X轴方向的偏移量</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>Y轴方向的偏移量</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Drawer 是否可见</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>是否支持键盘 esc 关闭</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>点击遮罩层或右上角叉或取消按钮的回调</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>抽屉显示之前回调事件</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 8,
        "Name": "render_dom",
        "Title": "渲染在当前DOM",
        "Description": "<p>渲染在当前 dom 里。自定义容器。</p>\n",
        "Code": "<div>\n    <div style=\"height:200px;overflow:hidden;position:relative;border:1px solid #ebedf0; border-radius:2px;padding:48px;text-align:center;background:#fafafa\">\n        Render in this\n        <div style=\"margin-top: 16px\">\n            <Button Type=\"primary\" @onclick=\"_=>open()\">Open</Button>\n        </div>\n        <Drawer Style=\"position:absolute\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n        </Drawer>\n    </div>\n</div>\n\n@code{\n\n    bool visible = false;\n\n\n\n    void open()\n    {\n\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Render_dom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基础抽屉",
        "Description": "<p>基础抽屉，点击触发按钮抽屉从右滑出，点击遮罩区关闭</p>\n",
        "Code": "<div>\n    <Button Type=\"primary\" @onclick=\"_=>open()\">Open</Button>\n    <Drawer Closable=\"true\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>\n\n   @code{\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "userprofile",
        "Title": "信息预览抽屉",
        "Description": "<p>需要快速预览对象概要时使用，点击遮罩区关闭。</p>\n",
        "Code": "<div>\n        <AntList DataSource=\"datasource\">\n                    <Item Context=\"item\">\n                        <AntListItemMeta Avatar=@(\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\")\n                                         Description=\"Progresser XTech\">\n                            <Title>\n                                @item.Title\n                            </Title>                            \n                      \n                        </AntListItemMeta>\n\n                        <Button Type=\"@ButtonType.Link\" OnClick=\"(e)=>open(e, item.Title)\">View Profile</Button>\n                    </Item>\n        </AntList>\n\n        <Drawer Width=\"640\" Closable=\"true\" Visible=\"visible\" Title='(\"User Profile\")' OnClose=\"_=>close()\">\n            <Text Strong=\"true\">Personal</Text>\n            <Row></Row>\n            <Row Gutter=\"12\">\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Full Name:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text>Henry</Text>\n                </Col>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Account:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text>AntDesign@example.com</Text>\n                </Col>\n            </Row>\n            <Row Gutter=\"12\">\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">City:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text>HangZhou</Text>\n                </Col>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Country:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text>China</Text>\n                </Col>\n            </Row>\n            <Row Gutter=\"12\">\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Birthday:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text>February 2,1900</Text>\n                </Col>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Website:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text>www.baidu.com</Text>\n                </Col>\n            </Row>\n\n            <Divider></Divider>\n            <Text Strong=\"true\">Company</Text>\n            <Row></Row>\n            <Row>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Position:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text Strong=\"false\">Programmer</Text>\n                </Col>\n                <Col Span=\"6\">\n                    <Text Strong=\"true\">Responsibilities:</Text>\n                </Col>\n                <Col Span=\"6\">\n                    <Text Strong=\"false\">Coding</Text>\n                </Col>\n            </Row>\n            <Row>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Department:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text Strong=\"false\">XTech</Text>\n                </Col>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Supervisor:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text Strong=\"false\">Lin</Text>\n                </Col>\n            </Row>\n            <Row>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Skills:</Text>\n                </Col>\n                <Col Span=\"20\">\n                    <Text Strong=\"false\">\n                        C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.\n                    </Text>\n                </Col>\n\n            </Row>\n\n            <Divider ></Divider>\n            <Text Strong=\"true\">Contacts</Text>\n            <Row></Row>\n            <Row>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Email:</Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text Strong=\"false\"> ant-design-Blazor@example.com</Text>\n                </Col>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">    Phone Number:     </Text>\n                </Col>\n                <Col Span=\"8\">\n                    <Text Strong=\"false\">+86 181 0000 0000 </Text>\n                </Col>\n            </Row>\n            <Row>\n                <Col Span=\"4\">\n                    <Text Strong=\"true\">Github:</Text>\n                </Col>\n                <Col Span=\"20\">\n                    <Text Strong=\"false\">https://ant-design-blazor.gitee.io/ </Text>\n                </Col>\n            </Row>\n        </Drawer>   \n</div>\n\n   @code{\n\n       public class ListDataSource\n       {\n           public string Title { get; set; }\n       };\n\n       List<ListDataSource> datasource = new List<ListDataSource>() {\n        new ListDataSource(){Title=\"Henry\"},\n        new ListDataSource(){Title=\"Henry\"}\n    };\n       bool visible = false;\n\n\n       void open(MouseEventArgs arg, string Title)\n       {\n           this.visible = true;\n       }\n\n       void close()\n       {\n           this.visible = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Userprofile",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Placement",
        "Title": "自定义位置",
        "Description": "<p>自定义位置，点击触发按钮抽屉从相应的位置滑出，点击遮罩区关闭</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"placement\">\n        <Radio Value=\"top\">top</Radio>\n        <Radio Value=\"right\">right</Radio>\n        <Radio Value=\"bottom\">bottom</Radio>\n        <Radio Value=\"left\">left</Radio>\n    </RadioGroup>\n\n    <Button Type=\"primary\" @onclick=\"_ => open()\">Open</Button>\n    <Drawer Closable=\"true\" Visible=\"@visible\" Placement=\"@placement\" Title='(\"Drawer in different Placement\")' OnClose=\"_ => close()\">\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n    </Drawer>\n</div>  \n\n@code{\n\n    string placement = \"right\";\n\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "drawer_service",
        "Title": "使用服务",
        "Description": "<p>注入DrawerService，使用 DrawerService 的 CreateAsync(DrawerConfig config) 和 CreateAsync&lt;T, TComponentParameter&gt;(DrawerConfig config, TComponentParameter parameter) 创建Drawer，可以从现有的组件模板创建Drawer。</p>\n",
        "Code": "@inject DrawerService DrawerService\n\n<AntDesign.Button OnClick=\"OpenDrawer\" Type=\"primary\">OpenDrawer</AntDesign.Button>\n\n<AntDesign.Button OnClick=\"OpenComponentTemplate\" Type=\"primary\">Using Component</AntDesign.Button>\n\n@code{\n    DrawerRef drawerRef;\n    private async Task OpenDrawer()\n    {\n        RenderFragment content =@<div><Input Value=\"@(\"\")\" /><Button OnClick=\"CloseDrawer\">CloseDrawer</Button></div>;\n\n        var options = new DrawerConfig()\n        {\n            Title = \"Drawer\",\n            ChildContent = content\n        };\n        \n        options.OnClose = () =>\n        {\n            Console.WriteLine(\"Close Drawer\");\n            return Task.CompletedTask;\n        };\n\n        drawerRef = await DrawerService.CreateAsync(options);\n    }\n\n    private async Task CloseDrawer()\n    {\n        if (drawerRef != null)\n        {\n            await drawerRef.CloseAsync();\n        }\n    }\n\n    private async Task OpenComponentTemplate()\n    {\n        var options = new DrawerConfig()\n        {\n            Title = \"Component\"\n        };\n        options.OnClose = () =>\n        {\n            Console.WriteLine(\"Close ComponentTemplate Drawer\");\n            return Task.CompletedTask;\n        };\n\n        //ComponentTemplate.razor\n        //Component ComponentTemplate source code\n        //\n        //@namespace AntDesign.Docs.Demos.Drawer.demo\n        //@inherits DrawerTemplate<string>\n        //<div>\n        //    <h3>Component</h3>\n        //    <p>@Config</p>\n        //    <AntDesign.Button Type=\"primary\" OnClick=\"base.HandleClose\">CloseDrawer</AntDesign.Button>\n        //</div>\n        //\n        await DrawerService.CreateAsync<ComponentTemplate, string>(options, \"here is Component paramter\");\n    }\n\n}",
        "Type": "Demos.Drawer.demo.Drawer_service",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "formindrawer",
        "Title": "抽屉表单",
        "Description": "<p>在抽屉中使用表单。</p>\n",
        "Code": "<div>\n    <Button Icon=\"plus\" Type=\"primary\" @onclick=\"_=>open()\">New account</Button>\n    <Drawer Closable=\"true\" Width=\"720\" Visible=\"visible\" Title='(\"Submit from in Drawer\")' OnClose=\"_=>close()\">\n        <Template style=\"height:90%\">\n            <Row Gutter=\"16\">\n                <AntDesign.Col Span=\"12\">\n                    <Text>Name</Text>\n                    <Input Placeholder=\"Please enter user name\" TValue=\"string\"></Input>\n                </AntDesign.Col>\n                <AntDesign.Col Span=\"12\">\n                    <Text>Url</Text>\n                    <AntDesign.Input Placeholder=\"please enter url\" TValue=\"string\">\n                        <AddOnBefore>Http://</AddOnBefore>\n                        <AddOnAfter>.Com</AddOnAfter>\n                    </AntDesign.Input>\n                </AntDesign.Col>\n            </Row>\n            <br />\n            <Row Gutter=\"16\">\n                <AntDesign.Col Span=\"12\">\n                    <Text>Owner</Text>\n                    <Input Placeholder=\"Please select a owner\" TValue=\"string\" />\n                </AntDesign.Col>\n                <AntDesign.Col Span=\"12\">\n                    <Text>Type</Text>\n                    <Input Placeholder=\"please enter url\" TValue=\"string\" />\n                </AntDesign.Col>\n            </Row>\n            <br />\n\n            <Row>\n                <AntDesign.Col Span=\"24\">\n                    <Text>Description</Text>\n                    <TextArea Placeholder=\"Please enter your description\">\n\n                    </TextArea>\n                </AntDesign.Col>\n            </Row>\n            <br />\n            <Row>\n                <AntDesign.Col Span=\"18\">\n\n                </AntDesign.Col>\n                <AntDesign.Col Span=\"6\">\n                    <Button Type=\"default\">Cancel</Button>\n                    <Button Type=\"primary\">Submit</Button>\n                </AntDesign.Col>\n            </Row>\n        </Template>\n    </Drawer>\n</div>\n\n\n@code{\n    bool visible = false;\n\n    void open()\n    {\n        this.visible = true;\n    }\n\n    void close()\n    {\n        this.visible = false;\n    }\n}",
        "Type": "Demos.Drawer.demo.Formindrawer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "multiple",
        "Title": "多层抽屉",
        "Description": "<p>在抽屉内打开新的抽屉，用以解决多分支任务的复杂状况。</p>\n",
        "Code": "<div>\n    <Button  Type=\"primary\" OnClick=\"_=>open()\">Open</Button>\n\n    <Drawer Width=\"@wdFirstLayer\" Closable=\"true\" Visible=\"visible1\" Title='(\"Multi-level drawer\")' OnClose=\"_=>close()\">\n        <Button Type=\"primary\" OnClick=\"_=>ShowDrawer()\">Two-level Drawer</Button>\n        <Drawer Width=\"260\" Closable=\"true\" Visible=\"visible2\" Title='(\"two-level drawer\")' OnClose=\"_=>CloseDrawer()\">\n            <Button Type=\"primary\">This is two-level drawer</Button>\n        </Drawer>\n\n    </Drawer>\n</div>\n\n   @code{\n\n       bool visible1 = false;\n       bool visible2 = false;\n       int wdFirstLayer = 520;\n\n       void open()\n       {\n           this.visible1 = true;\n       }\n\n       void ShowDrawer()\n       {\n\n           this.visible2 = true;\n           wdFirstLayer += 260;\n       }\n\n       void close()\n       {\n           this.visible1 = false;\n       }\n\n       void CloseDrawer()\n       {\n           wdFirstLayer -= 260;\n           this.visible2 = false;\n       }\n\n}",
        "Type": "Demos.Drawer.demo.Multiple",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Slider",
    "SubTitle": "滑动输入条",
    "Type": "数据录入",
    "Desc": "<p>滑动型输入器，展示当前值和可选范围。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当用户需要在数值区间/自定义区间内进行选择时，可为连续或离散值。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>设置初始取值。当 range 为 false 时，使用 number，否则用 [number, number]</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>值为 true 时，滑块为禁用状态</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dots</td>\n<td>是否只能拖拽到刻度上</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>included</td>\n<td>marks 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>marks</td>\n<td>刻度标记，key 的类型必须为 number 且取值在闭区间 [min, max] 内，每个标签可以单独设置样式</td>\n<td>object</td>\n<td></td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>range</td>\n<td>双滑块模式</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>反向坐标轴</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>step</td>\n<td>步长，取值必须大于 0，并且可被 (max - min) 整除。当 marks 不为空对象时，可以设置 step 为 null，此时 Slider 的可选值仅有 marks 标出来的部分。</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>设置当前取值。当 range 为 false 时，使用 number，否则用 [number, number]</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>vertical</td>\n<td>值为 true 时，Slider 为垂直方向</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onAfterChange</td>\n<td>与 onmouseup 触发时机一致，把当前值作为参数传入。</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入。</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipPlacement</td>\n<td>设置 Tooltip 展示位置。参考 Tooltip。</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipVisible</td>\n<td>值为true时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时。</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getTooltipPopupContainer</td>\n<td>Tooltip 渲染父节点，默认渲染到 body 上。</td>\n<td>Rendfragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Icon1",
        "Title": "带 icon 的滑块",
        "Description": "<p>滑块左右可以设置图标来表达业务含义。</p>\n",
        "Code": "<div>\n    <Icon Style=\"display: inline-block\" Type=\"Frown\" Theme=\"outline\" />\n    <Slider Style=\"display: inline-block; width: 300px;\" Min=\"0\" Max=\"20\" DefaultValue=\"5\" />\n    <Icon Style=\"display: inline-block\" Type=\"Smile\" Theme=\"outline\" />\n</div>\n\n\n",
        "Type": "Demos.Slider.demo.Icon1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Input",
        "Title": "带输入框的滑块",
        "Description": "<p>和 数字输入框 组件保持同步.</p>\n",
        "Code": "<div>\n    <Row>\n        <Col Span=\"12\">\n            <Slider Min=\"1\" Max=\"20\" Value=\"@inputValue1\" />\n        </Col>\n        <Col Span=\"4\">\n            <AntDesign.InputNumber Min=\"1\" Max=\"20\" Style=\"margin:0 16px;\" Value=\"@inputValue1\" ValueChanged=\"(e)=>UpdateValue1(e)\" TValue=\"int\" />\n        </Col>\n    </Row>\n    <Row>\n        <Col Span=\"12\">\n            <Slider Min=\"0\" Max=\"1\" Step=\"0.01\" Value=\"@inputValue2\"  />\n        </Col>\n        <Col Span=\"4\">\n            <AntDesign.InputNumber Min=\"0\" Max=\"10\" Step=\"0.1\" Style=\"margin:0 16px;\" Value=\"@inputValue2\" ValueChanged=\"(e)=>UpdateValue2(e)\" TValue=\"double\" />\n        </Col>\n    </Row>\n</div>\n\n\n@code\n{\n    private int inputValue1 = 1;\n\n    private void UpdateValue1(int value)\n    {\n        inputValue1 = value;\n    }\n\n\n    private double inputValue2= 0.5;\n\n    private void UpdateValue2(double value)\n    {\n        inputValue2 =value;\n    }\n}\n\n\n",
        "Type": "Demos.Slider.demo.Input",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Graduated",
        "Title": "带标签的滑块",
        "Description": "<p>使用 <code>marks</code> 属性标注分段式滑块，使用 <code>value</code> / <code>defaultValue</code> 指定滑块位置。当 <code>included=false</code> 时，表明不同标记间为并列关系。当 <code>step=null</code> 时，Slider 的可选值仅有 <code>marks</code> 标出来的部分。</p>\n",
        "Code": "<div>\n    <h4>included=true</h4>\n    <Slider Marks=\"@nMarks\" DefaultValue=\"37\" />\n    <Slider Marks=\"@nMarks\" DefaultValue=\"(26, 37)\" />\n\n    <h4>included=false</h4>\n    <Slider Marks=\"@nMarks\" Included=\"false\" DefaultValue=\"37\" />\n\n    <h4>marks & step</h4>\n    <Slider Marks=\"@nMarks\" Step=\"10\" DefaultValue=\"37\" />\n\n    <h4>step=null</h4>\n    <Slider Marks=\"@nMarks\" Step=\"null\" DefaultValue=\"37\" />\n\n</div>\n\n@code\n{\n    private SliderMark[] nMarks =\n     {\n            new SliderMark(0, \"0℃\"),\n            new SliderMark(26, \"26℃\"),\n            new SliderMark(37, \"37℃\"),\n            new SliderMark(100, (b)=>{\n                b.OpenElement(0,\"strong\");\n                b.AddContent(1,\"100℃\");\n                b.CloseElement();\n            }, \"color: #f50;\")\n     };\n}",
        "Type": "Demos.Slider.demo.Graduated",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>基本滑动条。当 <code>range</code> 为 <code>true</code> 时，渲染为双滑块。当 <code>disabled</code> 为 <code>true</code> 时，滑块处于不可用状态。</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" Disabled=\"@Diabled\"  />\n    <Slider DefaultValue=\"(20, 50)\" Disabled=\"@Diabled\" />\n    Diabled: <Switch Size=\"small\" Checked=\"@Diabled\" OnChange=\"(e)=>OnSwitch(e)\" />\n</div>\n\n@code\n{\n\n    private bool Diabled;\n\n    private void OnSwitch(bool args)\n    {\n        Diabled = args;\n    }\n}\n",
        "Type": "Demos.Slider.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Customer",
        "Title": "自定义提示",
        "Description": "<p>使用 <code>tipFormatter</code> 可以格式化 <code>Tooltip</code> 的内容，设置 <code>tipFormatter=null</code>，则隐藏 Tooltip。</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" Value=\"@value\" TipFormatter=\"tipFormatter\"  />\n</div>\n\n@code\n{\n\n    private int value { get; set; }\n\n    string tipFormatter()\n    {\n        return $\"{value}%\";\n    }\n}\n\n\n\n",
        "Type": "Demos.Slider.demo.Customer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Event",
        "Title": "事件",
        "Description": "<p>当 Slider 的值发生改变时，会触发 <code>onChange</code> 事件，并把改变后的值作为参数传入。在 <code>onmouseup</code> 时，会触发 <code>onAfterChange</code> 事件，并把当前值作为参数传入。</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" OnChange=\"(e)=>OnChange1(e.AsT0)\" OnAfterChange=\"(vlaue)=>OnAfterChange1()\" />\n    <Slider Step=\"10\" DefaultValue=\"( 20, 50 )\" OnChange=\"(e)=>OnChange2(e.AsT0)\" OnAfterChange=\"(vlaue)=>OnAfterChange2()\" />\n</div>\n\n\n@code {\n\n    private void OnChange1(double args)\n    {\n    }\n\n    private void OnAfterChange1()\n    {\n    }\n\n    private void OnChange2(double args)\n    {\n    }\n\n    private void OnAfterChange2()\n    {\n    }\n}\n",
        "Type": "Demos.Slider.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Vslider",
        "Title": "垂直",
        "Description": "<p>垂直方向的 Slider。</p>\n",
        "Code": "<div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider Vertical DefaultValue=\"30\" />\n    </div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider Vertical Step=\"10\" DefaultValue=\"(20, 50 )\" />\n    </div>\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\n        <Slider Vertical Marks=\"@_marks1\" DefaultValue=\"(26, 37 )\" />\n    </div>\n</div>\n\n@code\n{\n        private SliderMark[] _marks1 =\n        {\n            new SliderMark(0, \"0℃\"),\n            new SliderMark(26, \"26℃\"),\n            new SliderMark(37, \"37℃\"),\n            new SliderMark(100, (b)=>{\n                b.OpenElement(0,\"strong\");\n                b.AddContent(1,\"100℃\");\n                b.CloseElement();\n            }, \"color: #f50;\")\n        };\n}\n",
        "Type": "Demos.Slider.demo.Vslider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "Reversed",
        "Title": "反向",
        "Description": "<p>设置 <code>reverse</code> 可以将滑动条置反。</p>\n",
        "Code": "<div>\n    <Slider Reverse=\"@reversed\" DefaultValue=\"30\" />\n    <Slider Reverse=\"@reversed\" DefaultValue=\"(20, 50)\" />\n    Reversed: <Switch Size=\"small\" Checked=\"@reversed\" OnChange=\"(e)=>OnSwitchReverse(e)\" />\n</div>\n\n\n@code\n{\n    private bool reversed = true;\n\n    private void OnSwitchReverse(bool args)\n    {\n        reversed = args;\n    }\n}\n",
        "Type": "Demos.Slider.demo.Reversed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "Tooltip",
        "Title": "控制 ToolTip 的显示",
        "Description": "<p>当 <code>tooltipVisible</code> 为 true 时，将始终显示 ToolTip；反之则始终不显示，即使在拖动、移入时也是如此。</p>\n",
        "Code": "<div>\n    <Slider DefaultValue=\"30\" TooltipPlacement=\"top\" TooltipVisible=\"true\" />\n</div>\n",
        "Type": "Demos.Slider.demo.Tooltip",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "InputNumber",
    "SubTitle": "数字输入框",
    "Type": "数据录入",
    "Desc": "<p>通过鼠标或键盘，输入范围内的数值。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当需要获取标准数值时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>初始值</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Formatter</td>\n<td>指定输入框展示值的格式</td>\n<td>function(double,string)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>最大值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>最小值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parser</td>\n<td>指定从 <code>formatter</code> 里转换回数字的方式，和 <code>formatter</code> 搭配使用</td>\n<td>function(string, double)</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>输入框大小</td>\n<td><code>large</code> ,<code>middle</code>,<code>small</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Step</td>\n<td>每次改变步数，可以为小数</td>\n<td>double</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>当前值</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>输入框内容变化时的回调</td>\n<td>function(double)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 3,
        "Name": "Decimal",
        "Title": "小数",
        "Description": "<p>和原生的数字输入框一样，value 的精度由 step 的小数位数决定。</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber Step=\"0.1\" Min=\"-1\" Max=\"5\" @bind-Value=\"myValue\" />\n</div>\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.InputNumber.demo.Decimal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Size",
        "Title": "三种大小",
        "Description": "<p>三种大小的数字输入框，当 size 分别为 large 和 small 时，输入框高度为 40px 和 24px ，默认高度为 32px。</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Large\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber DefaultValue=\"3\" @bind-Value=\"myValue\"/>\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Small\" @bind-Value=\"myValue\"/>\n</div>\n\t\t\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.InputNumber.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Formatter",
        "Title": "格式化展示",
        "Description": "<p>通过 <code>formatter</code> 格式化数字，以展示具有具体含义的数据，往往需要配合 <code>parser</code> 一起使用。</p>\n",
        "Code": "@using System.Text.RegularExpressions\n<div>\n    <AntDesign.InputNumber Formatter=\"Format1\" Parser=\"Parse1\" DefaultValue=\"1000d\"/>\n    <AntDesign.InputNumber Formatter=\"Format2\" Parser=\"Parse2\" DefaultValue=\"100d\" Min=\"0\" Max=\"100\"/>\n</div>\n\n\n@code{\n\n    private double myValue { get; set; }\n\n    private string Format1(double value)\n    {\n        return \"$ \" + value.ToString(\"n0\");\n    }\n\n    private string Parse1(string value)\n    {\n       return Regex.Replace(value, @\"\\$\\s?|(,*)\", \"\");\n    }\n\n    private string Format2(double value)\n    {\n        return value.ToString() + \"%\";\n    }\n\n    private string Parse2(string value)\n    {\n        return value.Replace(\"%\", \"\");\n    }\n}\t\t",
        "Type": "Demos.InputNumber.demo.Formatter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Disable",
        "Title": "不可用",
        "Description": "<p>点击按钮切换可用状态。</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber DefaultValue=\"3\" Disabled=\"@disabled\" @bind-Value=\"myValue\" />\n    <div style=\"margin: 20px 0px 20px 0px;\">\n        <Button Type=\"@ButtonType.Primary\" OnClick=\"(e)=> ToggleDisable()\">Toggle disabled</Button>\n    </div>\n</div>\n\n@code{\n    private bool disabled = true;\n\n    private double myValue { get; set; }\n\n\n    private void ToggleDisable()\n    {\n        disabled = !disabled;\n    }\n}\t\t",
        "Type": "Demos.InputNumber.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Generic",
        "Title": "泛型",
        "Description": "<p>数字输入框。</p>\n",
        "Code": "<div>\n\n    <Text>int</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_int\" />\n    <p>value:@_int</p>\n    <br />\n\n    <Text>int?</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_intNull\" />\n    <p>value:@_intNull</p>\n    <br />\n\n    <Text>decimal</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_dec\" />\n    <p>value:@_dec</p>\n    <br />\n\n    <Text>decimal?</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_decNull\" />\n    <p>value:@_decNull</p>\n    <br />\n\n    <Text>double</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_double\" />\n    <p>value:@_double</p>\n    <br />\n\n    <Text>double?</Text>\n    <AntDesign.InputNumber @bind-Value=\"@_doubleNull\" />\n    <p>value:@_doubleNull</p>\n    <br />\n</div>\n@code{\n\n    int _int;\n    int? _intNull;\n    decimal _dec;\n    decimal? _decNull;\n    double _double;\n    double? _doubleNull;\n}\n",
        "Type": "Demos.InputNumber.demo.Generic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>数字输入框。</p>\n",
        "Code": "<div>\n    <AntDesign.InputNumber @bind-Value=\"myValue\" Min=\"1\" Max=\"10\" DefaultValue=\"3\"></AntDesign.InputNumber>\n</div>\n\n@code{\n    private double myValue { get; set; }\n}",
        "Type": "Demos.InputNumber.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "TimePicker",
    "SubTitle": "时间选择框",
    "Type": "数据录入",
    "Desc": "<p>输入或选择时间的控件。</p>\n<h2>何时使用</h2>\n<hr />\n<p>当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。</p>\n<p>时间选择器完成度较低，暂时只实现了以下功能：\nautoFocus、bordered、className、defaultValue、\ndisabled、format、inputReadOnly、open、placeholder、\npopupStyle、renderExtraFooter、value、onChange、onOpenChange</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>禁用时间选择。</p>\n",
        "Code": "<TimePicker Disabled=\"@true\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />",
        "Type": "Demos.TimePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "interval-options",
        "Title": "步长选项",
        "Description": "<p>可以使用 <code>hourStep</code> <code>minuteStep</code> <code>secondStep</code> 按步长展示可选的时分秒。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.IntervalOptions",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "value",
        "Title": "受控组件",
        "Description": "<p>value 和 onChange 需要配合使用。</p>\n",
        "Code": "<TimePicker Value=\"_value\" OnChange=\"OnChange\" />\n\n@code\n{\n    private DateTime _value = DateTime.Now;\n\n    private void OnChange(DateTime value, string dateString)\n    {\n        _value = value;\n    }\n}",
        "Type": "Demos.TimePicker.demo.Value",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>点击 TimePicker，然后可以在浮层中选择或者输入某一时间。</p>\n",
        "Code": "<TimePicker />\n",
        "Type": "Demos.TimePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "hours12",
        "Title": "12 小时制",
        "Description": "<p>12 小时制的时间选择器，默认的 format 为 <code>h:mm:ss a</code>。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.Hours12",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "range-picker",
        "Title": "范围选择器",
        "Description": "<p>通过 <code>RangePicker</code> 使用时间范围选择器。</p>\n",
        "Code": "<div>\n    TODO\n</div>",
        "Type": "Demos.TimePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的输入框，大的用在表单中，中的为默认。</p>\n",
        "Code": "<TimePicker Size=\"@DatePickerSize.Large\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n<br />\n<TimePicker Size=\"@DatePickerSize.Small\"\n               Format=\"HH:mm:ss\"\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\n",
        "Type": "Demos.TimePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "addon",
        "Title": "附加内容",
        "Description": "<p>在 TimePicker 选择框底部显示自定义的内容。</p>\n",
        "Code": "<TimePicker RenderExtraFooter=\"ExtraFooter\" />\n\n@code {\n    private RenderFragment ExtraFooter =@<Button Type=\"@ButtonType.Primary\">Ok</Button>;\n}",
        "Type": "Demos.TimePicker.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "hide-column",
        "Title": "选择时分",
        "Description": "<p>TimePicker 浮层中的列会随着 <code>format</code> 变化，当略去 <code>format</code> 中的某部分时，浮层中对应的列也会消失。</p>\n",
        "Code": "<TimePicker Format='@(\"hh:mm\")' />\n",
        "Type": "Demos.TimePicker.demo.HideColumn",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tooltip",
    "SubTitle": "文字提示",
    "Type": "数据展示",
    "Desc": "<p>简单的文字提示气泡框。</p>\n<h2>何时使用</h2>\n<p>鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。</p>\n<p>可用来代替系统默认的 <code>title</code> 提示，提供一个<code>按钮/文字/操作</code>的文案解释。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>提示文字</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h3>共同的 API</h3>\n<p>以下 API 为 Tooltip、Popconfirm、Popover 共享的 API。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrowPointAtCenter</td>\n<td>箭头是否指向目标元素中心</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>autoAdjustOverflow</td>\n<td>气泡被遮挡时自动调整位置</td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultVisible</td>\n<td>默认是否显隐</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>浮层渲染父节点，默认渲染到 body 上</td>\n<td>Function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>mouseEnterDelay</td>\n<td>鼠标移入后延时多少才显示 Tooltip，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>mouseLeaveDelay</td>\n<td>鼠标移出后延时多少才隐藏 Tooltip，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>overlayClassName</td>\n<td>卡片类名</td>\n<td>string</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>overlayStyle</td>\n<td>卡片样式</td>\n<td>object</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>placement</td>\n<td>气泡框位置，可选 <code>top</code> <code>left</code> <code>right</code> <code>bottom</code> <code>topLeft</code> <code>topRight</code> <code>bottomLeft</code> <code>bottomRight</code> <code>leftTop</code> <code>leftBottom</code> <code>rightTop</code> <code>rightBottom</code></td>\n<td>string</td>\n<td>top</td>\n<td></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发行为，可选 <code>hover/focus/click/contextMenu</code>，可使用数组设置多个触发行为</td>\n<td>string | string[]</td>\n<td>hover</td>\n<td></td>\n</tr>\n<tr>\n<td>visible</td>\n<td>用于手动控制浮层显隐</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>onVisibleChange</td>\n<td>显示隐藏的回调</td>\n<td>(visible) =&gt; void</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>align</td>\n<td>该值将合并到 placement 的配置中，设置参考 <a href=\"https://github.com/react-component/tooltip\">rc-tooltip</a></td>\n<td>Object</td>\n<td>无</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>注意</h2>\n<p>请确保 <code>Tooltip</code> 的子元素能接受 <code>onMouseEnter</code>、<code>onMouseLeave</code>、<code>onFocus</code>、<code>onClick</code> 事件。</p>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "placement",
        "Title": "位置",
        "Description": "<p>位置有 12 个方向。</p>\n",
        "Code": "<div class=\"demo\">\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); white-space: nowrap;\">\n        <Tooltip Placement=\"@PlacementType.TopLeft\" Title=\"Text\">\n            <Button>TL</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Top\" Title=\"Text\">\n            <Button>Top</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.TopRight\" Title=\"Text\">\n            <Button>TR</Button>\n        </Tooltip>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); float: left;\">\n        <Tooltip Placement=\"@PlacementType.LeftTop\" Title=\"Text\">\n            <Button>LT</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Left\" Title=\"Text\">\n            <Button>Left</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.LeftBottom\" Title=\"Text\">\n            <Button>LB</Button>\n        </Tooltip>\n    </div>\n    <div style=\"width: @($\"{ButtonWidth}px\"); margin-left: @($\"{ButtonWidth * 4 + 24}px\");\">\n        <Tooltip Placement=\"@PlacementType.RightTop\" Title=\"Text\">\n            <Button>RT</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Right\" Title=\"Text\">\n            <Button>Right</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.RightBottom\" Title=\"Text\">\n            <Button>RB</Button>\n        </Tooltip>\n    </div>\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); clear: both; white-space: nowrap;\">\n        <Tooltip Placement=\"@PlacementType.BottomLeft\" Title=\"Text\">\n            <Button>BL</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.Bottom\" Title=\"Text\">\n            <Button>Bottom</Button>\n        </Tooltip>\n        <Tooltip Placement=\"@PlacementType.BottomRight\" Title=\"Text\">\n            <Button>BR</Button>\n        </Tooltip>\n    </div>\n</div>\n\n@code\n{\n    public string Text = \"prompt text\";\n    const int ButtonWidth = 70;\n}",
        "Type": "Demos.Tooltip.demo.Placement",
        "Style": "\n.code-box-demo .demo {\n  overflow: auto;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n.code-box-demo .ant-btn-rtl {\n  margin-right: 0;\n  margin-left: 8px;\n  margin-bottom: 8px;\n}\n#components-tooltip-demo-placement .ant-btn {\n  width: 70px;\n  text-align: center;\n  padding: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\n    <span>Tooltip will show on mouse enter.</span>\n</Tooltip>",
        "Type": "Demos.Tooltip.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "arrow-point-at-center",
        "Title": "箭头指向",
        "Description": "<p>设置了 <code>arrowPointAtCenter</code> 后，箭头将指向目标元素的中心。</p>\n",
        "Code": "<div>\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\">\n        <Button>Align edge / 边缘对齐</Button>\n    </Tooltip>\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\" ArrowPointAtCenter=\"true\">\n        <Button>Arrow points to center / 箭头指向中心</Button>\n    </Tooltip>\n</div>",
        "Type": "Demos.Tooltip.demo.ArrowPointAtCenter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "auto-adjust-overflow",
        "Title": "自动调整位置",
        "Description": "<p>气泡框不可见时自动调整位置</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\n    <span>Tooltip will show on mouse enter.</span>\n</Tooltip>",
        "Type": "Demos.Tooltip.demo.AutoAdjustOverflow",
        "Style": "",
        "Debug": true
      }
    ]
  },
  {
    "Title": "Tabs",
    "SubTitle": "标签页",
    "Type": "数据展示",
    "Desc": "<p>选项卡切换组件。</p>\n<h2>何时使用</h2>\n<p>提供平级的区域将大块内容进行收纳和展现，保持界面整洁。</p>\n<p>Ant Design 依次提供了三级选项卡，分别用于不同的场景。</p>\n<ul>\n<li>卡片式的页签，提供可关闭的样式，常用于容器顶部。</li>\n<li>既可用于容器顶部，也可用于容器内部，是最通用的 Tabs。</li>\n<li><a href=\"/components/radio/#components-radio-demo-radiobutton\">RadioButton</a> 可作为更次级的页签来使用。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Tabs</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activeKey</td>\n<td>当前激活 tab 面板的 key</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>animated</td>\n<td>是否使用动画切换 Tabs，在 <code>tabPosition=top|bottom</code> 时有效</td>\n<td>boolean | {inkBar:boolean, tabPane:boolean}</td>\n<td>true, 当 type=&quot;card&quot; 时为 false</td>\n</tr>\n<tr>\n<td>renderTabBar</td>\n<td>替换 TabBar，用于二次封装标签头</td>\n<td>(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) =&gt; React.ReactElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>初始化选中面板的 key，如果没有设置 activeKey</td>\n<td>string</td>\n<td>第一个面板</td>\n</tr>\n<tr>\n<td>hideAdd</td>\n<td>是否隐藏加号图标，在 <code>type=&quot;editable-card&quot;</code> 时有效</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>size</td>\n<td>大小，提供 <code>large</code> <code>default</code> 和 <code>small</code> 三种大小</td>\n<td>string</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>tabBarExtraContent</td>\n<td>tab bar 上额外的元素</td>\n<td>React.ReactNode</td>\n<td>无</td>\n</tr>\n<tr>\n<td>tabBarGutter</td>\n<td>tabs 之间的间隙</td>\n<td>number</td>\n<td>无</td>\n</tr>\n<tr>\n<td>tabBarStyle</td>\n<td>tab bar 的样式对象</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabPosition</td>\n<td>页签位置，可选值有 <code>top</code> <code>right</code> <code>bottom</code> <code>left</code></td>\n<td>string</td>\n<td>'top'</td>\n</tr>\n<tr>\n<td>type</td>\n<td>页签的基本样式，可选 <code>line</code>、<code>card</code> <code>editable-card</code> 类型</td>\n<td>string</td>\n<td>'line'</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>切换面板的回调</td>\n<td>Function(activeKey) {}</td>\n<td>无</td>\n</tr>\n<tr>\n<td>onEdit</td>\n<td>新增和删除页签的回调，在 <code>type=&quot;editable-card&quot;</code> 时有效</td>\n<td>(targetKey, action): void</td>\n<td>无</td>\n</tr>\n<tr>\n<td>onNextClick</td>\n<td>next 按钮被点击的回调</td>\n<td>Function</td>\n<td>无</td>\n</tr>\n<tr>\n<td>onPrevClick</td>\n<td>prev 按钮被点击的回调</td>\n<td>Function</td>\n<td>无</td>\n</tr>\n<tr>\n<td>onTabClick</td>\n<td>tab 被点击的回调</td>\n<td>Function</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h3>Tabs.TabPane</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>forceRender</td>\n<td>被隐藏时是否渲染 DOM 结构</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>key</td>\n<td>对应 activeKey</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>tab</td>\n<td>选项卡头显示文字</td>\n<td>string|ReactNode</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "extra",
        "Title": "附加内容",
        "Description": "<p>可以在页签右边添加附加操作。</p>\n",
        "Code": "<Tabs>\n    <TabBarExtraContent>\n        <Button>Extra Action</Button>\n    </TabBarExtraContent>\n    <ChildContent>\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </ChildContent>\n</Tabs>",
        "Type": "Demos.Tabs.demo.Extra",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "图标",
        "Description": "<p>有图标的标签。</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"2\">\n    <TabPane Key=\"1\">\n        <Tab>\n            <span><Icon Type=\"android\" />Tab 1</span>\n        </Tab>\n        <ChildContent>Tab 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>\n            <span><Icon Type=\"apple\" />Tab 2</span>\n        </Tab>\n        <ChildContent>Tab 2</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Tabs.demo.Icon_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "card",
        "Title": "卡片式页签",
        "Description": "<p>另一种样式的页签，不提供对应的垂直样式。</p>\n",
        "Code": "<Tabs Type=\"@TabType.Card\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Tabs.demo.Card",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "nest",
        "Title": "嵌套",
        "Description": "<p>默认选中第一项。</p>\n",
        "Code": "<h3>Nest</h3>\n\nWaitting for implementing Select.\n\n@code {\n\n}\n",
        "Type": "Demos.Tabs.demo.Nest",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 1,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>禁用某一项。</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Tab 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\" Disabled>\n        <Tab>Tab 2</Tab>\n        <ChildContent>Tab 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Tab 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Tabs.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "custom-add-trigger",
        "Title": "自定义新增页签触发器",
        "Description": "<p>隐藏默认的页签增加图标，给自定义触发器绑定事件。</p>\n",
        "Code": "<div>\n    <div style=\"margin-bottom: 16px;\">\n        <Button @onclick=\"(e)=>Add()\">ADD</Button>\n    </div>\n    <Tabs Type=\"@TabType.EditableCard\" HideAdd>\n        @foreach (var temp in _panes)\n        {\n            TabPane pane = temp;\n            <TabPane Key=\"@pane.Key\">\n                <Tab>@pane.Tab</Tab>\n                <ChildContent>@pane.ChildContent</ChildContent>\n            </TabPane>\n        }\n    </Tabs>\n</div>\n\n@code{\n    private List<TabPane> _panes = new List<TabPane>();\n    private static int btnIndex = 1;\n    private void Add()\n    {\n        int index = ++btnIndex;\n        _panes.Add(new TabPane(\n            key: index.ToString(),\n            tab: (b) => b.AddContent(0, $\"Tab {index}\"),\n            childContent: (b) => b.AddContent(0, $\"Content of Tab Pane {index}\")\n        ));\n\n        StateHasChanged();\n    }\n\n    protected override void OnInitialized()\n    {\n        base.OnInitialized();\n        for (int i = 0; i < btnIndex + 1; i++)\n        {\n            int index = i;\n            _panes.Add(new TabPane(\n                key: index.ToString(),\n                tab: (b) => b.AddContent(0, $\"Tab {index}\"),\n                childContent: (b) => b.AddContent(0, $\"Content of Tab Pane {index}\")\n            ));\n        }\n    }\n}",
        "Type": "Demos.Tabs.demo.CustomAddTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "slide",
        "Title": "滑动",
        "Description": "<p>可以左右、上下滑动，容纳更多标签。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"mode\" Style=\"margin-bottom: 8px;\">\n        <Radio RadioButton Value=\"@TabPosition.Top\">Horizontal</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Left\">Vertical</Radio>\n    </RadioGroup>\n    <Tabs DefaultActiveKey=\"0\" TabPosition=\"@mode\" Style=\"height: 220px;\">\n        @for (int i = 0; i < 30; i++)\n        {\n            <TabPane Key=\"@($\"{i}\")\">\n                <Tab>Tab-@i</Tab>\n                <ChildContent>Content of tab Pane @i</ChildContent>\n            </TabPane>\n        }\n    </Tabs>\n</div>\n\n@code{\n    private string mode = TabPosition.Top;\n\n    RenderFragment<int> template = (i) =>@<TabPane Key=\"@i.ToString()\">\n        <Tab>Tab-@i</Tab>\n        <ChildContent>Content of tab Pane @i</ChildContent>\n    </TabPane>;\n\n}",
        "Type": "Demos.Tabs.demo.Slide",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>默认选中第一项。</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Tabs.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "custom-tab-bar",
        "Title": "自定义页签头",
        "Description": "<p>使用 react-sticky 组件实现吸顶效果。</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Tabs.demo.CustomTabBar",
        "Style": "\n  [data-theme=\"dark\"] .site-custom-tab-bar {\n    background: #141414;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "size",
        "Title": "大小",
        "Description": "<p>大号页签用在页头区域，小号用在弹出框等较狭窄的容器内。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"size\" Style=\"margin-bottom: 16px;\">\n        <Radio RadioButton Value=\"@TabSize.Small\">Small</Radio>\n        <Radio RadioButton Value=\"@TabSize.Default\">Default</Radio>\n        <Radio RadioButton Value=\"@TabSize.Large\">Large</Radio>\n    </RadioGroup>\n\n    <Tabs DefaultActiveKey=\"1\" Size=\"@size\" Style=\"margin-bottom: 32px\">\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </Tabs>\n\n    <Tabs DefaultActiveKey=\"1\" Type=\"@TabType.Card\" Size=\"@size\">\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </Tabs>\n</div>\n\n@code{\n    private string size = TabSize.Default;\n}",
        "Type": "Demos.Tabs.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "position",
        "Title": "位置",
        "Description": "<p>有四个位置，<code>tabPosition=&quot;left|right|top|bottom&quot;</code>。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"position\" Style=\"margin-bottom: 16px;\">\n        <Radio RadioButton Value=\"@TabPosition.Top\">Top</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Left\">Left</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Right\">Right</Radio>\n        <Radio RadioButton Value=\"@TabPosition.Bottom\">Bottom</Radio>\n    </RadioGroup>\n    <Tabs DefaultActiveKey=\"1\" TabPosition=\"@position\">\n        <TabPane Key=\"1\">\n            <Tab>Tab 1</Tab>\n            <ChildContent>Content of Tab Pane 1</ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab 2</Tab>\n            <ChildContent>Content of Tab Pane 2</ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab 3</Tab>\n            <ChildContent>Content of Tab Pane 3</ChildContent>\n        </TabPane>\n    </Tabs>\n</div>\n\n@code{\n    private string position = TabPosition.Top;\n}",
        "Type": "Demos.Tabs.demo.Position",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "editable-card",
        "Title": "新增和关闭页签",
        "Description": "<p>只有卡片样式的页签支持新增和关闭选项。使用 <code>closable={false}</code> 禁止关闭。</p>\n",
        "Code": "<Tabs DefaultActiveKey=\"1\" Type=\"@TabType.EditableCard\" CreateTabPane=\"@Create\">\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Content of Tab Pane 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Content of Tab Pane 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\" Closable=\"false\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Content of Tab Pane 3</ChildContent>\n    </TabPane>\n</Tabs>\n\n@code{\n    private static int addedIndex = 3;\n    private readonly Func<TabPane> Create = () =>\n        {\n            addedIndex++;\n            int temp = addedIndex;\n            return new TabPane(\n                key: temp.ToString(),\n                childContent: (b) => { b.AddContent(0, $\"Content of Tab Pane {temp}\"); },\n                tab: (b) => { b.AddContent(0, $\"Tab {temp}\"); }\n            );\n        };\n}",
        "Type": "Demos.Tabs.demo.EditableCard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "custom-tab-bar-node",
        "Title": "可拖拽标签",
        "Description": "<p>使用 <code>react-dnd</code> 实现标签可拖拽。</p>\n",
        "Code": "<Tabs Draggable>\n    <TabPane Key=\"1\">\n        <Tab>Tab 1</Tab>\n        <ChildContent>Tab 1</ChildContent>\n    </TabPane>\n    <TabPane Key=\"2\">\n        <Tab>Tab 2</Tab>\n        <ChildContent>Tab 2</ChildContent>\n    </TabPane>\n    <TabPane Key=\"3\">\n        <Tab>Tab 3</Tab>\n        <ChildContent>Tab 3</ChildContent>\n    </TabPane>\n</Tabs>",
        "Type": "Demos.Tabs.demo.CustomTabBarNode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "card-top",
        "Title": "卡片式页签容器",
        "Description": "<p>用于容器顶部，需要一点额外的样式覆盖。</p>\n",
        "Code": "<div class=\"card-container\">\n    <Tabs Type=\"@TabType.Card\">\n        <TabPane Key=\"1\">\n            <Tab>Tab Title 1</Tab>\n            <ChildContent>\n                <p>Content of Tab Pane 1</p>\n                <p>Content of Tab Pane 1</p>\n                <p>Content of Tab Pane 1</p>\n            </ChildContent>\n        </TabPane>\n        <TabPane Key=\"2\">\n            <Tab>Tab Title 2</Tab>\n            <ChildContent>\n                <p>Content of Tab Pane 2</p>\n                <p>Content of Tab Pane 2</p>\n                <p>Content of Tab Pane 2</p>\n            </ChildContent>\n        </TabPane>\n        <TabPane Key=\"3\">\n            <Tab>Tab Title 3</Tab>\n            <ChildContent>\n                <p>Content of Tab Pane 3</p>\n                <p>Content of Tab Pane 3</p>\n                <p>Content of Tab Pane 3</p>\n            </ChildContent>\n        </TabPane>\n    </Tabs>\n</div>\n\n<style>\n    [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-content,\n    .card-container .ant-tabs-card .ant-tabs-content {\n        height: 120px;\n        margin-top: -16px;\n    }\n\n        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane,\n        .card-container .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane {\n            background: #fff;\n            padding: 16px;\n        }\n\n    [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar,\n    .card-container .ant-tabs-card .ant-tabs-bar {\n        border-color: #fff;\n    }\n\n        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab,\n        .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab {\n            border-color: transparent;\n            background: transparent;\n        }\n\n        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active,\n        .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active {\n            border-color: #fff;\n            background: #fff;\n        }\n</style>\n",
        "Type": "Demos.Tabs.demo.CardTop",
        "Style": "\n#components-tabs-demo-card-top .code-box-demo {\n  background: #F5F5F5;\n  overflow: hidden;\n  padding: 24px;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {\n  border-color: transparent;\n  background: transparent;\n}\n[data-theme=\"dark\"] #components-tabs-demo-card-top .code-box-demo {\n  background: #000;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-content > .ant-tabs-tabpane {\n  background: #141414;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-bar {\n  border-color: #141414;\n}\n[data-theme=\"dark\"] .card-container > .ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {\n  border-color: #141414;\n  background: #141414;\n}\n\n",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Typography",
    "SubTitle": "排版",
    "Type": "通用",
    "Desc": "<p>文本的基本格式。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当需要展示标题、段落、列表内容时使用，如文章/博客/日志的文本样式。</li>\n<li>当需要一列基于文本的基础操作时，如拷贝/省略/可编辑。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Typography.Text</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>添加代码样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>是否可拷贝，为对象时可设置复制文本以回调函数</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>添加删除线样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用文本</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>是否可编辑，为对象时可对编辑进行控制</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>设置自动溢出省略，需要设置元素宽度</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>添加标记样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>添加键盘样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>添加下划线样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>当用户提交编辑内容时触发</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Strong</td>\n<td>是否加粗</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>文本类型 <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Typography.Title</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copyable</td>\n<td>是否可拷贝，为对象时可设置复制文本以回调函数</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>添加删除线样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用文本</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>是否可编辑，为对象时可对编辑进行控制</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>设置自动溢出省略，需要设置元素宽度</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>添加标记样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Level</td>\n<td>重要程度，相当于 h1、h2、h3、h4</td>\n<td>int</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>添加下划线样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>当用户提交编辑内容时触发</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>文本类型 <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Typography.Paragraph</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copyable</td>\n<td>是否可拷贝，为对象时可设置复制文本以回调函数</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>添加删除线样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用文本</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>是否可编辑，为对象时可对编辑进行控制</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>设置自动溢出省略，需要设置元素宽度</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>添加标记样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>添加下划线样式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>当用户提交编辑内容时触发</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Strong</td>\n<td>是否加粗</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>文本类型 <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "Level",
        "Title": "标题组件",
        "Description": "<p>展示不同级别的标题。</p>\n",
        "Code": "<div>\n\t<Title Level=\"1\">h1. Ant Design 标题一</Title>\n\t<Title Level=\"2\">h2. Ant Design 标题二</Title>\n\t<Title Level=\"3\">h3. Ant Design 标题三</Title>\n\t<Title Level=\"4\">h4. Ant Design 标题四</Title>\n\n</div>\n\n\n",
        "Type": "Demos.Typography.demo.Level",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Ellipsis",
        "Title": "省略号",
        "Description": "<p>多行文本省略。</p>\n",
        "Code": "<div>\nTo do\n</div>\n\n",
        "Type": "Demos.Typography.demo.Ellipsis",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "Suffix",
        "Title": "后缀",
        "Description": "<p>添加后缀的省略。</p>\n",
        "Code": "<div>\nTo do\n</div>\n\n",
        "Type": "Demos.Typography.demo.Suffix",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Style",
        "Title": "文本组件",
        "Description": "<p>内置不同样式的文本。</p>\n",
        "Code": "<div>\n\t<Text>Ant Design</Text>\n\t<br />\n\t<Text Type=\"secondary\">Ant Design</Text>\n\t<br />\n\t<Text Type=\"warning\">Ant Design</Text>\n\t<br />\n\t<Text Type=\"danger\">Ant Design</Text>\n\t<br />\n\t<Text Disabled>Ant Design</Text>\n\t<br />\n\t<Text Mark>Ant Design</Text>\n\t<br />\n\t<Text Code>Ant Design</Text>\n\t<br />\n\t<Text Underline>Ant Design</Text>\n\t<br />\n\t<Text Delete>Ant Design</Text>\n\t<br />\n\t<Text Strong>Ant Design</Text>\n</div>\n\n",
        "Type": "Demos.Typography.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>展示文档样例。</p>\n",
        "Code": "\n<div>\n   <Title Level=\"1\">Introduction</Title>\n        <Paragraph>In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development.</Paragraph>\n        <Paragraph>\n            After massive project practice and summaries, Ant Design, a design language for background applications, is refined by Ant UED Team, which aims to\n            <Text Strong>\n                uniform the user interface specs for internal background projects, lower the unnecessary cost of design differences and implementation and liberate the resources of design and front-end development.\n            </Text>\n        </Paragraph>\n        <Title Level=\"2\">Guildelines and Resources</Title>\n        <Paragraph>\n            We supply a series of design principles, practical patterns and high quality design resources\n            (<Text Code>Sketch</Text> and <Text Code>Axure</Text>), to help people create their product\n            prototypes beautifully and efficiently.\n        </Paragraph>\n        <Paragraph>\n            <ul>\n                <li>\n                    <a href=\"/docs/spec/proximity\">Principles</a>\n                </li>\n                <li>\n                    <a href=\"/docs/pattern/navigation\">Patterns</a>\n                </li>\n                <li>\n                    <a href=\"/docs/resource/download\">Resource Download</a>\n                </li>\n            </ul>\n        </Paragraph>\n\n        <Divider />\n\n        <Title>介绍</Title>\n        <Paragraph>\n            蚂蚁的企业级产品是一个庞大且复杂的体系。这类产品不仅量级巨大且功能复杂，而且变动和并发频繁，常常需要设计与开发能够快速的做出响应。同时这类产品中有存在很多类似的页面以及组件，可以通过抽象得到一些稳定且高复用性的内容。\n        </Paragraph>\n        <Paragraph>\n            随着商业化的趋势，越来越多的企业级产品对更好的用户体验有了进一步的要求。带着这样的一个终极目标，我们（蚂蚁金服体验技术部）经过大量的项目实践和总结，逐步打磨出一个服务于企业级产品的设计体系\n            Ant Design。基于<Text Mark>『确定』和『自然』</Text>\n            的设计价值观，通过模块化的解决方案，降低冗余的生产成本，让设计者专注于\n            <Text Strong>更好的用户体验</Text>。\n        </Paragraph>\n        <Title Level=\"2\">设计资源</Title>\n        <Paragraph>\n            我们提供完善的设计原则、最佳实践和设计资源文件（<Text Code>Sketch</Text> 和\n            <Text Code>Axure</Text>），来帮助业务快速设计出高质量的产品原型。\n        </Paragraph>\n\n        <Paragraph>\n            <ul>\n                <li>\n                    <a href=\"/docs/spec/proximity\">设计原则</a>\n                </li>\n                <li>\n                    <a href=\"/docs/pattern/navigation\">设计模式</a>\n                </li>\n                <li>\n                    <a href=\"/docs/resource/download\">设计资源</a>\n                </li>\n            </ul>\n        </Paragraph>\n\n</div>\n",
        "Type": "Demos.Typography.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Interactive",
        "Title": "可交互",
        "Description": "<p>提供可编辑和可复制等额外的交互能力。</p>\n",
        "Code": "<div>\n\t<Paragraph Copyable>Simple copyable text</Paragraph>\n\t<Paragraph Copyable CopyConfig=\"@selfDefinedText\">Copy a self defiend text</Paragraph>\n\t<Paragraph Copyable CopyConfig=\"@selfDefinedCopy\">在控制台中查看此文本的log</Paragraph>\n\t<Title Copyable>可复制的标题</Title>\n\t<Paragraph >不可复制的段落中穿插着<Text Strong Copyable>可复制的文字</Text>以及其他</Paragraph>\n</div>\n\n\n@code \n{\n    public TypographyCopyableConfig selfDefinedText;\n    public TypographyCopyableConfig selfDefinedCopy;\n\n    protected override void OnInitialized()\n    {\n        selfDefinedText = new TypographyCopyableConfig() { Text = \"Just copied from self defined text\" };\n        selfDefinedCopy = new TypographyCopyableConfig();\n        selfDefinedCopy.OnCopy += () => System.Console.WriteLine(\"Log in console as a self defined copy behavior\");\n        base.OnInitialized();\n    }\n\n}",
        "Type": "Demos.Typography.demo.Interactive",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Alert",
    "SubTitle": "警告提示",
    "Type": "反馈",
    "Desc": "<p>警告提示，展现需要关注的信息。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当某个页面需要向用户显示警告的信息时。</li>\n<li>非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 4,
        "Name": "icon",
        "Title": "图标",
        "Description": "<p>可口的图标让信息类型更加醒目。</p>\n",
        "Code": "<Alert Type=\"@AlertType.Success\"\n          Message=\"Success Tips\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Info\"\n          Message=\"Informational Notes\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Success\"\n          Message=\"Success Tips\"\n          Description=\"Detailed description and advice about successful copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Info\"\n          Message=\"Informational Notes\"\n          Description=\"Additional description and information about copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning\"\n          Description=\"This is a warning notice about copywriting.\"\n          ShowIcon />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error\"\n          Description=\"This is an error message about copywriting.\"\n          ShowIcon />",
        "Type": "Demos.Alert.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "close-text",
        "Title": "自定义关闭",
        "Description": "<p>可以自定义关闭，自定义的内容会替换原先的关闭按钮。</p>\n",
        "Code": "<Alert Message=\"Info Text\" Type=\"@AlertType.Info\" CloseText=\"Close Now\"  Closable/>\n",
        "Type": "Demos.Alert.demo.CloseText",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，适用于简短的警告提示。</p>\n",
        "Code": "<Alert Type=\"@AlertType.Success\" Message=\"Success Text\" />\n",
        "Type": "Demos.Alert.demo.Basic",
        "Style": "\n.code-box-demo .ant-alert {\n  margin-bottom: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "banner",
        "Title": "顶部公告",
        "Description": "<p>页面顶部通告形式，默认有图标且 <code>nzType</code> 为 <code>'warning'</code>。</p>\n",
        "Code": "<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text\"\n          Banner\n          Closable />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text\"\n          Description=\"Very long warning text warning text text text text text text text\"\n          Banner\n          Closable />\n\n<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text Without Icon\"\n          Banner\n          ShowIcon=\"false\" />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error Text\"\n          Banner />",
        "Type": "Demos.Alert.demo.Banner",
        "Style": "",
        "Iframe": 250,
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "description",
        "Title": "含有辅助性文字介绍",
        "Description": "<p>含有辅助性文字介绍的警告提示。</p>\n",
        "Code": "<Alert Message=\"Success Text\"\n          Description=\"Success Description Success Description Success Description\"\n          Type=\"@AlertType.Success\" />\n\n<Alert Message=\"Info Text\"\n          Description=\"Info Description Info Description Info Description Info Description\"\n          Type=\"@AlertType.Info\" />\n\n<Alert Message=\"Warning Text\"\n          Description=\"Warning Description Warning Description Warning Description Warning Description\"\n          Type=\"@AlertType.Warning\" />\n\n<Alert Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description\"\n          Type=\"@AlertType.Error\" />\n",
        "Type": "Demos.Alert.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "style",
        "Title": "四种样式",
        "Description": "<p>共有四种样式 <code>success</code>、<code>info</code>、<code>warning</code>、<code>error</code>。</p>\n",
        "Code": "<Alert Message=\"Success Text\" Type=\"@AlertType.Success\" />\n\n<Alert Message=\"Info Text\" Type=\"@AlertType.Info\" />\n\n<Alert Message=\"Warning Text\" Type=\"@AlertType.Warning\" />\n\n<Alert Message=\"Error Text\" Type=\"@AlertType.Error\" />\n",
        "Type": "Demos.Alert.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "closable",
        "Title": "可关闭的警告提示",
        "Description": "<p>显示关闭按钮，点击可关闭警告提示。</p>\n",
        "Code": "<Alert Type=\"@AlertType.Warning\"\n          Message=\"Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n<Alert Type=\"@AlertType.Error\"\n          Message=\"Error Text\"\n          Description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\n          Closable\n          OnClose=\"LogSomething\" />\n\n@code{\n    private void LogSomething()\n    {\n        Console.WriteLine(\"Logging Something...\");\n    }\n}",
        "Type": "Demos.Alert.demo.Closable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "List",
    "SubTitle": "列表",
    "Type": "数据展示",
    "Desc": "<p>通用列表。</p>\n<h2>何时使用</h2>\n<p>最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>List</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>是否展示边框</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>footer</td>\n<td>列表底部</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>grid</td>\n<td>列表栅格配置</td>\n<td><a href=\"#List-grid-props\">object</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>header</td>\n<td>列表头部</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>itemLayout</td>\n<td>设置 <code>List.Item</code> 布局, 设置成 <code>vertical</code> 则竖直样式显示, 默认横排</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>当卡片内容还在加载中时，可以用 <code>loading</code> 展示一个占位</td>\n<td>boolean|<a href=\"/components/spin/#API\">object</a> (<a href=\"https://github.com/ant-design/ant-design/issues/8659\">更多</a>)</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>loadMore</td>\n<td>加载更多</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale</td>\n<td>默认文案设置，目前包括空数据文案</td>\n<td>object</td>\n<td>emptyText: '暂无数据'</td>\n<td></td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>对应的 <code>pagination</code> 配置, 设置 <code>false</code> 不显示</td>\n<td>boolean|object</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>list 的尺寸</td>\n<td><code>default</code> | <code>large</code> | <code>small</code></td>\n<td><code>default</code></td>\n<td></td>\n</tr>\n<tr>\n<td>split</td>\n<td>是否展示分割线</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>列表数据源</td>\n<td>any[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>当使用 dataSource 时，可以用 <code>renderItem</code> 自定义渲染列表项</td>\n<td><code>item =&gt; ReactNode</code></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>pagination</h3>\n<p>分页的配置项。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>position</td>\n<td>指定分页显示的位置</td>\n<td><code>top</code> | <code>bottom</code> | <code>both</code></td>\n<td><code>bottom</code></td>\n</tr>\n</tbody>\n</table>\n<p>更多配置项，请查看 <a href=\"/components/pagination/\"><code>Pagination</code></a>。</p>\n<h3>List grid props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>column</td>\n<td>列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>栅格间隔</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>列表操作组，根据 <code>itemLayout</code> 的不同, 位置在卡片底部或者最右侧</td>\n<td>Array&lt;ReactNode&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>extra</td>\n<td>额外内容, 通常用在 <code>itemLayout</code> 为 <code>vertical</code> 的情况下, 展示右侧内容; <code>horizontal</code> 展示在列表元素最右侧</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item.Meta</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>avatar</td>\n<td>列表元素的图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>description</td>\n<td>列表元素的描述内容</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>列表元素的标题</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 6,
        "Name": "infinite-load",
        "Title": "滚动加载",
        "Description": "<p>结合 <a href=\"https://github.com/CassetteRocks/react-infinite-scroller\">react-infinite-scroller</a> 实现滚动自动加载列表。</p>\n",
        "Code": "<h3>InfiniteLoad</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.List.demo.InfiniteLoad",
        "Style": "\n  [data-theme=\"dark\"] .demo-infinite-container {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "竖排列表样式",
        "Description": "<p>通过设置 <code>itemLayout</code> 属性为 <code>vertical</code> 可实现竖排列表样式。</p>\n",
        "Code": "@inject HttpClient HttpClient\n\n<AntList DataSource=\"@ListData\" ItemLayout=\"@AntDirectionVHType.Vertical\" Extra=\"@extra\">\n    <Item Context=\"item\">\n        <AntListItemMeta Avatar=\"@avatar\" Description=\"@item.Description\">\n            <Title>\n                <a href=\"@item.Href\">@item.Title</a>\n            </Title>\n        </AntListItemMeta>\n        @item.Content\n    </Item>\n    <Footer>\n        <div>\n            <b>ant design</b> footer part\n        </div>\n    </Footer>\n</AntList>\n\n@code {\n\n    RenderFragment avatar =@<AntAvatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></AntAvatar>;\n\n    RenderFragment extra = @<img width=\"272\" alt=\"logo\" src=\"https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png\" />;\n\n    public int count = 3;\n\n    public string FakeDataUrl { get { return $\"https://randomuser.me/api/?results={count}&inc=name,gender,email,nat&noinfo\"; } }\n\n    public List<DataModel> ListData { get; set; } = new List<DataModel>();\n\n    public bool Loading { get; set; } = false;\n\n    protected override async Task OnInitializedAsync()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            ListData.Add(new DataModel\n            {\n                Href = \"http://ant.design\",\n                Title = $\"ant design part {i}\",\n                Avatar = \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n                Description = \"Ant Design, a design language for background applications, is refined by Ant UED Team.\",\n                Content = \"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\",\n            });\n        }\n        await base.OnInitializedAsync();\n    }\n\n\n    public class DataModel\n    {\n        public string Href { get; set; }\n\n        public string Title { get; set; }\n\n        public string Avatar { get; set; }\n\n        public string Description { get; set; }\n\n        public string Content { get; set; }\n    }\n\n}",
        "Type": "Demos.List.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "basic",
        "Title": "基础列表",
        "Description": "<p>基础列表。</p>\n",
        "Code": "<AntList DataSource=\"@data\" TItem=\"BasicItem\">\n    <Item Context=\"item\">\n        <AntListItemMeta  Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\n            <Title>\n                <a href=\"https://ng.ant.design\">@item.Title</a>\n            </Title>\n        </AntListItemMeta>\n    </Item>\n</AntList>\n\n\n@code{\n\n    RenderFragment avatar = @<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n\n    public List<BasicItem> data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Ant Design Title 1\"},\n        new BasicItem { Title = \"Ant Design Title 2\"},\n        new BasicItem { Title = \"Ant Design Title 3\"},\n        new BasicItem { Title = \"Ant Design Title 4\"},\n    };\n}\n\n",
        "Type": "Demos.List.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "loadmore",
        "Title": "加载更多",
        "Description": "<p>可通过 <code>loadMore</code> 属性实现加载更多功能。</p>\n",
        "Code": "@inject HttpClient HttpClient\n\n<AntList Class=\"demo-loadmore-list\" DataSource=\"@Data\" ItemLayout=\"AntDirectionVHType.Horizontal\" Loading=\"@InitLoading\" Actions=\"actions\">\n    <Item Context=\"item\">\n        <AntListItemMeta Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\n            <Title>\n                <a href=\"https://ant.design\">@item.Name.Last</a>\n            </Title>\n        </AntListItemMeta>\n        <div>content</div>\n    </Item>\n    <LoadMore>\n        @if (!InitLoading && !Loading)\n        {\n            <div class=\"demo-loadmore-btn-content \">\n                <Button OnClick=\"OnLoadMore\">loading more</Button>\n            </div>\n        }\n    </LoadMore>\n</AntList>\n\n<style>\n\n    .demo-loadmore-list {\n        min-height: 350px;\n    }\n\n    .demo-loadmore-btn-content {\n        text-align: center;\n        margin-top: 12px;\n        height: 32px;\n        line-height: 32px;\n    }\n</style>\n\n@code {\n\n    RenderFragment avatar =@<Avatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></Avatar>;\n\nRenderFragment edit = @<a key=\"list-loadmore-edit\">edit</a>;\n\nRenderFragment add = @<a key=\"list-loadmore-more\">more</a>;\n\n\npublic List<RenderFragment> actions { get { return new List<RenderFragment> { edit, add }; } }\n\npublic int count = 3;\n\npublic string FakeDataUrl { get { return $\"https://randomuser.me/api/?results={count}&inc=name,gender,email,nat&noinfo\"; } }\n\npublic List<DataModel> Data { get; set; }\n\npublic bool InitLoading { get; set; } = true;\n\npublic bool Loading { get; set; } = false;\n\nprotected override async Task OnInitializedAsync()\n{\nData = await GetData();\nInitLoading = false;\nawait base.OnInitializedAsync();\n}\n\npublic async Task OnLoadMore()\n{\nLoading = true;\nvar res = await GetData();\nData.AddRange(res);\nLoading = false;\n}\n\npublic async Task<List<DataModel>> GetData()\n{\ntry\n{\nvar res = await HttpClient.GetFromJsonAsync<Response>(FakeDataUrl);\nreturn res.Results;\n}\ncatch (Exception ex)\n{\nConsole.WriteLine(ex);\nreturn new List<DataModel>();\n}\n}\n\npublic class Response\n{\npublic List<DataModel> Results { get; set; }\n}\n\npublic class DataModel\n{\npublic string Gender { get; set; }\n\npublic Name Name { get; set; }\n\npublic string Email { get; set; }\n\npublic string Nat { get; set; }\n}\n\npublic class Name\n{\npublic string Title { get; set; }\n\npublic string First { get; set; }\n\npublic string Last { get; set; }\n}\n}\n",
        "Type": "Demos.List.demo.Loadmore",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "simple",
        "Title": "简单列表",
        "Description": "<p>列表拥有大、中、小三种尺寸。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>small</code> 分别把按钮设为大、小尺寸。若不设置 <code>size</code>，则尺寸为中。</p>\n<p>可通过设置 <code>header</code> 和 <code>footer</code>，来自定义列表头部和尾部。</p>\n",
        "Code": "<Divider Orientation=\"left\">Default Size</Divider>\n\n<AntList Bordered DataSource=\"@data\">\n    <Header>Header</Header>\n    <Item Context=\"item\">\n        <span><mark>[ITEM]</mark></span>@item\n    </Item>\n    <Footer>Footer</Footer>\n</AntList>\n\n<Divider Orientation=\"left\">Small Size</Divider>\n\n<AntList Bordered DataSource=\"@data\" Size=\"small\">\n    <Header>Header</Header>\n    <Item Context=\"item\">\n        <span><mark>[ITEM]</mark></span>@item\n    </Item>\n    <Footer>Footer</Footer>\n</AntList>\n\n<Divider Orientation=\"left\">Large Size</Divider>\n\n<AntList Bordered DataSource=\"@data\" Size=\"large\">\n    <Header>Header</Header>\n    <Item Context=\"item\">\n        <span><mark>[ITEM]</mark></span>@item\n    </Item>\n    <Footer>Footer</Footer>\n</AntList>\n\n@code{\n\n    public List<string> data = new List<string>\n    {\n        \"Racing car sprays burning fuel into crowd.\",\n        \"Japanese princess to wed commoner.\",\n        \"Australian walks 100km after outback crash.\",\n        \"Man charged over missing wedding girl.\",\n        \"Los Angeles battles huge wildfires.\"\n    };\n}",
        "Type": "Demos.List.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "resposive",
        "Title": "响应式的栅格列表",
        "Description": "<p>响应式的栅格列表。尺寸与 <a href=\"/components/grid-cn/#Col\">Layout Grid</a> 保持一致。</p>\n",
        "Code": "<AntList Grid=\"gutter\" DataSource=\"@Data\">\n    <Item Context=\"item\">\n        <Card Bordered Title=\"@(item.Title)\">\n            <Body>\n            Card context\n            </Body>\n        </Card>\n    </Item>\n</AntList>\n\n@code{\n\n    private ListGridType gutter = new ListGridType\n    {\n        Gutter = 16,\n        Xs = 1,\n        Sm = 2,\n        Md = 4,\n        Lg = 4,\n        Xl = 6,\n        Xxl = 3,\n        Column = 3\n    };\n\n    public List<BasicItem> Data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Title 1\"},\n        new BasicItem { Title = \"Title 2\"},\n        new BasicItem { Title = \"Title 3\"},\n        new BasicItem { Title = \"Title 4\"},\n        new BasicItem { Title = \"Title 5\"},\n        new BasicItem { Title = \"Title 6\"},\n    };\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n\n}",
        "Type": "Demos.List.demo.Resposive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "grid",
        "Title": "栅格列表",
        "Description": "<p>可以通过设置 <code>List</code> 的 <code>grid</code> 属性来实现栅格列表，<code>column</code> 可设置期望显示的列数。</p>\n",
        "Code": "<AntList Grid=\"gutter\" DataSource=\"@Data\">\n    <Item Context=\"item\">\n        <Card Bordered Title=\"@(item.Title)\">\n            <Body>\n                Card context\n            </Body>\n        </Card>\n    </Item>\n</AntList>\n\n@code{\n\n    public ListGridType gutter = new ListGridType { Gutter = 16, Column = 4 };\n\n    public List<BasicItem> Data = new List<BasicItem>\n    {\n        new BasicItem { Title = \"Title 1\"},\n        new BasicItem { Title = \"Title 2\"},\n        new BasicItem { Title = \"Title 3\"},\n        new BasicItem { Title = \"Title 4\"},\n    };\n\n    public class BasicItem\n    {\n        public string Title { get; set; }\n    }\n}\n\n\n",
        "Type": "Demos.List.demo.Grid",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "infinite-virtualized-load",
        "Title": "滚动加载无限长列表",
        "Description": "<p>结合 <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a> 实现滚动加载无限长列表，带有虚拟化（<a href=\"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/\">virtualization</a>）功能，能够提高数据量大时候长列表的性能。</p>\n<p><code>virtualized</code> 是在大数据列表中应用的一种技术，主要是为了减少不可见区域不必要的渲染从而提高性能，特别是数据量在成千上万条效果尤为明显。<a href=\"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/\">了解更多</a></p>\n",
        "Code": "<h3>InfiniteVirtualizedLoad</h3>\n\n@code {\n\n}\n",
        "Type": "Demos.List.demo.InfiniteVirtualizedLoad",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "AutoComplete",
    "SubTitle": "自动完成",
    "Type": "数据录入",
    "Desc": "<p>输入框自动完成功能。</p>\n<h2>何时使用</h2>\n<p>需要自动完成时。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear</td>\n<td>支持清除, 单选模式有效</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>backfill</td>\n<td>使用键盘选择选项的时候把选中项回填到输入框中</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>children (自定义输入框)</td>\n<td>自定义输入框</td>\n<td>HTMLInputElement <br /><br /> HTMLTextAreaElement <br /><br /> <code>React.ReactElement&lt;InputProps&gt;</code></td>\n<td><code>&lt;Input /&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>children (自动完成的数据源)</td>\n<td>自动完成的数据源</td>\n<td><code>React.ReactElement&lt;OptionProps&gt;</code> <br /><br /> <code>Array&lt;React.ReactElement&lt;OptionProps&gt;&gt;</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultActiveFirstOption</td>\n<td>是否默认高亮第一个选项。</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>指定默认选中的条目</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>filterOption</td>\n<td>是否根据输入项进行筛选。当其为一个函数时，会接收 <code>inputValue</code> <code>option</code> 两个参数，当 <code>option</code> 符合筛选条件时，应返回 <code>true</code>，反之则返回 <code>false</code>。</td>\n<td>boolean or function(inputValue, option)</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。<a href=\"https://codesandbox.io/s/4j168r7jw0\">示例</a></td>\n<td>Function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>输入框提示</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>指定当前选中的条目</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>失去焦点时的回调</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中 option，或 input 的 value 变化时，调用此函数</td>\n<td>function(value)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>获得焦点时的回调</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onSearch</td>\n<td>搜索补全项的时候调用</td>\n<td>function(value)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>被选中时调用，参数为选中项的 value 值</td>\n<td>function(value, option)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultOpen</td>\n<td>是否默认展开下拉菜单</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>是否展开下拉菜单</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDropdownVisibleChange</td>\n<td>展开下拉菜单的回调</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>notFoundContent</td>\n<td>当下拉列表为空时显示的内容</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>方法</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>移除焦点</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>获取焦点</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>基本使用。通过 options 设置自动完成的数据源</p>\n",
        "Code": "<div>\n    <AutoComplete @ref=\"@_autoComplete\" OnChange=\"OnChange\"></AutoComplete>\n</div>\n\n@code\n{\n    private AutoComplete _autoComplete;\n\n    private void OnChange(string value)\n    {\n        if (string.IsNullOrWhiteSpace(value))\n        {\n            _autoComplete.LoadData(null);\n            return;\n        }\n\n        var list = new List<string>()\n        {\n            value, value + value, value + value + value\n        };\n        _autoComplete.LoadData(list);\n    }\n}",
        "Type": "Demos.AutoComplete.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "uncertain-category",
        "Title": "查询模式 - 不确定类目",
        "Description": "<p><a href=\"https://ant.design/docs/spec/reaction#Lookup-Patterns\">查询模式: 不确定类目</a> 示例。</p>\n",
        "Code": "",
        "Type": "Demos.AutoComplete.demo.UncertainCategory",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "non-case-sensitive",
        "Title": "不区分大小写",
        "Description": "<p>不区分大小写的 AutoComplete</p>\n",
        "Code": "<div>\n    <AutoComplete Options=\"@options\" PlaceHolder=\"try to type 'b'\" FilterOption=\"(value,option)=>option.Contains(value,StringComparison.InvariantCultureIgnoreCase)\"></AutoComplete>\n</div>\n\n@code\n{\n    private List<string> options = new List<string>() { \"Burns Bay Road\", \"Downing Street\", \"Wall Street\" };\n}",
        "Type": "Demos.AutoComplete.demo.NonCaseSensitive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "custom",
        "Title": "自定义输入组件",
        "Description": "<p>自定义输入组件。</p>\n",
        "Code": "@using Microsoft.Extensions.Primitives\n<div>\n    <AutoComplete @ref=\"@_autoComplete\">\n        <CustomInput>\n            <TextArea Placeholder=\"input here\" AutoSize=\"true\" OnChange=\"OnChange\" @bind-Value=\"@txtValue\" />\n        </CustomInput>\n    </AutoComplete>\n</div>\n\n@code\n{\n    private AutoComplete _autoComplete;\n    private string txtValue;\n\n    private void OnChange(string value)\n    {\n        var list = string.IsNullOrWhiteSpace(value) ? Array.Empty<string>() : new[]\n        {\n            value,\n            value + value,\n            value + value + value\n        };\n        _autoComplete.LoadData(list);\n    }\n}",
        "Type": "Demos.AutoComplete.demo.Custom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "certain-category",
        "Title": "查询模式 - 确定类目",
        "Description": "<p><a href=\"https://ant.design/docs/spec/reaction#Lookup-Patterns\">查询模式: 确定类目</a> 示例。</p>\n",
        "Code": "",
        "Type": "Demos.AutoComplete.demo.CertainCategory",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "options",
        "Title": "自定义选项",
        "Description": "",
        "Code": "<div>\n    <AutoComplete FormatList=\"@_formatList\" @bind-Value=\"_value\"></AutoComplete>\n</div>\n\n@code\n{\n    private string _value;\n\n    private List<string> _formatList = new List<string>() { \"{0}@gmail.com\", \"{0}@163.com\", \"{0}@qq.com\" };\n}",
        "Type": "Demos.AutoComplete.demo.Options",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Carousel",
    "SubTitle": "走马灯",
    "Type": "数据展示",
    "Desc": "<p>旋转木马，一组轮播的区域。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当有一组平级的内容。</li>\n<li>当内容空间不足时，可以用走马灯的形式进行收纳，进行轮播展现。</li>\n<li>常用于一组图片或卡片轮播。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AfterChange</td>\n<td>(ToDo)切换面板的回调</td>\n<td>function(current)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>子内容</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Autoplay</td>\n<td>是否自动切换</td>\n<td>TimeSpan</td>\n<td></td>\n</tr>\n<tr>\n<td>BeforeChange</td>\n<td>(ToDo)切换面板的回调</td>\n<td>function(from, to)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DotPosition</td>\n<td>面板指示点位置，可选 <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dots</td>\n<td>(ToDo)是否显示面板指示点，如果为 object 则同时可以指定 dotsClass</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Easing</td>\n<td>(ToDo)动画效果</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Effect</td>\n<td>动画效果函数，可取 scrollx, fade</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "Position",
        "Title": "位置",
        "Description": "<p>位置有 4 个方向。</p>\n",
        "Code": "<div>\n    <RadioGroup @bind-Value=\"_position\" Style=\"margin-bottom: 8px;\">\n        <Radio RadioButton Value=\"@CarouselDotPosition.Top\">Top</Radio>\n        <Radio RadioButton Value=\"@CarouselDotPosition.Bottom\">Bottom</Radio>\n        <Radio RadioButton Value=\"@CarouselDotPosition.Left\">Left</Radio>\n        <Radio RadioButton Value=\"@CarouselDotPosition.Right\">Right</Radio>\n    </RadioGroup>\n    <Carousel DotPosition=\"@_position\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n\n@code{\n    private string _position = CarouselDotPosition.Bottom;\n}",
        "Type": "Demos.Carousel.demo.Position",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Automatic",
        "Title": "自动切换",
        "Description": "<p>定时切换下一张。</p>\n",
        "Code": "<div>\n    <Carousel Autoplay=\"TimeSpan.FromSeconds(2)\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>",
        "Type": "Demos.Carousel.demo.Automatic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Fadein",
        "Title": "渐显",
        "Description": "<p>切换效果为渐显。</p>\n",
        "Code": "<div>\n    <Carousel Effect=\"@CarouselEffect.Fade\">\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n",
        "Type": "Demos.Carousel.demo.Fadein",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\n    <Carousel>\n        <CarouselSlick>\n            <h3>1</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>2</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>3</h3>\n        </CarouselSlick>\n        <CarouselSlick>\n            <h3>4</h3>\n        </CarouselSlick>\n    </Carousel>\n</div>\n\n<style>\n    .ant-carousel .slick-slide {\n        text-align: center;\n        height: 160px;\n        line-height: 160px;\n        background: #364d79;\n        overflow: hidden;\n    }\n\n        .ant-carousel .slick-slide h3 {\n            color: #fff;\n        }\n</style>",
        "Type": "Demos.Carousel.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Checkbox",
    "SubTitle": "多选框",
    "Type": "数据录入",
    "Desc": "<p>多选框。</p>\n<h2>何时使用</h2>\n<ul>\n<li>在一组可选项中进行多项选择时；</li>\n<li>单独使用可以表示两种状态之间的切换，和 switch 类似。区别在于切换 switch 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Checkbox</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>指定当前是否选中</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>失效状态</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Indeterminate</td>\n<td>设置 indeterminate 状态，只负责样式控制</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>变化时回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Checkbox Group</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CheckboxItems</td>\n<td>自动获取焦点</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disable</td>\n<td>整组失效</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>指定可选项</td>\n<td>CheckboxOption[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>选中组的值列表</td>\n<td>IList<string></td>\n<td>Array.Empty<string>()</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>变化时回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Controlled",
        "Title": "受控的Checkbox",
        "Description": "<p>联动 checkbox。</p>\n",
        "Code": "<div>\n    <p style=\"margin-bottom: 20px\">\n        <Checkbox Checked=\"@checkValue\"  \n                    Disabled=\"@disableValue\" \n                    CheckedChange=\"CheckChanged\">\n        @label\n        </Checkbox>\n    </p>     \n        <p>\n        <Button Type=\"primary\" Size=\"small\"  @onclick=\"@CheckClick\">@checkTitle</Button>\n        <Button Type=\"primary\" Size=\"small\"  @onclick=\"@DisableClick\">@disableTitle</Button>\n      </p>     \n  </div>\n\n  @code{\n\n      private bool checkValue { get; set; } = false;\n      private bool disableValue { get; set; } = false;\n      private string label { get; set; } = \"Check-Enable\";\n      private string checkTitle { get; set; } = \"Check\";\n      private string disableTitle { get; set; } = \"Enable\";\n\n      void CheckChanged()\n      {\n          CheckClick();\n      }\n\n\n\n      void CheckClick()\n      {\n          if (checkValue)\n          {\n              checkTitle = \"Check\";\n              checkValue = false;\n          }\n          else\n          {\n              checkTitle = \"Uncheck\";\n              checkValue = true;\n          }\n\n          label = $\"{checkTitle}-{disableTitle}\";\n      }\n\n\n\n      void DisableClick()\n      {\n          if (disableValue)\n          {\n              disableTitle = \"Enabled\";\n              disableValue = false;\n          }\n          else\n          {\n              disableTitle = \"Disabled\";\n              disableValue = true;\n          }\n          label = $\"{checkTitle}-{disableTitle}\";\n      }\n  }",
        "Type": "Demos.Checkbox.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "CheckboxAll",
        "Title": "全选",
        "Description": "<p>在实现全选效果时，你可能会用到 <code>indeterminate</code> 属性。</p>\n",
        "Code": "<div>\n    <Checkbox Indeterminate=\"@indeterminate\" Checked=\"@checkAll\" CheckedChange=\"@CheckAllChanged\">\n    Check all\n    </Checkbox>\n    <br />\n    <AntDesign.CheckboxGroup Options=\"@ckeckAllOptions\" ValueChanged=\"@OnChanged\"/>\n</div>\n\n@code{\n\n    static CheckboxOption[] ckeckAllOptions = new CheckboxOption[]{\n        new CheckboxOption{ Label=\"Apple\",Value=\"Apple\" ,Checked=true},\n        new CheckboxOption{ Label=\"Pear\", Value=\"Pear\" },\n        new CheckboxOption{ Label=\"Orange\", Value=\"Orange\",Checked=true },\n    };\n\n    void CheckAllChanged()\n    {\n        bool allChecked = checkAll;\n        ckeckAllOptions.ForEach(o => o.Checked = !allChecked);\n    }\n\n    void OnChanged()\n    {\n\n    }\n\n    bool indeterminate => ckeckAllOptions.Count(o => o.Checked) > 0 && ckeckAllOptions.Count(o => o.Checked) < ckeckAllOptions.Count();\n\n    bool checkAll => ckeckAllOptions.All(o => o.Checked);\n\n}",
        "Type": "Demos.Checkbox.demo.CheckboxAll",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Disable",
        "Title": "不可用",
        "Description": "<p>checkbox 不可用。</p>\n",
        "Code": "<div>\n            <Checkbox Disabled=\"true\"/>\n            <br />\n            <Checkbox Checked=\"true\" Disabled=\"true\"/>\n</div>",
        "Type": "Demos.Checkbox.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Group",
        "Title": "Checkbox组",
        "Description": "<p>方便的从数组生成 Checkbox 组。</p>\n",
        "Code": "<div>\n    <CheckboxGroup Options=\"@plainOptions\" @bind-Value=\"@checkValue1\" />\n    <br />\n    <br />\n    <CheckboxGroup Options=\"@ckeckAllOptions\" @bind-Value=\"@checkValue2\" />\n    <br />\n    <br />\n    <CheckboxGroup Options=\"@OptionsWithDisable\" @bind-Value=\"@checkValue1\" />\n</div>\n@code{\n\n    string[] checkValue1 = {\"Apple\"};\n    string[] checkValue2 = {\"Pear\"};\n\n    CheckboxOption[] plainOptions = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\"},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\"},\n    };\n\n    CheckboxOption[] ckeckAllOptions = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\", Checked = true},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\"},\n    };\n\n    CheckboxOption[] OptionsWithDisable = new CheckboxOption[]\n    {\n        new CheckboxOption {Label = \"Apple\", Value = \"Apple\"},\n        new CheckboxOption {Label = \"Pear\", Value = \"Pear\"},\n        new CheckboxOption {Label = \"Orange\", Value = \"Orange\", Disabled = true},\n    };\n\n    private bool checkAll { get; set; } = false;\n\n    void groupValueChanged()\n    {\n        bool allChecked = checkAll;\n        plainOptions.ForEach(o => o.Checked = !allChecked);\n    }\n\n}",
        "Type": "Demos.Checkbox.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "Layout",
        "Title": "布局",
        "Description": "<p>Checkbox.Group 内嵌 Checkbox 并与 Grid 组件一起使用，可以实现灵活的布局。</p>\n",
        "Code": "<div>\n    TO BE Defined\n    @*<CheckboxGroup Style=\"width:100%\"  ValueChanged=\"@OnChange\">\n\n        <Row>\n            <Col Span=\"8\">\n                <Checkbox Value=\"A\" >A</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"B\"  >B</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"C\"  >C</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"D\" >D</Checkbox>\n            </Col>\n            <Col Span=\"8\">\n                <Checkbox Value=\"E\" >E</Checkbox>\n            </Col>\n        </Row>\n    </CheckboxGroup>*@\n\n\n\n</div>\n@code\n{   \n\n    void OnChange()\n    {\n\n    }\n}\n\n",
        "Type": "Demos.Checkbox.demo.Layout",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本用法",
        "Description": "<p>简单的 checkbox。</p>\n",
        "Code": "  <div>\n    <Checkbox Checked=\"@isChecked\" Disabled=\"@disabled\" CheckedChange=\"@ToggleChecked\">\n                @($\"{(isChecked ? \"Check\" : \"Uncheck\")}-{(disabled ? \"Disable\" : \"Enable\")}\")\n    </Checkbox>\n  </div>\n  \n  @code{\n    bool isChecked = true;\n    bool disabled = false;\n    void ToggleChecked(bool value)\n    {\n        isChecked = !isChecked;\n    }\n    void ToggleDisable()\n    {\n        disabled = !disabled;\n    }\n}\n\n  ",
        "Type": "Demos.Checkbox.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Cascader",
    "SubTitle": "级联选择",
    "Type": "数据录入",
    "Desc": "<p>级联选择框。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。</li>\n<li>从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。</li>\n<li>比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Cascader</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>是否支持清除</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ChangeOnSelect</td>\n<td>当此项为 true 时，点选每级菜单选项值都会发生变化</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>默认的选中项</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ExpandTrigger</td>\n<td>次级菜单的展开方式，可选 'click' 和 'hover'</td>\n<td>string</td>\n<td>'click'</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>可选项数据源</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>输入框占位文本</td>\n<td>string</td>\n<td>'请选择'</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>输入框大小，可选 'large','middle' 'small'</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>选择完成后的回调 (List<CascaderNode>, string, string) =&gt; void</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>CascaderNode</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Label</td>\n<td>节点名称</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>节点值</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>节点是否禁用</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>HasChildren</td>\n<td>是否存在子节点(只读)</td>\n<td>bool</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Children</td>\n<td>子节点</td>\n<td>AntCheckbox[]</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "default",
        "Title": "默认值",
        "Description": "<p>默认值通过数组的方式指定。</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@defaultNodes\" @bind-Value=\"value\"></Cascader>\n    <span>selected: @value</span>\n</div>\n\n@code {\n    string value = \"112\";\n\n    List<CascaderNode> defaultNodes = GetDefaultNodes();\n\n    private static List<CascaderNode> GetDefaultNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>()\n        {\n            new CascaderNode()\n            {\n                Value = \"1\",\n                Label = \"湖北\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode\n                    {\n                        Value = \"11\", Label = \"武汉\", Children = new CascaderNode[]\n                        {\n                            new CascaderNode\n                            {\n                                Value = \"111\", Label = \"武昌区\", Children = new CascaderNode[]\n                                {\n                                    new CascaderNode {Value = \"1111\", Label = \"黄鹤楼街道\"},\n                                    new CascaderNode {Value = \"1112\", Label = \"白沙洲街道\"}\n                                }\n                            },\n                            new CascaderNode {Value = \"112\", Label = \"洪山区\"}\n                        }\n                    },\n                    new CascaderNode {Value = \"12\", Label = \"黄石\"},\n                    new CascaderNode {Value = \"13\", Label = \"宜昌\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"2\",\n                Label = \"浙江\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode {Value = \"21\", Label = \"杭州\"},\n                    new CascaderNode {Value = \"22\", Label = \"温州\"},\n                    new CascaderNode {Value = \"23\", Label = \"义乌\"},\n                    new CascaderNode {Value = \"23\", Label = \"宁波\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"3\",\n                Label = \"上海\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode {Value = \"31\", Label = \"徐汇区\"},\n                    new CascaderNode {Value = \"32\", Label = \"黄浦区\"},\n                    new CascaderNode {Value = \"32\", Label = \"浦东新区\"},\n                    new CascaderNode {Value = \"32\", Label = \"崇明区\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"4\",\n                Label = \"北京\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode {Value = \"41\", Label = \"朝阳\"},\n                    new CascaderNode {Value = \"42\", Label = \"东城\"},\n                    new CascaderNode {Value = \"43\", Label = \"西城\"}\n                }\n            },\n            new CascaderNode()\n            {\n                Value = \"5\",\n                Label = \"江苏\",\n                Children = new CascaderNode[]\n                {\n                    new CascaderNode\n                    {\n                        Value = \"51\", Label = \"南京\", Children = new CascaderNode[]\n                        {\n                            new CascaderNode {Value = \"511\", Label = \"鼓楼区\"},\n                            new CascaderNode {Value = \"512\", Label = \"玄武区\"}\n                        }\n                    },\n                    new CascaderNode {Value = \"52\", Label = \"苏州\"},\n                    new CascaderNode {Value = \"53\", Label = \"无锡\"},\n                    new CascaderNode {Value = \"53\", Label = \"扬州\"}\n                }\n            }\n        };\n        return list;\n    }\n\n}\n",
        "Type": "Demos.Cascader.demo.Default",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "禁用选项",
        "Description": "<p>通过指定 options 里的 disabled 字段。</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@disabledNodes\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> disabledNodes = GetDisabledNodes();\n\n    private static List<CascaderNode> GetDisabledNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\", Disabled = true}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\", Disabled = true},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\", Disabled = true },\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Disabled = true,\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\", Disabled = true }\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\", Disabled = true },\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Disabled = true, Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Cascader.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "change",
        "Title": "选择即改变",
        "Description": "<p>这种交互允许只选中父级选项。</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@selectNodes\" ChangeOnSelect=\"true\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> selectNodes = GetSelectNodes();\n\n    private static List<CascaderNode> GetSelectNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\"}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\"},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\"},\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\"},\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Cascader.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>省市区级联</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@basicNodes\"></Cascader>\n</div>\n\n@code{\n    List<CascaderNode> basicNodes = GetBasicNodes();\n\n    private static List<CascaderNode> GetBasicNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\"}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\"},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\"},\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\"},\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}",
        "Type": "Demos.Cascader.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "hover",
        "Title": "移入展开",
        "Description": "<p>通过移入展开下级菜单，点击完成选择。</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@hoverNodes\" ExpandTrigger=\"hover\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> hoverNodes = GetHoverNodes();\n\n    private static List<CascaderNode> GetHoverNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"湖北\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"武汉\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"武昌区\", Children = new CascaderNode[]{\n                            new CascaderNode{ Value = \"1111\", Label=\"黄鹤楼街道\"},\n                            new CascaderNode{ Value = \"1112\", Label=\"白沙洲街道\"}\n                        } },\n                        new CascaderNode{ Value = \"112\", Label=\"洪山区\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"黄石\"},\n                    new CascaderNode{ Value = \"13\", Label=\"宜昌\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"浙江\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"杭州\"},\n                    new CascaderNode{ Value = \"22\", Label=\"温州\"},\n                    new CascaderNode{ Value = \"23\", Label=\"义乌\"},\n                    new CascaderNode{ Value = \"23\", Label=\"宁波\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"上海\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"31\", Label=\"徐汇区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"黄浦区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"浦东新区\"},\n                    new CascaderNode{ Value = \"32\", Label=\"崇明区\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"4\",\n            Label = \"北京\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"41\", Label=\"朝阳\"},\n                    new CascaderNode{ Value = \"42\", Label=\"东城\"},\n                    new CascaderNode{ Value = \"43\", Label=\"西城\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"5\",\n            Label = \"江苏\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"51\", Label=\"南京\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"511\", Label=\"鼓楼区\"},\n                        new CascaderNode{ Value = \"512\", Label=\"玄武区\"}\n                    } },\n                    new CascaderNode{ Value = \"52\", Label=\"苏州\"},\n                    new CascaderNode{ Value = \"53\", Label=\"无锡\"},\n                    new CascaderNode{ Value = \"53\", Label=\"扬州\"}\n                }\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Cascader.demo.Hover",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "size",
        "Title": "大小",
        "Description": "<p>不同大小的级联选择器。</p>\n",
        "Code": "<div>\n    <Cascader Options=\"@sizeNodes\" Size=\"large\" Style=\"margin:15px 0;\"></Cascader>\n    <Cascader Options=\"@sizeNodes\" Size=\"middle\" Style=\"margin:15px 0\"></Cascader>\n    <Cascader Options=\"@sizeNodes\" Size=\"small\" Style=\"margin:15px 0\"></Cascader>\n</div>\n\n@code {\n    List<CascaderNode> sizeNodes = GetSizeNodes();\n\n    private static List<CascaderNode> GetSizeNodes()\n    {\n        List<CascaderNode> list = new List<CascaderNode>() {\n        new CascaderNode()\n        {\n            Value = \"1\",\n            Label = \"Size1\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"11\", Label=\"Size11\", Children = new CascaderNode[]{\n                        new CascaderNode{ Value = \"111\", Label=\"Size111\" },\n                        new CascaderNode{ Value = \"112\", Label=\"Size112\"}\n                    } },\n                    new CascaderNode{ Value = \"12\", Label=\"Size12\"},\n                    new CascaderNode{ Value = \"13\", Label=\"Size13\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"2\",\n            Label = \"Size2\",\n            Children = new CascaderNode[] {\n                    new CascaderNode{ Value = \"21\", Label=\"Size21\"},\n                    new CascaderNode{ Value = \"22\", Label=\"Size22\"}\n                }\n        }, new CascaderNode()\n        {\n            Value = \"3\",\n            Label = \"Size3\",\n        }};\n        return list;\n    }\n}\n",
        "Type": "Demos.Cascader.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Empty",
    "SubTitle": "空状态",
    "Type": "数据展示",
    "Desc": "<p>空状态时的展示占位图。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当目前没有数据时，用于显式的用户提示。</li>\n<li>初始化场景时的引导创建流程。</li>\n</ul>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的展示。</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "simple",
        "Title": "选择图片",
        "Description": "<p>可以通过设置 <code>image</code> 为 <code>Empty.PRESENTED_IMAGE_SIMPLE</code> 选择另一种风格的图片。</p>\n",
        "Code": "<Empty Image=\"Empty.PRESENTED_IMAGE_SIMPLE\" />",
        "Type": "Demos.Empty.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "description",
        "Title": "无描述",
        "Description": "<p>无描述展示。</p>\n",
        "Code": "<Empty Description=\"@false\" />",
        "Type": "Demos.Empty.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "config-provider",
        "Title": "全局化配置 TODO",
        "Description": "<p>自定义全局组件的 Empty 样式。</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.ConfigProvider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "customize",
        "Title": "自定义",
        "Description": "<p>自定义图片链接、图片大小、描述、附属内容。</p>\n",
        "Code": "<Empty Image='\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"'\n          ImageStyle='@(\"height: 60px\")'\n          Description=\"customDescription\">\n    <Button type=\"@ButtonType.Primary\">Create Now</Button>\n</Empty>\n\n@code {\n    private RenderFragment customDescription =@<span>Customize <a>Description</a></span>;\n}",
        "Type": "Demos.Empty.demo.Customize",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Steps",
    "SubTitle": "步骤条",
    "Type": "导航",
    "Desc": "<p>引导用户按照流程完成任务的导航条。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Steps\nThe whole of the step bar.</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassName</td>\n<td>步骤条类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>步骤条类型，有: <code>default</code>, <code>navigation</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Current</td>\n<td>指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 status 属性覆盖状态</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Direction</td>\n<td>指定步骤条方向。目前支持水平和竖直两种方向 <code>horizontal</code> or <code>vertical</code></td>\n<td>string</td>\n<td><code>horizontal</code></td>\n</tr>\n<tr>\n<td>LabelPlacement</td>\n<td>指定标签放置位置，默认水平放图标右侧，可选 <code>vertical</code> 放图标下方</td>\n<td>string</td>\n<td><code>horizontal</code></td>\n</tr>\n<tr>\n<td>ProgressDot</td>\n<td>点状步骤条，可以设置为一个 function，labelPlacement 将强制为 <code>vertical</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>指定大小，目前支持普通（default）和迷你（small）</td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>指定当前步骤的状态，可选 <code>wait</code> <code>process</code> <code>finish</code> <code>error</code></td>\n<td>string</td>\n<td><code>process</code></td>\n</tr>\n<tr>\n<td>Initial</td>\n<td>起始序号，从 0 开始记数</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>点击切换步骤时触发</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Steps.Step\nA single step in the step bar.</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Description</td>\n<td>步骤的详情描述，可选</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>步骤图标的类型，可选</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>指定状态。当不配置该属性时，会使用 Steps 的 current 来自动指定状态。可选： <code>wait</code> <code>process</code> <code>finish</code> <code>error</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>子标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用点击</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 6,
        "Name": "error",
        "Title": "步骤运行错误",
        "Description": "<p>使用 Steps 的 <code>status</code> 属性来指定当前步骤的状态。</p>\n",
        "Code": "<div>\n    <Steps Current=\"1\" Status=\"error\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Steps.demo.Error",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "small-size",
        "Title": "迷你版",
        "Description": "<p>迷你版的步骤条，通过设置 <code>&lt;Steps size=&quot;small&quot;&gt;</code> 启用.</p>\n",
        "Code": "<div>\n    <Steps Size=\"small\" Current=1>\n        <Step Title=\"Finished\" />\n        <Step Title=\"In Progress\" />\n        <Step Title=\"Waiting\" />\n    </Steps>\n</div>",
        "Type": "Demos.Steps.demo.SmallSize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "带图标的步骤条",
        "Description": "<p>通过设置 <code>Steps.Step</code> 的 <code>icon</code> 属性，可以启用自定义图标。</p>\n",
        "Code": "<div>\n    <Steps>\n        <Step Status=\"finish\" Title=\"Login\" Icon=\"user\" />\n        <Step Status=\"finish\" Title=\"Verification\" Icon=\"solution\"  />\n        <Step Status=\"process\" Title=\"Pay\" Icon=\"loading\" />\n        <Step Status=\"wait\" Title=\"Done\" Icon=\"smile\"/>\n    </Steps>\n</div>",
        "Type": "Demos.Steps.demo.Icon_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "vertical",
        "Title": "竖直方向的步骤条",
        "Description": "<p>简单的竖直方向的步骤条。</p>\n",
        "Code": "<div>\n    <Steps Direction=\"vertical\" Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Steps.demo.Vertical",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "simple",
        "Title": "基本用法",
        "Description": "<p>简单的步骤条。</p>\n",
        "Code": "<div>\n    <Steps Current=\"1\" Class=\"site-navigation-steps\">\n        <Step Title=\"Finished\" Description=\"This is a description.\"/>\n        <Step Title=\"In Progress\" Subtitle=\"Left 00:00:08\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>\n",
        "Type": "Demos.Steps.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "vertical-small",
        "Title": "竖直方向的小型步骤条",
        "Description": "<p>简单的竖直方向的小型步骤条。</p>\n",
        "Code": "<div>\n    <Steps Direction=\"vertical\" Size=\"small\" Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Steps.demo.VerticalSmall",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "customized-progress-dot",
        "Title": "自定义点状步骤条",
        "Description": "<p>(暂未实现) 为点状步骤条增加自定义展示。</p>\n",
        "Code": "<Steps Current=1 ProgressDot=customDot>\n    <Step Title=\"Finished\" Description=\"You can hover on the dot.\" />\n    <Step Title=\"In Progress\" Description=\"You can hover on the dot.\" />\n    <Step Title=\"Waiting\" Description=\"You can hover on the dot.\" />\n    <Step Title=\"Waiting\" Description=\"You can hover on the dot.\" />\n</Steps>\n\n@code\n{\n    RenderFragment customDot = @<span>\n                                   step {index} status: {status}\n                               </span>;\n}\n",
        "Type": "Demos.Steps.demo.CustomizedProgressDot",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "progress-dot",
        "Title": "点状步骤条",
        "Description": "<p>包含步骤点的进度条。</p>\n",
        "Code": "<div>\n    <Steps ShowProgressDot Current=\"1\">\n        <Step Title=\"Finished\" Description=\"This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n    <Divider />\n    <Steps ShowProgressDot Current=\"1\" Direction=\"vertical\">\n        <Step Title=\"Finished\" Description=\"This is a description. This is a description.\" />\n        <Step Title=\"Finished\" Description=\"This is a description. This is a description.\" />\n        <Step Title=\"In Progress\" Description=\"This is a description. This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n        <Step Title=\"Waiting\" Description=\"This is a description.\" />\n    </Steps>\n</div>",
        "Type": "Demos.Steps.demo.ProgressDot",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "nav",
        "Title": "导航步骤",
        "Description": "<p>导航类型的步骤条。</p>\n",
        "Code": "<div>\n    <Steps Type=\"navigation\" Size=\"small\" Current=@current Class=\"site-navigation-steps\">\n        <Step Title=\"Step 1\" Subtitle=\"00:00:05\" Status=\"finish\" Description=\"This is a description.\" />\n        <Step Title=\"Step 2\" Subtitle=\"00:01:02\" Status=\"process\" Description=\"This is a description.\" />\n        <Step Title=\"Step 3\" Subtitle=\"waiting for longlong time\" Status=\"wait\" Description=\"This is a description.\" />\n    </Steps>\n    <Steps Type=\"navigation\" Current=\"@current\" Class=\"site-navigation-steps\">\n        <Step Status=\"finish\" Title=\"Step 1\" />\n        <Step Status=\"process\" Title=\"Step 2\" />\n        <Step Status=\"wait\" Title=\"Step 3\" />\n        <Step Status=\"wait\" Title=\"Step 4\" />\n    </Steps>\n    <Steps Type=\"navigation\" Size=\"small\" Current=\"@current\" Class=\"site-navigation-steps\">\n        <Step Status=\"finish\" Title=\"finish 1\" />\n        <Step Status=\"finish\" Title=\"finish 2\" />\n        <Step Status=\"process\" Title=\"current process\" />\n        <Step Status=\"wait\" Title=\"wait\" Disabled />\n    </Steps>\n</div>\n\n\n@code {\n    int current;\n}",
        "Type": "Demos.Steps.demo.Nav",
        "Style": "\n[data-theme=\"dark\"] .site-navigation-steps {\n  border-bottom: 1px solid #303030;\n  margin-bottom: 60px;\n  box-shadow: none;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "step-next",
        "Title": "步骤切换",
        "Description": "<p>通常配合内容及按钮使用，表示一个流程的处理进度。</p>\n",
        "Code": "<div>\n    <Steps Current=\"current\">\n        @foreach (var item in steps)\n        {\n            <Step Title=\"@item.Title\" Subtitle=\"@item.Content\" />\n        }\n    </Steps>\n\n    <div class=\"steps-content\">\n        @steps[current].Content\n    </div>\n    <div class=\"steps-action\">\n        @if (current < steps.Length - 1)\n        {\n            <Button Type=\"primary\" OnClick=\"OnNextClick\">Next</Button>\n        }\n        @if (current == steps.Length - 1)\n        {\n            <Button Type=\"primary\" OnClick=@(() => message.Success(\"Processing complete!\"))>\n                Done\n            </Button>\n        }\n        @if (current > 0)\n        {\n            <Button Type=\"primary\" OnClick=\"OnPreClick\">Previous</Button>\n        }\n    </div>\n</div>\n\n<style>\n    .steps-content {\n        margin-top: 16px;\n        border: 1px dashed #e9e9e9;\n        border-radius: 6px;\n        background-color: #fafafa;\n        min-height: 200px;\n        text-align: center;\n        padding-top: 80px;\n    }\n\n    .steps-action {\n        margin-top: 24px;\n    }\n</style>\n\n@inject MessageService message\n@code {\n\n    public class StepItem\n    {\n        public string Title { get; set; }\n        public string Content { get; set; }\n    }\n\n    public int current { get; set; } = 0;\n\n    public StepItem[] steps =\n    {\n        new StepItem {Title = \"First\", Content = \"First-content\"},\n        new StepItem {Title = \"Second\", Content = \"Second-content\"},\n        new StepItem {Title = \"Third\", Content = \"Third-content\"},\n        new StepItem {Title = \"Last\", Content = \"Last-content\"}\n    };\n\n    void OnPreClick()\n    {\n        current--;\n    }\n\n    void OnNextClick()\n    {\n        current++;\n    }\n}\n",
        "Type": "Demos.Steps.demo.StepNext",
        "Style": "\n[data-theme=\"dark\"] .steps-content {\n  margin-top: 16px;\n  border: 1px dashed #303030;\n  background-color: rgba(255,255,255,0.04);\n  color: rgba(255,255,255,0.65);\n  padding-top: 80px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "clickable",
        "Title": "可点击",
        "Description": "<p>设置 <code>onChange</code> 后，Steps 变为可点击状态。</p>\n",
        "Code": "<div>\n    <Steps Current=current OnChange=onChange>\n        <Step Title=\"Step 1\" Description=\"This is a description.\" />\n        <Step Title=\"Step 2\" Description=\"This is a description.\" />\n        <Step Title=\"Step 3\" Description=\"This is a description.\" />\n    </Steps>\n\n    <Divider />\n\n    <Steps Current=current OnChange=onChange Direction=\"vertical\">\n        <Step Title=\"Step 1\" Description=\"This is a description.\" />\n        <Step Title=\"Step 2\" Description=\"This is a description.\" />\n        <Step Title=\"Step 3\" Description=\"This is a description.\" />\n    </Steps>\n</div>\n\n@code{\n    int current;\n\n    void onChange(int current)\n    {\n        this.current = current;\n    }\n}",
        "Type": "Demos.Steps.demo.Clickable",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Switch",
    "SubTitle": "开关",
    "Type": "数据录入",
    "Desc": "<p>开关选择器。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要表示开关状态/两种状态之间的切换时；</li>\n<li>和 <code>checkbox</code>的区别是，切换 <code>switch</code> 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checked</td>\n<td>指定当前是否选中</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>CheckedChildren</td>\n<td>选中时的内容</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>初始是否选中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>加载中的开关</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>开关大小，可选值：default small</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>UnCheckedChildren</td>\n<td>非选中时的内容</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>变化时回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "Icon1",
        "Title": "文字和图标。",
        "Description": "<p>带有文字和图标。</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\" CheckedChildren='@(\"开\")' UnCheckedChildren='@(\"关\")' />\n    <br />\n    <Switch Checked=\"false\" CheckedChildren='@(\"开\")' UnCheckedChildren='@(\"关\")' />\n    <br />\n    <Switch Checked=\"true\"\n               CheckedChildren=\"checkedChildren\"\n               UnCheckedChildren=\"unCheckedChildren\" />\n</div>\n\n\n@code{\n    RenderFragment checkedChildren = @<Icon Type=\"check\"></Icon>;\n\n    RenderFragment unCheckedChildren = @<Icon Type=\"close\"></Icon>;\n}\n",
        "Type": "Demos.Switch.demo.Icon1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "Size",
        "Title": "两种大小",
        "Description": "<p>size=&quot;small&quot; 表示小号开关。</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\"/>\n    <br />\n    <Switch Size=\"small\" Checked=\"true\"/>\n</div>\n",
        "Type": "Demos.Switch.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Disable",
        "Title": "不可用",
        "Description": "<p>Switch 失效状态</p>\n",
        "Code": "<div>\n    <Switch Checked=\"switchValue2\" Disabled=\"isDisabled2\"/>\n    <br />\n    <br />\n    <Button Type=\"primary\" @onclick=\"(_)=>isDisabled2 = !isDisabled2\">Toggle disabled</Button>\n</div>\n\n\n@code{\n    bool switchValue = false;\n\n    bool switchValue2 = false;\n    bool isDisabled2 = true;\n\n    RenderFragment checkedChildren =@<Icon Type=\"check\"></Icon>;\n\n    RenderFragment unCheckedChildren = @<Icon Type=\"close\"></Icon>;\n\n}\n\n\n",
        "Type": "Demos.Switch.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\n    <Switch Checked=\"switchValue\"/>\n</div>\n\n@code\n{\n    bool switchValue { get; set; }\n}\n",
        "Type": "Demos.Switch.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "Loading",
        "Title": "加载中",
        "Description": "<p>标识开关操作仍在执行中。</p>\n",
        "Code": "<div>\n    <Switch Checked=\"true\" Loading=\"true\"/>\n    <br />\n    <Switch Size=\"small\" Loading=\"true\"/>\n</div>\n\n\n\n",
        "Type": "Demos.Switch.demo.Loading",
        "Style": "",
        "Debug": false
      }
    ]
  }
]