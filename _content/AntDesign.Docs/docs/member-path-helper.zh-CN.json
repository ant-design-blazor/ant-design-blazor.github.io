{
  "Order": 5,
  "Title": "成员路径助手",
  "Html": "<p>提供 <code>PathHelper</code> 通过成员路径字符串来读写对象成员值。</p>\n<ul>\n<li>支持Property和Field，支持取值操作和赋值操作。</li>\n<li><span style=\"font-weight: bold;\">⚠ 重要变化：因为字符串中使用双引号时需要转义，现在改为使用单引号来表示字符串索引键。</span></li>\n</ul>\n<h2>支持的操作</h2>\n<h3>1. 访问后代成员</h3>\n<p>例：<code>obj.PathGet(&quot;A.B.C&quot;)</code>。</p>\n<h3>2. 数组模式索引，以及实现了 <code>Count</code> 属性和 <code>get_Item(int) (即 this[int]</code> 方法的 <code>类似 List 的</code> 类型</h3>\n<p>例：<code>obj.PathGet&lt;string&gt;(&quot;A.B[1].C&quot;)</code>。</p>\n<h3>3. 字典模式索引，以及实现了 <code>ContainsKey</code> 方法和 <code>get_Item (即 this[key])</code> 方法的 <code>类似 Dictionary 的</code> 类型。</h3>\n<p>例：<code>obj.PathGetDefault&lt;int?&gt;(&quot;A.B['test'].C&quot;)</code>。 对象不存在时返回 null\n例：<code>obj.PathGetDefault&lt;int&gt;(&quot;A.B['test'].C&quot;)</code>。 对象不存在时返回 default(int)</p>\n<h3>4. 数组、字典嵌套</h3>\n<p>例：<code>obj.PathGet(&quot;A.B['test'][3].C&quot;)</code>，<code>obj.PathGet(&quot;A.B[1][5].C&quot;)</code>，<code>obj.PathGet(&quot;A.B[1]['user id'].C&quot;)</code>。</p>\n<h3>5. 成员赋值</h3>\n<p><span style=\"font-weight: bold;\">⚠ 注意：使用赋值操作时，路径只支持<code>类属性</code>、<code>类字段</code>、<code>值类型字段</code>，如果存在<code>值类型属性</code>，则无法赋值，执行结果是原值保持不变。</span></p>\n<p>例: <code>obj.PathSet(&quot;A.B['test']&quot;, &quot;test value&quot;)</code>, 则 <code>obj.PathGet(&quot;A.B['test']&quot;) == &quot;test value&quot;</code> 为 <code>true</code>\n例: <code>obj.PathSet(&quot;A.C&quot;, &quot;abcde&quot;)</code>, 则 <code>obj.PathGet&lt;string&gt;(&quot;A.C&quot;) == &quot;abcde&quot;</code> 为 <code>true</code></p>\n<h3>6. 非空模式和可空模式</h3>\n<h4>6.1. 非空模式</h4>\n<p><span style=\"font-weight: bold;\">⚠ 注意：非空模式下需要开发者保证属性路径上的属性不为null，如果包含数组模式或字典模式，还需要保证索引对象必须存在，否则访问不存在的对象的属性时会抛出异常。</span></p>\n<p>当结果数据类型是值类型且不是Nullable时(如int)，会生成直接访问表达式，如果属性路径中存在Nullable类型，会不做null检查直接访问。</p>\n<p>如：访问属性<code>A.B.C</code> 时，其中 <code>B</code> 是 <code>Nullable&lt;MyStruct&gt;</code>，会生成类似 <code>A.B!.Value.C</code> 的表达式。</p>\n<p>对于数组或字典，会直接访问，如：访问数组对象属性 <code>A.B[i].C</code> 时，不会检查 <code>B[i]</code> 是否存在。访问字典对象属性 <code>A.D[&quot;my data&quot;].C</code> 时，不会检查 <code>D[&quot;my data&quot;]</code> 是否存在。</p>\n<h4>6.2. 可空模式</h4>\n<p><span style=\"font-weight: bold;\">可空模式下不需要保证数据不为null，也不用保证数组模式或字典模式必定有值，访问到不存在对象的属性时会返回null。</span></p>\n<p>当结果数据类型是Nullable值类型或class时(如int?, string)，会生成条件表达式，如果属性路径中存在Nullable或class类型，会先检查非null再访问，遇到null对象会返回null。</p>\n<p>如：访问属性 <code>A.B.C</code> 时，其中 <code>B</code> 是 <code>Nullable&lt;MyStruct&gt;</code>，会生成类似 <code>if(A != null &amp;&amp; A.B.HasValue)</code> 的检查表达式。</p>\n<p>对于数组或字典，会先检查再访问，如：访问数组对象属性 <code>A.B[i].C</code> 时，会检查 <code>i &lt; B.Count &amp;&amp; i &gt;= 0</code> , 结果是 <code>false</code> 时返回 <code>default(T)</code>。访问字典对象属性 <code>A.D[&quot;my data&quot;].C</code> 时，会检查 <code>D.ContainsKey(&quot;my data&quot;)</code>, 结果是 <code>false</code> 时返回 <code>default(T)</code> 。</p>\n<h2>API</h2>\n<p>三种泛型用法：</p>\n<ol>\n<li><code>&lt;T,V&gt;</code> : 用于对象和返回值(赋值)都可以得到泛型参数的场景。</li>\n<li><code>&lt;object, V&gt;</code> : 用于可得到对象泛型参数，得不到返回值(赋值)泛型参数明确的场景。</li>\n<li><code>&lt;object, object&gt;</code> : 用于对象和返回值(赋值)泛型参数都无法获取的场景。</li>\n</ol>\n<p>以上泛型方法都是从非泛型方法扩展而来。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align: left;\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PathExtensions.PathGet</td>\n<td style=\"text-align: left;\">访问对象的成员值</td>\n</tr>\n<tr>\n<td>PathExtensions.PathGetOrDefault</td>\n<td style=\"text-align: left;\">访问对象的成员值, 访问前会检查成员值是否有效，无效时返回default值</td>\n</tr>\n<tr>\n<td>PathExtensions.PathSet</td>\n<td style=\"text-align: left;\">对对象的成员赋值</td>\n</tr>\n<tr>\n<td>PathHelper.GetDelegate</td>\n<td style=\"text-align: left;\">获取对象成员的取值委托方法</td>\n</tr>\n<tr>\n<td>PathHelper.GetDelegateDefault</td>\n<td style=\"text-align: left;\">获取对象成员的可空取值委托方法</td>\n</tr>\n<tr>\n<td>PathHelper.GetLambda</td>\n<td style=\"text-align: left;\">获取对象成员的取值Lambda表达式</td>\n</tr>\n<tr>\n<td>PathHelper.GetLambdaDefault</td>\n<td style=\"text-align: left;\">获取对象成员的可空取值Lambda表达式</td>\n</tr>\n<tr>\n<td>PathHelper.SetDelegate</td>\n<td style=\"text-align: left;\">获取对象成员的赋值委托方法</td>\n</tr>\n<tr>\n<td>PathHelper.SetLambda</td>\n<td style=\"text-align: left;\">获取对象成员的赋值Lambda表达式</td>\n</tr>\n</tbody>\n</table>\n"
}