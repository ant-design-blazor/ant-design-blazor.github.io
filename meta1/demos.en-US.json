[
  {
    "Title": "Components Overview",
    "Type": "Overview",
    "Desc": "<p><code>antd</code> provides plenty of UI components to enrich your web applications, and we will improve components experience consistently. We also recommand some great Third-Party Libraries additionally.</p>\n",
    "ApiDoc": ""
  },
  {
    "Title": "Button",
    "Type": "General",
    "Desc": "<p>To trigger an operation.</p>\n<h2>When To Use</h2>\n<p>A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.</p>\n<p>In Ant Design we provide 4 types of button.</p>\n<ul>\n<li>Primary button: indicate the main action, one primary button at most in one section.</li>\n<li>Default button: indicate a series of actions without priority.</li>\n<li>Dashed button: used for adding action commonly.</li>\n<li>Link button: used for external links.</li>\n</ul>\n<p>And 4 other properties additionally.</p>\n<ul>\n<li><code>danger</code>: used for actions of risk, like deletion or authorization.</li>\n<li><code>ghost</code>: used in situations with complex background, home pages usually.</li>\n<li><code>disabled</code>: when actions is not available.</li>\n<li><code>loading</code>: add loading spinner in button, avoiding multiple submits too.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/fNUKzY1sk/Button.svg"
  },
  {
    "Title": "Icon",
    "Type": "General",
    "Desc": "<p>Semantic vector graphics. Before use icons。</p>\n<h2>List of icons</h2>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Common Icon</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassName</td>\n<td>className of Icon</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Style properties of icon, like fontSize and color</td>\n<td>Css propertities</td>\n<td></td>\n</tr>\n<tr>\n<td>Spin</td>\n<td>Rotate icon with animation</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Rotate</td>\n<td>Rotate by n degrees (not working in IE9)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>TwoToneColor</td>\n<td>Only supports the two-tone icon. Specify the primary color.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>We still have three different themes for icons, icon component name is the icon name suffixed by the theme name.</p>\n<p>Custom Icon</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Style</td>\n<td>Style properties of icon, like fontSize and color</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>Spin</td>\n<td>Rotate icon with animation</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Rotate</td>\n<td>Rotate degrees (not working in IE9)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Component</td>\n<td>The component used for the root node.</td>\n<td></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/rrwbSt3FQ/Icon.svg"
  },
  {
    "Title": "Typography",
    "Type": "General",
    "Desc": "<p>Basic text writing, including headings, body text, lists, and more.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When need to display a title or paragraph contents in Articles/Blogs/Notes.</li>\n<li>When you need copyable/editable/ellipsis texts.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Typography.Text</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>Code style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>Config copy. Can set copy text and callback when is an object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Deleted line style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>Editable. Can control edit state when is object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>Display ellipsis when text overflows. Should set width when ellipsis needed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>Marked style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Keyboard  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>Underlined  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when user edits the content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Strong</td>\n<td>Bold style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Content type <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Typography.Title</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>Code style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>Config copy. Can set copy text and callback when is an object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Deleted line style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>Editable. Can control edit state when is object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>Display ellipsis when text overflows. Should set width when ellipsis needed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Level</td>\n<td>Set content importance. Match with <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code></td>\n<td>int</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>Marked style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>Underlined  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when user edits the content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Content type <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Typography.Paragraph</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code</td>\n<td>Code style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Copyable</td>\n<td>Config copy. Can set copy text and callback when is an object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Deleted line style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Editable</td>\n<td>Editable. Can control edit state when is object</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Ellipsis</td>\n<td>Display ellipsis when text overflows. Should set width when ellipsis needed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Mark</td>\n<td>Marked style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Underline</td>\n<td>Underlined  style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when user edits the content</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Strong</td>\n<td>Bold style</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Content type <code>secondary</code> <code>warning</code> <code>danger</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/GOM1KQ24O/Typography.svg"
  },
  {
    "Title": "Divider",
    "Type": "Layout",
    "Desc": "<p>A divider line separates different content.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Divide sections of article.</li>\n<li>Divide inline text and links such as the operation column of table.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dashed</td>\n<td>whether line is dashed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Orientation</td>\n<td>position of title inside divider <code>left</code>, <code>right</code>, <code>center</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>style object of container</td>\n<td>CSS properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>direction type of divider</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Plain</td>\n<td>divider text show as plain style</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5swjECahe/Divider.svg"
  },
  {
    "Title": "Grid",
    "Type": "Layout",
    "Desc": "<p>24 Grids System。</p>\n<h2>Design concept#</h2>\n<p>In most business situations, Ant Design needs to solve a lot of information storage problems within the design area, so based on 12 Grids System, we divided the design area into 24 sections.</p>\n<p>We name the divided area 'box'. We suggest four boxes for horizontal arrangement at most, one at least. Boxes are proportional to the entire screen as shown in the picture above. To ensure a high level of visual comfort, we customize the typography inside of the box based on the box unit.</p>\n<h2>Outline</h2>\n<p>In the grid system, we define the frame outside the information area based on row and column, to ensure that every area can have stable arrangement.</p>\n<p>Following is a brief look at how it works:</p>\n<ul>\n<li>Establish a set of column in the horizontal space defined by row (abbreviated col)</li>\n<li>Your content elements should be placed directly in the col, and only col should be placed directly in row</li>\n<li>The column grid system is a value of 1-24 to represent its range spans. For example, three columns of equal width can be created by <Col span={8} />.</li>\n<li>If the sum of col spans in a row are more than 24, then the overflowing col as a whole will start a new line arrangement.</li>\n</ul>\n<p>Our grid systems base on Flex layout to allow the elements within the parent to be aligned horizontally - left, center, right, wide arrangement, and decentralized arrangement. The Grid system also supports vertical alignment - top aligned, vertically centered, bottom-aligned. You can also define the order of elements by using order.</p>\n<p>Layout uses a 24 grid layout to define the width of each &quot;box&quot;, but does not rigidly adhere to the grid layout.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Row</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>align</td>\n<td>the vertical alignment of the flex layout:：<code>top</code> <code>middle</code> <code>bottom</code></td>\n<td>string</td>\n<td>top</td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}. or you can use array to make horizontal and vertical spacing work at the same time <code>[horizontal, vertical]</code> (supported after 1.5.0)</td>\n<td>number, object, array</td>\n<td>0</td>\n</tr>\n<tr>\n<td>justify</td>\n<td>horizontal arrangement of the flex layout:<code>start</code> <code>end</code> <code>center</code> <code>space-around</code> <code>space-between</code></td>\n<td>string</td>\n<td>start</td>\n</tr>\n<tr>\n<td>type</td>\n<td>layout mode, optional <code>flex</code>， browser support</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Col</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>offset</td>\n<td>the number of cells to offset Col from the left</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>order</td>\n<td>raster order, used in flex layout mode</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pull</td>\n<td>the number of cells that raster is moved to the left</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>push</td>\n<td>the number of cells that raster is moved to the right</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>span</td>\n<td>raster number of cells to occupy, 0 corresponds to  <code>display: none</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> and also default setting, could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> could be a span value or an object containing above props</td>\n<td>int</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>The breakpoints of responsive grid follow BootStrap 4 media queries rules(not including <code>occasionally</code> part).</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5rWLU27so/Grid.svg"
  },
  {
    "Title": "Layout",
    "Type": "Layout",
    "Desc": "<p>Handling the overall layout of a page.</p>\n<h2>Specification</h2>\n<h3>Size</h3>\n<p>The first level navigation is left aligned near a logo, and the secondary menu is right aligned.</p>\n<ul>\n<li>Top Navigation: the height of the first level navigation <code>64px</code>, the second level navigation <code>48px</code>.</li>\n<li>Top Navigation (for landing pages): the height of the first level navigation <code>80px</code>, the second level navigation <code>56px</code>.</li>\n<li>Calculation formula of a top navigation: <code>48+8n</code>.</li>\n<li>Calculation formula of an aside navigation: <code>200+8n</code>.</li>\n</ul>\n<h3>Interaction rules</h3>\n<ul>\n<li>The first level navigation and the last level navigation should be distinguishable by visualization;</li>\n<li>The current item should have the highest priority of visualization;</li>\n<li>When the current navigation item is collapsed, the style of the current navigation item is applied to its parent level;</li>\n<li>The left side navigation bar has support for both the accordion and expanding styles; you can choose the one that fits your case the best.</li>\n</ul>\n<h2>Visualization rules</h2>\n<p>Style of a navigation should conform to its level.</p>\n<ul>\n<li><p><strong>Emphasis by colorblock</strong></p>\n<p>When background color is a deep color, you can use this pattern for the parent level navigation item of the current page.</p>\n</li>\n<li><p><strong>The highlight match stick</strong></p>\n<p>When background color is a light color, you can use this pattern for the current page navigation item; we recommend using it for the last item of the navigation path.</p>\n</li>\n<li><p><strong>Highlighted font</strong></p>\n<p>From the visualization aspect, a highlighted font is stronger than colorblock; this pattern is often used for the parent level of the current item.</p>\n</li>\n<li><p><strong>Enlarge the size of the font</strong></p>\n<p><code>12px</code>, <code>14px</code> is a standard font size of navigations, <code>14px</code> is used for the first and the second level of the navigation. You can choose an appropriate font size regarding the level of your navigation.</p>\n</li>\n</ul>\n<h2>Component Overview</h2>\n<ul>\n<li><code>Layout</code>: The layout wrapper, in which <code>Header</code> <code>Sider</code> <code>Content</code> <code>Footer</code> or <code>Layout</code> itself can be nested, and can be placed in any parent container.</li>\n<li><code>Header</code>: The top layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Sider</code>: The sidebar with default style and basic functions, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Content</code>: The content layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n<li><code>Footer</code>: The bottom layout with the default style, in which any element can be nested, and must be placed in <code>Layout</code>.</li>\n</ul>\n<blockquote>\n<p>Based on <code>flex layout</code>, please pay attention to the <a href=\"http://caniuse.com/#search=flex\">compatibility</a>.</p>\n</blockquote>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Layout&gt;\n  &lt;Header&gt;header&lt;/Header&gt;\n  &lt;Layout&gt;\n    &lt;Sider&gt;left sidebar&lt;/Sider&gt;\n    &lt;Content&gt;main content&lt;/Content&gt;\n    &lt;Sider&gt;right sidebar&lt;/Sider&gt;\n  &lt;/Layout&gt;\n  &lt;Footer&gt;footer&lt;/Footer&gt;\n&lt;/Layout&gt;\n</code></pre>\n<h3>Layout</h3>\n<p>The wrapper.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>container className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hasSider</td>\n<td>whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the styles</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>APIs of <code>Layout.Header</code> <code>Layout.Footer</code> <code>Layout.Content</code> are the same as that of <code>Layout</code>.</p>\n</blockquote>\n<h3>Layout.Sider</h3>\n<p>The sidebar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>breakpoint</td>\n<td><a href=\"/components/grid#Col\">breakpoints</a> of the responsive layout</td>\n<td><code>xs</code> | <code>sm</code> | <code>md</code> | <code>lg</code> | <code>xl</code> | <code>xxl</code> }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>container className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsed</td>\n<td>to set the current status</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsedWidth</td>\n<td>width of the collapsed sidebar, by setting to <code>0</code> a special trigger will appear</td>\n<td>number</td>\n<td>80</td>\n</tr>\n<tr>\n<td>collapsible</td>\n<td>whether can be collapsed</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>defaultCollapsed</td>\n<td>to set the initial status</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>reverseArrow</td>\n<td>reverse direction of arrow, for a sider that expands from the right</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the styles</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>color theme of the sidebar</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>dark</code></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>specify the customized trigger, set to null to hide the trigger</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>width of the sidebar</td>\n<td>number|string</td>\n<td>200</td>\n</tr>\n<tr>\n<td>onCollapse</td>\n<td>the callback function, executed by clicking the trigger or activating the responsive layout</td>\n<td>(collapsed, type) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBreakpoint</td>\n<td>the callback function, executed when <a href=\"/components/grid#API\">breakpoints</a> changed</td>\n<td>(broken) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>zeroWidthTriggerStyle</td>\n<td>to customize the styles of the special trigger that appears when <code>collapsedWidth</code> is 0</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>breakpoint width</h4>\n<pre><code class=\"language-js\">{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n</code></pre>\n<style>\n  [data-theme=\"dark\"] .site-layout-background {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] .site-layout-header-background {\n    background: #1f1f1f;\n  }\n</style>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/hzEndUVEx/Layout.svg"
  },
  {
    "Title": "Space",
    "Type": "Layout",
    "Desc": "<p>Set components spacing.</p>\n<h2>When To Use</h2>\n<p>Avoid components clinging together and set a unified space.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>space size</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>space direction</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/wc6%263gJ0Y8/Space.svg"
  },
  {
    "Title": "Affix",
    "Type": "Navigation",
    "Desc": "<p>Wrap Affix around another component to make it stick the viewport.</p>\n<h2>When To Use</h2>\n<ul>\n<li>On longer web pages, its helpful for some content to stick to the viewport. This is common for menus and actions.</li>\n<li>Please note that Affix should not cover other content on the page, especially when the size of the viewport is small.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OffsetBottom</td>\n<td>Offset from the bottom of the viewport (in pixels)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OffsetTop</td>\n<td>Offset from the top of the viewport (in pixels)</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Target</td>\n<td>Specifies the scrollable area DOM node</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Callback for when Affix state is changed</td>\n<td>Function()</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Note: Children of <code>Affix</code> must not have the property <code>position: absolute</code>, but you can set <code>position: absolute</code> on <code>Affix</code> itself:</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/tX6-md4H6/Affix.svg"
  },
  {
    "Title": "Breadcrumb",
    "Type": "Navigation",
    "Desc": "<p>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When the system has more than two layers in a hierarchy.</li>\n<li>When you need to inform the user of where they are.</li>\n<li>When the user may need to navigate back to a higher level.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Breadcrumb</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ItemRender</td>\n<td>Custom item renderer</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Params</td>\n<td>Routing parameters</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Routes</td>\n<td>The routing stack information of router</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Separator</td>\n<td>Custom separator</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>BreadcrumbItem</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Href</td>\n<td>Target of hyperlink</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Overlay</td>\n<td>The dropdown menu</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>Set the handler to handle click event</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DropdownProps</td>\n<td>The dropdown props</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/9Ltop8JwH/Breadcrumb.svg"
  },
  {
    "Title": "Dropdown",
    "Type": "Navigation",
    "Desc": "<p>A dropdown list.</p>\n<h2>When To Use</h2>\n<p>When there are more than a few options to choose from, you can wrap them in a <code>Dropdown</code>. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/eedWN59yJ/Dropdown.svg"
  },
  {
    "Title": "Menu",
    "Type": "Navigation",
    "Desc": "<p>A versatile menu for navigation.</p>\n<h2>When To Use</h2>\n<p>Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. Ant Design offers top and side navigation options. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website.</p>\n<p>More layouts with navigation: <a href=\"/components/layout\">Layout</a>.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;Menu&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;SubMenu&quot;&gt;\n    &lt;Menu.Item&gt;SubMenuItem&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>Array with the keys of default opened sub menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>Array with the keys of default selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>Render submenu into DOM before it becomes visible</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>Specifies the collapsed status when menu is inline mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>Indent (in pixels) of inline menu items on each level</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>Type of menu; <code>vertical</code>, <code>horizontal</code>, or <code>inline</code></td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>Allows selection of multiple items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>Array with the keys of currently opened sub-menus</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>Allows selecting menu items</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Array with the keys of currently selected menu items</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>Style of the root node</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>Delay time to hide submenu when mouse leaves (in seconds)</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>Delay time to show submenu when mouse enters, (in seconds)</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>Color theme of the menu</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>Called when a menu item is clicked</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>Called when a menu item is deselected (multiple mode only)</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>Called when sub-menus are opened or closed</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Called when a menu item is selected</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>none</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>Customized icon when menu is collapsed</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>Whether menu item is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the menu item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Set display title for collapsed item</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>Sub-menu class name</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>Sub-menus or sub-menu items</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Whether sub-menu is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>Unique ID of the sub-menu</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Title of the sub-menu</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>Callback executed when the sub-menu title is clicked</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>sub-menu items</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>title of the group</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>Divider line in between menu items, only used in vertical popup Menu or Dropdown Menu.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/3XZcjGpvK/Menu.svg"
  },
  {
    "Title": "PageHeader",
    "Type": "Navigation",
    "Desc": "<p>A header with common actions and design elements built in.</p>\n<h2>When To Use</h2>\n<p>PageHeader can be used to highlight the page topic, display important information about the page, and carry the action items related to the current page (including page-level operations, inter-page navigation, etc.) It can also be used as inter-page navigation.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/6bKE0Cq0R/PageHeader.svg"
  },
  {
    "Title": "Pagination",
    "Type": "Navigation",
    "Desc": "<p>A long list can be divided into several pages using <code>Pagination</code>, and only one page will be loaded at a time.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When it will take a long time to load/render all items.</li>\n<li>If you want to browse the data by navigating through pages.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Pagination onChange={onChange} total={50} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Current</td>\n<td>Current page number</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultCurrent</td>\n<td>Default initial page number</td>\n<td>number</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultPageSize</td>\n<td>Default number of data items per page</td>\n<td>number</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable pagination</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>HideOnSinglePage</td>\n<td>Whether to hide pager on single page</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ItemRender</td>\n<td>To customize item's innerHTML</td>\n<td>(page, type: 'page' | 'prev' | 'next', originalElement) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSize</td>\n<td>Number of data items per page</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSizeOptions</td>\n<td>Specify the sizeChanger options</td>\n<td>string[]</td>\n<td>['10', '20', '50', '100']</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowLessItems</td>\n<td>Show less page items</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowQuickJumper</td>\n<td>Determine whether you can jump to pages directly</td>\n<td>boolean | <code>{ goButton: ReactNode }</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSizeChanger</td>\n<td>Determine whether to show <code>pageSize</code> select, it will be <code>true</code> when <code>total&gt;=50</code></td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTitle</td>\n<td>Show page item's title</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTotal</td>\n<td>To display the total number and range</td>\n<td>Function(total, range)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Simple</td>\n<td>Whether to use simple mode</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Specify the size of <code>Pagination</code>, can be set to <code>small</code>.</td>\n<td>'default' | 'small'.</td>\n<td>&quot;&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>Responsive</td>\n<td>If <code>size</code> is not specified, <code>Pagination</code> would resize according to the width of the window</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Total</td>\n<td>Total number of data items</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Called when the page number is changed, and it takes the resulting page number and pageSize as its arguments</td>\n<td>Function(page, pageSize)</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>OnShowSizeChange</td>\n<td>Called when <code>pageSize</code> is changed</td>\n<td>Function(current, size)</td>\n<td>noop</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/1vqv2bj68/Pagination.svg"
  },
  {
    "Title": "Steps",
    "Type": "Navigation",
    "Desc": "<p><code>Steps</code> is a navigation bar that guides users through the steps of a task.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a given task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Steps\nThe whole of the step bar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassName</td>\n<td>Additional class to Steps</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Type of steps, can be set to one of the following values: <code>default</code>, <code>navigation</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Current</td>\n<td>To set the current step, counting from 0. You can overwrite this state by using status of Step</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Direction</td>\n<td>To specify the direction of the step bar, <code>horizontal</code> or <code>vertical</code></td>\n<td>string</td>\n<td><code>horizontal</code></td>\n</tr>\n<tr>\n<td>LabelPlacement</td>\n<td>Place title and description with <code>horizontal</code> or <code>vertical</code> direction</td>\n<td>string</td>\n<td><code>horizontal</code></td>\n</tr>\n<tr>\n<td>ProgressDot</td>\n<td>Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be <code>vertical</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>To specify the size of the step bar, <code>default</code> and <code>small</code> are currently supported</td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>To specify the status of current step, can be set to one of the following values: <code>wait</code> <code>process</code> <code>finish</code> <code>error</code></td>\n<td>string</td>\n<td><code>process</code></td>\n</tr>\n<tr>\n<td>Initial</td>\n<td>Set the initial step, counting from 0</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Trigger when Step is changed</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Steps.Step\nA single step in the step bar.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Description</td>\n<td>Description of the step, optional property</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Icon of the step, optional property</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dtatus</td>\n<td>To specify the status. It will be automatically set by current of Steps if not configured. Optional values are: wait process finish error</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Title of the step</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>Subtitle of the step</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable click</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/UZYqMizXHaj/Steps.svg"
  },
  {
    "Title": "AutoComplete",
    "Type": "Data Entry",
    "Desc": "<p>Autocomplete function of input field.</p>\n<h2>When To Use</h2>\n<p>When there is a need for autocomplete functionality.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear</td>\n<td>Show clear button, effective in multiple mode only.</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>backfill</td>\n<td>backfill selected item the input when using keyboard</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>children (for customize input element)</td>\n<td>customize input element</td>\n<td>HTMLInputElement <br /><br /> HTMLTextAreaElement <br /><br /> <code>React.ReactElement&lt;InputProps&gt;</code></td>\n<td><code>&lt;Input /&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>children (for dataSource)</td>\n<td>Data source to auto complete</td>\n<td><code>React.ReactElement&lt;OptionProps&gt;</code> <br /><br /> <code>Array&lt;React.ReactElement&lt;OptionProps&gt;&gt;</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultActiveFirstOption</td>\n<td>Whether active first option by default</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>Initial selected option.</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Whether disabled select</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>filterOption</td>\n<td>If true, filter options by input, if function, filter options against it. The function will receive two arguments, <code>inputValue</code> and <code>option</code>, if the function returns <code>true</code>, the option will be included in the filtered set; Otherwise, it will be excluded.</td>\n<td>boolean or function(inputValue, option)</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>placeholder of input</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>selected option</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>Called when leaving the component.</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Called when select an option or input value change, or value of input is changed</td>\n<td>function(value)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>Called when entering the component</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onSearch</td>\n<td>Called when searching items.</td>\n<td>function(value)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Called when a option is selected. param is option's value and option instance.</td>\n<td>function(value, option)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultOpen</td>\n<td>Initial open state of dropdown</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>Controlled open state of dropdown</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDropdownVisibleChange</td>\n<td>Call when dropdown open</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>notFoundContent</td>\n<td>Specify content to show when no result matches..</td>\n<td>string</td>\n<td>'Not Found'</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/qtJm4yt45/AutoComplete.svg"
  },
  {
    "Title": "Cascader",
    "Type": "Data Entry",
    "Desc": "<p>Cascade selection box.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.</li>\n<li>When selecting from a large data set, with multi-stage classification separated for easy selection.</li>\n<li>Chooses cascade items in one float layer for better user experience.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Cascader</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>whether allow clear</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ChangeOnSelect</td>\n<td>change value on each selection if set to true, see above demo for details</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>additional css class</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>initial selected value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ExpandTrigger</td>\n<td>expand current item when click or hover, one of 'click' 'hover'</td>\n<td>string</td>\n<td>'click'</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>data options of cascade</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>input placeholder</td>\n<td>string</td>\n<td>'Please Select'</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>input size, one of 'large','middle' 'small'</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>callback when finishing cascader select (List<CascaderNode>, string, string) =&gt; void</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>CascaderNode</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Label</td>\n<td>Label</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disabled</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>HasChildren</td>\n<td>HasChildren</td>\n<td>bool</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Children</td>\n<td>Children</td>\n<td>AntCheckbox[]</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/UdS8y8xyZ/Cascader.svg"
  },
  {
    "Title": "Checkbox",
    "Type": "Data Entry",
    "Desc": "<p>Checkbox component.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Used for selecting multiple values from several options.</li>\n<li>If you use only one checkbox, it is the same as using Switch to toggle between two states.\nThe difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Checkbox</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Specifies whether the checkbox is selected.</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Indeterminate</td>\n<td>indeterminate checked state of checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>The callback function that is triggered when the state changes</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Checkbox Group</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CheckboxItems</td>\n<td>Check box items</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disable</td>\n<td>Disable all checkbox</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>Specifies options</td>\n<td>CheckboxOption[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>List of selected value</td>\n<td>IList<string></td>\n<td>Array.Empty<string>()</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>The callback function that is triggered when the state changes</td>\n<td>function(checkValue)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/8nbVbHEm_/CheckBox.svg"
  },
  {
    "Title": "DatePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select or input a date.</p>\n<h2>When To Use</h2>\n<p>By clicking the input box, you can select a date from a popup calendar.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>There are six kinds of picker:</p>\n<ul>\n<li>DatePicker</li>\n<li>MonthPicker</li>\n<li>RangePicker</li>\n<li>WeekPicker</li>\n<li>YearPicker</li>\n<li>QuarterPicker (Added in 4.1.0)</li>\n</ul>\n<h3>Localization（TODO）</h3>\n<p>The default locale is en-US, if you need to use other languages, recommend to use internationalized components provided by us at the entrance. Look at: <a href=\"http://ant.design/components/config-provider/\">ConfigProvider</a>.</p>\n<p>If there are special needs (only modifying single component language), Please use the property: local. Example: <a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a>.</p>\n<pre><code class=\"language-jsx\">import locale from 'antd/es/date-picker/locale/zh_CN';\n\n&lt;DatePicker locale={locale} /&gt;;\n</code></pre>\n<pre><code class=\"language-jsx\">// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\nimport moment from 'moment';\n\n&lt;DatePicker defaultValue={moment('2015-01-01', 'YYYY-MM-DD')} /&gt;;\n</code></pre>\n<h3>Common API</h3>\n<p>The following APIs are shared by DatePicker, YearPicker, MonthPicker, RangePicker, WeekPicker.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear（TODO）</td>\n<td>Whether to show clear button</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>className</td>\n<td>picker className</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>dateRender</td>\n<td>custom rendering function for date cells</td>\n<td>function(currentDate: moment, today: moment) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>determine whether the DatePicker is disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>specify the date that cannot be selected</td>\n<td>(currentDate: moment) =&gt; boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>dropdownClassName</td>\n<td>to customize the className of the popup calendar</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>to set the container of the floating layer, while the default is to create a <code>div</code> element in <code>body</code></td>\n<td>function(trigger)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale（TODO）</td>\n<td>localization configuration</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode（TODO）</td>\n<td>picker panel mode（<a href=\"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?\">Cannot select year or month anymore?</a></td>\n<td><code>time</code> | <code>date</code> | <code>month</code> | <code>year</code> | <code>decade</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>open state of picker</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>picker</td>\n<td>Set picker type</td>\n<td><code>date</code> | <code>week</code> | <code>month</code> | <code>quarter</code> (4.1.0) | <code>year</code></td>\n<td><code>date</code></td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>placeholder of date input</td>\n<td>string|RangePicker[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>popupStyle</td>\n<td>to customize the style of the popup calendar</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>determine the size of the input box, the height of <code>large</code> and <code>small</code>, are 40px and 24px respectively, while default size is 32px</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>bordered</td>\n<td>whether has border style</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>suffixIcon</td>\n<td>The custom suffix icon</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>to customize the style of the input box</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>a callback function, can be executed whether the popup calendar is popped up or closed</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>callback when picker panel mode is changed</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inputReadOnly</td>\n<td>Set the <code>readonly</code> attribute of the input tag (avoids virtual keyboard on touch devices)</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Common Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date, if start time or end time is null or undefined, the date range will be an open interval</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>to specify the time that cannot be selected</td>\n<td>function(date)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a>. When an array is provided, all values are used for parsing and first value is used for formatting.</td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>to provide an additional time selection</td>\n<td>object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue（TODO）</td>\n<td>to set default time of selected date, <a href=\"#components-date-picker-demo-disabled-date\">demo</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>moment()</td>\n<td></td>\n</tr>\n<tr>\n<td>showToday</td>\n<td>whether to show &quot;Today&quot; button</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOk（TODO）</td>\n<td>callback when click ok button</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>Callback function for panel changing</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>YearPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>QuarterPicker</h3>\n<p>Added in <code>4.1.0</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-\\QQ&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>MonthPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-MM&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>Custom month cell content render method</td>\n<td>function(date, locale): ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>WeekPicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-wo&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>RangePicker</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowEmpty（TODO）</td>\n<td>Allow start or end input leave empty</td>\n<td>[boolean, boolean]</td>\n<td>[false, false]</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>to set default date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>to set default picker date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disable start or end</td>\n<td><code>[boolean, boolean]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>to specify the time that cannot be selected</td>\n<td>function(dates: [moment, moment], partial: <code>'start'|'end'</code>)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>to set the date format, refer to <a href=\"http://momentjs.com/\">moment.js</a>. When an array is provided, all values are used for parsing and first value is used for formatting.</td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD HH:mm:ss&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>ranges（TODO）</td>\n<td>preseted ranges for quick selection</td>\n<td>{ [range: string]: <a href=\"http://momentjs.com/\">moment</a>[] } | { [range: string]: () =&gt; <a href=\"http://momentjs.com/\">moment</a>[] }</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>render extra footer in panel</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>separator（TODO）</td>\n<td>set separator between inputs</td>\n<td>string</td>\n<td>'~'</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>to provide an additional time selection</td>\n<td>object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue</td>\n<td>to set default time of selected date, <a href=\"#components-date-picker-demo-disabled-date\">demo</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>[moment(), moment()]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>to set date</td>\n<td>[<a href=\"http://momentjs.com/\">moment</a>, <a href=\"http://momentjs.com/\">moment</a>]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onCalendarChange（TODO）</td>\n<td>a callback function, can be executed when the start time or the end time of the range is changing</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>a callback function, can be executed when the selected time is changing</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<style>\n.code-box-demo .ant-picker {\n  margin: 0 8px 12px 0;\n}\n</style>\n<h2>FAQ</h2>\n<ul>\n<li><p><a href=\"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?\">When set mode to DatePicker/RangePicker, cannot select year or month anymore?</a></p>\n</li>\n<li><p><a href=\"/docs/react/replace-moment#DatePicker\">How to use DatePicker with customize date library like dayjs</a></p>\n</li>\n</ul>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/RT_USzA48/DatePicker.svg"
  },
  {
    "Title": "Form",
    "Type": "Data Entry",
    "Desc": "<p>High performance Form component with data scope management. Including data collection, verification, and styles.</p>\n<h2>When to use</h2>\n<ul>\n<li>When you need to create an instance or collect information.</li>\n<li>When you need to validate fields in certain rules.</li>\n</ul>\n<h2>API(TODO)</h2>\n<style>\n.code-box-demo .ant-form:not(.ant-form-inline):not(.ant-form-vertical) {\n  max-width: 600px;\n}\n.markdown.api-container table td:nth-of-type(4) {\n  white-space: nowrap;\n  word-wrap: break-word;\n}\n</style>\n<style>\n  .site-form-item-icon {\n    color: rgba(0, 0, 0, 0.25);\n  }\n  [data-theme=\"dark\"] .site-form-item-icon {\n    color: rgba(255,255,255,.3);\n  }\n</style>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/ORmcdeaoO/Form.svg"
  },
  {
    "Title": "Input",
    "Type": "Data Entry",
    "Desc": "<p>A basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A user input in a form field is needed.</li>\n<li>A search input is required.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AddOnBefore</td>\n<td>The label text displayed before (on the left side of) the input field.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AddOnAfter</td>\n<td>The label text displayed after (on the right side of) the input field.</td>\n<td>RenderFragment</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Child content</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>The size of the input box. Note: in the context of a form, the <code>large</code> size is used. Available: <code>large</code> <code>default</code> <code>small</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>提供可描述输入字段预期值的提示信息</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>The initial input content</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>MaxLength</td>\n<td>max length</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether the input is disabled.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AllowClear</td>\n<td>allow to remove input content with clear icon</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Prefix</td>\n<td>The prefix icon for the Input.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Suffix</td>\n<td>The suffix icon for the Input.</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>The type of input, see: MDN(use <code>Input.TextArea</code> instead of type=<code>textarea</code>)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>callback when the content is change</td>\n<td>function(e)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>OnPressEnter</td>\n<td>The callback function that is triggered when Enter key is pressed.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnInput</td>\n<td>callback when user input</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/xS9YEJhfe/Input.svg"
  },
  {
    "Title": "InputNumber",
    "Type": "Data Entry",
    "Desc": "<p>Enter a number within certain range with the mouse or keyboard.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a numeric value needs to be provided.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>initial value</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>disable the input</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Formatter</td>\n<td>Specifies the format of the value presented</td>\n<td>function(double,string)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>max value</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>min value</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parser</td>\n<td>Specifies the value extracted from formatter</td>\n<td>function(string, double)</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>height of input box</td>\n<td><code>large</code> ,<code>middle</code>,<code>small</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Step</td>\n<td>The number to which the current value is increased or decreased. It can be an integer or decimal.</td>\n<td>double</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>current value</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>The callback triggered when the value is changed.</td>\n<td>function(double)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/XOS8qZ0kU/InputNumber.svg"
  },
  {
    "Title": "Mentions",
    "Type": "Data Entry",
    "Desc": "<p>Mention component.</p>\n<h2>When To Use</h2>\n<p>When need to mention someone or something.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Mention</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autoFocus</td>\n<td>Auto get focus when component mounted</td>\n<td>boolean</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>Default value</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>filterOption</td>\n<td>Customize filter option logic</td>\n<td>false | (input: string, option: OptionProps) =&gt; boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>notFoundContent</td>\n<td>Set mentions content when not match</td>\n<td>ReactNode</td>\n<td>'Not Found'</td>\n</tr>\n<tr>\n<td>placement</td>\n<td>Set popup placement</td>\n<td><code>top</code> | <code>bottom</code></td>\n<td><code>bottom</code></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>Set trigger prefix keyword</td>\n<td>string | string[]</td>\n<td>'@'</td>\n</tr>\n<tr>\n<td>split</td>\n<td>Set split string before and after selected mention</td>\n<td>string</td>\n<td>' '</td>\n</tr>\n<tr>\n<td>validateSearch</td>\n<td>Customize trigger search logic</td>\n<td>(text: string, props: MentionsProps) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>Set value of mentions</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Trigger when value changed</td>\n<td>(text: string) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Trigger when user select the option</td>\n<td>(option: OptionProps, prefix: string) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onSearch</td>\n<td>Trigger when prefix hit</td>\n<td>(text: string, prefix: string) =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>Trigger when mentions get focus</td>\n<td>() =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>Trigger when mentions lose focus</td>\n<td>() =&gt; void</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>Set the mount HTML node for suggestions</td>\n<td>() =&gt; HTMLElement</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Mention methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n</tr>\n</tbody>\n</table>\n<h3>Option</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>suggestion content</td>\n<td>ReactNode</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>value of suggestion, the value will insert into input filed while selected</td>\n<td>string</td>\n<td>''</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/jPE-itMFM/Mentions.svg"
  },
  {
    "Title": "Radio",
    "Type": "Data Entry",
    "Desc": "<p>Radio</p>\n<h2>When To Use</h2>\n<p>-Used to select a single state from multiple options.\n-The difference from Select is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Radio/Radio.Button</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Specifies whether the radio is selected.</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>Specifies the initial state: whether or not the radio is selected.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable radio</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>According to value for comparison, to determine whether the selected</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>RadioGroup</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButtonStyle</td>\n<td>style type of radio button</td>\n<td><code>outline</code>,<code>solid</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable all radio buttons</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Used for setting the currently selected value.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>The name property of all input[type=&quot;radio&quot;] children</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size for radio button style</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>The callback function that is triggered when the state changes.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/8cYb5seNB/Radio.svg"
  },
  {
    "Title": "Rate",
    "Type": "Data Entry",
    "Desc": "<p>Rate component.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Show evaluation.</li>\n<li>A quick rating operation on something.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear</td>\n<td>whether to allow clear when click again</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>allowHalf</td>\n<td>whether to allow semi selection</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>get focus when component mounted</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>character</td>\n<td>custom character of rate</td>\n<td>ReactNode</td>\n<td><a href=\"/components/icon/\">&lt;StarFilled /&gt;</a></td>\n</tr>\n<tr>\n<td>className</td>\n<td>custom class name of rate</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>star count</td>\n<td>number</td>\n<td>5</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>default value</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>read only, unable to interact</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>custom style object of rate</td>\n<td>CSSProperties</td>\n<td></td>\n</tr>\n<tr>\n<td>tooltips</td>\n<td>Customize tooltip by each character</td>\n<td>string[]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>current value</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>callback when component lose focus</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>callback when select value</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>callback when component get focus</td>\n<td>Function()</td>\n<td></td>\n</tr>\n<tr>\n<td>onHoverChange</td>\n<td>callback when hover item</td>\n<td>Function(value: number)</td>\n<td></td>\n</tr>\n<tr>\n<td>onKeyDown</td>\n<td>callback when keydown on component</td>\n<td>Function(event)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>remove focus</td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>get focus</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/R5uiIWmxe/Rate.svg"
  },
  {
    "Title": "Select",
    "Type": "Data Entry",
    "Desc": "<p>Select component to select value from options.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A dropdown menu for displaying choices - an elegant alternative to the native <code>&lt;Select&gt;</code> element.</li>\n<li>Utilizing <a href=\"/components/radio/\">Radio</a> is recommended when there are fewer total options (less than 5).</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Select&gt;\n  &lt;SelectOption Value=&quot;lucy&quot;&gt;lucy&lt;/SelectOption&gt;\n&lt;/Select&gt;\n</code></pre>\n<h3>Select props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AllowClear</td>\n<td>Show clear button.</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>AutoClearSearchValue</td>\n<td>Whether the current search will be cleared on selecting an item. Only applies when <code>mode</code> is set to <code>multiple</code> or <code>tags</code>.</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>AutoFocus</td>\n<td>Get focus by default</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultActiveFirstOption</td>\n<td>Whether active first option by default</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>Initial selected option.</td>\n<td>string|IEnumerable&lt;string&gt;<br />LabeledValue|IEnumerable&lt;LabeledValue&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether disabled select</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownClassName</td>\n<td>className of dropdown menu</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownMatchSelectWidth</td>\n<td>Determine whether the dropdown menu and the select input are the same width. Default set <code>min-width</code> same as input. <code>false</code> will disable virtual scroll</td>\n<td>Boolean | number</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownRender</td>\n<td>Customize dropdown content</td>\n<td>(menuNode: RenderFragment, props: Properties) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DropdownStyle</td>\n<td>style of dropdown menu</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>FilterOption</td>\n<td>If true, filter options by input, if function, filter options against it. The function will receive two arguments, <code>inputValue</code> and <code>option</code>, if the function returns <code>true</code>, the option will be included in the filtered set; Otherwise, it will be excluded.</td>\n<td>Boolean or function(inputValue, option)</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>GetPopupContainer</td>\n<td>Parent Node which the selector should be rendered to. Default to <code>body</code>. When position issues happen, try to modify it into scrollable content and position it relative. <a href=\"https://codesandbox.io/s/4j168r7jw0\">Example</a></td>\n<td>function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>LabelInValue</td>\n<td>whether to embed label in value, turn the format of value from <code>string</code> to <code>{key: string, label: RenderFragment}</code></td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ListHeight</td>\n<td>Config popup height</td>\n<td>number</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagCount</td>\n<td>Max tag count to show</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagTextLength</td>\n<td>Max tag text length to show</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaxTagPlaceholder</td>\n<td>Placeholder for not showing tags</td>\n<td>RenderFragment/function(omittedValues)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>TagRender</td>\n<td>Customize tag render</td>\n<td>(props: Properties) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Mode</td>\n<td>Set mode of Select</td>\n<td><code>multiple</code> | <code>tags</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>NotFoundContent</td>\n<td>Specify content to show when no result matches..</td>\n<td>RenderFragment</td>\n<td>'Not Found'</td>\n<td></td>\n</tr>\n<tr>\n<td>OptionFilterProp</td>\n<td>Which prop value of option will be used for filter if filterOption is true</td>\n<td>string</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>OptionLabelProp</td>\n<td>Which prop value of option will render as content of select. <a href=\"https://codesandbox.io/s/antd-reproduction-template-tk678\">Example</a></td>\n<td>string</td>\n<td><code>value</code> for <code>combobox</code>, <code>children</code> for other modes</td>\n<td></td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>Placeholder of select</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowArrow</td>\n<td>Whether to show the drop-down arrow</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>Whether show search input in single mode.</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Size of Select input.</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SuffixIcon</td>\n<td>The custom suffix icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>RemoveIcon</td>\n<td>The custom remove icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ClearIcon</td>\n<td>The custom clear icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MenuItemSelectedIcon</td>\n<td>The custom menuItemSelected icon with multiple options</td>\n<td>RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>TokenSeparators</td>\n<td>Separator used to tokenize on tag/multiple mode</td>\n<td>IEnumerable&lt;string&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Current selected option.</td>\n<td>string|IEnumerable&lt;string&gt;<br />LabeledValue|IEnumerable&lt;LabeledValue&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Virtual</td>\n<td>Disable virtual scroll when set to <code>false</code></td>\n<td>Boolean</td>\n<td>true</td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>OnBlur</td>\n<td>Called when blur</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>Called when select an option or input value change, or value of input is changed in combobox mode</td>\n<td>function(value, option:SelectOption/IEnumerable&lt;SelectOption&gt;)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnDeselect</td>\n<td>Called when a option is deselected, param is the selected option's value. Only called for multiple or tags, effective in multiple or tags mode only.</td>\n<td>function(string|number|LabeledValue)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnFocus</td>\n<td>Called when focus</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnInputKeyDown</td>\n<td>Called when key pressed</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnMouseEnter</td>\n<td>Called when mouse enter</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnMouseLeave</td>\n<td>Called when mouse leave</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnPopupScroll</td>\n<td>Called when dropdown scrolls</td>\n<td>function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>Callback function that is fired when input changed.</td>\n<td>function(value: string)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelect</td>\n<td>Called when a option is selected, the params are option's value (or key) and option instance.</td>\n<td>function(string|LabeledValue, option:Option)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultOpen</td>\n<td>Initial open state of dropdown</td>\n<td>Boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Open</td>\n<td>Controlled open state of dropdown</td>\n<td>Boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnDropdownVisibleChange</td>\n<td>Call when dropdown open</td>\n<td>function(open)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>indicate loading state</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Bordered</td>\n<td>whether has border style</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Select Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Blur()</td>\n<td>Remove focus</td>\n<td></td>\n</tr>\n<tr>\n<td>Focus()</td>\n<td>Get focus</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>SelectOption props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Disabled</td>\n<td>Disable this SelectOption</td>\n<td>Boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td><code>title</code> of Select after select this SelectOption</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Value</td>\n<td>default to filter with this property</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>additional class to SelectOption</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>OptGroup props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key</td>\n<td></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Label</td>\n<td>Group label</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>FAQ</h2>\n<h3>The dropdown is closed when click <code>dropdownRender</code> area?</h3>\n<p>See the instruction in <a href=\"#components-select-demo-custom-dropdown-menu\">dropdownRender example</a>.</p>\n<h3>Why sometime customize SelectOption cause scroll break?</h3>\n<p>Virtual scroll internal set item height as <code>32px</code>. You need to adjust <code>ListItemHeight</code> when your option height is less and <code>ListHeight</code> config list container height:</p>\n<pre><code class=\"language-tsx\">&lt;Select ListItemHeight=&quot;10&quot; ListHeight=&quot;250&quot; /&gt;\n</code></pre>\n<p>Note: <code>ListItemHeight</code> and <code>ListHeight</code> are internal props. Please only modify when necessary.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/_0XzgOis7/Select.svg"
  },
  {
    "Title": "Slider",
    "Type": "Data Entry",
    "Desc": "<p>A Slider component for displaying current value and intervals in range.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To input a value in a range.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>The default value of slider. When range is false, use number, otherwise, use [number, number]</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>If true, the slider will not be interactable.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dots</td>\n<td>Whether the thumb can drag over tick only.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>included</td>\n<td>Make effect when marks not null, true means containment and false means coordinative</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>marks</td>\n<td>Tick mark of Slider, type of key must be number, and must in closed interval [min, max], each mark can declare its own style.</td>\n<td>object</td>\n<td></td>\n</tr>\n<tr>\n<td>max</td>\n<td>The maximum value the slider can slide to</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>min</td>\n<td>The minimum value the slider can slide to.</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>range</td>\n<td>dual thumb mode</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>reverse the component</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>step</td>\n<td>The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When marks no null, step can be null.</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>The value of slider. When range is false, use number, otherwise, use [number, number]</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>vertical</td>\n<td>If true, the slider will be vertical.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onAfterChange</td>\n<td>Fire when onmouseup is fired.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback function that is fired when the user changes the slider's value.</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipPlacement</td>\n<td>Set Tooltip display position. Ref Tooltip.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipVisible</td>\n<td>If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering.</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getTooltipPopupContainer</td>\n<td>The DOM container of the Tooltip, the default behavior is to create a div element in body.</td>\n<td>Rendfragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/HZ3meFc6W/Silder.svg"
  },
  {
    "Title": "Switch",
    "Type": "Data Entry",
    "Desc": "<p>Switching Selector.</p>\n<h2>When To Use</h2>\n<ul>\n<li>If you need to represent the switching between two states or on-off state.</li>\n<li>The difference between <code>Switch</code> and <code>Checkbox</code> is that Switch will trigger a state change directly when you toggle it, while Checkbox is generally used for state marking, which should work in conjunction with submit operation.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checked</td>\n<td>determine whether the Switch is checked</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>CheckedChildren</td>\n<td>content to be shown when the state is checked</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>to set the initial state</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Disable switch</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>loading state of switch</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>the size of the Switch, options: default small</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>UnCheckedChildren</td>\n<td>content to be shown when the state is unchecked</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>trigger when the checked state is changing</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/zNdJQMhfm/Switch.svg"
  },
  {
    "Title": "TimePicker",
    "Type": "Data Entry",
    "Desc": "<p>To select/input a time.</p>\n<h2>When To Use</h2>\n<hr />\n<p>By clicking the input box, you can select a time from a popup panel.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/h04Zsl98I/TimePicker.svg"
  },
  {
    "Title": "Transfer",
    "Type": "Data Entry",
    "Desc": "<p>Double column transfer choice box.</p>\n<h2>When To Use</h2>\n<ul>\n<li>It is a select control essentially which can be use for selecting multiple items.</li>\n<li>Transfer can display more information for items and take up more space.</li>\n</ul>\n<p>Transfer the elements between two columns in an intuitive and efficient way.</p>\n<p>One or more elements can be selected from either column, one click on the proper <code>direction</code> button, and the transfer is done. The left column is considered the <code>source</code> and the right column is considered the <code>target</code>. As you can see in the API description, these names are reflected in.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSource</td>\n<td>Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in <code>targetKeys</code> prop.</td>\n<td>List&lt;TransferItem&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>Whether disabled transfer</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>A function used for rendering the footer.</td>\n<td>OneOf&lt;string, RenderFragment&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>A custom CSS style used for rendering the transfer columns.</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>operations</td>\n<td>A set of operations that are sorted from top to bottom.</td>\n<td>string[]</td>\n<td>['right', 'left']</td>\n<td></td>\n</tr>\n<tr>\n<td>Render</td>\n<td>The function to generate the item shown on a column. Based on an record (element of the DataSource array), this function should return a OneOf&lt;string, RenderFragment&gt; which is generated from that record.</td>\n<td>Func&lt;TransferItem, OneOf&lt;string, RenderFragment&gt;&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SelectedKeys</td>\n<td>A set of keys of selected items.</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>If included, a search box is shown on each column.</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSelectAll</td>\n<td>Show select all checkbox on the header</td>\n<td>bool</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>TargetKeys</td>\n<td>A set of keys of elements that are listed on the right column.</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>Titles</td>\n<td>A set of titles that are sorted from left to right.</td>\n<td>string[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>SelectAllLabels</td>\n<td>A set of customized labels for select all checkboxs on the header</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>A callback function that is executed when the transfer between columns is complete.</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnScroll</td>\n<td>A callback function which is executed when scroll options list</td>\n<td>TransferScrollArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>A callback function which is executed when search field are changed</td>\n<td>TransferSearchArgs</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelectChange</td>\n<td>A callback function which is executed when selected items are changed.</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Render Props</h3>\n<p>Transfer accept <code>children</code> to customize render list, using follow props:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>direction</td>\n<td>List render direction</td>\n<td><code>left</code> | <code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Disable list or not</td>\n<td>bool</td>\n<td></td>\n</tr>\n<tr>\n<td>filteredItems</td>\n<td>Filtered items</td>\n<td>TransferItem[]</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelect</td>\n<td>Select item</td>\n<td>(key: string, selected: bool)</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelectAll</td>\n<td>Select a group of items</td>\n<td>(keys: string[], selected: bool)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>Selected items</td>\n<td>string[]</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Warning</h2>\n<p>According the <a href=\"http://facebook.github.io/react/docs/lists-and-keys.html#keys\">standard</a> of Blazor, the key should always be supplied directly to the elements in the array. In Transfer, the keys should be set on the elements included in <code>dataSource</code> array. By default, <code>key</code> property is used as an unique identifier.</p>\n<p>If there's no <code>key</code> in your data, you should use <code>rowKey</code> to specify the key that will be used for uniquely identify each element.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/QAXskNI4G/Transfer.svg"
  },
  {
    "Title": "Upload",
    "Type": "Data Entry",
    "Desc": "<p>Upload file by selecting or dragging.</p>\n<h2>When To Use</h2>\n<p>Uploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool.</p>\n<ul>\n<li>When you need to upload one or more files.</li>\n<li>When you need to show the process of uploading.</li>\n<li>When you need to upload files by dragging and dropping.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accept</td>\n<td>File types that can be accepted. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept\">input accept Attribute</a></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>action</td>\n<td>Uploading URL</td>\n<td>string|(file) =&gt; <code>Promise</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>method</td>\n<td>http method of upload request</td>\n<td>string</td>\n<td>'post'</td>\n<td></td>\n</tr>\n<tr>\n<td>directory</td>\n<td>support upload whole directory (<a href=\"https://caniuse.com/#feat=input-file-directory\">caniuse</a>)</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>beforeUpload</td>\n<td>Hook function which will be executed before uploading. Uploading will be stopped with <code>false</code> or a rejected Promise returned. <strong>Warning：this function is not supported in IE9</strong>。</td>\n<td>(file, fileList) =&gt; <code>boolean | Promise</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>customRequest</td>\n<td>override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest</td>\n<td>Function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>data</td>\n<td>Uploading extra params or function which can return uploading extra params.</td>\n<td>object|function(file)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultFileList</td>\n<td>Default list of files that have been uploaded.</td>\n<td>object[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disable upload button</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>fileList</td>\n<td>List of files that have been uploaded (controlled). Here is a common issue <a href=\"https://github.com/ant-design/ant-design/issues/2423\">#2423</a> when using it</td>\n<td>object[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>headers</td>\n<td>Set request headers, valid above IE10.</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>listType</td>\n<td>Built-in stylesheets, support for three types: <code>text</code>, <code>picture</code> or <code>picture-card</code></td>\n<td>string</td>\n<td>'text'</td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>Whether to support selected multiple file. <code>IE10+</code> supported. You can select multiple files with CTRL holding down while multiple is set to be true</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of uploading file</td>\n<td>string</td>\n<td>'file'</td>\n<td></td>\n</tr>\n<tr>\n<td>previewFile</td>\n<td>Customize preview file logic</td>\n<td>(file: File | Blob) =&gt; Promise&lt;dataURL: string&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showUploadList</td>\n<td>Whether to show default upload list, could be an object to specify <code>showPreviewIcon</code>, <code>showRemoveIcon</code>, <code>showDownloadIcon</code>, <code>removeIcon</code> and <code>downloadIcon</code> individually</td>\n<td>Boolean or { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean, removeIcon?: React.ReactNode, downloadIcon?: React.ReactNode }</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>supportServerRender</td>\n<td>Need to be turned on while the server side is rendering</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>ajax upload with cookie sent</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openFileDialogOnClick</td>\n<td>click open file dialog</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>A callback function, can be executed when uploading state is changing, see <a href=\"#onChange\">onChange</a></td>\n<td>Function</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPreview</td>\n<td>A callback function, will be executed when file link or preview icon is clicked</td>\n<td>Function(file)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onRemove</td>\n<td>A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is <code>false</code> or a Promise which resolve(false) or reject</td>\n<td>Function(file): <code>boolean | Promise</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDownload</td>\n<td>Click the method to download the file, pass the method to perform the method logic, do not pass the default jump to the new TAB.</td>\n<td>Function(file): void</td>\n<td>Jump to new TAB</td>\n<td></td>\n</tr>\n<tr>\n<td>transformFile \u00A0</td>\n<td>Customize transform file before request</td>\n<td>Function(file): <code>string | Blob | File | Promise&lt;string | Blob | File&gt;</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>iconRender</td>\n<td>custom show icon</td>\n<td>(file: UploadFile, listType?: UploadListType) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>onChange</h3>\n<blockquote>\n<p>The function will be called when uploading is in progress, completed or failed.</p>\n</blockquote>\n<p>When uploading state change, it returns:</p>\n<pre><code class=\"language-js\">{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n</code></pre>\n<ol>\n<li><p><code>file</code> File object for the current operation.</p>\n<pre><code class=\"language-js\">{\n   uid: 'uid',      // unique identifier, negative is recommend, to prevent interference with internal generated id\n   name: 'xx.png',   // file name\n   status: 'done', // options：uploading, done, error, removed\n   response: '{&quot;status&quot;: &quot;success&quot;}', // response from server\n   linkProps: '{&quot;download&quot;: &quot;image&quot;}', // additional html props of file link\n   xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n}\n</code></pre>\n</li>\n<li><p><code>fileList</code> current list of files</p>\n</li>\n<li><p><code>event</code> response from server, including uploading progress, supported by advanced browsers.</p>\n</li>\n</ol>\n<h2>FAQ</h2>\n<h3>How to implement upload server side?</h3>\n<ul>\n<li>You can consult <a href=\"https://github.com/blueimp/jQuery-File-Upload/wiki#server-side\">jQuery-File-Upload</a> about how to implement server side upload interface.</li>\n<li>There is a mock example of <a href=\"https://github.com/react-component/upload/blob/master/server.js\">express</a> in rc-upload.</li>\n</ul>\n<h3>I want to display download links.</h3>\n<p>Please set property <code>url</code> of each item in <code>fileList</code> to control content of link.</p>\n<h3>How to use <code>customRequest</code>?</h3>\n<p>See <a href=\"https://github.com/react-component/upload#customrequest\">https://github.com/react-component/upload#customrequest</a>.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/QaeBt_ZMg/Upload.svg"
  },
  {
    "Title": "Avatar",
    "Type": "Data Display",
    "Desc": "<p>Avatars can be used to represent people or objects. It supports images, <code>Icon</code>s, or letters.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/aBcnbw68hP/Avatar.svg"
  },
  {
    "Title": "Badge",
    "Type": "Data Display",
    "Desc": "<p>Small numerical value or status descriptor for UI elements.</p>\n<h2>When To Use</h2>\n<p>Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Badge count={5}&gt;\n  &lt;a href=&quot;#&quot; className=&quot;head-example&quot; /&gt;\n&lt;/Badge&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">&lt;Badge count={5} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>Customize Badge dot color</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>Number to show in badge</td>\n<td>ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>Whether to display a red dot instead of <code>count</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>set offset of the badge dot, like<code>[x, y]</code></td>\n<td><code>[number, number]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverflowCount</td>\n<td>Max count to show</td>\n<td>number</td>\n<td>99</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowZero</td>\n<td>Whether to show badge when <code>count</code> is zero</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>Set Badge as a status dot</td>\n<td><code>success</code> | <code>processing</code> | <code>default</code> | <code>error</code> | <code>warning</code></td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Text</td>\n<td>If <code>status</code> is set, <code>text</code> sets the display text of the status <code>dot</code></td>\n<td>string</td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Text to show when hovering over the badge</td>\n<td>string</td>\n<td><code>count</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/6%26GF9WHwvY/Badge.svg"
  },
  {
    "Title": "Calendar",
    "Type": "Data Display",
    "Desc": "<p>Container for displaying data in calendar form.</p>\n<h2>When To Use</h2>\n<p>When data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p><strong>Note:</strong> Part of the Calendar's locale is read from <code>value</code>. So, please set the locale of <code>moment</code> correctly.</p>\n<pre><code class=\"language-jsx\">// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\n// moment.locale('zh-cn');\n\n&lt;Calendar\n  dateCellRender={dateCellRender}\n  monthCellRender={monthCellRender}\n  onPanelChange={onPanelChange}\n  onSelect={onSelect}\n/&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dateCellRender</td>\n<td>Customize the display of the date cell, the returned content will be appended to the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>dateFullCellRender</td>\n<td>Customize the display of the date cell, the returned content will override the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>The date selected by default</td>\n<td>DateTime</td>\n<td>default date</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>Function that specifies the dates that cannot be selected</td>\n<td>(DateTime) =&gt; boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>fullscreen</td>\n<td>Whether to display in full-screen</td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>locale(TODO)</td>\n<td>The calendar's locale</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">default</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>The display mode of the calendar</td>\n<td><code>DatePickerType.Month</code> | <code>DatePickerType.Year</code></td>\n<td>DatePickerType.Month</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>Customize the display of the month cell, the returned content will be appended to the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>monthFullCellRender</td>\n<td>Customize the display of the month cell, the returned content will override the cell</td>\n<td>Func(DateTime) =&gt; RenderFragment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>validRange</td>\n<td>to set valid range</td>\n<td>[DateTime, DateTime]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>The current selected date</td>\n<td>DateTime</td>\n<td>current date</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>Callback for when panel changes</td>\n<td>Func(DateTime date, string mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>Callback for when a date is selected</td>\n<td>Func(DateTime）</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback for when date changes</td>\n<td>Func(DateTime</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>headerRender</td>\n<td>render custom header in panel</td>\n<td>Func(CalendarHeaderRenderArgs)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/dPQmLq08DI/Calendar.svg"
  },
  {
    "Title": "Card",
    "Type": "Data Display",
    "Desc": "<p>Simple rectangular container.</p>\n<h2>When To Use</h2>\n<ul>\n<li>A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Card</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Actions</td>\n<td>The action list, shows at the bottom of the Card.</td>\n<td>Array(RenderFragment)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Body</td>\n<td>Body area on card</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>Content to render in the top-right corner of the card</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Bordered</td>\n<td>Toggles rendering of the border around the card</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Inline style to apply to the card content</td>\n<td>Css Properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Cover</td>\n<td>Card cover</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>Shows a loading indicator while the contents of the card are being fetched</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Size of card</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Card title</td>\n<td>String or RenderFragement</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>ard style type, can be set to inner or not set</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Card.Grid</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ChildContent</td>\n<td>Child container</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Hoverable</td>\n<td>Lift up when hovering card grid</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>style object of container</td>\n<td>CSS Properties</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Card.Meta</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Avatar</td>\n<td>avatar or icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Child  container</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>description content</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>style object of container</td>\n<td>CSS Properties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>title content</td>\n<td>String or RenderFragement</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/NqXt8DJhky/Card.svg"
  },
  {
    "Title": "Carousel",
    "Type": "Data Display",
    "Desc": "<p>A carousel component. Scales with its container.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When there is a group of content on the same level.</li>\n<li>When there is insufficient content space, it can be used to save space in the form of a revolving door.</li>\n<li>Commonly used for a group of pictures/cards.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AfterChange</td>\n<td>(ToDo)Callback function called after the current index changes</td>\n<td>function(current)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>ChildContent</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Autoplay</td>\n<td>Whether to scroll automatically</td>\n<td>TimeSpan</td>\n<td></td>\n</tr>\n<tr>\n<td>BeforeChange</td>\n<td>(ToDo)Callback function called before the current index changes</td>\n<td>function(from, to)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DotPosition</td>\n<td>The position of the dots, which can be one of <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dots</td>\n<td>(ToDo)Whether to show the dots at the bottom of the gallery, <code>object</code> for <code>dotsClass</code> and any others</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Easing</td>\n<td>(ToDo)Transition interpolation function name</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Effect</td>\n<td>Transition effect <code>scrollx</code> or <code>fade</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/%24C9tmj978R/Carousel.svg"
  },
  {
    "Title": "Collapse",
    "Type": "Data Display",
    "Desc": "<p>A content area which can be collapsed and expanded.</p>\n<h2>When To Use</h2>\n<ul>\n<li>Can be used to group or hide complex regions to keep the page clean.</li>\n<li><code>Accordion</code> is a special kind of <code>Collapse</code>, which allows only one panel to be expanded at a time.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Collapse</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Accordion</code></td>\n<td>Accordion mode</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Bordered</code></td>\n<td>Set border style</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>ExpandIconPosition</code></td>\n<td>Set expand icon position</td>\n<td><code>'left' \\| 'right'</code></td>\n<td><code>left</code></td>\n</tr>\n</tbody>\n</table>\n<h3>Panel</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Disabled</code></td>\n<td>If <code>true</code>, panel cannot be opened or closed</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Header</code></td>\n<td>Title of the panel</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ExpandedIcon</code></td>\n<td>Customize an icon for toggle</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Extra</code></td>\n<td>Extra element in the corner</td>\n<td><code>string \\| RenderFragment</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ShowArrow</code></td>\n<td>Display arrow or not</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>Active</code></td>\n<td>Active status of panel, double binding</td>\n<td><code>boolean</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ActiveChange</code></td>\n<td>Callback function of the active status</td>\n<td><code>EventCallback&lt;boolean&gt;</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/IxH16B9RD/Collapse.svg"
  },
  {
    "Title": "Comment",
    "Type": "Data Display",
    "Desc": "<p>A comment displays user feedback and discussion to website content.</p>\n<h2>When To Use</h2>\n<p>Comments can be used to enable discussions on an entity such as a page, blog post, issue or other.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>List of action items rendered below the comment content</td>\n<td>Array<ReactNode></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>author</td>\n<td>The element to display as the comment author</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>avatar</td>\n<td>The element to display as the comment avatar - generally an antd <code>Avatar</code> or src</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>Nested comments should be provided as children of the Comment</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>content</td>\n<td>The main content of the comment</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>A datetime element containing the time to be displayed</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/ILhxpGzBO/Comment.svg"
  },
  {
    "Title": "Descriptions",
    "Type": "Data Display",
    "Desc": "<p>Display multiple read-only fields in groups.</p>\n<h2>When To Use</h2>\n<p>Commonly displayed on the details page.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/MjtG9_FOI/Descriptions.svg"
  },
  {
    "Title": "Empty",
    "Type": "Data Display",
    "Desc": "<p>Empty state placeholder.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When there is no data provided, display for friendly tips.</li>\n<li>User tutorial to create something in fresh new situation.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/MNbKfLBVb/Empty.svg"
  },
  {
    "Title": "List",
    "Type": "Data Display",
    "Desc": "<p>Simple List.</p>\n<h2>When To Use</h2>\n<p>A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>List</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>Toggles rendering of the border around the list</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>footer</td>\n<td>List footer renderer</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>grid</td>\n<td>The grid type of list. You can set grid to something like {gutter: 16, column: 4}</td>\n<td><a href=\"#List-grid-props\">object</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>header</td>\n<td>List header renderer</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>itemLayout</td>\n<td>The layout of list, default is <code>horizontal</code>, If a vertical list is desired, set the itemLayout property to <code>vertical</code></td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>rowKey</td>\n<td>Item's unique key, could be a string or function that returns a string</td>\n<td>string|Function(record):string</td>\n<td><code>key</code></td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>Shows a loading indicator while the contents of the list are being fetched</td>\n<td>boolean|<a href=\"/components/spin/#API\">SpinProps</a> (<a href=\"https://github.com/ant-design/ant-design/issues/8659\">more</a>)</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>loadMore</td>\n<td>Shows a load more content</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale</td>\n<td>i18n text including empty text</td>\n<td>object</td>\n<td>emptyText: 'No Data' <br></td>\n<td></td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>Pagination <a href=\"/components/pagination/\">config</a>, hide it by setting it to false</td>\n<td>boolean | object</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>Size of list</td>\n<td><code>default</code> | <code>large</code> | <code>small</code></td>\n<td><code>default</code></td>\n<td></td>\n</tr>\n<tr>\n<td>split</td>\n<td>Toggles rendering of the split under the list item</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>dataSource array for list</td>\n<td>any[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>customize list item when using <code>dataSource</code></td>\n<td><code>item =&gt; ReactNode</code></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>pagination</h3>\n<p>Properties for pagination.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>position</td>\n<td>specify the position of <code>Pagination</code></td>\n<td><code>top</code> | <code>bottom</code> | <code>both</code></td>\n<td><code>bottom</code></td>\n</tr>\n</tbody>\n</table>\n<p>More about pagination, please check <a href=\"/components/pagination/\"><code>Pagination</code></a>.</p>\n<h3>List grid props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>column</td>\n<td>column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>spacing between grid</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> column of grid</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>The actions content of list item. If <code>itemLayout</code> is <code>vertical</code>, shows the content on bottom, otherwise shows content on the far right.</td>\n<td>Array<ReactNode></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>extra</td>\n<td>The extra content of list item. If <code>itemLayout</code> is <code>vertical</code>, shows the content on right, otherwise shows content on the far right.</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item.Meta</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>avatar</td>\n<td>The avatar of list item</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>description</td>\n<td>The description of list item</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>The title of list item</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5FrZKStG_/List.svg"
  },
  {
    "Title": "Popover",
    "Type": "Data Display",
    "Desc": "<p>The floating card popped by clicking or hovering.</p>\n<h2>When To Use</h2>\n<p>A simple popup menu to provide extra information or operations.</p>\n<p>Comparing with <code>Tooltip</code>, besides information <code>Popover</code> card can also provide action elements like links and buttons.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>Content of the card</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Title of the card</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Consult <a href=\"/components/tooltip/#API\">Tooltip's documentation</a> to find more APIs.</p>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Popover</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/1PNL1p_cO/Popover.svg"
  },
  {
    "Title": "Statistic",
    "Type": "Data Display",
    "Desc": "<p>Display statistic number.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When want to highlight some data.</li>\n<li>When want to display statistic data with description.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h4>Statistic</h4>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>decimalSeparator</td>\n<td>decimal separator</td>\n<td>string</td>\n<td>.</td>\n<td></td>\n</tr>\n<tr>\n<td>formatter</td>\n<td>customize value display logic</td>\n<td>(value) =&gt; ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>groupSeparator</td>\n<td>group separator</td>\n<td>string</td>\n<td>,</td>\n<td></td>\n</tr>\n<tr>\n<td>precision</td>\n<td>precision of input value</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>prefix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>suffix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Display title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>Display value</td>\n<td>string | number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>valueStyle</td>\n<td>Set value css style</td>\n<td>CSSProperties</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Statistic.Countdown</h4>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>format</td>\n<td>Format as <a href=\"http://momentjs.com/\">moment</a></td>\n<td>string</td>\n<td>'HH:mm:ss'</td>\n<td></td>\n</tr>\n<tr>\n<td>onFinish</td>\n<td>Trigger when time's up</td>\n<td>() =&gt; void</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>prefix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>suffix node of value</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>Display title</td>\n<td>string | ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>Set target countdown time</td>\n<td>number | moment</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>valueStyle</td>\n<td>Set value css style</td>\n<td>CSSProperties</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/rcBNhLBrKbE/Statistic.svg"
  },
  {
    "Title": "Table",
    "Type": "Data Display",
    "Desc": "<p>A table displays rows of data.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To display a collection of structured data.</li>\n<li>To sort, search, paginate, filter data.</li>\n</ul>\n<h2>How To Use</h2>\n<p>Specify <code>dataSource</code> of Table as an array of data.</p>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/f-SbcX2Lx/Table.svg"
  },
  {
    "Title": "Tabs",
    "Type": "Data Display",
    "Desc": "<p>Tabs make it easy to switch between different views.</p>\n<h3>When To Use</h3>\n<p>Ant Design has 3 types of Tabs for different situations.</p>\n<ul>\n<li>Card Tabs: for managing too many closeable views.</li>\n<li>Normal Tabs: for functional aspects of a page.</li>\n<li><a href=\"/components/radio/#components-radio-demo-radiobutton\">RadioButton</a>: for secondary tabs.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Tabs</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activeKey</td>\n<td>Current TabPane's key</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>animated</td>\n<td>Whether to change tabs with animation. Only works while <code>tabPosition=&quot;top&quot;\\|&quot;bottom&quot;</code></td>\n<td>boolean | {inkBar:boolean, tabPane:boolean}</td>\n<td><code>true</code>, <code>false</code> when <code>type=&quot;card&quot;</code></td>\n</tr>\n<tr>\n<td>renderTabBar</td>\n<td>replace the TabBar</td>\n<td>(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) =&gt; React.ReactElement</td>\n<td>-</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>Initial active TabPane's key, if <code>activeKey</code> is not set.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hideAdd</td>\n<td>Hide plus icon or not. Only works while <code>type=&quot;editable-card&quot;</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>preset tab bar size</td>\n<td><code>large</code> | <code>default</code> | <code>small</code></td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>tabBarExtraContent</td>\n<td>Extra content in tab bar</td>\n<td>React.ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabBarGutter</td>\n<td>The gap between tabs</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabBarStyle</td>\n<td>Tab bar style object</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tabPosition</td>\n<td>Position of tabs</td>\n<td><code>top</code> | <code>right</code> | <code>bottom</code> | <code>left</code></td>\n<td><code>top</code></td>\n</tr>\n<tr>\n<td>type</td>\n<td>Basic style of tabs</td>\n<td><code>line</code> | <code>card</code> | <code>editable-card</code></td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Callback executed when active tab is changed</td>\n<td>Function(activeKey) {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onEdit</td>\n<td>Callback executed when tab is added or removed. Only works while <code>type=&quot;editable-card&quot;</code></td>\n<td>(targetKey, action): void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onNextClick</td>\n<td>Callback executed when next button is clicked</td>\n<td>Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onPrevClick</td>\n<td>Callback executed when prev button is clicked</td>\n<td>Function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onTabClick</td>\n<td>Callback executed when tab is clicked</td>\n<td>Function(key: string, event: MouseEvent)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>More option at <a href=\"https://github.com/react-component/tabs#tabs\">rc-tabs option</a></p>\n<h3>Tabs.TabPane</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>forceRender</td>\n<td>Forced render of content in tabs, not lazy render after clicking on tabs</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>key</td>\n<td>TabPane's key</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tab</td>\n<td>Show text in TabPane's head</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>More option at <a href=\"https://github.com/react-component/tabs#tabpane\">rc-tabs option</a></p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/lkI2hNEDr2V/Tabs.svg"
  },
  {
    "Title": "Tag",
    "Type": "Data Display",
    "Desc": "<p>Tag for categorizing or markup.</p>\n<h2>When To Use</h2>\n<ul>\n<li>It can be used to tag by dimension or property.</li>\n<li>When categorizing.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mode</td>\n<td>mode select <code>default</code>, <code>closable</code>, <code>checkable</code></td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether the Tag can be closed</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>Checked status of Tag</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>Callback executed when Tag is checked/unchecked</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>Color of the Tag</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Callback executed when tag is closed</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the Tag is closed or not</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Set the icon of tag</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/cH1BOLfxC/Tag.svg"
  },
  {
    "Title": "Timeline",
    "Type": "Data Display",
    "Desc": "<p>Vertical display timeline.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When a series of information needs to be ordered by time (ascending or descending).</li>\n<li>When you need a timeline to make a visual connection.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Timeline</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pending</td>\n<td>Set the last ghost node's existence or its content</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>PendingDot</td>\n<td>Set the dot of the last ghost node when pending is true</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Reverse</td>\n<td>reverse nodes or not</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Mode</td>\n<td>By sending <code>alternate</code> the timeline will distribute the nodes to the <code>left</code> and <code>right</code>.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Timeline.Item\nNode of timeline</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>Set the circle's color blue, red, green, gray or other custom colors</td>\n<td>string,</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>Customize timeline dot</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>Position</td>\n<td>Customize node position <code>left</code>,<code>right</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Label</td>\n<td>Set the label</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/antfincdn/vJmo00mmgR/Timeline.svg"
  },
  {
    "Title": "Tooltip",
    "Type": "Data Display",
    "Desc": "<p>A simple text popup tip.</p>\n<h2>When To Use</h2>\n<ul>\n<li>The tip is shown on mouse enter, and is hidden on mouse leave. The Tooltip doesn't support complex text or operations.</li>\n<li>To provide an explanation of a <code>button/text/operation</code>. It's often used instead of the html <code>title</code> attribute.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>The text shown in the tooltip</td>\n<td>string|RenderFragment</td>\n<td>string.Empty</td>\n</tr>\n</tbody>\n</table>\n<h3>Common API</h3>\n<p>The following APIs are shared by Tooltip, Popconfirm, Popover.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrowPointAtCenter</td>\n<td>Whether the arrow is pointed at the center of target</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>AutoAdjustOverflow</td>\n<td>Whether to adjust popup placement automatically when popup is off screen</td>\n<td>bool</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultVisible</td>\n<td>Whether the floating tooltip card is visible by default</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>PopupContainerSelector</td>\n<td>The DOM container of the tip, the default behavior is to create a <code>div</code> element in <code>body</code></td>\n<td>string (css selector)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MouseEnterDelay</td>\n<td>Delay in seconds, before tooltip is shown on mouse enter</td>\n<td>doube</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>MouseLeaveDelay</td>\n<td>Delay in seconds, before tooltip is hidden on mouse leave</td>\n<td>doube</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>OverlayClassName</td>\n<td>Class name of the tooltip card</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverlayStyle</td>\n<td>Style of the tooltip card</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The position of the tooltip relative to the target, which can be one of <code>Top</code> <code>Left</code> <code>Right</code> <code>Bottom</code> <code>TopLeft</code> <code>TopRight</code> <code>BottomLeft</code> <code>BottomRight</code> <code>LeftTop</code> <code>LeftBottom</code> <code>RightTop</code> <code>RightBottom</code></td>\n<td>PlacementType</td>\n<td><code>PlacementType.Top</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Trigger</td>\n<td>Tooltip trigger mode. Could be multiple by passing an array</td>\n<td>TriggerType[]</td>\n<td><code>TriggerType.Hover</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the floating tooltip card is visible or not</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>OnVisibleChange</td>\n<td>Callback executed when visibility of the tooltip card is changed</td>\n<td>EventCallback<bool></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Tooltip</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/Vyyeu8jq2/Tooltp.svg"
  },
  {
    "Title": "Tree",
    "Type": "Data Display",
    "Desc": "<p>A hierarchical list structure component.</p>\n<h2>When To Use</h2>\n<p>Almost anything can be represented in a tree structure. Examples include directories, organization hierarchies, biological classifications, countries, etc. The <code>Tree</code> component is a way of representing the hierarchical relationship between these things. You can also expand, collapse, and select a treeNode within a <code>Tree</code>.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Tree props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/Xh-oWqg9k/Tree.svg"
  },
  {
    "Title": "Alert",
    "Type": "Feedback",
    "Desc": "<p>Alert component for feedback.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When you need to show alert messages to users.</li>\n<li>When you need a persistent static container which is closable by user actions.</li>\n</ul>\n",
    "ApiDoc": "",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/8emPa3fjl/Alert.svg"
  },
  {
    "Title": "Drawer",
    "Type": "Feedback",
    "Desc": "<p>A panel which slides in from the edge of the screen.</p>\n<h2>When To Use</h2>\n<p>A Drawer is a panel that is typically overlaid on top of a page and slides in from the side.\nIt contains a set of information or actions.<br />\nSince the user can interact with the Drawer without leaving the current page,\ntasks can be achieved more efficiently within thesame context.</p>\n<ul>\n<li>Use a Form to create or edit a set of information.</li>\n<li>Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task,\nDrawer comes very handy.</li>\n<li>When the same Form is needed in multiple places.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Drawer</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>the title for drawer</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Style of the drawer content part</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is visible on top right of the Drawer dialog or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>Subcomponent</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Clicking on the mask (area outside the Drawer) to close the Drawer or not.</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for Drawer's mask element.</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Drawer, option could be <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the container of the Drawer dialog.</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the Drawer dialog.</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>Height</td>\n<td>placement is top or bottom, height of the Drawer dialog.</td>\n<td>int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Drawer.</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>the offset of in X-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>the offset of in Y-axis</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the Drawer dialog is visible or not.</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to close</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a callback that will be called when a user clicks mask, close button or Cancel button.</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>Specify a callback that will be called before drawer displayed</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DrawerService</h3>\n<table>\n<thead>\n<tr>\n<th>������</th>\n<th>˵��</th>\n<th>����</th>\n<th>����</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CreateAsync</td>\n<td>create and open an Drawer</td>\n<td><code>DrawerConfig</code></td>\n<td><code>DrawerRef</code></td>\n</tr>\n<tr>\n<td>CreateAsync</td>\n<td>create and open an Drawer</td>\n<td><code>DrawerConfig</code> , TContentParams</td>\n<td><code>DrawerRef&lt;R&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h3>DrawerConfig</h3>\n<table>\n<thead>\n<tr>\n<th>����</th>\n<th>˵��</th>\n<th>����</th>\n<th>Ĭ��ֵ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>The drawer body content.</td>\n<td><code>OneOf&lt;RenderFragment, string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>ContentParams</td>\n<td>The component inputs the param / The Template context.</td>\n<td><code>D</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>Execute when click on the mask or the upper cancel button (return false to prevent closing)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is visible on top right of the Drawer dialog or not.</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Clicking on the mask (area outside the Drawer) to close the Drawer or not.</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>Whether to show mask or not.</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>CloseOnNavigation</td>\n<td>Whether to close the drawer when the navigation history changes</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>�Ƿ�֧�ּ���esc�ر�</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for Drawer's mask element.</td>\n<td><code>string</code></td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Body style for modal body element. Such as height, padding etc.</td>\n<td><code>string</code></td>\n<td><code>{}</code></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>The title for Drawer.</td>\n<td><code>OneOf&lt;RenderFragment, string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the Drawer dialog.</td>\n<td><code>int</code></td>\n<td><code>256</code></td>\n</tr>\n<tr>\n<td>Height</td>\n<td>Height of the Drawer dialog, only when placement is <code>'top'</code> or <code>'bottom'</code>.</td>\n<td><code>int</code></td>\n<td><code>256</code></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the container of the Drawer dialog.</td>\n<td><code>string</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The <code>z-index</code> of the Drawer.</td>\n<td><code>int</code></td>\n<td><code>1000</code></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>The placement of the Drawer.</td>\n<td><code>'top' \\| 'right' \\| 'bottom' \\| 'left'</code></td>\n<td><code>'right'</code></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>The the X coordinate offset(px).</td>\n<td><code>int</code></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>The the Y coordinate offset(px), only when placement is <code>'top'</code> or <code>'bottom'</code>.</td>\n<td><code>int</code></td>\n<td><code>0</code></td>\n</tr>\n</tbody>\n</table>\n<h3>DrawerRef</h3>\n<p>| ����  | ˵��        | ����                   |\n| ----- | ----------- | ---------------------- |\n| CloseAsync | close the drawer. | <code>| | OpenAsync  | open the drawer. |</code>           |</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/7z8NJQhFb/Drawer.svg"
  },
  {
    "Title": "Message",
    "Type": "Feedback",
    "Desc": "<p>Display global messages as feedback in response to user operations.</p>\n<h2>When To Use</h2>\n<ul>\n<li>To provide feedback such as success, warning, error etc.</li>\n<li>A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<blockquote>\n<p>Please confirm that the <code>&lt;AntContainer /&gt;</code> component has been added to <code>App.Razor</code>.</p>\n</blockquote>\n<p>This components provides some static methods, with usage and arguments as following:</p>\n<ul>\n<li><code>MessageService.Success(content, [duration], onClose)</code></li>\n<li><code>MessageService.Error(content, [duration], onClose)</code></li>\n<li><code>MessageService.Info(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warning(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warn(content, [duration], onClose)</code> // alias of warning</li>\n<li><code>MessageService.Loading(content, [duration], onClose)</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>content of the message</td>\n<td>string|ReactNode|config</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>time(seconds) before auto-dismiss, don't dismiss if set to 0 or null</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>Specify a function that will be called when the message is closed</td>\n<td>Action</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><code>afterClose</code> can be called in thenable interface:</p>\n<ul>\n<li><code>MessageService.[level](content, [duration]).ContinueWith(afterClose)</code></li>\n<li><code>MessageService.[level](content, [duration], onClose).ContinueWith(afterClose)</code></li>\n</ul>\n<p>where <code>level</code> refers one static methods of <code>Message</code>. The result of <code>ContinueWith</code> method will be a Task.</p>\n<p>Supports passing parameters wrapped in an object:</p>\n<ul>\n<li><code>MessageService.Open(config:MessageConfig)</code></li>\n<li><code>MessageService.Success(config:MessageConfig)</code></li>\n<li><code>MessageService.Error(config:MessageConfig)</code></li>\n<li><code>MessageService.Info(config:MessageConfig)</code></li>\n<li><code>MessageService.Warning(config:MessageConfig)</code></li>\n<li><code>MessageService.Warn(config:MessageConfig)</code> // alias of warning</li>\n<li><code>MessageService.Loading(config:MessageConfig)</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>content of the message</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>time(seconds) before auto-dismiss, don't dismiss if set to 0 or null</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Specify a function that will be called when the message is closed</td>\n<td>event Action</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized Icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Message</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Global static methods</h3>\n<p>Methods for global configuration and destruction are also provided:</p>\n<ul>\n<li><code>MessageService.Config(options:MessageGlobalConfig)</code></li>\n<li><code>MessageService.Destroy()</code></li>\n</ul>\n<h4>message.config</h4>\n<pre><code class=\"language-c#\">MessageService.Config(new MessageGlobalConfig{\n  Top: 100,\n  Duration: 2,\n  MaxCount: 3,\n  Rtl: true,\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Duration</td>\n<td>time before auto-dismiss, in seconds</td>\n<td>double</td>\n<td>3</td>\n</tr>\n<tr>\n<td>MaxCount</td>\n<td>max message show, drop oldest if exceed limit</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Top</td>\n<td>distance from top</td>\n<td>double</td>\n<td>24</td>\n</tr>\n<tr>\n<td>Rtl</td>\n<td>whether to enable RTL mode</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/hAkKTIW0K/Message.svg"
  },
  {
    "Title": "Modal",
    "Type": "Feedback",
    "Desc": "<p>Modal dialogs.</p>\n<h2>When To Use</h2>\n<p>When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use <code>Modal</code> to create a new floating layer over the current page to get user feedback or display information. Additionally, if you need show a simple confirmation dialog, you can use <code>ModalService.Confirm()</code>, and so on.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AfterClose</td>\n<td>Specify a function that will  be called when modal is closed completely.</td>\n<td>EventCallback</td>\n<td>-</td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>Body style for modal body  element. Such as height, padding etc.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelText</td>\n<td>Text of the Cancel button</td>\n<td>string|RenderFragment</td>\n<td>Cancel</td>\n</tr>\n<tr>\n<td>Centered</td>\n<td>Centered Modal</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>Whether a close (x) button is  visible on top right of the modal dialog or not</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>custom close icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ConfirmLoading</td>\n<td>Whether to apply loading  visual effect for OK button or not</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>DestroyOnClose</td>\n<td>Whether to unmount child  components on onClose</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>Footer content, set as  footer={null} when you don't need default buttons</td>\n<td>string|RenderFragment</td>\n<td>确定取消按钮</td>\n</tr>\n<tr>\n<td>ForceRender</td>\n<td>Force render Modal</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>GetContainer</td>\n<td>Return the mount node for  Modal</td>\n<td>ElementReference?</td>\n<td>document.body</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to close</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>Whether show mask or not.</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Whether to close the modal  dialog when the mask (area outside the modal) is clicked</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>Style for modal's mask  element.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OkText</td>\n<td>Text of the OK button</td>\n<td>string|RenderFragment</td>\n<td>OK</td>\n</tr>\n<tr>\n<td>OkType</td>\n<td>Button type of the OK button</td>\n<td>string</td>\n<td>primary</td>\n</tr>\n<tr>\n<td>OkButtonProps</td>\n<td>The ok button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelButtonProps</td>\n<td>The cancel button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Style of floating layer,  typically used at least for adjusting the position.</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>The modal dialog's title</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Whether the modal dialog is  visible or not</td>\n<td>bool</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the modal dialog</td>\n<td>string|double</td>\n<td>520</td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>The class name of the  container of the modal dialog</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Modal</td>\n<td>int</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>Specify a function that will  be called when a user clicks mask, close button on top right or Cancel button</td>\n<td>EventCallback<MouseEventArgs></td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnOk</td>\n<td>Specify a function that will  be called when a user clicks the OK button</td>\n<td>EventCallback<MouseEventArgs></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Note</h4>\n<blockquote>\n<p>The state of Modal will be preserved at it's component lifecycle by default, if you wish to open it with a brand new state everytime, set <code>DestroyOnClose</code> on it.</p>\n</blockquote>\n<h3>Modal.method()</h3>\n<p>There are five ways to display the information based on the content's nature:</p>\n<ul>\n<li><code>ModalService.Info</code></li>\n<li><code>ModalService.Success</code></li>\n<li><code>ModalService.Error</code></li>\n<li><code>ModalService.Warning</code></li>\n<li><code>ModalService.Confirm</code></li>\n<li><code>ModalService.CreateAsync</code></li>\n</ul>\n<blockquote>\n<p>Please confirm that the <code>&lt;AntContainer /&gt;</code> component has been added to <code>App.Razor</code>.</p>\n</blockquote>\n<h4>ConfirmOptions</h4>\n<table>\n<thead>\n<tr>\n<th>CancelText</th>\n<th>Text  of the Cancel button with Modal.confirm</th>\n<th>string</th>\n<th>Cancel</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centered</td>\n<td>Centered Modal</td>\n<td>bool</td>\n<td>fasle</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>className of container</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Content</td>\n<td>Content</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>custom icon</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>Whether support press esc to  close</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Mask</td>\n<td>Whether show mask or not.</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>Whether to close the modal  dialog when the mask (area outside the modal) is clicked</td>\n<td>bool</td>\n<td>fasle</td>\n</tr>\n<tr>\n<td>OkText</td>\n<td>Text of the OK button</td>\n<td>string</td>\n<td>OK</td>\n</tr>\n<tr>\n<td>OkType</td>\n<td>Button type of the OK button</td>\n<td>string</td>\n<td>primary</td>\n</tr>\n<tr>\n<td>OkButtonProps</td>\n<td>The ok button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>CancelButtonProps</td>\n<td>The cancel button props</td>\n<td>ButtonProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>Title</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Width</td>\n<td>Width of the modal dialog</td>\n<td>string|double</td>\n<td>416</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>The z-index of the Modal</td>\n<td>int</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>OnCancel</td>\n<td>Specify a function that will  be called when the user clicks the Cancel button. The parameter of this  function is a function whose execution should include closing the dialog. You  can also just return a promise and when the promise is resolved, the modal dialog  will also be closed</td>\n<td>EventCallback<MouseEventArgs>?</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnOk</td>\n<td>Specify a function that will  be called when the user clicks the OK button. The parameter of this function  is a function whose execution should include closing the dialog. You can also  just return a promise and when the promise is resolved, the modal dialog will  also be closed</td>\n<td>EventCallback<MouseEventArgs>?</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>All the <code>ModalService.Method</code>s will return a reference, and then we can update and close the modal dialog by the reference.</p>\n<pre><code class=\"language-c#\">ConfirmOptions config = new ConfirmOptions();\nvar modelRef = await ModalService.Info(config);\n\nmodelRef.UpdateConfig();\n\nModalService.Destroy(modelRef);\n</code></pre>\n<ul>\n<li><code>ModalService.DestroyAll</code></li>\n</ul>\n<p><code>ModalService.DestroyAll()</code> could destroy all confirmation modal dialogs(ModalService.Info/ModalService.Success/ModalService.Error/ModalService.Warning/ModalService.Confirm). Usually, you can use it in router change event to destroy confirm modal dialog automatically without use modal reference to close( it's too complex to use for all modal dialogs)</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/3StSdUlSH/Modal.svg"
  },
  {
    "Title": "Notification",
    "Type": "Feedback",
    "Desc": "<p>Display a notification message globally.</p>\n<h2>When To Use</h2>\n<p>To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:</p>\n<ul>\n<li>A notification with complex content.</li>\n<li>A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.</li>\n<li>A notification that is pushed by the application.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<blockquote>\n<p>Please confirm that the <code>&lt;AntContainer /&gt;</code> component has been added to <code>App.Razor</code>.</p>\n</blockquote>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>The properties of config are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>Customized close button</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>Customized CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>custom close icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>The content of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>Customized icon</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>The unique identifier of the Notification</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>The title of notification box (required)</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>Trigger when notification closed</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>Specify a function that will be called when the notification is clicked</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>Position of Notification, can be one of <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>Customized inline style</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p><code>NotificationService</code> also provides a global <code>Config()</code> method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying.</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Property</th>\n<th style=\"text-align: left;\">Description</th>\n<th style=\"text-align: left;\">Type</th>\n<th style=\"text-align: left;\">Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">Distance from the bottom of the viewport, when <code>placement</code> is <code>NotificationPlacement.BottomLeft</code> or <code>NotificationPlacement.BottomRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">Distance from the top of the viewport, when <code>placement</code> is <code>NotificationPlacement.TopLeft</code> or <code>NotificationPlacement.TopRight</code> (unit: pixels).</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">custom close icon</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">Position of Notification, can be one of  <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement?</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">whether to enable RTL mode</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/Jxm5nw61w/Notification.svg"
  },
  {
    "Title": "Popconfirm",
    "Type": "Feedback",
    "Desc": "<p>A simple and compact confirmation dialog of an action.</p>\n<h2>When To Use</h2>\n<p>A simple and compact dialog used for asking for user confirmation.</p>\n<p>The difference with the <code>confirm</code> modal dialog is that it's more lightweight than the static popped full-screen confirm modal.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cancelText</td>\n<td>text of the Cancel button</td>\n<td>string</td>\n<td><code>Cancel</code></td>\n</tr>\n<tr>\n<td>okText</td>\n<td>text of the Confirm button</td>\n<td>string</td>\n<td><code>OK</code></td>\n</tr>\n<tr>\n<td>okType</td>\n<td>Button <code>type</code> of the Confirm button</td>\n<td>string</td>\n<td><code>primary</code></td>\n</tr>\n<tr>\n<td>okButtonProps</td>\n<td>The ok button props</td>\n<td><a href=\"/components/button/#API\">ButtonProps</a></td>\n<td>-</td>\n</tr>\n<tr>\n<td>cancelButtonProps</td>\n<td>The cancel button props</td>\n<td><a href=\"/components/button/#API\">ButtonProps</a></td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>title of the confirmation box</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onCancel</td>\n<td>callback of cancel</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onConfirm</td>\n<td>callback of confirmation</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>customize icon of confirmation</td>\n<td>ReactNode</td>\n<td><code>&lt;ExclamationCircle /&gt;</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>is show popconfirm when click its childrenNode</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>Consult <a href=\"/components/tooltip/#API\">Tooltip's documentation</a> to find more APIs.</p>\n<h2>Note</h2>\n<p>Please ensure that the child node of <code>Popconfirm</code> accepts <code>onMouseEnter</code>, <code>onMouseLeave</code>, <code>onFocus</code>, <code>onClick</code> events.</p>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/fjMCD9xRq/Popconfirm.svg"
  },
  {
    "Title": "Progress",
    "Type": "Feedback",
    "Desc": "<p>Display the current progress of an operation flow.</p>\n<h2>When To Use</h2>\n<p>If it will take a long time to complete an operation, you can use <code>Progress</code> to show the current progress and status.</p>\n<ul>\n<li>When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.</li>\n<li>When you need to display the completion percentage of an operation.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Properties that shared by all types.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>to set the type, options: <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>template function of the content</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>to set the completion percentage</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>whether to display the progress value and the status icon</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>to set the status of the Progress, options: <code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(line only)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>to set the style of the progress linecap</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>segmented success percent</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>color of unfilled part</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the progress bar, unit: <code>px</code></td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of progress bar, render <code>linear-gradient</code> when passing an object</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>the total step count</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the circular progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the circular progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>color of circular progress, render <code>linear-gradient</code> when passing an object</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>to set the canvas width of the dashboard progress, unit: <code>px</code></td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>to set the width of the dashboard progress, unit: percentage of the canvas width</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>the gap degree of half circle, 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>the gap position, options: <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></td>\n<td>string</td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/xqsDu4ZyR/Progress.svg"
  },
  {
    "Title": "Result",
    "Type": "Feedback",
    "Desc": "<p>Used to feed back the results of a series of operational tasks.</p>\n<h2>When To Use</h2>\n<p>Use when important operations need to inform the user to process the results and the feedback is more complicated.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle string</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>result status,decide icons and colors</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>custom back icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>operating area</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/9nepwjaLa/Result.svg"
  },
  {
    "Title": "Skeleton",
    "Type": "Feedback",
    "Desc": "<p>Provide a placeholder while you wait for content to load, or to visualise content that doesn't exist yet.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When resource need long time loading, like low network speed.</li>\n<li>The component contains much information, such as List or Card.</li>\n<li>Only works when loading data for the first time.</li>\n<li>Could be replaced by Spin in any situation, but can provide a better user experience.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Skeleton</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Avatar</code></td>\n<td>Show avatar placeholder</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>AvatarSize</code></td>\n<td>Set the size of avatar</td>\n<td><code>int \\| 'large' \\| 'small' \\| 'default'</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>AvatarShape</code></td>\n<td>Set the shape of avatar</td>\n<td><code>'circle' \\| 'square'</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Loading</code></td>\n<td>Display the skeleton when <code>true</code></td>\n<td><code>boolean</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Paragraph</code></td>\n<td>Show paragraph placeholder</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>ParagraphRows</code></td>\n<td>Set the row count of paragraph</td>\n<td><code>int</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>ParagraphWidth</code></td>\n<td>Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width</td>\n<td><code>int \\| string \\| Array&lt;int \\| string&gt;</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>Title</code></td>\n<td>Show title placeholder</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>TitleWidth</code></td>\n<td>Set the width of title</td>\n<td><code>int \\| string</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;button&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>Set the size</td>\n<td><code>'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n<tr>\n<td><code>Shape</code></td>\n<td>Set the shape</td>\n<td><code>'circle' \\| 'round' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;avatar&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>Set the size</td>\n<td><code>int \\| 'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n<tr>\n<td><code>Shape</code></td>\n<td>Set the shape</td>\n<td><code>'circle' \\| 'square'</code></td>\n<td><code>'square'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>SkeletonElement Type=&quot;input&quot;</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Active</code></td>\n<td>Show animation effect</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Size</code></td>\n<td>Set the size</td>\n<td><code>'large' \\| 'small' \\| 'default'</code></td>\n<td><code>'default'</code></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/KpcciCJgv/Skeleton.svg"
  },
  {
    "Title": "Spin",
    "Type": "Feedback",
    "Desc": "<p>A spinner for displaying loading state of a page or a section.</p>\n<h2>When To Use</h2>\n<p>When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>specifies a delay in milliseconds for loading state (prevent flush)</td>\n<td>number (milliseconds)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>React node of the spinning indicator</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>size of Spin, options: <code>small</code>, <code>default</code> and <code>large</code></td>\n<td>string</td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>whether Spin is spinning</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>customize description content when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>className of wrapper when Spin has children</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Static Method</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>You can define default spin element globally.</p>\n</li>\n</ul>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/LBcJqCPRv/Spin.svg"
  },
  {
    "Title": "Anchor",
    "Type": "Other",
    "Desc": "<p>Hyperlinks to scroll on one page.</p>\n<h2>When To Use</h2>\n<p>For displaying anchor hyperlinks on page and jumping between them.</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Anchor Props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>affix</td>\n<td>Fixed mode of Anchor</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>bounds</td>\n<td>Bounding distance of anchor area</td>\n<td>number</td>\n<td>5(px)</td>\n<td></td>\n</tr>\n<tr>\n<td>getContainer</td>\n<td>Scrolling container</td>\n<td>() =&gt; HTMLElement</td>\n<td>() =&gt; window</td>\n<td></td>\n</tr>\n<tr>\n<td>offsetBottom</td>\n<td>Pixels to offset from bottom when calculating position of scroll</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>offsetTop</td>\n<td>Pixels to offset from top when calculating position of scroll</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>showInkInFixed</td>\n<td>Whether show ink-balls in Fixed mode</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>set the handler to handle <code>click</code> event</td>\n<td>Function(e: Event, link: Object)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getCurrentAnchor</td>\n<td>Customize the anchor highlight</td>\n<td>() =&gt; string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>targetOffset</td>\n<td>Anchor scroll offset, default as <code>offsetTop</code>, <a href=\"#components-anchor-demo-targetOffset\">example</a></td>\n<td>number</td>\n<td><code>offsetTop</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Listening for anchor link change</td>\n<td>(currentActiveLink: string) =&gt; void</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Link Props</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>target of hyperlink</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>content of hyperlink</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>target</td>\n<td>Specifies where to display the linked URL</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/_1-C1JwsC/Anchor.svg"
  },
  {
    "Title": "BackTop",
    "Type": "Other",
    "Desc": "<p><code>BackTop</code> makes it easy to go back to the top of the page.</p>\n<h2>When To Use</h2>\n<ul>\n<li>When the page content is very long.</li>\n<li>When you need to go back to the top very frequently in order to view the contents.</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>BackTop</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Target</td>\n<td>specifies the scrollable area dom node</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>VisibilityHeight</td>\n<td>the <code>BackTop</code> button will not show until the scroll height reaches this value</td>\n<td>int</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>a callback function, which can be executed when you click the button</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/tJZ5jbTwX/BackTop.svg"
  }
]